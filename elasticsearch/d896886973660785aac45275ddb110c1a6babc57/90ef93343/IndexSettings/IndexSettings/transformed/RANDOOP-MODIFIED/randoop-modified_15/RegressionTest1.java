import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean6 = indexSettings2.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings2.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting11 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        boolean boolean12 = indexSettings2.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(durabilitySetting11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("hi!");
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = indexSettings2.getFlushThresholdSize();
        boolean boolean9 = indexSettings2.getwarmerEnabled();
        java.lang.String str10 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting11 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        indexSettings2.gcDeletesInMillis = (byte) 10;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(timeValueSetting11);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        boolean boolean8 = indexSettings2.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.index.translog.Translog.Durability durability5 = indexSettings2.getdurability();
        boolean boolean6 = indexSettings2.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + durability5 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability5.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read_only", custom3);
        long long5 = builder4.version();
        int int6 = builder4.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings6.archiveUnknownOrBrokenSettings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings6, indexMetaData11);
        org.elasticsearch.common.settings.Setting.Property property16 = indexScopedSettings6.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        int int19 = indexMetaData17.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap20 = indexMetaData17.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings32);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting34 = indexSettings33.getQUERY_STRING_ANALYZE_WILDCARD();
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer35 = null;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings6.addSettingsUpdateConsumer(booleanSetting34, booleanConsumer35, booleanConsumer36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Setting is not registered for key [indices.query.query_string.analyze_wildcard]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + property16 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property16.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(booleanSetting34);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 97);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("");
        java.lang.Boolean boolean24 = settings21.getAsBoolean("_na_", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue26 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue27 = settings21.getAsSize("index.uuid", sizeValue26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder11.settings(settings21);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.putAlias(builder29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
        org.junit.Assert.assertNull(sizeValue27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder9 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder7.put(strMap11);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.version.created_string", true);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder12.put("index.shadow_replicas", false);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder18.put("index.auto_expand_replicas", (-1));
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder18.put("active_allocations", (int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.put("index.version.upgraded_string", version16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings19 = builder18.build();
        java.io.InputStream inputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder22 = builder18.loadFromStream("index.blocks.write", inputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        java.lang.String str18 = indexSettings12.customDataPath();
        indexSettings12.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.durability;
        indexSettings2.durability = durability21;
        int int23 = indexSettings2.getNumberOfShards();
        indexSettings2.setEnableWarmer(false);
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig26 = indexSettings2.mergeSchedulerConfig;
        int int27 = indexSettings2.getMaxRescoreWindow();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings2.getMergeSchedulerConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("index.version.upgraded", (java.lang.Class) wildcardClass8);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder9.put("index.number_of_replicas", 1L, byteSizeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate26, indexScopedSettings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings38, indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean52 = indexMetaData48.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings47, indexMetaData48);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap54 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.creationDate((long) 1);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap54);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap30 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder35.settings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings42);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData0.includeFilters();
        java.util.Set<java.lang.String> strSet51 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        long long52 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        indexSettings2.setMaxRescoreWindow(0);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher13 = indexSettings2.getParseFieldMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(parseFieldMatcher13);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putCustom("index.shared_filesystem.recover_on_any_node", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.numberOfShards((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [index.number_of_shards]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.number_of_shards");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.putAlias(builder25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("index.data_path", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (byte) -1);
        int int9 = builder8.numberOfReplicas();
        java.lang.String str10 = builder8.index();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.creation_date_string" + "'", str10, "index.creation_date_string");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        java.lang.String[] strArray12 = settings10.getAsArray("hi!");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings10, streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.Version version17 = indexSettings16.getversion();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings16.settings;
        java.lang.String str19 = indexSettings16.getNodeName();
        int int20 = indexSettings16.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = indexMetaData0.toXContent(xContentBuilder6, params7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(params7);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str30 = builder29.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.putMapping("primary_terms", "index.auto_expand_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = indexSettings2.getFlushThresholdSize();
        boolean boolean9 = indexSettings2.getwarmerEnabled();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = indexSettings2.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting12 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        long long13 = indexSettings2.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(intSetting12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        boolean boolean7 = indexSettings3.queryStringLenient;
        boolean boolean8 = indexSettings3.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig9 = indexSettings3.mergePolicyConfig;
        int int10 = indexSettings3.getMaxRescoreWindow();
        int int11 = indexSettings3.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings14.archiveUnknownOrBrokenSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate32, indexScopedSettings33);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18, strPredicate21, indexScopedSettings33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        boolean boolean46 = indexSettings42.queryStringLenient;
        boolean boolean47 = indexSettings42.TTLPurgeDisabled;
        java.lang.String str48 = indexSettings42.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue49 = indexSettings42.syncInterval;
// flaky:         indexSettings39.setRefreshInterval(timeValue49);
        indexSettings3.refreshInterval = timeValue49;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings3.getScopedSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings54);
        boolean boolean56 = indexSettings55.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings55.settings = settings57;
        org.elasticsearch.common.settings.Settings settings60 = settings57.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params62 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = settings60.toXContent(xContentBuilder61, params62);
        boolean boolean64 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData65, settings66);
        boolean boolean68 = indexSettings67.isQueryStringLenient();
        java.lang.String str69 = indexSettings67.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting70 = indexSettings67.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings72);
        boolean boolean74 = indexSettings73.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings73.settings = settings75;
        int int77 = indexSettings73.maxRescoreWindow;
        java.lang.String str78 = indexSettings73.getUUID();
        org.elasticsearch.common.settings.Settings settings79 = indexSettings73.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting80 = indexSettings73.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings81 = indexSettings73.nodeSettings;
        indexSettings67.settings = settings81;
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings52.diff(settings60, settings81);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(params62);
        org.junit.Assert.assertNull(xContentBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSetting70);
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10000 + "'", int77 == 10000);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "_na_" + "'", str78, "_na_");
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(booleanSetting80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings83);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting14 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        indexSettings2.gcDeletesInMillis = 0L;
        int int17 = indexSettings2.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNotNull(intSetting14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        boolean boolean7 = indexSettings6.queryStringLenient;
        org.elasticsearch.common.unit.TimeValue timeValue8 = indexSettings6.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean9 = indexSettings6.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        boolean boolean10 = indexSettings2.isIndexUsingShadowReplicas();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = indexSettings2.getParseFieldMatcher();
        java.util.function.Predicate<java.lang.String> strPredicate12 = indexSettings2.getindexNameMatcher();
        int int13 = indexSettings2.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher11);
        org.junit.Assert.assertNotNull(strPredicate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.put("index.version.upgraded_string", version16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings19 = builder18.build();
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings28 = builder27.build();
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder29.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder29.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder18.put(strMap31);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder35 = builder18.put(objDictionary34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        indexSettings2.gcDeletesInMillis = (short) 10;
        long long7 = indexSettings2.getGcDeletesInMillis();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        boolean boolean5 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting6 = org.elasticsearch.index.IndexSettings.QUERY_STRING_ANALYZE_WILDCARD;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean7 = indexSettings2.getValue(booleanSetting6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[NodeScope]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(booleanSetting6);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap30 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder35.settings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings42);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        boolean boolean49 = indexSettings48.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting50 = indexSettings48.getINDEX_GC_DELETES_SETTING();
        java.lang.String str51 = indexSettings48.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeValueSetting50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData20.getState();
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData20.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = new org.elasticsearch.common.settings.IndexScopedSettings(settings13, indexScopedSettings15, indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings24, indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("");
        java.lang.String str37 = settings35.toDelimitedString('#');
        java.lang.String str40 = settings35.get("primary_terms", "index.number_of_shards");
        indexScopedSettings27.validate(settings35);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "index.number_of_shards" + "'", str40, "index.number_of_shards");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        indexSettings2.setTTLPurgeDisabled(true);
        boolean boolean12 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings45.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45, strPredicate50, indexScopedSettings51);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate39, indexScopedSettings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = new org.elasticsearch.common.settings.IndexScopedSettings(settings28, indexScopedSettings51, indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state62 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        boolean boolean65 = indexMetaData61.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings60, indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        java.lang.String str71 = indexSettings69.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting72 = indexSettings69.getDEFAULT_FIELD_SETTING();
        indexSettings69.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings75 = indexSettings69.nodeSettings;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings75);
        indexSettings2.indexMetaData = indexMetaData61;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData61.requireFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput79 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData61.writeTo(streamOutput79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + state62 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state62.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSetting72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.creation_date");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.creation_date]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder61.put("index.shadow_replicas", 0.0d);
        java.io.InputStream inputStream81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder82 = builder61.loadFromStream("active_allocations", inputStream81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting8 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(intSetting8);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = indexMetaData0.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        boolean boolean19 = indexSettings15.queryStringLenient;
        boolean boolean20 = indexSettings15.TTLPurgeDisabled;
        java.lang.String str21 = indexSettings15.customDataPath();
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings15.durability;
        indexSettings2.setTranslogDurability(durability24);
        org.elasticsearch.common.logging.ESLogger eSLogger26 = indexSettings2.getlogger();
        boolean boolean27 = indexSettings2.getdefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(eSLogger26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig5 = indexSettings2.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        java.util.function.Predicate<java.lang.String> strPredicate10 = indexSettings9.indexNameMatcher;
        int int11 = indexSettings9.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig12 = indexSettings9.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = indexSettings9.scopedSettings;
        boolean boolean15 = indexScopedSettings13.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting16 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer18 = null;
        indexScopedSettings13.addSettingsUpdateConsumer(booleanSetting16, booleanSetting17, booleanBiConsumer18);
        indexScopedSettings6.validateSettingKey((org.elasticsearch.common.settings.Setting) booleanSetting17);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(strPredicate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(booleanSetting16);
        org.junit.Assert.assertNotNull(booleanSetting17);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData0.mappingOrDefault("index.uuid");
        org.elasticsearch.common.settings.Settings settings44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder74.put("index.shared_filesystem.recover_on_any_node", 0.0d);
        org.elasticsearch.common.settings.Settings settings80 = builder74.build();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put("hi!", 0.0d);
        org.elasticsearch.common.settings.Settings.Builder builder86 = builder74.put("index.creation_date", (double) 'a');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.nio.file.Path path12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.loadFromPath(path12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder12.put("index.blocks.read", true);
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder21 = builder12.put("index.data_path", (long) '4', timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters24);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        boolean boolean24 = indexSettings23.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings23.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue26 = indexSettings23.flushThresholdSize;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = indexSettings23.getParseFieldMatcher();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = indexSettings23.parseFieldMatcher;
        boolean boolean29 = indexSettings23.warmerEnabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(byteSizeValue26);
        org.junit.Assert.assertNotNull(parseFieldMatcher27);
        org.junit.Assert.assertNotNull(parseFieldMatcher28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings29.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate46, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings58, indexMetaData65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate31, indexScopedSettings58);
        org.elasticsearch.Version version69 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings71);
        boolean boolean73 = indexSettings72.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings72.settings = settings74;
        boolean boolean76 = indexSettings72.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings72.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings78 = indexSettings72.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue79 = indexSettings72.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        boolean boolean86 = indexSettings82.queryStringLenient;
        boolean boolean87 = indexSettings82.TTLPurgeDisabled;
        java.lang.String str88 = indexSettings82.customDataPath();
        indexSettings82.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability91 = indexSettings82.durability;
        indexSettings72.durability = durability91;
        int int93 = indexSettings72.getNumberOfShards();
        indexSettings72.setEnableWarmer(false);
        org.elasticsearch.common.unit.TimeValue timeValue96 = indexSettings72.getDEFAULT_REFRESH_INTERVAL();
        int int97 = indexSettings72.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings98 = indexSettings72.settings;
        org.elasticsearch.index.IndexSettings indexSettings99 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings98);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(timeValue79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + durability91 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability91.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(timeValue96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10000 + "'", int97 == 10000);
        org.junit.Assert.assertNotNull(settings98);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("_na_");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean10 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings2.globalCheckpointInterval;
        org.elasticsearch.index.translog.Translog.Durability durability12 = indexSettings2.durability;
        boolean boolean13 = indexSettings2.isDefaultAllowUnmappedFields();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertTrue("'" + durability12 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability12.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff7 = indexMetaData0.readDiffFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate4 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = indexSettings2.flushThresholdSize;
        boolean boolean6 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings2.getDEFAULT_GC_DELETES();
        java.lang.String str8 = indexSettings2.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.apache.lucene.util.Version version28 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        int int36 = indexSettings32.maxRescoreWindow;
        boolean boolean37 = indexSettings32.TTLPurgeDisabled;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher38 = indexSettings32.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = indexMetaData0.fromXContent(xContentParser29, parseFieldMatcher38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10000 + "'", int36 == 10000);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher38);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        java.lang.String str6 = builder4.remove("index.data_path");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("active_allocations", (int) (short) 1);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.shared_filesystem", "index.data_path");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.put(objDictionary13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData75 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData75, settings76);
        boolean boolean78 = indexSettings77.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings77.settings = settings79;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean83 = indexScopedSettings81.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings81.archiveUnknownOrBrokenSettings(settings84);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state87 = indexMetaData86.getState();
        java.util.Set<java.lang.String> strSet89 = null; // flaky: indexMetaData86.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings90 = new org.elasticsearch.common.settings.IndexScopedSettings(settings79, indexScopedSettings81, indexMetaData86);
        java.lang.String[] strArray92 = null;
        java.lang.String[] strArray93 = settings79.getAsArray("hi!", strArray92);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings66.validate("index.version.upgraded_string", settings79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.upgraded_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(indexMetaData75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertTrue("'" + state87 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state87.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet89);
        org.junit.Assert.assertNull(strArray93);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings10, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings34);
        boolean boolean36 = indexSettings35.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings35.settings = settings37;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        java.util.Set<java.lang.String> strSet47 = null; // flaky: indexMetaData44.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = new org.elasticsearch.common.settings.IndexScopedSettings(settings37, indexScopedSettings39, indexMetaData44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings61.archiveUnknownOrBrokenSettings(settings64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings64.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean72 = indexScopedSettings70.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings70.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.index.IndexSettings indexSettings75 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData59, settings64, strPredicate69, indexScopedSettings70);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55, strPredicate58, indexScopedSettings70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue78 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = settings55.getAsBytesSize("index.creation_date_string", byteSizeValue78);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings48.applySettings(settings55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder3.settings(settings80);
        org.elasticsearch.common.unit.SizeValue sizeValue87 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue88 = settings80.getAsSize("state-", sizeValue87);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(byteSizeValue79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(sizeValue88);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        int int10 = indexSettings2.getNumberOfShards();
        java.lang.String str11 = indexSettings2.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = indexSettings2.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate9 = indexScopedSettings8.getINDEX_SETTINGS_KEY_PREDICATE();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertNotNull(strPredicate9);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings2.settings;
        java.lang.String str13 = indexSettings2.defaultField;
        int int14 = indexSettings2.maxRescoreWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_all" + "'", str13, "_all");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings2.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting11 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        int int12 = indexSettings2.getMaxRescoreWindow();
        boolean boolean13 = indexSettings2.queryStringAnalyzeWildcard;
        boolean boolean14 = indexSettings2.isQueryStringAllowLeadingWildcard();
        java.lang.String str15 = indexSettings2.customDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        boolean boolean22 = indexSettings18.queryStringLenient;
        boolean boolean23 = indexSettings18.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig24 = indexSettings18.mergePolicyConfig;
        int int25 = indexSettings18.getMaxRescoreWindow();
        int int26 = indexSettings18.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings42.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.index.IndexSettings indexSettings53 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42, strPredicate47, indexScopedSettings48);
        org.elasticsearch.index.IndexSettings indexSettings54 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33, strPredicate36, indexScopedSettings48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        boolean boolean58 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings57.settings = settings59;
        boolean boolean61 = indexSettings57.queryStringLenient;
        boolean boolean62 = indexSettings57.TTLPurgeDisabled;
        java.lang.String str63 = indexSettings57.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue64 = indexSettings57.syncInterval;
// flaky:         indexSettings54.setRefreshInterval(timeValue64);
        indexSettings18.refreshInterval = timeValue64;
        indexSettings2.setGCDeletes(timeValue64);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(durabilitySetting11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10000 + "'", int26 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(timeValue64);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.getNodeSettings();
        boolean boolean11 = indexSettings2.isIndexUsingShadowReplicas();
        indexSettings2.gcDeletesInMillis = 100L;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.read");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.read]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.includeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData26.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        org.elasticsearch.common.settings.Settings settings35 = settings32.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap46 = settings42.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.index.IndexSettings indexSettings53 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings42, strPredicate47, indexScopedSettings48);
        org.elasticsearch.index.IndexSettings indexSettings54 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings32, strPredicate36, indexScopedSettings48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData56, settings57);
        boolean boolean59 = indexSettings58.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings58.settings = settings60;
        boolean boolean62 = indexSettings58.queryStringLenient;
        boolean boolean63 = indexSettings58.TTLPurgeDisabled;
        boolean boolean64 = indexSettings58.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version65 = indexSettings58.version;
        org.elasticsearch.Version version66 = settings32.getAsVersion("archived.", version65);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings69);
        boolean boolean71 = indexSettings70.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings70.settings = settings72;
        org.elasticsearch.common.settings.Settings settings75 = settings72.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder76 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params77 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = settings75.toXContent(xContentBuilder76, params77);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = settings32.toXContent(xContentBuilder67, params77);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = indexMetaData0.toXContent(xContentBuilder25, params77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(version66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(params77);
        org.junit.Assert.assertNull(xContentBuilder78);
        org.junit.Assert.assertNull(xContentBuilder79);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData8.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version12 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.Version version13 = settings6.getAsVersion("", version12);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int16 = indexSettings15.getMaxResultWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        indexSettings2.setTTLPurgeDisabled(true);
        boolean boolean12 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings45.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45, strPredicate50, indexScopedSettings51);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate39, indexScopedSettings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = new org.elasticsearch.common.settings.IndexScopedSettings(settings28, indexScopedSettings51, indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state62 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        boolean boolean65 = indexMetaData61.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings60, indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        java.lang.String str71 = indexSettings69.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting72 = indexSettings69.getDEFAULT_FIELD_SETTING();
        indexSettings69.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings75 = indexSettings69.nodeSettings;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings75);
        indexSettings2.indexMetaData = indexMetaData61;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData61.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder79.putMapping("index.blocks.metadata", "primary_terms");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + state62 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state62.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSetting72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap19 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings63.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexSettings63.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = settings71.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings71);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        org.elasticsearch.common.settings.Settings settings87 = settings84.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings87);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings88);
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings88);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params92 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = settings88.toXContent(xContentBuilder91, params92);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings88);
        int int95 = indexMetaData66.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(params92);
        org.junit.Assert.assertNull(xContentBuilder93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putMapping("", "index.shared_filesystem.recover_on_any_node");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate26, indexScopedSettings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings38, indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean52 = indexMetaData48.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings47, indexMetaData48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings55);
        boolean boolean57 = indexSettings56.isQueryStringLenient();
        java.lang.String str58 = indexSettings56.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting59 = indexSettings56.getDEFAULT_FIELD_SETTING();
        indexSettings56.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings62 = indexSettings56.nodeSettings;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting64 = indexSettings63.getINDEX_GC_DELETES_SETTING();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSetting59);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(timeValueSetting64);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        int int12 = indexSettings2.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting13 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(booleanSetting13);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings22);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder25, params26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        boolean boolean10 = indexSettings2.queryStringLenient;
        java.lang.String str11 = indexSettings2.getNodeName();
        boolean boolean12 = indexSettings2.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("active_allocations", 10L);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("true", "index.version.created_string");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards(97);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        int int46 = indexSettings42.maxRescoreWindow;
        java.lang.String str47 = indexSettings42.getUUID();
        org.elasticsearch.common.settings.Settings settings48 = indexSettings42.nodeSettings;
        boolean boolean49 = indexSettings42.isOnSharedFilesystem();
        indexSettings42.setMaxRescoreWindow((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings53);
        boolean boolean55 = indexSettings54.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings54.settings = settings56;
        boolean boolean58 = indexSettings54.queryStringLenient;
        boolean boolean59 = indexSettings54.TTLPurgeDisabled;
        java.lang.String str60 = indexSettings54.customDataPath();
        indexSettings54.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings54.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings65);
        java.util.function.Predicate<java.lang.String> strPredicate67 = indexSettings66.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate68 = indexSettings66.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = indexSettings66.flushThresholdSize;
        indexSettings54.flushThresholdSize = byteSizeValue69;
        indexSettings42.setTranslogFlushThresholdSize(byteSizeValue69);
        indexSettings39.flushThresholdSize = byteSizeValue69;
        boolean boolean73 = indexSettings39.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "_na_" + "'", str47, "_na_");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertNotNull(strPredicate68);
        org.junit.Assert.assertNotNull(byteSizeValue69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData9.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData9.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version13 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        long long15 = indexMetaData9.getCreationDate();
        indexSettings2.indexMetaData = indexMetaData9;
        org.elasticsearch.Version version17 = indexMetaData9.getUpgradedVersion();
        long long18 = indexMetaData9.getVersion();
        boolean boolean20 = indexMetaData9.isSameUUID("true");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.creation_date_string");
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean10 = indexSettings2.hasCustomDataPath();
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.indexNameMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strPredicate11);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        indexSettings2.TTLPurgeDisabled = false;
        org.elasticsearch.common.unit.TimeValue timeValue13 = null;
        indexSettings2.setRefreshInterval(timeValue13);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValueSetting10);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.normalizePrefix("_na_");
        org.elasticsearch.common.settings.Settings settings13 = builder12.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings16);
        boolean boolean18 = indexSettings17.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings17.settings = settings19;
        int int21 = indexSettings17.maxRescoreWindow;
        java.lang.String str22 = indexSettings17.getUUID();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings17.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting24 = indexSettings17.getINDEX_GC_DELETES_SETTING();
        int int25 = indexSettings17.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings17.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        java.lang.String str36 = settings34.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder37 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder37.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder44 = builder41.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder45 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder46 = builder45.replacePropertyPlaceholders();
        boolean boolean48 = indexScopedSettings26.updateDynamicSettings(settings34, builder41, builder46, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder41.put("hi!", (int) (short) 100);
        java.lang.String str53 = builder41.get("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder54 = builder41.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder56 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder57 = builder56.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder57.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder57.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder57.putNull("");
        java.lang.String[] strArray86 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        org.elasticsearch.common.settings.Settings.Builder builder89 = builder57.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder41.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder12.putArray("", (java.util.List<java.lang.String>) strList87);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder12.put("hi!", "state-");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(timeValueSetting24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("index.blocks.write", true);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("index.data_path", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("index.blocks.read_only");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("index.auto_expand_replicas", (long) (byte) 0, byteSizeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNull(version5);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        java.lang.String str29 = null; // flaky: indexSettings28.nodeName;
        boolean boolean30 = false; // flaky: indexSettings28.isQueryStringAllowLeadingWildcard();
        boolean boolean31 = false; // flaky: indexSettings28.isShadowReplicaIndex();
        java.util.function.Predicate<java.lang.String> strPredicate32 = null; // flaky: indexSettings28.indexNameMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(strPredicate32);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putAlias(aliasMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings31);
        int int33 = indexSettings32.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings34 = indexSettings32.nodeSettings;
        org.elasticsearch.common.settings.Settings settings36 = settings34.getByPrefix("index.blocks.read_only");
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("index.number_of_shards", true);
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.put("index.creation_date_string", true);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.loadFromSource("index.creation_date");
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.put("index.version.upgraded", (-1L), timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData5.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings21.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings27.archiveUnknownOrBrokenSettings(settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings21, strPredicate26, indexScopedSettings27);
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate15, indexScopedSettings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        boolean boolean41 = indexSettings37.queryStringLenient;
        boolean boolean42 = indexSettings37.TTLPurgeDisabled;
        boolean boolean43 = indexSettings37.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version44 = indexSettings37.version;
        org.elasticsearch.Version version45 = settings11.getAsVersion("archived.", version44);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        boolean boolean50 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings49.settings = settings51;
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = settings11.toXContent(xContentBuilder46, params56);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        java.lang.String str62 = settings11.get("index.version.created_string", "index.blocks.read_only");
        boolean boolean63 = settings11.isEmpty();
        java.util.Set<java.lang.String> strSet64 = settings11.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertNull(xContentBuilder58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "index.blocks.read_only" + "'", str62, "index.blocks.read_only");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet64);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings4 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = indexSettings2.indexMetaData;
        indexSettings2.maxRescoreWindow = 0;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.putMapping("primary_terms", "index.creation_date");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.version.upgraded", (float) (byte) 10);
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        org.elasticsearch.common.settings.Settings settings25 = builder23.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData27.getSettings();
        java.lang.String[] strArray39 = settings37.getAsArray("hi!");
        java.lang.String[] strArray40 = settings25.getAsArray("index.data_path", strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder10.putArray("index.creation_date", strArray40);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder45 = builder10.put("index.blocks.read", 1L, byteSizeUnit44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        boolean boolean7 = indexSettings3.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting8 = indexSettings3.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings3.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings3.refreshInterval;
        indexSettings3.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings3.logger;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings3.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate15 = indexScopedSettings14.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings16 = settings0.filter(strPredicate15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings0.getGroups("index.auto_expand_replicas");
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings0.getAsGroups();
        java.lang.String str21 = settings0.get("_na_");
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.putCustom("index.shared_filesystem", custom5);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        boolean boolean12 = indexSettings8.queryStringLenient;
        boolean boolean13 = indexSettings8.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig14 = indexSettings8.mergePolicyConfig;
        int int15 = indexSettings8.getMaxRescoreWindow();
        int int16 = indexSettings8.maxRescoreWindow;
        int int17 = indexSettings8.getNumberOfShards();
        indexSettings8.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Settings settings20 = indexSettings8.settings;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings38.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings44.archiveUnknownOrBrokenSettings(settings47);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38, strPredicate43, indexScopedSettings44);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28, strPredicate32, indexScopedSettings44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings53);
        boolean boolean55 = indexSettings54.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings54.settings = settings56;
        boolean boolean58 = indexSettings54.queryStringLenient;
        boolean boolean59 = indexSettings54.TTLPurgeDisabled;
        boolean boolean60 = indexSettings54.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version61 = indexSettings54.version;
        org.elasticsearch.Version version62 = settings28.getAsVersion("archived.", version61);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings65);
        boolean boolean67 = indexSettings66.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings66.settings = settings68;
        org.elasticsearch.common.settings.Settings settings71 = settings68.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params73 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder74 = settings71.toXContent(xContentBuilder72, params73);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = settings28.toXContent(xContentBuilder63, params73);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder76 = settings20.toXContent(xContentBuilder21, params73);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder5, params73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(version61);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(params73);
        org.junit.Assert.assertNull(xContentBuilder74);
        org.junit.Assert.assertNull(xContentBuilder75);
        org.junit.Assert.assertNull(xContentBuilder76);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings86 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean88 = indexScopedSettings86.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings86.archiveUnknownOrBrokenSettings(settings89);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings89.getGroups("index.creation_date_string", false);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder97 = builder95.putAlias(aliasMetaData96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strMap93);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.replacePropertyPlaceholders();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.put(objDictionary13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        indexSettings2.warmerEnabled = false;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting11 = indexSettings2.getALLOW_UNMAPPED();
        long long12 = indexSettings2.gcDeletesInMillis;
        boolean boolean14 = indexSettings2.matchesIndexName("_na_");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(booleanSetting11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 60000L + "'", long12 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings17 = null;
        indexSettings15.settings = settings17;
        boolean boolean19 = indexSettings15.isShadowReplicaIndex;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting20 = indexSettings15.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intSetting20);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28, strPredicate33, indexScopedSettings34);
        org.elasticsearch.index.IndexSettings indexSettings40 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData13, settings19, strPredicate22, indexScopedSettings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings42);
        boolean boolean44 = indexSettings43.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings43.settings = settings45;
        boolean boolean47 = indexSettings43.queryStringLenient;
        boolean boolean48 = indexSettings43.TTLPurgeDisabled;
        java.lang.String str49 = indexSettings43.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings43.syncInterval;
// flaky:         indexSettings40.setRefreshInterval(timeValue50);
        org.elasticsearch.common.unit.TimeValue timeValue52 = null; // flaky: indexSettings40.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue53 = settings11.getAsTime("index.blocks.write", timeValue52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings11.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(timeValue50);
// flaky:         org.junit.Assert.assertNotNull(timeValue52);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings27.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings27, strPredicate32, indexScopedSettings33);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate21, indexScopedSettings33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap45 = settings44.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings54);
        boolean boolean56 = indexSettings55.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings55.settings = settings57;
        org.elasticsearch.common.settings.Settings settings60 = settings57.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings60);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings33, indexMetaData40);
        org.elasticsearch.common.settings.Setting.Property property65 = indexScopedSettings64.getScope();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting66 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_READ_SETTING;
        indexScopedSettings64.validateSettingKey((org.elasticsearch.common.settings.Setting) booleanSetting66);
        org.elasticsearch.common.settings.Setting setting68 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings64.validateSettingKey(setting68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + property65 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property65.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(booleanSetting66);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        indexSettings2.setwarmerEnabled(true);
        boolean boolean10 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings14.archiveUnknownOrBrokenSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData22.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData12.diff(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        int int45 = indexSettings41.maxRescoreWindow;
        java.lang.String str46 = indexSettings41.getUUID();
        org.elasticsearch.common.settings.Settings settings47 = indexSettings41.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = indexSettings41.getINDEX_GC_DELETES_SETTING();
        int int49 = indexSettings41.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = indexSettings41.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings52);
        boolean boolean54 = indexSettings53.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings53.settings = settings55;
        org.elasticsearch.common.settings.Settings settings58 = settings55.getAsSettings("");
        java.lang.String str60 = settings58.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder69 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder69.replacePropertyPlaceholders();
        boolean boolean72 = indexScopedSettings50.updateDynamicSettings(settings58, builder65, builder70, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder73 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder73.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder74.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData85 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state86 = indexMetaData85.getState();
        java.util.Set<java.lang.String> strSet88 = null; // flaky: indexMetaData85.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version89 = indexMetaData85.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder83.put("index.version.upgraded_string", version89);
        boolean boolean92 = indexScopedSettings11.updateSettings(settings37, builder70, builder90, "index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder70.normalizePrefix("index.number_of_replicas");
        java.lang.String str96 = builder70.remove("index.blocks.read_only");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "_na_" + "'", str46, "_na_");
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(timeValueSetting48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10000 + "'", int49 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(indexMetaData85);
        org.junit.Assert.assertTrue("'" + state86 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state86.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertNotNull(version89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        boolean boolean51 = indexSettings2.getdefaultAllowUnmappedFields();
        int int52 = indexSettings2.numberOfShards;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting53 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting54 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting55 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.maxResultWindow = 0;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(timeValueSetting53);
        org.junit.Assert.assertNotNull(booleanSetting54);
        org.junit.Assert.assertNotNull(strSetting55);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.version.created_string", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        java.lang.String str16 = indexSettings15.getUUID();
        boolean boolean17 = indexSettings15.getisShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        indexSettings15.setRefreshInterval(timeValue18);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        indexSettings63.setwarmerEnabled(true);
        java.util.function.Predicate<java.lang.String> strPredicate67 = indexSettings63.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strPredicate67);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings86 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean88 = indexScopedSettings86.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings86.archiveUnknownOrBrokenSettings(settings89);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings89.getGroups("index.creation_date_string", false);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings89);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap96 = settings89.getAsGroups(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(strMap96);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.state(state7);
        byte byte9 = state7.id();
        byte byte10 = state7.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 0 + "'", byte10 == (byte) 0);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        java.lang.String str20 = null; // flaky: indexSettings16.getUUID();
        org.elasticsearch.common.unit.TimeValue timeValue21 = null; // flaky: indexSettings16.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting18);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
// flaky:         org.junit.Assert.assertNotNull(timeValue21);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.put("index.version.upgraded_string", version16);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder10.put("true", (long) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("archived.");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = indexSettings2.getFlushThresholdSize();
        int int9 = indexSettings2.numberOfShards;
        boolean boolean11 = indexSettings2.matchesIndexName("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting.Property property17 = indexScopedSettings11.getScope();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        boolean boolean24 = indexSettings20.queryStringLenient;
        boolean boolean25 = indexSettings20.TTLPurgeDisabled;
        boolean boolean26 = indexSettings20.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version27 = indexSettings20.version;
        org.elasticsearch.common.unit.TimeValue timeValue28 = indexSettings20.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability29 = indexSettings20.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue30 = indexSettings20.getDEFAULT_GC_DELETES();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig31 = indexSettings20.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting32 = indexSettings20.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean33 = indexScopedSettings11.get(booleanSetting32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[NodeScope]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + property17 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property17.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertTrue("'" + durability29 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability29.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig31);
        org.junit.Assert.assertNotNull(booleanSetting32);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        java.lang.String str13 = indexSettings2.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("index.number_of_shards", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder1.replacePropertyPlaceholders();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.auto_expand_replicas");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.elasticsearch.common.settings.Settings settings0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        org.elasticsearch.common.settings.Settings settings8 = settings5.getAsSettings("");
        java.lang.Boolean boolean11 = settings8.getAsBoolean("_na_", (java.lang.Boolean) false);
        org.elasticsearch.common.unit.SizeValue sizeValue13 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue14 = settings8.getAsSize("index.uuid", sizeValue13);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        org.elasticsearch.common.settings.Settings settings25 = settings22.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings38.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder31.settings(settings38);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings15, indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = indexMetaData45.getState();
        java.util.Set<java.lang.String> strSet48 = null; // flaky: indexMetaData45.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap50 = indexMetaData45.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap51 = indexMetaData45.getActiveAllocationIds();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings44, indexMetaData45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertEquals("'" + boolean11 + "' != '" + false + "'", boolean11, false);
        org.junit.Assert.assertNull(sizeValue14);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap51);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings settings12 = builder4.build();
        org.elasticsearch.common.settings.Settings settings13 = builder4.build();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder4.put("index.", "index.shared_filesystem.recover_on_any_node");
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        long long86 = indexMetaData40.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        java.util.Set<java.lang.String> strSet20 = null; // flaky: indexMetaData17.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData17.getCustoms();
        int int22 = indexMetaData17.getTotalNumberOfShards();
        indexSettings16.indexMetaData = indexMetaData17;
        boolean boolean24 = indexSettings16.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue25 = indexSettings16.getTranslogSyncInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting26 = indexSettings16.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(byteSizeValueSetting26);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        int int5 = indexSettings2.getMaxResultWindow();
        long long6 = indexSettings2.gcDeletesInMillis;
        int int7 = indexSettings2.getMaxResultWindow();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting8 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10000 + "'", int7 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting8);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings2.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings2.getMergePolicy();
        boolean boolean13 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings2.getScopedSettings();
        boolean boolean15 = indexSettings2.isTTLPurgeDisabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        long long2 = builder1.version();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.index("index.version.minimum_compatible");
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder2.primaryTerm((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting10 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings2.getNodeSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        int int18 = indexSettings14.maxRescoreWindow;
        java.lang.String str19 = indexSettings14.getUUID();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting21 = indexSettings14.getINDEX_GC_DELETES_SETTING();
        int int22 = indexSettings14.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = indexSettings14.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        java.lang.String str33 = settings31.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder34 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder34.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder38.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder42 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder43 = builder42.replacePropertyPlaceholders();
        boolean boolean45 = indexScopedSettings23.updateDynamicSettings(settings31, builder38, builder43, "_all");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = indexScopedSettings23.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.Index index64 = indexMetaData47.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData47.getState();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings68 = settings66.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state70 = indexMetaData47.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings46, indexMetaData47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings73);
        boolean boolean75 = indexSettings74.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings74.settings = settings76;
        boolean boolean78 = indexSettings74.queryStringLenient;
        boolean boolean79 = indexSettings74.TTLPurgeDisabled;
        java.lang.String str80 = indexSettings74.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting81 = indexSettings74.getMAX_RESCORE_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting82 = indexSettings74.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting83 = indexSettings74.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean84 = indexScopedSettings46.get(booleanSetting83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[NodeScope]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSetting10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(timeValueSetting21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNull(index64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + state70 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state70.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(intSetting81);
        org.junit.Assert.assertNotNull(byteSizeValueSetting82);
        org.junit.Assert.assertNotNull(booleanSetting83);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        boolean boolean29 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings16.durability;
        boolean boolean18 = indexSettings16.isQueryStringAnalyzeWildcard();
        boolean boolean19 = indexSettings16.isWarmerEnabled();
        boolean boolean20 = indexSettings16.TTLPurgeDisabled;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        java.lang.String str10 = indexSettings2.defaultField;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings14.archiveUnknownOrBrokenSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings17.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings17, strPredicate22, indexScopedSettings23);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting29 = null; // flaky: indexSettings28.getINDEX_WARMER_ENABLED_SETTING();
// flaky:         indexSettings28.setTTLPurgeDisabled(false);
        org.elasticsearch.index.translog.Translog.Durability durability32 = null; // flaky: indexSettings28.durability;
        indexSettings2.setdurability(durability32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_all" + "'", str10, "_all");
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting29);
// flaky:         org.junit.Assert.assertTrue("'" + durability32 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability32.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        java.lang.String str16 = indexSettings15.getUUID();
        boolean boolean17 = indexSettings15.getisShadowReplicaIndex();
        long long18 = indexSettings15.gcDeletesInMillis;
        boolean boolean19 = indexSettings15.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60000L + "'", long18 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        boolean boolean10 = indexSettings6.queryStringLenient;
        boolean boolean11 = indexSettings6.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig12 = indexSettings6.mergePolicyConfig;
        int int13 = indexSettings6.getMaxRescoreWindow();
        int int14 = indexSettings6.maxRescoreWindow;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings6.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue16 = indexSettings6.getFlushThresholdSize();
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue16);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertNotNull(byteSizeValue16);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData15.getState();
        java.util.Set<java.lang.String> strSet18 = null; // flaky: indexMetaData15.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version19 = indexMetaData15.getUpgradedVersion();
        org.elasticsearch.Version version20 = settings13.getAsVersion("", version19);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder7.put("", version19);
        java.lang.String str23 = builder7.get("10.0");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        boolean boolean29 = indexMetaData0.isSameUUID("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.creationDate((long) '4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        indexSettings2.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.durability;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings2.flushThresholdSize;
        int int13 = indexSettings2.getMaxRescoreWindow();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.putMapping(mappingMetaData25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings15.getdurability();
        boolean boolean18 = indexSettings15.isWarmerEnabled();
        boolean boolean19 = indexSettings15.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int20 = builder19.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.putCustom("", custom22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("_na_", custom25);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.getdefaultAllowUnmappedFields();
        java.lang.String str13 = indexSettings2.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        org.elasticsearch.common.settings.Settings settings15 = settings12.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings22.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings31);
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22, strPredicate27, indexScopedSettings28);
        org.elasticsearch.index.IndexSettings indexSettings34 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12, strPredicate16, indexScopedSettings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings37);
        boolean boolean39 = indexSettings38.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings38.settings = settings40;
        boolean boolean42 = indexSettings38.queryStringLenient;
        boolean boolean43 = indexSettings38.TTLPurgeDisabled;
        boolean boolean44 = indexSettings38.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version45 = indexSettings38.version;
        org.elasticsearch.Version version46 = settings12.getAsVersion("archived.", version45);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings49);
        boolean boolean51 = indexSettings50.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings50.settings = settings52;
        org.elasticsearch.common.settings.Settings settings55 = settings52.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = settings55.toXContent(xContentBuilder56, params57);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder59 = settings12.toXContent(xContentBuilder47, params57);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = indexMetaData0.toXContent(xContentBuilder5, params57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(params57);
        org.junit.Assert.assertNull(xContentBuilder58);
        org.junit.Assert.assertNull(xContentBuilder59);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig13 = indexSettings2.getMergeSchedulerConfig();
        java.lang.String str14 = indexSettings2.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData5.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings21.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings27.archiveUnknownOrBrokenSettings(settings30);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings21, strPredicate26, indexScopedSettings27);
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate15, indexScopedSettings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        boolean boolean41 = indexSettings37.queryStringLenient;
        boolean boolean42 = indexSettings37.TTLPurgeDisabled;
        boolean boolean43 = indexSettings37.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version44 = indexSettings37.version;
        org.elasticsearch.Version version45 = settings11.getAsVersion("archived.", version44);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        boolean boolean50 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings49.settings = settings51;
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder55 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params56 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = settings54.toXContent(xContentBuilder55, params56);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = settings11.toXContent(xContentBuilder46, params56);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap60 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(params56);
        org.junit.Assert.assertNull(xContentBuilder57);
        org.junit.Assert.assertNull(xContentBuilder58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData0.mappingOrDefault("archived.");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings22.getGroups("index.creation_date_string", false);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        org.elasticsearch.common.settings.Settings settings37 = settings34.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings44.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings53);
        org.elasticsearch.index.IndexSettings indexSettings55 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData39, settings44, strPredicate49, indexScopedSettings50);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34, strPredicate38, indexScopedSettings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings60.settings = settings62;
        boolean boolean64 = indexSettings60.queryStringLenient;
        boolean boolean65 = indexSettings60.TTLPurgeDisabled;
        boolean boolean66 = indexSettings60.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version67 = indexSettings60.version;
        org.elasticsearch.Version version68 = settings34.getAsVersion("archived.", version67);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder69 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings71);
        boolean boolean73 = indexSettings72.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings72.settings = settings74;
        org.elasticsearch.common.settings.Settings settings77 = settings74.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params79 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = settings77.toXContent(xContentBuilder78, params79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = settings34.toXContent(xContentBuilder69, params79);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder82 = settings22.toXContent(xContentBuilder27, params79);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = indexMetaData0.toXContent(xContentBuilder18, params79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(version67);
        org.junit.Assert.assertNotNull(version68);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(params79);
        org.junit.Assert.assertNull(xContentBuilder80);
        org.junit.Assert.assertNull(xContentBuilder81);
        org.junit.Assert.assertNull(xContentBuilder82);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        java.lang.String str18 = indexSettings12.customDataPath();
        indexSettings12.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.durability;
        indexSettings2.durability = durability21;
        int int23 = indexSettings2.getNumberOfShards();
        indexSettings2.gcDeletesInMillis = 100;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting74 = indexSettings73.getINDEX_GC_DELETES_SETTING();
        indexSettings73.maxResultWindow = 0;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(timeValueSetting74);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.io.InputStream inputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.loadFromStream("index.version.upgraded", inputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData5.getState();
        int int7 = indexMetaData5.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData5.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings19);
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap42 = settings38.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean46 = indexScopedSettings44.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings44.archiveUnknownOrBrokenSettings(settings47);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings38, strPredicate43, indexScopedSettings44);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28, strPredicate32, indexScopedSettings44);
        java.lang.String str51 = indexScopedSettings44.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings54.archiveUnknownOrBrokenSettings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings64.archiveUnknownOrBrokenSettings(settings67);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings67.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings73.archiveUnknownOrBrokenSettings(settings76);
        org.elasticsearch.index.IndexSettings indexSettings78 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData62, settings67, strPredicate72, indexScopedSettings73);
        org.elasticsearch.index.IndexSettings indexSettings79 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData52, settings58, strPredicate61, indexScopedSettings73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        boolean boolean86 = indexSettings82.queryStringLenient;
        boolean boolean87 = indexSettings82.TTLPurgeDisabled;
        java.lang.String str88 = indexSettings82.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue89 = indexSettings82.syncInterval;
// flaky:         indexSettings79.setRefreshInterval(timeValue89);
        org.elasticsearch.common.unit.TimeValue timeValue91 = null; // flaky: indexSettings79.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData92 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state93 = indexMetaData92.getState();
        int int94 = indexMetaData92.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap95 = indexMetaData92.getMappings();
// flaky:         indexSettings79.indexMetaData = indexMetaData92;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings97 = new org.elasticsearch.common.settings.IndexScopedSettings(settings20, indexScopedSettings44, indexMetaData92);
        org.elasticsearch.index.IndexSettings indexSettings98 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings20);
        long long99 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(indexScopedSettings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(timeValue89);
// flaky:         org.junit.Assert.assertNotNull(timeValue91);
        org.junit.Assert.assertNotNull(indexMetaData92);
        org.junit.Assert.assertTrue("'" + state93 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state93.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap95);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-1L) + "'", long99 == (-1L));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings2.getdurability();
        java.lang.String str11 = indexSettings2.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isTTLPurgeDisabled();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.unit.TimeValue timeValue6 = indexSettings2.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeValue6);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting11 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue12 = indexSettings2.getFlushThresholdSize();
        java.lang.String str13 = indexSettings2.defaultField;
        boolean boolean14 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(booleanSetting11);
        org.junit.Assert.assertNotNull(byteSizeValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_all" + "'", str13, "_all");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        java.lang.String str16 = indexSettings15.getUUID();
        boolean boolean17 = indexSettings15.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder9.internalMap();
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.loadFromStream("index.number_of_shards", inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        indexSettings2.warmerEnabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("hi!");
        java.util.Set<java.lang.String> strSet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putActiveAllocationIds((int) (short) 100, strSet7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        java.lang.String str18 = indexSettings12.customDataPath();
        indexSettings12.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability21 = indexSettings12.durability;
        indexSettings2.durability = durability21;
        int int23 = indexSettings2.getNumberOfShards();
        indexSettings2.setEnableWarmer(false);
        org.elasticsearch.common.unit.TimeValue timeValue26 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        int int27 = indexSettings2.getMaxRescoreWindow();
        org.elasticsearch.common.settings.Settings settings28 = indexSettings2.settings;
        indexSettings2.maxResultWindow = (byte) 100;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + durability21 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability21.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertNotNull(settings28);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        int int17 = indexMetaData10.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        java.util.Set<java.lang.String> strSet31 = null; // flaky: indexMetaData28.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData28.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData18.diff(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        org.elasticsearch.common.settings.Settings settings42 = settings39.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings43);
        org.elasticsearch.common.settings.Settings settings46 = settings43.getAsSettings("index.");
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = indexSettings47.getIndexMetaData();
        boolean boolean49 = indexSettings47.isShadowReplicaIndex;
        indexSettings47.setMaxResultWindow((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings17 = null;
        indexSettings15.settings = settings17;
        java.util.function.Predicate<java.lang.String> strPredicate19 = indexSettings15.getindexNameMatcher();
        boolean boolean20 = indexSettings15.getisShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(strPredicate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        indexSettings2.setMaxRescoreWindow((int) 'a');
        boolean boolean12 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        int int19 = indexSettings15.maxRescoreWindow;
        java.lang.String str20 = indexSettings15.getUUID();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings15.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting24 = indexSettings15.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings15.getINDEX_WARMER_ENABLED_SETTING();
        java.lang.Boolean boolean26 = indexSettings2.getValue(booleanSetting25);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(intSetting24);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + true + "'", boolean26, true);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.getNodeSettings();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig11 = indexSettings2.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(mergePolicyConfig11);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.loadFromStream("active_allocations", inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder16.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder16.putNull("");
        java.lang.String[] strArray45 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder16.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = builder11.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList46);
        java.lang.String str51 = builder11.remove("index.data_path");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder74.put("index.shared_filesystem.recover_on_any_node", 0.0d);
        org.elasticsearch.common.settings.Settings settings80 = builder74.build();
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put("index.creation_date", (-1L));
        java.lang.String str85 = builder83.get("state-");
        java.util.concurrent.TimeUnit timeUnit88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder89 = builder83.put("index.version.upgraded_string", (long) (short) 100, timeUnit88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        indexSettings2.setMaxRescoreWindow(0);
        boolean boolean13 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue14 = null;
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue14);
        boolean boolean16 = indexSettings2.hasCustomDataPath();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings19 = settings17.getAsSettings("index.number_of_replicas");
        indexSettings2.settings = settings19;
        java.lang.String str22 = settings19.get("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.creation_date_string");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder2.extendArray("index.creation_date_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder2.put("index.blocks.read", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder32.putNull("index.version.created_string");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder38 = builder34.put("index.blocks.read_only", (long) (byte) 0, byteSizeUnit37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        int int5 = indexSettings2.getMaxResultWindow();
        long long6 = indexSettings2.gcDeletesInMillis;
        long long7 = indexSettings2.getGcDeletesInMillis();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        boolean boolean14 = indexSettings10.queryStringLenient;
        boolean boolean15 = indexSettings10.TTLPurgeDisabled;
        java.lang.String str16 = indexSettings10.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue17 = indexSettings10.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings10.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting19 = indexSettings10.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        boolean boolean23 = indexSettings22.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings22.settings = settings24;
        boolean boolean26 = indexSettings22.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = indexSettings22.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings28 = indexSettings22.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue29 = indexSettings22.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        boolean boolean36 = indexSettings32.queryStringLenient;
        boolean boolean37 = indexSettings32.TTLPurgeDisabled;
        java.lang.String str38 = indexSettings32.customDataPath();
        indexSettings32.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability41 = indexSettings32.durability;
        indexSettings22.durability = durability41;
        indexSettings10.durability = durability41;
        indexSettings2.setdurability(durability41);
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings2.getsyncInterval();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting46 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 60000L + "'", long6 == 60000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 60000L + "'", long7 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(strSetting19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + durability41 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability41.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(timeValueSetting46);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        boolean boolean17 = indexSettings12.TTLPurgeDisabled;
        java.lang.String str18 = indexSettings12.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.syncInterval;
        indexSettings2.setRefreshInterval(timeValue19);
        boolean boolean21 = indexSettings2.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.creation_date_string", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.put(objDictionary15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.put("index.version.upgraded_string", version16);
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder17.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings settings19 = builder18.build();
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings28 = builder27.build();
        org.elasticsearch.common.settings.Settings.Builder builder29 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder29.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder29.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder27.put(strMap31);
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder18.put(strMap31);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        int int41 = indexSettings37.maxRescoreWindow;
        java.lang.String str42 = indexSettings37.getUUID();
        org.elasticsearch.common.settings.Settings settings43 = indexSettings37.nodeSettings;
        org.elasticsearch.common.settings.Settings settings44 = indexSettings37.nodeSettings;
        boolean boolean45 = indexSettings37.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy46 = indexSettings37.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue47 = indexSettings37.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean49 = indexSettings37.matchesIndexName("_all");
        long long50 = indexSettings37.getGcDeletesInMillis();
        java.util.function.Predicate<java.lang.String> strPredicate51 = indexSettings37.indexNameMatcher;
        java.util.function.Function<java.lang.String, java.lang.String> strFunction52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder53 = builder33.putProperties(strMap34, strPredicate51, strFunction52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "_na_" + "'", str42, "_na_");
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(mergePolicy46);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 60000L + "'", long50 == 60000L);
        org.junit.Assert.assertNotNull(strPredicate51);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings21.applySettings(settings33);
        boolean boolean46 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings16.getQUERY_STRING_ANALYZE_WILDCARD();
        boolean boolean18 = indexSettings16.queryStringAllowLeadingWildcard;
        indexSettings16.setMaxRescoreWindow((int) (byte) -1);
        boolean boolean21 = indexSettings16.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("archived.", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        indexSettings63.setwarmerEnabled(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        boolean boolean73 = indexSettings69.queryStringLenient;
        boolean boolean74 = indexSettings69.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig75 = indexSettings69.mergePolicyConfig;
        org.elasticsearch.index.translog.Translog.Durability durability76 = indexSettings69.durability;
        indexSettings63.setTranslogDurability(durability76);
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting78 = indexSettings63.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability79 = indexSettings63.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig75);
        org.junit.Assert.assertTrue("'" + durability76 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability76.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(intSetting78);
        org.junit.Assert.assertTrue("'" + durability79 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability79.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.isDefaultAllowUnmappedFields();
        java.lang.String str13 = indexSettings2.getNodeName();
        java.lang.String str14 = indexSettings2.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_all" + "'", str14, "_all");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        indexSettings2.setMaxResultWindow((int) (byte) 10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        byte byte10 = state9.id();
        byte byte11 = state9.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.state(state9);
        byte byte13 = state9.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 0 + "'", byte10 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        int int18 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData19.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version23 = indexMetaData19.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        java.util.Set<java.lang.String> strSet26 = null; // flaky: indexMetaData19.activeAllocationIds((int) (short) 10);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        boolean boolean37 = indexSettings36.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings36.settings = settings38;
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings42);
        org.elasticsearch.common.settings.Settings settings44 = indexSettings43.nodeSettings;
        org.elasticsearch.common.settings.Settings settings45 = indexSettings43.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings45);
        indexSettings46.setEnableWarmer(false);
        int int49 = indexSettings46.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        boolean boolean29 = indexMetaData0.isSameUUID("");
        org.elasticsearch.index.Index index30 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData0.mappingOrDefault("hi!");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params34 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder33, params34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(index30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(params34);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData9.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData9.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version13 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        long long15 = indexMetaData9.getCreationDate();
        indexSettings2.indexMetaData = indexMetaData9;
        org.elasticsearch.Version version17 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData9.mappingOrDefault("hi!");
        int int20 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentParser xContentParser21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings23);
        boolean boolean25 = indexSettings24.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings24.settings = settings26;
        int int28 = indexSettings24.maxRescoreWindow;
        java.lang.String str29 = indexSettings24.getUUID();
        org.elasticsearch.common.settings.Settings settings30 = indexSettings24.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting31 = indexSettings24.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        java.lang.String str40 = indexSettings34.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue41 = indexSettings34.syncInterval;
        indexSettings24.setRefreshInterval(timeValue41);
        indexSettings24.setwarmerEnabled(false);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher45 = indexSettings24.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = indexMetaData9.fromXContent(xContentParser21, parseFieldMatcher45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10000 + "'", int28 == 10000);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "_na_" + "'", str29, "_na_");
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(booleanSetting31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(parseFieldMatcher45);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder15 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder16.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.", (long) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = builder22.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder14.put(strMap23);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder24.replacePropertyPlaceholders();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder29 = builder24.put("index.blocks.write", (long) '#', byteSizeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap30 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings42.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder35.settings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData31, settings42);
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings42);
        boolean boolean49 = indexSettings48.isTTLPurgeDisabled();
        org.elasticsearch.index.translog.Translog.Durability durability50 = indexSettings48.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + durability50 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability50.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
// flaky:         indexSettings27.maxRescoreWindow = 1;
        int int30 = 0; // flaky: indexSettings27.getNumberOfReplicas();
        boolean boolean31 = false; // flaky: indexSettings27.TTLPurgeDisabled;
        org.elasticsearch.common.logging.ESLogger eSLogger32 = null; // flaky: indexSettings27.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertNotNull(eSLogger32);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings79);
        boolean boolean81 = indexSettings80.isQueryStringLenient();
        java.lang.String str82 = indexSettings80.getNodeName();
        java.lang.Class<?> wildcardClass83 = indexSettings80.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder74.put("", (java.lang.Class) wildcardClass83);
        java.util.Map<java.lang.String, java.lang.String> strMap85 = builder84.internalMap();
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder87 = builder84.put(objDictionary86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strMap85);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability11 = null;
        indexSettings2.durability = durability11;
        boolean boolean13 = indexSettings2.getqueryStringAllowLeadingWildcard();
        boolean boolean14 = indexSettings2.isQueryStringAnalyzeWildcard();
        boolean boolean15 = indexSettings2.TTLPurgeDisabled;
        long long16 = indexSettings2.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 60000L + "'", long16 == 60000L);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.putAlias(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate4 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = indexSettings2.flushThresholdSize;
        java.lang.String str6 = indexSettings2.getDefaultField();
        org.elasticsearch.common.unit.TimeValue timeValue7 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_all" + "'", str6, "_all");
        org.junit.Assert.assertNotNull(timeValue7);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings36.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData31, settings36, strPredicate41, indexScopedSettings42);
        org.elasticsearch.index.IndexSettings indexSettings48 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27, strPredicate30, indexScopedSettings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = new org.elasticsearch.common.settings.IndexScopedSettings(settings19, indexScopedSettings42, indexMetaData49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = indexMetaData52.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        boolean boolean56 = indexMetaData52.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = new org.elasticsearch.common.settings.IndexScopedSettings(settings14, indexScopedSettings51, indexMetaData52);
        boolean boolean58 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        indexSettings59.setwarmerEnabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings7 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings6);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings7.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData1, settings7, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings40.archiveUnknownOrBrokenSettings(settings43);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34, strPredicate39, indexScopedSettings40);
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings22.applySettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        boolean boolean50 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings49.settings = settings51;
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings55.archiveUnknownOrBrokenSettings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = indexMetaData60.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = new org.elasticsearch.common.settings.IndexScopedSettings(settings54, indexScopedSettings55, indexMetaData60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings22, indexMetaData60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData64.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData64);
        boolean boolean68 = indexMetaData64.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings73);
        boolean boolean75 = indexSettings74.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings74.settings = settings76;
        org.elasticsearch.common.settings.Settings settings79 = settings76.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings69.archiveUnknownOrBrokenSettings(settings79);
        org.elasticsearch.common.settings.Settings settings82 = settings79.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings83 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean85 = indexScopedSettings83.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate86 = indexScopedSettings83.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData87 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData87, settings88);
        boolean boolean90 = indexSettings89.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings91 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings89.settings = settings91;
        boolean boolean93 = indexSettings89.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting94 = indexSettings89.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings95 = indexSettings89.scopedSettings;
        java.lang.String str96 = indexScopedSettings95.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings97 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData64, settings79, strPredicate86, indexScopedSettings95);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting98 = null; // flaky: indexSettings97.getINDEX_TTL_DISABLE_PURGE_SETTING();
        java.lang.Boolean boolean99 = null; // flaky: indexScopedSettings63.get(booleanSetting98);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(indexScopedSettings83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strPredicate86);
        org.junit.Assert.assertNotNull(indexMetaData87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(booleanSetting94);
        org.junit.Assert.assertNotNull(indexScopedSettings95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
// flaky:         org.junit.Assert.assertNotNull(booleanSetting98);
// flaky:         org.junit.Assert.assertEquals("'" + boolean99 + "' != '" + false + "'", boolean99, false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder2.extendArray("index.creation_date_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder2.put("index.blocks.read", "index.priority");
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.normalizePrefix("index.");
        java.util.concurrent.TimeUnit timeUnit35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder32.put("index.version.upgraded_string", (long) (short) 0, timeUnit35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        java.util.function.Predicate<java.lang.String> strPredicate32 = indexSettings31.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings33 = settings6.filter(strPredicate32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        boolean boolean41 = indexSettings37.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting42 = indexSettings37.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings43 = indexSettings37.nodeSettings;
        boolean boolean44 = indexSettings37.queryStringAnalyzeWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue45 = indexSettings37.getGlobalCheckpointInterval();
        org.elasticsearch.common.unit.TimeValue timeValue46 = settings6.getAsTime("true", timeValue45);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(strPredicate32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanSetting42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(timeValue46);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.indexNameMatcher;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        int int18 = indexSettings14.maxRescoreWindow;
        java.lang.String str19 = indexSettings14.getUUID();
        java.lang.String str20 = indexSettings14.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData21.getState();
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData21.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version25 = indexMetaData21.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        long long27 = indexMetaData21.getCreationDate();
        indexSettings14.indexMetaData = indexMetaData21;
        org.elasticsearch.Version version29 = indexMetaData21.getUpgradedVersion();
        boolean boolean30 = indexSettings2.updateIndexMetaData(indexMetaData21);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        org.elasticsearch.common.settings.Settings settings42 = settings39.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = indexMetaData45.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings48);
        boolean boolean50 = indexSettings49.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings49.settings = settings51;
        org.elasticsearch.common.settings.Settings settings54 = settings51.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData56);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings61.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean69 = indexScopedSettings67.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings71 = indexScopedSettings67.archiveUnknownOrBrokenSettings(settings70);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData56, settings61, strPredicate66, indexScopedSettings67);
        org.elasticsearch.index.IndexSettings indexSettings73 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate55, indexScopedSettings67);
        java.lang.String str75 = settings51.get("index.shadow_replicas");
        org.elasticsearch.common.unit.TimeValue timeValue77 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue78 = settings51.getAsTime("index.", timeValue77);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        org.elasticsearch.common.settings.Settings settings87 = settings84.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder88 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params89 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder90 = settings87.toXContent(xContentBuilder88, params89);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = settings51.toXContent(xContentBuilder79, params89);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder92 = settings42.toXContent(xContentBuilder44, params89);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData21, xContentBuilder31, params89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(indexScopedSettings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(timeValue78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(params89);
        org.junit.Assert.assertNull(xContentBuilder90);
        org.junit.Assert.assertNull(xContentBuilder91);
        org.junit.Assert.assertNull(xContentBuilder92);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig10 = indexSettings2.getmergePolicyConfig();
        java.lang.String str11 = indexSettings2.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(mergePolicyConfig10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData20.getState();
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData20.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = new org.elasticsearch.common.settings.IndexScopedSettings(settings13, indexScopedSettings15, indexMetaData20);
        java.util.Set<org.elasticsearch.common.settings.Setting<?>> wildcardSettingSet25 = indexScopedSettings15.getBUILT_IN_INDEX_SETTINGS();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexScopedSettings15.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData27.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        long long31 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData32.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        boolean boolean37 = indexSettings36.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings36.settings = settings38;
        org.elasticsearch.common.settings.Settings settings41 = settings38.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData43);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap52 = settings48.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings54.archiveUnknownOrBrokenSettings(settings57);
        org.elasticsearch.index.IndexSettings indexSettings59 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData43, settings48, strPredicate53, indexScopedSettings54);
        org.elasticsearch.index.IndexSettings indexSettings60 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData32, settings38, strPredicate42, indexScopedSettings54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings63);
        boolean boolean65 = indexSettings64.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings64.settings = settings66;
        boolean boolean68 = indexSettings64.queryStringLenient;
        boolean boolean69 = indexSettings64.TTLPurgeDisabled;
        boolean boolean70 = indexSettings64.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version71 = indexSettings64.version;
        org.elasticsearch.Version version72 = settings38.getAsVersion("archived.", version71);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings75);
        boolean boolean77 = indexSettings76.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings76.settings = settings78;
        org.elasticsearch.common.settings.Settings settings81 = settings78.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder82 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params83 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings81.toXContent(xContentBuilder82, params83);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = settings38.toXContent(xContentBuilder73, params83);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings87 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings15, indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData88 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData88, settings89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData88);
        org.elasticsearch.common.settings.Settings settings92 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap93 = settings92.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData88, settings92);
        org.elasticsearch.common.unit.TimeValue timeValue95 = indexSettings94.getTranslogSyncInterval();
        java.lang.String str96 = indexSettings94.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting97 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean98 = indexSettings94.getValue(booleanSetting97);
        indexScopedSettings15.validateSettingKey((org.elasticsearch.common.settings.Setting) booleanSetting97);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(wildcardSettingSet25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(version71);
        org.junit.Assert.assertNotNull(version72);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(params83);
        org.junit.Assert.assertNull(xContentBuilder84);
        org.junit.Assert.assertNull(xContentBuilder85);
        org.junit.Assert.assertNotNull(indexMetaData88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(timeValue95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNotNull(booleanSetting97);
        org.junit.Assert.assertEquals("'" + boolean98 + "' != '" + true + "'", boolean98, true);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
// flaky:         indexSettings16.setTTLPurgeDisabled(false);
        org.elasticsearch.index.translog.Translog.Durability durability20 = null; // flaky: indexSettings16.durability;
        boolean boolean21 = false; // flaky: indexSettings16.isIndexUsingShadowReplicas();
        boolean boolean22 = false; // flaky: indexSettings16.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + durability20 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability20.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings25);
        boolean boolean27 = indexSettings26.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings16.durability;
        boolean boolean18 = indexSettings16.isQueryStringAnalyzeWildcard();
        boolean boolean19 = indexSettings16.isShadowReplicaIndex;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings25.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings25, strPredicate30, indexScopedSettings31);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate19, indexScopedSettings31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings40.archiveUnknownOrBrokenSettings(settings43);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings43.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        org.elasticsearch.index.IndexSettings indexSettings54 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData38, settings43, strPredicate48, indexScopedSettings49);
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings31.applySettings(settings43);
        org.elasticsearch.common.settings.Settings settings57 = settings43.getByPrefix("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state60 = indexMetaData59.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings62);
        boolean boolean64 = indexSettings63.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings63.settings = settings65;
        org.elasticsearch.common.settings.Settings settings68 = settings65.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean74 = indexScopedSettings72.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings72.archiveUnknownOrBrokenSettings(settings75);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings75.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean83 = indexScopedSettings81.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings81.archiveUnknownOrBrokenSettings(settings84);
        org.elasticsearch.index.IndexSettings indexSettings86 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData70, settings75, strPredicate80, indexScopedSettings81);
        org.elasticsearch.index.IndexSettings indexSettings87 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData59, settings65, strPredicate69, indexScopedSettings81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings89 = new org.elasticsearch.common.settings.IndexScopedSettings(settings43, indexScopedSettings58, indexMetaData59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state91 = indexMetaData90.getState();
        java.util.Set<java.lang.String> strSet93 = null; // flaky: indexMetaData90.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version94 = indexMetaData90.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData90);
        long long96 = indexMetaData90.getCreationDate();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings97 = new org.elasticsearch.common.settings.IndexScopedSettings(settings9, indexScopedSettings89, indexMetaData90);
        boolean boolean99 = indexScopedSettings97.isPrivateSetting("index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertTrue("'" + state60 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state60.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertTrue("'" + state91 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state91.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet93);
        org.junit.Assert.assertNotNull(version94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValueSetting10);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings10, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings34);
        boolean boolean36 = indexSettings35.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings35.settings = settings37;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        java.util.Set<java.lang.String> strSet47 = null; // flaky: indexMetaData44.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = new org.elasticsearch.common.settings.IndexScopedSettings(settings37, indexScopedSettings39, indexMetaData44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings61.archiveUnknownOrBrokenSettings(settings64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings64.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean72 = indexScopedSettings70.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings70.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.index.IndexSettings indexSettings75 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData59, settings64, strPredicate69, indexScopedSettings70);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55, strPredicate58, indexScopedSettings70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue78 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = settings55.getAsBytesSize("index.creation_date_string", byteSizeValue78);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings48.applySettings(settings55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder3.settings(settings80);
        java.util.Set<java.lang.String> strSet86 = settings80.names();
        boolean boolean87 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings80);
        boolean boolean88 = settings80.isEmpty();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(byteSizeValue79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        java.util.Set<java.lang.String> strSet31 = null; // flaky: indexMetaData28.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings23, indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData43.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings46);
        boolean boolean48 = indexSettings47.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings47.settings = settings49;
        org.elasticsearch.common.settings.Settings settings52 = settings49.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings56.archiveUnknownOrBrokenSettings(settings59);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings59.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings65.archiveUnknownOrBrokenSettings(settings68);
        org.elasticsearch.index.IndexSettings indexSettings70 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59, strPredicate64, indexScopedSettings65);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData43, settings49, strPredicate53, indexScopedSettings65);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings23, indexMetaData33);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap74 = indexMetaData33.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap74);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig12 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexSettings2.indexMetaData;
        java.lang.String str14 = indexSettings2.getNodeName();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher15 = indexSettings2.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(parseFieldMatcher15);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("index.version.upgraded", (java.lang.Class) wildcardClass8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder4.put("_na_", (double) 100.0f);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.normalizePrefix("index.priority");
        java.lang.String str16 = builder14.get("index.version.upgraded");
        java.nio.file.Path path17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.loadFromPath(path17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        int int18 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData19.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version23 = indexMetaData19.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        java.util.Set<java.lang.String> strSet26 = null; // flaky: indexMetaData19.activeAllocationIds((int) (short) 10);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putNull("");
        java.lang.String[] strArray58 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder24.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder11.putArray("state-", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.blocks.metadata", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("index.auto_expand_replicas", "hi!");
        java.nio.file.Path path72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder73 = builder71.loadFromPath(path72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder32.putNull("");
        java.lang.String[] strArray61 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder27.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList62);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder12.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.Class<?> wildcardClass70 = builder69.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder66.put("index.version.upgraded_string", (java.lang.Class) wildcardClass70);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putNull("");
        java.lang.String[] strArray58 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder24.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder11.putArray("state-", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.blocks.metadata", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("index.auto_expand_replicas", "hi!");
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder71.normalizePrefix("hi!");
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData0.getState();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings29.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate46, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings58, indexMetaData65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate31, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings71);
        boolean boolean73 = indexSettings72.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings72.settings = settings74;
        org.elasticsearch.common.settings.Settings settings77 = settings74.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean80 = indexScopedSettings78.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings78.archiveUnknownOrBrokenSettings(settings81);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state84 = indexMetaData83.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings85 = new org.elasticsearch.common.settings.IndexScopedSettings(settings77, indexScopedSettings78, indexMetaData83);
        java.lang.String[] strArray90 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray92 = settings77.getAsArray("", strArray90, (java.lang.Boolean) true);
        java.lang.String[] strArray93 = settings11.getAsArray("index.version.created", strArray92);
        java.lang.Boolean boolean96 = settings11.getAsBoolean("index.blocks.read_only", (java.lang.Boolean) false);
        boolean boolean97 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        java.util.Set<java.lang.String> strSet98 = settings11.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(indexMetaData83);
        org.junit.Assert.assertTrue("'" + state84 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state84.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertEquals("'" + boolean96 + "' != '" + false + "'", boolean96, false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings15.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean18 = indexSettings15.isShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting19 = indexSettings15.getINDEX_CHECK_ON_STARTUP();
        boolean boolean20 = indexSettings15.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("true");
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.putMapping("index.data_path", "index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date_string");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig5 = indexSettings2.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = indexSettings2.scopedSettings;
        boolean boolean8 = indexScopedSettings6.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<?> wildcardSetting10 = indexScopedSettings6.get("_na_");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexScopedSettings6.getDEFAULT_SCOPED_SETTINGS();
        org.elasticsearch.common.settings.Settings.Builder builder12 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder12.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = builder12.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder12.putNull("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        java.lang.Class<?> wildcardClass20 = builder19.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder16.put("index.version.upgraded", (java.lang.Class) wildcardClass20);
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings11.validate(builder21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.version.upgraded]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig5);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardSetting10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData38.excludeFilters();
        org.elasticsearch.Version version43 = indexMetaData38.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(version43);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        boolean boolean87 = indexSettings85.matchesIndexName("index.creation_date");
        indexSettings85.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate4 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = indexSettings2.flushThresholdSize;
        boolean boolean6 = indexSettings2.isOnSharedFilesystem();
        boolean boolean7 = indexSettings2.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings63.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexSettings63.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap72 = settings71.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings71);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings75);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        org.elasticsearch.common.settings.Settings settings87 = settings84.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings87);
        org.elasticsearch.index.IndexSettings indexSettings89 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings88);
        org.elasticsearch.index.IndexSettings indexSettings90 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings88);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder91 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params92 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder93 = settings88.toXContent(xContentBuilder91, params92);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings88);
        java.lang.Boolean boolean97 = settings88.getAsBoolean("index.version.created_string", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(params92);
        org.junit.Assert.assertNull(xContentBuilder93);
        org.junit.Assert.assertEquals("'" + boolean97 + "' != '" + false + "'", boolean97, false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        indexSettings2.gcDeletesInMillis = (byte) 100;
        indexSettings2.warmerEnabled = true;
        org.elasticsearch.common.settings.Settings settings11 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings11, streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        boolean boolean23 = indexSettings22.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings22.settings = settings24;
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean33 = indexScopedSettings31.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings31.archiveUnknownOrBrokenSettings(settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings44 = indexScopedSettings40.archiveUnknownOrBrokenSettings(settings43);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData29, settings34, strPredicate39, indexScopedSettings40);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24, strPredicate28, indexScopedSettings40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap55 = settings53.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData47, settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state58 = indexMetaData57.getState();
        java.util.Set<java.lang.String> strSet60 = null; // flaky: indexMetaData57.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData57.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff62 = indexMetaData47.diff(indexMetaData57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData57);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings65);
        boolean boolean67 = indexSettings66.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings66.settings = settings68;
        org.elasticsearch.common.settings.Settings settings71 = settings68.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings68);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = new org.elasticsearch.common.settings.IndexScopedSettings(settings17, indexScopedSettings40, indexMetaData57);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = null;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings74.addSettingsUpdateConsumer(booleanSetting75, booleanConsumer76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(indexScopedSettings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state58.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNotNull(indexMetaDataDiff62);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        indexSettings2.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Settings settings14 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings14, streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings14);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.shared_filesystem.recover_on_any_node", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean10 = indexScopedSettings8.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings12 = indexScopedSettings8.archiveUnknownOrBrokenSettings(settings11);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap14 = settings12.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData16.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData6.diff(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData23.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings26);
        boolean boolean28 = indexSettings27.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings27.settings = settings29;
        org.elasticsearch.common.settings.Settings settings32 = settings29.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings36.archiveUnknownOrBrokenSettings(settings39);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings39.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean47 = indexScopedSettings45.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings49 = indexScopedSettings45.archiveUnknownOrBrokenSettings(settings48);
        org.elasticsearch.index.IndexSettings indexSettings50 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData34, settings39, strPredicate44, indexScopedSettings45);
        org.elasticsearch.index.IndexSettings indexSettings51 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData23, settings29, strPredicate33, indexScopedSettings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings53);
        java.util.function.Predicate<java.lang.String> strPredicate55 = indexSettings54.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings56 = settings29.filter(strPredicate55);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings56);
        org.elasticsearch.index.IndexSettings indexSettings58 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings56);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder59 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap65 = settings64.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean72 = indexScopedSettings70.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData73, settings74);
        boolean boolean76 = indexSettings75.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings75.settings = settings77;
        org.elasticsearch.common.settings.Settings settings80 = settings77.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings70.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings81);
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings81);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params85 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder86 = settings81.toXContent(xContentBuilder84, params85);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder87 = indexMetaData0.toXContent(xContentBuilder59, params85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexScopedSettings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(params85);
        org.junit.Assert.assertNull(xContentBuilder86);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int10 = indexSettings9.maxRescoreWindow;
        boolean boolean11 = indexSettings9.isQueryStringAnalyzeWildcard();
        java.lang.String str12 = indexSettings9.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean14 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig15 = indexSettings2.mergePolicyConfig;
        boolean boolean16 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(intSetting13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings15.indexMetaData;
        int int20 = indexMetaData19.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        indexSettings2.setTTLPurgeDisabled(true);
        boolean boolean12 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings45.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45, strPredicate50, indexScopedSettings51);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate39, indexScopedSettings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = new org.elasticsearch.common.settings.IndexScopedSettings(settings28, indexScopedSettings51, indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state62 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        boolean boolean65 = indexMetaData61.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings60, indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        java.lang.String str71 = indexSettings69.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting72 = indexSettings69.getDEFAULT_FIELD_SETTING();
        indexSettings69.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings75 = indexSettings69.nodeSettings;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings75);
        indexSettings2.indexMetaData = indexMetaData61;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData61.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput80 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData61.writeTo(streamOutput80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + state62 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state62.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strSetting72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData6.getState();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData6.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version10 = indexMetaData6.getUpgradedVersion();
        org.apache.lucene.util.Version version11 = indexMetaData6.getMinimumCompatibleVersion();
        long long12 = indexMetaData6.getVersion();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings36.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate39 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings45.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate50 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData40, settings45, strPredicate50, indexScopedSettings51);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate39, indexScopedSettings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = new org.elasticsearch.common.settings.IndexScopedSettings(settings28, indexScopedSettings51, indexMetaData58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state62 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData61);
        boolean boolean65 = indexMetaData61.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings60, indexMetaData61);
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings23);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings23);
        boolean boolean69 = indexSettings68.getisShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + state62 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state62.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        int int10 = indexSettings9.maxRescoreWindow;
        indexSettings9.gcDeletesInMillis = (byte) -1;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings9.getMAX_RESULT_WINDOW_SETTING();
        java.lang.String str14 = indexSettings9.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(intSetting13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        java.util.function.Predicate<java.lang.String> strPredicate51 = indexSettings2.getindexNameMatcher();
        boolean boolean52 = indexSettings2.isShadowReplicaIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = indexSettings2.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput54 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData53.writeTo(streamOutput54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(indexMetaData53);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings2.durability;
        boolean boolean11 = indexSettings2.queryStringAllowLeadingWildcard;
        boolean boolean12 = indexSettings2.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting13 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate14 = indexSettings2.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durabilitySetting13);
        org.junit.Assert.assertNotNull(strPredicate14);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData12.getMappings();
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData12.activeAllocationIds((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        long long18 = indexMetaData12.getCreationDate();
        int int19 = indexMetaData12.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        indexSettings85.setTTLPurgeDisabled(false);
        indexSettings85.gcDeletesInMillis = 100;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("10.0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexSettings2.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamInput streamInput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData12.readDiffFrom(streamInput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(indexMetaData12);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher8 = indexSettings2.parseFieldMatcher;
        boolean boolean9 = indexSettings2.getqueryStringAllowLeadingWildcard();
        boolean boolean10 = indexSettings2.getdefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        boolean boolean14 = indexSettings13.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings13.settings = settings15;
        boolean boolean17 = indexSettings13.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = indexSettings13.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting19 = indexSettings13.getINDEX_CHECK_ON_STARTUP();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings13.getDEFAULT_GC_DELETES();
        indexSettings2.refreshInterval = timeValue20;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(parseFieldMatcher8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanSetting18);
        org.junit.Assert.assertNotNull(strSetting19);
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.readDiffFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData50);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings55.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings61.archiveUnknownOrBrokenSettings(settings64);
        org.elasticsearch.index.IndexSettings indexSettings66 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55, strPredicate60, indexScopedSettings61);
        org.elasticsearch.index.IndexSettings indexSettings67 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData40, settings46, strPredicate49, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean72 = indexScopedSettings70.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings70.archiveUnknownOrBrokenSettings(settings73);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings73.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate78 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean81 = indexScopedSettings79.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings79.archiveUnknownOrBrokenSettings(settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData68, settings73, strPredicate78, indexScopedSettings79);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings61.applySettings(settings73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData86 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state87 = indexMetaData86.getState();
        java.util.Set<java.lang.String> strSet89 = null; // flaky: indexMetaData86.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap90 = indexMetaData86.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap91 = indexMetaData86.getActiveAllocationIds();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings92 = new org.elasticsearch.common.settings.IndexScopedSettings(settings16, indexScopedSettings61, indexMetaData86);
        java.util.Set<java.lang.String> strSet93 = settings16.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNotNull(indexMetaData86);
        org.junit.Assert.assertTrue("'" + state87 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state87.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet89);
        org.junit.Assert.assertNotNull(strImmutableOpenMap90);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap91);
        org.junit.Assert.assertNotNull(strSet93);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        java.lang.String str4 = builder3.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putAlias(aliasMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.putMapping(mappingMetaData21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        boolean boolean15 = indexSettings11.queryStringLenient;
        boolean boolean16 = indexSettings11.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig17 = indexSettings11.mergePolicyConfig;
        int int18 = indexSettings11.getMaxRescoreWindow();
        int int19 = indexSettings11.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate20 = indexSettings11.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings21 = settings7.filter(strPredicate20);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue24 = settings21.getAsRatio("index.shared_filesystem", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [_all]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings44 = new org.elasticsearch.common.settings.IndexScopedSettings(settings33, indexScopedSettings35, indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51, strPredicate54, indexScopedSettings66);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue74 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue75 = settings51.getAsBytesSize("index.creation_date_string", byteSizeValue74);
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings44.applySettings(settings51);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings76.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings76);
        java.lang.String str82 = settings76.toDelimitedString('4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNull(byteSizeValue75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("10.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [10.0]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        boolean boolean5 = indexSettings2.isQueryStringLenient();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting8 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(intSetting8);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.shared_filesystem.recover_on_any_node");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putAlias(builder9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        boolean boolean7 = indexSettings3.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting8 = indexSettings3.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings3.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings3.refreshInterval;
        indexSettings3.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings3.logger;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings3.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate15 = indexScopedSettings14.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings16 = settings0.filter(strPredicate15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings0.getGroups("index.auto_expand_replicas");
        java.lang.Boolean boolean21 = settings0.getAsBoolean("index.creation_date", (java.lang.Boolean) true);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings0.getAsGroups();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        boolean boolean7 = indexSettings3.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting8 = indexSettings3.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings3.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings3.refreshInterval;
        indexSettings3.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings3.logger;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings3.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate15 = indexScopedSettings14.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings16 = settings0.filter(strPredicate15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings0.getGroups("index.auto_expand_replicas");
        java.lang.Boolean boolean21 = settings0.getAsBoolean("", (java.lang.Boolean) false);
        java.util.Map<java.lang.String, java.lang.Object> strMap22 = settings0.getAsStructuredMap();
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        boolean boolean12 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting13 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting14 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanSetting13);
        org.junit.Assert.assertNotNull(intSetting14);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        int int7 = indexSettings6.getNumberOfReplicas();
        boolean boolean9 = indexSettings6.matchesIndexName("index.data_path");
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings6.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting11 = indexSettings6.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.Version version12 = indexSettings6.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(intSetting11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.index.translog.Translog.Durability durability10 = indexSettings2.durability;
        boolean boolean11 = indexSettings2.queryStringAnalyzeWildcard;
        boolean boolean12 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + durability10 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability10.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValue13);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean14 = indexSettings2.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(intSetting13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str14 = indexSettings2.customDataPath();
        boolean boolean15 = indexSettings2.defaultAllowUnmappedFields;
        org.elasticsearch.index.translog.Translog.Durability durability16 = indexSettings2.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + durability16 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability16.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str14 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability16 = null;
        indexSettings2.setTranslogDurability(durability16);
        boolean boolean18 = indexSettings2.queryStringAnalyzeWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting15 = indexSettings8.getINDEX_GC_DELETES_SETTING();
        int int16 = indexSettings8.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = indexSettings8.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        org.elasticsearch.common.settings.Settings settings25 = settings22.getAsSettings("");
        java.lang.String str27 = settings25.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder36 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder36.replacePropertyPlaceholders();
        boolean boolean39 = indexScopedSettings17.updateDynamicSettings(settings25, builder32, builder37, "_all");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData40.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version44 = indexMetaData40.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        long long46 = indexMetaData40.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData40.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings17, indexMetaData40);
        boolean boolean51 = indexScopedSettings17.hasDynamicSetting("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(timeValueSetting15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        boolean boolean18 = indexSettings14.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = indexSettings14.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings14.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings23);
        boolean boolean25 = indexSettings24.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings24.settings = settings26;
        boolean boolean28 = indexSettings24.queryStringLenient;
        boolean boolean29 = indexSettings24.TTLPurgeDisabled;
        java.lang.String str30 = indexSettings24.customDataPath();
        indexSettings24.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability33 = indexSettings24.durability;
        indexSettings14.durability = durability33;
        indexSettings2.durability = durability33;
        boolean boolean36 = indexSettings2.isQueryStringLenient();
        boolean boolean37 = indexSettings2.getwarmerEnabled();
        java.lang.String str38 = indexSettings2.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(booleanSetting19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + durability33 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability33.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting12 = indexSettings2.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.Version version13 = indexSettings2.version;
        java.lang.String str14 = indexSettings2.customDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings6 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean8 = indexScopedSettings6.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings10 = indexScopedSettings6.archiveUnknownOrBrokenSettings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = new org.elasticsearch.common.settings.IndexScopedSettings(settings4, indexScopedSettings6, indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings37.archiveUnknownOrBrokenSettings(settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings31, strPredicate36, indexScopedSettings37);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings22, strPredicate25, indexScopedSettings37);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = settings22.getAsBytesSize("index.creation_date_string", byteSizeValue45);
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings15.applySettings(settings22);
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexScopedSettings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(byteSizeValue46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        boolean boolean7 = indexSettings6.getqueryStringAnalyzeWildcard();
        boolean boolean8 = indexSettings6.getqueryStringAnalyzeWildcard();
        boolean boolean9 = indexSettings6.isQueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        int int17 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentParser xContentParser18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap24 = settings23.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings39);
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings40);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher43 = indexSettings42.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = indexMetaData0.fromXContent(xContentParser18, parseFieldMatcher43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(parseFieldMatcher43);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
// flaky:         indexSettings27.maxRescoreWindow = 1;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = null; // flaky: indexSettings27.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        int int31 = 0; // flaky: indexSettings27.maxResultWindow;
        org.elasticsearch.index.translog.Translog.Durability durability32 = null; // flaky: indexSettings27.durability;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
// flaky:         org.junit.Assert.assertTrue("'" + durability32 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability32.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.upgraded_string", (float) (byte) 10);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.put(objDictionary13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = indexSettings2.getParseFieldMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.apache.lucene.index.MergePolicy mergePolicy12 = indexSettings2.getMergePolicy();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.queryStringLenient;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        boolean boolean23 = indexSettings19.queryStringLenient;
        boolean boolean24 = indexSettings19.TTLPurgeDisabled;
        boolean boolean25 = indexSettings19.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version26 = indexSettings19.version;
        org.elasticsearch.index.translog.Translog.Durability durability27 = indexSettings19.durability;
        indexSettings15.setdurability(durability27);
        indexSettings2.setdurability(durability27);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting30 = indexSettings2.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(parseFieldMatcher10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(mergePolicy12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(version26);
        org.junit.Assert.assertTrue("'" + durability27 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability27.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(booleanSetting30);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = indexSettings2.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings2.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig53 = indexSettings2.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(mergePolicyConfig53);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str10 = indexSettings2.getDefaultField();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        java.lang.String str12 = indexSettings2.getUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_all" + "'", str10, "_all");
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.shared_filesystem.recover_on_any_node", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("");
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder14.normalizePrefix("_all");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        java.lang.String str6 = builder4.remove("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("index.version.upgraded", "index.auto_expand_replicas");
        java.nio.file.Path path10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder11 = builder9.loadFromPath(path10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        indexSettings15.warmerEnabled = false;
        indexSettings15.warmerEnabled = false;
        indexSettings15.setEnableWarmer(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData2.getState();
        byte byte4 = state3.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("index.auto_expand_replicas", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        byte byte14 = state13.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.state(state13);
        java.lang.String[] strArray43 = new java.lang.String[] { "index.version.minimum_compatible", "index.priority", "index.version.created", "index.version.minimum_compatible", "index.blocks.write", "index.blocks.read", "index.version.upgraded", "hi!", "index.", "primary_terms", "index.version.created_string", "", "", "archived.", "index.blocks.write", "hi!", "archived.", "index.version.created_string", "index.priority", "index.blocks.read", "archived.", "index.shared_filesystem.recover_on_any_node", "index.uuid", "index.uuid", "active_allocations", "index.priority" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder11.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder1.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.creationDate((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder49.primaryTerm(1, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version(60000L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters45 = indexMetaData40.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNull(discoveryNodeFilters45);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder2.extendArray("index.creation_date_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder2.put("index.blocks.read", "index.priority");
        org.elasticsearch.common.settings.Settings settings31 = builder2.build();
        java.util.Set<java.lang.String> strSet32 = settings31.names();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.writeSettingsToStream(settings31, streamOutput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        boolean boolean19 = indexSettings15.queryStringLenient;
        boolean boolean20 = indexSettings15.TTLPurgeDisabled;
        java.lang.String str21 = indexSettings15.customDataPath();
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings15.durability;
        indexSettings2.setTranslogDurability(durability24);
        org.elasticsearch.common.logging.ESLogger eSLogger26 = indexSettings2.getlogger();
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings2.getGlobalCheckpointInterval();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig28 = indexSettings2.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(eSLogger26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig28);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        int int14 = indexSettings10.maxRescoreWindow;
        java.lang.String str15 = indexSettings10.getUUID();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings10.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings10.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings10.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder7.settings(settings18);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder7.putAlias(aliasMetaData20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        boolean boolean10 = indexSettings2.getdefaultAllowUnmappedFields();
        java.lang.String str11 = indexSettings2.nodeName;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(booleanSetting12);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings9 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean11 = indexScopedSettings9.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings13 = indexScopedSettings9.archiveUnknownOrBrokenSettings(settings12);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap15 = settings13.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings22.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings31);
        org.elasticsearch.index.IndexSettings indexSettings33 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings22, strPredicate27, indexScopedSettings28);
        org.elasticsearch.index.IndexSettings indexSettings34 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData7, settings13, strPredicate16, indexScopedSettings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings37.archiveUnknownOrBrokenSettings(settings40);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap43 = settings41.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap54 = settings50.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate55 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings56.archiveUnknownOrBrokenSettings(settings59);
        org.elasticsearch.index.IndexSettings indexSettings61 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData45, settings50, strPredicate55, indexScopedSettings56);
        org.elasticsearch.index.IndexSettings indexSettings62 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData35, settings41, strPredicate44, indexScopedSettings56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData63);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings65.archiveUnknownOrBrokenSettings(settings68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap72 = settings68.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate73 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean76 = indexScopedSettings74.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings78 = indexScopedSettings74.archiveUnknownOrBrokenSettings(settings77);
        org.elasticsearch.index.IndexSettings indexSettings79 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData63, settings68, strPredicate73, indexScopedSettings74);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings56.applySettings(settings68);
        org.elasticsearch.common.settings.Settings settings82 = settings68.getByPrefix("");
        indexScopedSettings28.validate(settings68);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap85 = settings68.getAsGroups(true);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(indexScopedSettings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strMap85);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.Version version12 = indexSettings2.version;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.creation_date_string", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        org.elasticsearch.common.settings.Settings settings25 = builder23.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData27.getSettings();
        java.lang.String[] strArray39 = settings37.getAsArray("hi!");
        java.lang.String[] strArray40 = settings25.getAsArray("index.data_path", strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder14.putArray("hi!", strArray40);
        org.elasticsearch.common.settings.Settings settings42 = builder14.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings45 = new org.elasticsearch.index.IndexSettings(indexMetaData43, settings44);
        boolean boolean46 = indexSettings45.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings45.settings = settings47;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state55 = indexMetaData54.getState();
        java.util.Set<java.lang.String> strSet57 = null; // flaky: indexMetaData54.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings49, indexMetaData54);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting59 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer60 = null;
        java.util.function.Consumer<java.lang.Boolean> booleanConsumer61 = null;
        indexScopedSettings58.addSettingsUpdateConsumer(booleanSetting59, booleanConsumer60, booleanConsumer61);
        java.util.function.Predicate<java.lang.String> strPredicate63 = indexScopedSettings58.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings64 = settings42.filter(strPredicate63);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + state55 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state55.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(booleanSetting59);
        org.junit.Assert.assertNotNull(strPredicate63);
        org.junit.Assert.assertNotNull(settings64);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        boolean boolean10 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.Version version11 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = new org.elasticsearch.common.settings.IndexScopedSettings(settings19, indexScopedSettings20, indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig36 = indexSettings30.mergePolicyConfig;
        int int37 = indexSettings30.getMaxRescoreWindow();
        int int38 = indexSettings30.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate39 = indexSettings30.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData40);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings46.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData50);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap59 = settings55.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate60 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings61.archiveUnknownOrBrokenSettings(settings64);
        org.elasticsearch.index.IndexSettings indexSettings66 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData50, settings55, strPredicate60, indexScopedSettings61);
        org.elasticsearch.index.IndexSettings indexSettings67 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData40, settings46, strPredicate49, indexScopedSettings61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData68);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean72 = indexScopedSettings70.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings70.archiveUnknownOrBrokenSettings(settings73);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap77 = settings73.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate78 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean81 = indexScopedSettings79.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings79.archiveUnknownOrBrokenSettings(settings82);
        org.elasticsearch.index.IndexSettings indexSettings84 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData68, settings73, strPredicate78, indexScopedSettings79);
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings61.applySettings(settings73);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19, strPredicate39, indexScopedSettings61);
        indexSettings86.setTTLPurgeDisabled(true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(strPredicate39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings85);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder26.put("hi!", (int) (short) 100);
        java.lang.String str38 = builder26.get("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder41 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder41.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder42.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder42.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder42.putNull("");
        java.lang.String[] strArray71 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder42.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList72);
        org.elasticsearch.common.settings.Settings.Builder builder75 = builder26.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList72);
        java.util.Dictionary<java.lang.Object, java.lang.Object> objDictionary76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder77 = builder75.put(objDictionary76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings settings11 = builder10.build();
        java.nio.file.Path path12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.loadFromPath(path12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.creationDate((long) 10000);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.primaryTerm((int) (byte) 10, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        boolean boolean29 = indexMetaData0.isSameUUID("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData30.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings43.archiveUnknownOrBrokenSettings(settings46);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap50 = settings46.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate51 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        org.elasticsearch.index.IndexSettings indexSettings57 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData41, settings46, strPredicate51, indexScopedSettings52);
        org.elasticsearch.index.IndexSettings indexSettings58 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings36, strPredicate40, indexScopedSettings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings60);
        java.util.function.Predicate<java.lang.String> strPredicate62 = indexSettings61.indexNameMatcher;
        org.elasticsearch.common.settings.Settings settings63 = settings36.filter(strPredicate62);
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings63);
        boolean boolean65 = indexSettings64.queryStringAllowLeadingWildcard;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strPredicate62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        int int12 = indexSettings8.maxRescoreWindow;
        java.lang.String str13 = indexSettings8.getUUID();
        org.elasticsearch.common.settings.Settings settings14 = indexSettings8.nodeSettings;
        org.elasticsearch.common.settings.Settings settings15 = indexSettings8.nodeSettings;
        java.util.function.Predicate<java.lang.String> strPredicate16 = org.elasticsearch.common.settings.IndexScopedSettings.INDEX_SETTINGS_KEY_PREDICATE;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings20);
        boolean boolean22 = indexSettings21.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings21.settings = settings23;
        org.elasticsearch.common.settings.Settings settings26 = settings23.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap37 = settings33.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings33, strPredicate38, indexScopedSettings39);
        org.elasticsearch.index.IndexSettings indexSettings45 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate27, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        java.util.function.Predicate<java.lang.String> strPredicate49 = indexSettings48.indexNameMatcher;
        int int50 = indexSettings48.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig51 = indexSettings48.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings48.scopedSettings;
        boolean boolean54 = indexScopedSettings52.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting55 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting56 = org.elasticsearch.index.IndexSettings.INDEX_TTL_DISABLE_PURGE_SETTING;
        java.util.function.BiConsumer<java.lang.Boolean, java.lang.Boolean> booleanBiConsumer57 = null;
        indexScopedSettings52.addSettingsUpdateConsumer(booleanSetting55, booleanSetting56, booleanBiConsumer57);
        java.lang.Boolean boolean59 = indexScopedSettings39.get(booleanSetting55);
        org.elasticsearch.index.IndexSettings indexSettings60 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15, strPredicate16, indexScopedSettings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strPredicate16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strPredicate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(booleanSetting55);
        org.junit.Assert.assertNotNull(booleanSetting56);
        org.junit.Assert.assertEquals("'" + boolean59 + "' != '" + true + "'", boolean59, true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(discoveryNodeFilters62);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings settings10 = builder9.build();
        org.elasticsearch.common.settings.Settings settings12 = settings10.getAsSettings("primary_terms");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings12);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        indexSettings2.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        indexSettings2.maxRescoreWindow = (byte) 10;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.creation_date_string");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.creation_date_string]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.Settings settings7 = settings4.getAsSettings("");
        java.lang.String str9 = settings7.toDelimitedString('#');
        java.lang.String str12 = settings7.get("primary_terms", "index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        int int19 = indexSettings15.maxRescoreWindow;
        java.lang.String str20 = indexSettings15.getUUID();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting22 = indexSettings15.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings23 = indexSettings15.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData24.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData35);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings37.archiveUnknownOrBrokenSettings(settings40);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap44 = settings40.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate45 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings46.archiveUnknownOrBrokenSettings(settings49);
        org.elasticsearch.index.IndexSettings indexSettings51 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData35, settings40, strPredicate45, indexScopedSettings46);
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData24, settings30, strPredicate34, indexScopedSettings46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings55 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData53);
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap58 = settings57.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings63 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean65 = indexScopedSettings63.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings67);
        boolean boolean69 = indexSettings68.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings68.settings = settings70;
        org.elasticsearch.common.settings.Settings settings73 = settings70.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings63.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.index.IndexSettings indexSettings75 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData53, settings74);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings46, indexMetaData53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.common.settings.Settings settings80 = indexMetaData78.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = new org.elasticsearch.common.settings.IndexScopedSettings(settings7, indexScopedSettings77, indexMetaData78);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting83 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_SHARED_FILESYSTEM_SETTING;
        java.lang.Boolean boolean84 = indexScopedSettings82.get(booleanSetting83);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.number_of_shards" + "'", str12, "index.number_of_shards");
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(booleanSetting22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(indexScopedSettings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(booleanSetting83);
        org.junit.Assert.assertEquals("'" + boolean84 + "' != '" + false + "'", boolean84, false);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        boolean boolean7 = indexSettings3.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting8 = indexSettings3.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings3.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings3.refreshInterval;
        indexSettings3.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings3.logger;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings3.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate15 = indexScopedSettings14.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings16 = settings0.filter(strPredicate15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings0.getGroups("index.auto_expand_replicas");
        java.lang.Boolean boolean21 = settings0.getAsBoolean("", (java.lang.Boolean) false);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28, strPredicate33, indexScopedSettings34);
        org.elasticsearch.index.Index index40 = indexMetaData23.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = new org.elasticsearch.common.settings.IndexScopedSettings(settings0, indexScopedSettings22, indexMetaData23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + false + "'", boolean21, false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNull(index40);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting11 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        int int12 = indexSettings2.getMaxResultWindow();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexSettings2.indexMetaData;
        java.lang.String str14 = indexMetaData13.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.putAlias(aliasMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(durabilitySetting11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.util.function.Predicate<java.lang.String> strPredicate14 = indexSettings2.indexNameMatcher;
        org.elasticsearch.common.logging.ESLogger eSLogger15 = indexSettings2.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNotNull(strPredicate14);
        org.junit.Assert.assertNotNull(eSLogger15);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = builder0.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder0.putNull("index.blocks.read");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder8 = builder0.put("index.blocks.read_only", (long) (short) 10, byteSizeUnit7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate26, indexScopedSettings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings38, indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean52 = indexMetaData48.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings47, indexMetaData48);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData48.excludeFilters();
        long long55 = indexMetaData48.getVersion();
        org.apache.lucene.util.Version version56 = indexMetaData48.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser57 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        org.elasticsearch.common.unit.TimeValue timeValue62 = indexSettings60.getRefreshInterval();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher63 = indexSettings60.getParseFieldMatcher();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = indexMetaData48.fromXContent(xContentParser57, parseFieldMatcher63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNull(version56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(parseFieldMatcher63);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData8.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version12 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.Version version13 = settings6.getAsVersion("", version12);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.index.Index index16 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.putAlias(aliasMetaData18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(index16);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.settings(settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (short) 100);
        long long12 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder9.putCustom("_all", custom16);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.loadFromSource("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.creation_date", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.auto_expand_replicas", true);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = builder20.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = builder20.internalMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings15);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings16.getQUERY_STRING_ANALYZE_WILDCARD();
        java.lang.String str18 = indexSettings16.getUUID();
        indexSettings16.setMaxRescoreWindow((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = indexSettings16.getIndexMetaData();
        org.elasticsearch.common.io.stream.StreamInput streamInput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = indexMetaData21.readFrom(streamInput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData21);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings2.settings;
        org.elasticsearch.Version version13 = indexSettings2.getversion();
        java.lang.String str14 = indexSettings2.getDefaultField();
        indexSettings2.TTLPurgeDisabled = true;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_all" + "'", str14, "_all");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap33 = settings32.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings32);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        org.elasticsearch.common.settings.Settings settings46 = settings43.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate47 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings53);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings53.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings59.archiveUnknownOrBrokenSettings(settings62);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData48, settings53, strPredicate58, indexScopedSettings59);
        org.elasticsearch.index.IndexSettings indexSettings65 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate47, indexScopedSettings59);
        java.lang.String str66 = indexScopedSettings59.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean77 = indexScopedSettings75.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings79 = indexScopedSettings75.archiveUnknownOrBrokenSettings(settings78);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData80.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings82 = new org.elasticsearch.common.settings.IndexScopedSettings(settings74, indexScopedSettings75, indexMetaData80);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings83 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings59, indexMetaData80);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff84 = indexMetaData0.diff(indexMetaData80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder85.putMapping(mappingMetaData86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff84);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.loadFromSource("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig12 = indexSettings10.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        int int19 = indexSettings15.maxRescoreWindow;
        java.lang.String str20 = indexSettings15.getUUID();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings15.getINDEX_GC_DELETES_SETTING();
        int int23 = indexSettings15.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = indexSettings15.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = indexSettings15.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexSettings15.indexMetaData;
        boolean boolean27 = indexSettings10.updateIndexMetaData(indexMetaData26);
        boolean boolean28 = indexSettings10.warmerEnabled;
        org.elasticsearch.Version version29 = indexSettings10.version;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder4.put("_all", version29);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder30.putNull("index.number_of_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder33 = builder30.replacePropertyPlaceholders();
        java.io.InputStream inputStream35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder36 = builder33.loadFromStream("index.auto_expand_replicas", inputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putCustom("index.shared_filesystem.recover_on_any_node", custom4);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder1.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData20.getState();
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData20.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = new org.elasticsearch.common.settings.IndexScopedSettings(settings13, indexScopedSettings15, indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings24, indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.creationDate(100L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings29.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate46, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings58, indexMetaData65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate31, indexScopedSettings58);
        org.elasticsearch.common.settings.Settings settings69 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings71);
        boolean boolean73 = indexSettings72.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings72.settings = settings74;
        boolean boolean76 = indexSettings72.queryStringLenient;
        boolean boolean77 = indexSettings72.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig78 = indexSettings72.mergePolicyConfig;
        int int79 = indexSettings72.getMaxRescoreWindow();
        int int80 = indexSettings72.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate81 = indexSettings72.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings82 = indexSettings72.settings;
        org.elasticsearch.index.IndexSettings indexSettings83 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings82);
        org.elasticsearch.common.settings.Settings.Builder builder84 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder84.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder88 = builder85.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder88.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings92 = builder91.build();
        org.elasticsearch.common.settings.Settings settings93 = builder91.build();
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings93);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10000 + "'", int79 == 10000);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10000 + "'", int80 == 10000);
        org.junit.Assert.assertNotNull(strPredicate81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(settings92);
        org.junit.Assert.assertNotNull(settings93);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putNull("");
        java.lang.String[] strArray58 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder24.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder11.putArray("state-", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder11.put("index.uuid", "archived.");
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        int int4 = indexSettings2.numberOfShards;
        boolean boolean5 = indexSettings2.isQueryStringLenient();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings4 = new org.elasticsearch.index.IndexSettings(indexMetaData2, settings3);
        boolean boolean5 = indexSettings4.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings4.settings = settings6;
        org.elasticsearch.common.settings.Settings settings9 = settings6.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings16.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate21 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings16, strPredicate21, indexScopedSettings22);
        org.elasticsearch.index.IndexSettings indexSettings28 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate10, indexScopedSettings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff32 = indexMetaData0.readDiffFrom(streamInput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        int int16 = indexSettings15.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings17 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Settings settings19 = settings17.getAsSettings("true");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings19);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        long long8 = indexSettings2.gcDeletesInMillis;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig9 = indexSettings2.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertNotNull(mergePolicyConfig9);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        boolean boolean22 = indexMetaData18.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate40 = indexScopedSettings37.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings42);
        boolean boolean44 = indexSettings43.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings43.settings = settings45;
        boolean boolean47 = indexSettings43.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting48 = indexSettings43.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = indexSettings43.scopedSettings;
        java.lang.String str50 = indexScopedSettings49.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings51 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData18, settings33, strPredicate40, indexScopedSettings49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        boolean boolean58 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings57.settings = settings59;
        org.elasticsearch.common.settings.Settings settings62 = settings59.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings62);
        boolean boolean65 = indexScopedSettings52.isPrivateSetting("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate66 = indexScopedSettings52.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        boolean boolean73 = indexSettings69.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting74 = indexSettings69.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings75 = indexSettings69.scopedSettings;
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33, strPredicate66, indexScopedSettings75);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings78 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings79 = new org.elasticsearch.index.IndexSettings(indexMetaData77, settings78);
        boolean boolean80 = indexSettings79.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings79.settings = settings81;
        boolean boolean83 = indexSettings79.queryStringLenient;
        boolean boolean84 = indexSettings79.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig85 = indexSettings79.mergePolicyConfig;
        int int86 = indexSettings79.getMaxRescoreWindow();
        int int87 = indexSettings79.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate88 = indexSettings79.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings89 = settings33.filter(strPredicate88);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap91 = settings89.getAsGroups(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(booleanSetting48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strPredicate66);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(booleanSetting74);
        org.junit.Assert.assertNotNull(indexScopedSettings75);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10000 + "'", int86 == 10000);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10000 + "'", int87 == 10000);
        org.junit.Assert.assertNotNull(strPredicate88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(strMap91);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate26, indexScopedSettings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings38, indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean52 = indexMetaData48.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings47, indexMetaData48);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings10.getGroups("index.blocks.read", false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings10.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.removeAlias("index.version.upgraded");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.putAlias(aliasMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.internalMap();
        java.lang.String str14 = builder10.get("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = builder15.put("index.number_of_shards", "index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder20 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder21.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder24.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder27.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = builder30.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder30.put("index.shared_filesystem.recover_on_any_node", (int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings37);
        boolean boolean39 = indexSettings38.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings38.settings = settings40;
        boolean boolean42 = indexSettings38.queryStringLenient;
        boolean boolean43 = indexSettings38.TTLPurgeDisabled;
        long long44 = indexSettings38.getGcDeletesInMillis();
        boolean boolean45 = indexSettings38.TTLPurgeDisabled;
        long long46 = indexSettings38.gcDeletesInMillis;
        boolean boolean47 = indexSettings38.isQueryStringAllowLeadingWildcard();
        boolean boolean48 = indexSettings38.getdefaultAllowUnmappedFields();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting49 = indexSettings38.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.Version version50 = indexSettings38.getversion();
        org.elasticsearch.common.settings.Settings.Builder builder51 = builder30.put("index.creation_date_string", version50);
        org.elasticsearch.common.settings.Settings.Builder builder52 = builder18.put("index.version.created", version50);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 60000L + "'", long44 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 60000L + "'", long46 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(timeValueSetting49);
        org.junit.Assert.assertNotNull(version50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.translog.Translog.Durability durability4 = null;
        indexSettings2.setdurability(durability4);
        int int6 = indexSettings2.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings7 = indexSettings2.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean4 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = indexScopedSettings0.getDEFAULT_SCOPED_SETTINGS();
        java.lang.Class<?> wildcardClass13 = indexScopedSettings12.getClass();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings4);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap7 = settings4.getAsGroups();
        org.elasticsearch.common.settings.Settings settings9 = settings4.getAsSettings("");
        java.lang.Boolean boolean12 = settings4.getAsBoolean("index.creation_date_string", (java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + boolean12 + "' != '" + true + "'", boolean12, true);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData20.getState();
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData20.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = new org.elasticsearch.common.settings.IndexScopedSettings(settings13, indexScopedSettings15, indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = new org.elasticsearch.common.settings.IndexScopedSettings(settings8, indexScopedSettings24, indexMetaData25);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder35.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = builder38.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder38.put("index.shared_filesystem.recover_on_any_node", (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings27.validate(builder38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData1.getState();
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData1.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version5 = indexMetaData1.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        int int15 = indexSettings11.maxRescoreWindow;
        java.lang.String str16 = indexSettings11.getUUID();
        org.elasticsearch.common.settings.Settings settings17 = indexSettings11.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = indexSettings11.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings11.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder8.settings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getAsGroups();
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.");
        java.lang.String[] strArray25 = settings19.getAsArray("index.uuid");
        java.lang.Boolean boolean28 = settings19.getAsBoolean("index.creation_date_string", (java.lang.Boolean) true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(booleanSetting18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + boolean28 + "' != '" + true + "'", boolean28, true);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.logging.ESLogger eSLogger10 = indexSettings2.logger;
        indexSettings2.setTTLPurgeDisabled(false);
        boolean boolean13 = indexSettings2.isShadowReplicaIndex;
        java.lang.String str14 = indexSettings2.getNodeName();
        boolean boolean15 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(eSLogger10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder18.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder21.settings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder18.settings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings28);
        int int35 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput36 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.loadFromStream("index.blocks.metadata", inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        org.elasticsearch.common.settings.Settings settings17 = settings14.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings24.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings30 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean32 = indexScopedSettings30.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings30.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData19, settings24, strPredicate29, indexScopedSettings30);
        org.elasticsearch.index.IndexSettings indexSettings36 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData8, settings14, strPredicate18, indexScopedSettings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings40 = new org.elasticsearch.index.IndexSettings(indexMetaData38, settings39);
        boolean boolean41 = indexSettings40.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings40.settings = settings42;
        boolean boolean44 = indexSettings40.queryStringLenient;
        boolean boolean45 = indexSettings40.TTLPurgeDisabled;
        boolean boolean46 = indexSettings40.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version47 = indexSettings40.version;
        org.elasticsearch.Version version48 = settings14.getAsVersion("archived.", version47);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder49 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings51);
        boolean boolean53 = indexSettings52.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings52.settings = settings54;
        org.elasticsearch.common.settings.Settings settings57 = settings54.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params59 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = settings57.toXContent(xContentBuilder58, params59);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = settings14.toXContent(xContentBuilder49, params59);
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.ByteSizeValue byteSizeValue65 = settings14.getAsMemory("index.shadow_replicas", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse setting [index.shadow_replicas] with value [index.version.created] as a size in bytes: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexScopedSettings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(version47);
        org.junit.Assert.assertNotNull(version48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(params59);
        org.junit.Assert.assertNull(xContentBuilder60);
        org.junit.Assert.assertNull(xContentBuilder61);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder17.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder17.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder31 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder31.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder38 = builder32.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder32.putNull("");
        java.lang.String[] strArray61 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder32.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList62);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder27.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList62);
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder12.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList62);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder12.putNull("index.blocks.metadata");
        org.elasticsearch.common.settings.Settings.Builder builder69 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder69.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder73 = builder70.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder73.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap80 = builder79.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder68.put(strMap80);
        java.util.List<java.lang.String> strList83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.putArray("10.0", strList83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting3 = indexSettings2.getALLOW_UNMAPPED();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings4 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean6 = indexScopedSettings4.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        boolean boolean10 = indexSettings9.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings9.settings = settings11;
        org.elasticsearch.common.settings.Settings settings14 = settings11.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings4.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap29 = settings27.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings36.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData31, settings36, strPredicate41, indexScopedSettings42);
        org.elasticsearch.index.IndexSettings indexSettings48 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings27, strPredicate30, indexScopedSettings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = new org.elasticsearch.common.settings.IndexScopedSettings(settings19, indexScopedSettings42, indexMetaData49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = indexMetaData52.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        boolean boolean56 = indexMetaData52.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = new org.elasticsearch.common.settings.IndexScopedSettings(settings14, indexScopedSettings51, indexMetaData52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        java.lang.String str62 = indexSettings60.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting63 = indexSettings60.getDEFAULT_FIELD_SETTING();
        indexSettings60.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings66 = indexSettings60.nodeSettings;
        org.elasticsearch.index.IndexSettings indexSettings67 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings66);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings69);
        boolean boolean71 = indexSettings70.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings70.settings = settings72;
        boolean boolean74 = indexSettings70.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = indexSettings70.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings70.TTLPurgeDisabled = true;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings79 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings80 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData78);
        org.elasticsearch.common.settings.Settings settings82 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap83 = settings82.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData78, settings82);
        int int85 = indexSettings84.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue86 = indexSettings84.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting87 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean88 = indexSettings84.getValue(booleanSetting87);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue89 = indexSettings84.flushThresholdSize;
        indexSettings70.flushThresholdSize = byteSizeValue89;
        indexSettings67.setTranslogFlushThresholdSize(byteSizeValue89);
        indexSettings2.flushThresholdSize = byteSizeValue89;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(booleanSetting3);
        org.junit.Assert.assertNotNull(indexScopedSettings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSetting63);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(booleanSetting75);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue86);
        org.junit.Assert.assertNotNull(booleanSetting87);
        org.junit.Assert.assertEquals("'" + boolean88 + "' != '" + true + "'", boolean88, true);
        org.junit.Assert.assertNotNull(byteSizeValue89);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = indexSettings9.scopedSettings;
        boolean boolean11 = indexSettings9.getqueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate26, indexScopedSettings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings38, indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean52 = indexMetaData48.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings47, indexMetaData48);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap54 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData48.getCustoms();
        org.elasticsearch.common.xcontent.XContentParser xContentParser57 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData58);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean62 = indexScopedSettings60.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings60.archiveUnknownOrBrokenSettings(settings63);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap67 = settings63.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings69.archiveUnknownOrBrokenSettings(settings72);
        org.elasticsearch.index.IndexSettings indexSettings74 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData58, settings63, strPredicate68, indexScopedSettings69);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = null; // flaky: indexSettings74.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean76 = false; // flaky: indexSettings74.isShadowReplicaIndex();
        int int77 = 0; // flaky: indexSettings74.maxRescoreWindow;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher78 = null; // flaky: indexSettings74.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData79 = indexMetaData48.fromXContent(xContentParser57, parseFieldMatcher78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10000 + "'", int77 == 10000);
// flaky:         org.junit.Assert.assertNotNull(parseFieldMatcher78);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.state(state6);
        org.elasticsearch.common.settings.Settings.Builder builder8 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.settings(builder8);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder8.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder12.put("index.creation_date_string", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder15.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder18 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder18.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder22 = builder19.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder25 = builder19.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder28 = builder19.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder28.normalizePrefix("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        boolean boolean37 = indexSettings36.isQueryStringLenient();
        java.lang.String str38 = indexSettings36.getNodeName();
        java.lang.Class<?> wildcardClass39 = indexSettings36.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder40 = builder28.put("hi!", (java.lang.Class) wildcardClass39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder15.put("index.blocks.metadata", (java.lang.Class) wildcardClass39);
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder0.put("index.version.minimum_compatible", (java.lang.Class) wildcardClass39);
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder46 = builder0.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", (long) 0, byteSizeUnit45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str14 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean16 = indexSettings2.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings17 = indexScopedSettings13.archiveUnknownOrBrokenSettings(settings16);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings17.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData11, settings17, strPredicate20, indexScopedSettings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        boolean boolean45 = indexSettings41.queryStringLenient;
        boolean boolean46 = indexSettings41.TTLPurgeDisabled;
        java.lang.String str47 = indexSettings41.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue48 = indexSettings41.syncInterval;
// flaky:         indexSettings38.setRefreshInterval(timeValue48);
        indexSettings2.refreshInterval = timeValue48;
        java.util.function.Predicate<java.lang.String> strPredicate51 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting52 = indexSettings2.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        java.util.function.Predicate<java.lang.String> strPredicate53 = indexSettings2.getindexNameMatcher();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(strPredicate51);
        org.junit.Assert.assertNotNull(booleanSetting52);
        org.junit.Assert.assertNotNull(strPredicate53);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        int int14 = indexSettings10.maxRescoreWindow;
        java.lang.String str15 = indexSettings10.getUUID();
        org.elasticsearch.common.settings.Settings settings16 = indexSettings10.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings10.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings10.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder7.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder7.removeAlias("index.uuid");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.putAlias(aliasMetaData28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = settings14.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings14);
        int int17 = indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = indexSettings16.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean20 = indexSettings16.getValue(booleanSetting19);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = indexSettings16.flushThresholdSize;
        indexSettings2.flushThresholdSize = byteSizeValue21;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap31 = settings29.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData23.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        indexSettings2.indexMetaData = indexMetaData23;
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue38 = indexSettings2.getFlushThresholdSize();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(booleanSetting19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(byteSizeValue38);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        int int20 = indexSettings16.maxRescoreWindow;
        java.lang.String str21 = indexSettings16.getUUID();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings16.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting23 = indexSettings16.getINDEX_GC_DELETES_SETTING();
        int int24 = indexSettings16.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings26);
        boolean boolean28 = indexSettings27.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings27.settings = settings29;
        int int31 = indexSettings27.maxRescoreWindow;
        boolean boolean32 = indexSettings27.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = indexSettings27.getFlushThresholdSize();
        indexSettings16.setTranslogFlushThresholdSize(byteSizeValue33);
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue33);
        java.lang.String str36 = indexSettings2.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy37 = indexSettings2.getMergePolicy();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = indexSettings2.getIndexMetaData();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting39 = indexSettings2.getMAX_RESCORE_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValueSetting23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteSizeValue33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "_na_" + "'", str36, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(intSetting39);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings86 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean88 = indexScopedSettings86.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings90 = indexScopedSettings86.archiveUnknownOrBrokenSettings(settings89);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap93 = settings89.getGroups("index.creation_date_string", false);
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings89);
        java.lang.Class<?> wildcardClass95 = indexMetaData40.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(indexScopedSettings86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertNotNull(settings90);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        boolean boolean29 = indexMetaData0.isSameUUID("");
        org.elasticsearch.index.Index index30 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap31 = indexMetaData0.getActiveAllocationIds();
        int int32 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version33 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(index30);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(version33);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        boolean boolean5 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig6 = indexSettings2.mergePolicyConfig;
        indexSettings2.gcDeletesInMillis = (byte) 100;
        indexSettings2.warmerEnabled = true;
        org.elasticsearch.common.settings.Settings settings11 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings20.toXContent(xContentBuilder21, params22);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData36);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings41.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        org.elasticsearch.index.IndexSettings indexSettings52 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData36, settings41, strPredicate46, indexScopedSettings47);
        org.elasticsearch.index.IndexSettings indexSettings53 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData25, settings31, strPredicate35, indexScopedSettings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        boolean boolean58 = indexSettings57.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings57.settings = settings59;
        boolean boolean61 = indexSettings57.queryStringLenient;
        boolean boolean62 = indexSettings57.TTLPurgeDisabled;
        boolean boolean63 = indexSettings57.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version64 = indexSettings57.version;
        org.elasticsearch.Version version65 = settings31.getAsVersion("archived.", version64);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder66 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder75 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params76 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = settings74.toXContent(xContentBuilder75, params76);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = settings31.toXContent(xContentBuilder66, params76);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = settings20.toXContent(xContentBuilder24, params76);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = settings11.toXContent(xContentBuilder12, params76);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig6);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNull(xContentBuilder23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(version64);
        org.junit.Assert.assertNotNull(version65);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(params76);
        org.junit.Assert.assertNull(xContentBuilder77);
        org.junit.Assert.assertNull(xContentBuilder78);
        org.junit.Assert.assertNull(xContentBuilder79);
        org.junit.Assert.assertNull(xContentBuilder80);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        byte byte10 = state9.id();
        byte byte11 = state9.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.state(state9);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.putAlias(builder13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 0 + "'", byte10 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.created_string");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.created_string]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", (int) (short) -1);
        java.lang.String str19 = builder14.remove("index.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        java.lang.String str12 = indexSettings2.customDataPath();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig13 = indexSettings2.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig13);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isTTLPurgeDisabled();
        java.lang.String str4 = indexSettings2.getDefaultField();
        boolean boolean5 = indexSettings2.getqueryStringLenient();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_all" + "'", str4, "_all");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        java.lang.String str12 = indexSettings2.customDataPath();
        boolean boolean13 = indexSettings2.isShadowReplicaIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData29.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = new org.elasticsearch.common.settings.IndexScopedSettings(settings23, indexScopedSettings24, indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData32, settings33);
        boolean boolean35 = indexSettings34.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings34.settings = settings36;
        boolean boolean38 = indexSettings34.queryStringLenient;
        boolean boolean39 = indexSettings34.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig40 = indexSettings34.mergePolicyConfig;
        int int41 = indexSettings34.getMaxRescoreWindow();
        int int42 = indexSettings34.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexSettings34.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        org.elasticsearch.common.settings.Settings settings53 = settings50.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings57 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean59 = indexScopedSettings57.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings61 = indexScopedSettings57.archiveUnknownOrBrokenSettings(settings60);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap64 = settings60.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings66 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean68 = indexScopedSettings66.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings70 = indexScopedSettings66.archiveUnknownOrBrokenSettings(settings69);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings60, strPredicate65, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings72 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings50, strPredicate54, indexScopedSettings66);
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings23, strPredicate43, indexScopedSettings66);
        org.elasticsearch.common.logging.ESLogger eSLogger74 = indexSettings73.logger;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting75 = indexSettings73.getQUERY_STRING_ANALYZE_WILDCARD();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(indexScopedSettings57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexScopedSettings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(eSLogger74);
        org.junit.Assert.assertNotNull(booleanSetting75);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.refreshInterval;
        java.lang.String str10 = indexSettings2.defaultField;
        indexSettings2.setMaxRescoreWindow((int) (byte) 0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = indexSettings2.scopedSettings;
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings2.globalCheckpointInterval;
        java.lang.String str15 = indexSettings2.defaultField;
        boolean boolean16 = indexSettings2.isWarmerEnabled();
        indexSettings2.maxResultWindow = (short) 10;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_all" + "'", str10, "_all");
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_all" + "'", str15, "_all");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData4.getState();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData4.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version8 = indexMetaData4.getUpgradedVersion();
        org.apache.lucene.util.Version version9 = indexMetaData4.getMinimumCompatibleVersion();
        long long10 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.readDiffFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = indexSettings2.scopedSettings;
        java.lang.String str9 = indexScopedSettings8.nodeName();
        org.elasticsearch.common.settings.Setting.Property property10 = indexScopedSettings8.getScope();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + property10 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property10.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = builder7.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.putNull("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        long long15 = indexMetaData12.getCreationDate();
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder10.put("index.creation_date_string", version16);
        java.nio.file.Path path18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder10.loadFromPath(path18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.creation_date_string", (double) 60000L);
        java.io.InputStream inputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.loadFromStream("index.uuid", inputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for id [100]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.removeAlias("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.state(state13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData15.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.Settings settings24 = settings21.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings37.archiveUnknownOrBrokenSettings(settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings31, strPredicate36, indexScopedSettings37);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings21, strPredicate25, indexScopedSettings37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings45);
        boolean boolean47 = indexSettings46.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings46.settings = settings48;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        java.util.Set<java.lang.String> strSet58 = null; // flaky: indexMetaData55.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = new org.elasticsearch.common.settings.IndexScopedSettings(settings48, indexScopedSettings50, indexMetaData55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean64 = indexScopedSettings62.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings62.archiveUnknownOrBrokenSettings(settings65);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings66.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData70);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings72 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean74 = indexScopedSettings72.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings76 = indexScopedSettings72.archiveUnknownOrBrokenSettings(settings75);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap79 = settings75.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate80 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings81 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean83 = indexScopedSettings81.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings85 = indexScopedSettings81.archiveUnknownOrBrokenSettings(settings84);
        org.elasticsearch.index.IndexSettings indexSettings86 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData70, settings75, strPredicate80, indexScopedSettings81);
        org.elasticsearch.index.IndexSettings indexSettings87 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData60, settings66, strPredicate69, indexScopedSettings81);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue89 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue90 = settings66.getAsBytesSize("index.creation_date_string", byteSizeValue89);
        org.elasticsearch.common.settings.Settings settings91 = indexScopedSettings59.applySettings(settings66);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap94 = settings91.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings95 = new org.elasticsearch.index.IndexSettings(indexMetaData15, settings91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder14.settings(settings91);
        java.util.Set<java.lang.String> strSet97 = settings91.names();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = builder9.putActiveAllocationIds((int) ' ', strSet97);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(indexScopedSettings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(indexScopedSettings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertNull(byteSizeValue90);
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(strMap94);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        indexSettings2.setwarmerEnabled(true);
        boolean boolean10 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings14.archiveUnknownOrBrokenSettings(settings17);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap20 = settings18.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings21 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData22.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData22.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData12.diff(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings41 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings40);
        boolean boolean42 = indexSettings41.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings41.settings = settings43;
        int int45 = indexSettings41.maxRescoreWindow;
        java.lang.String str46 = indexSettings41.getUUID();
        org.elasticsearch.common.settings.Settings settings47 = indexSettings41.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting48 = indexSettings41.getINDEX_GC_DELETES_SETTING();
        int int49 = indexSettings41.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = indexSettings41.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings53 = new org.elasticsearch.index.IndexSettings(indexMetaData51, settings52);
        boolean boolean54 = indexSettings53.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings53.settings = settings55;
        org.elasticsearch.common.settings.Settings settings58 = settings55.getAsSettings("");
        java.lang.String str60 = settings58.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder69 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder69.replacePropertyPlaceholders();
        boolean boolean72 = indexScopedSettings50.updateDynamicSettings(settings58, builder65, builder70, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder73 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder73.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder74.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder80 = builder74.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder83 = builder74.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData85 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state86 = indexMetaData85.getState();
        java.util.Set<java.lang.String> strSet88 = null; // flaky: indexMetaData85.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version89 = indexMetaData85.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder83.put("index.version.upgraded_string", version89);
        boolean boolean92 = indexScopedSettings11.updateSettings(settings37, builder70, builder90, "index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder70.normalizePrefix("index.number_of_replicas");
        java.io.InputStream inputStream96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder97 = builder70.loadFromStream("index.blocks.metadata", inputStream96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10000 + "'", int45 == 10000);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "_na_" + "'", str46, "_na_");
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(timeValueSetting48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10000 + "'", int49 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(indexMetaData85);
        org.junit.Assert.assertTrue("'" + state86 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state86.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertNotNull(version89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        java.lang.String str12 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_REFRESH_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap22 = settings20.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData24.getState();
        java.util.Set<java.lang.String> strSet27 = null; // flaky: indexMetaData24.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff29 = indexMetaData14.diff(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        org.elasticsearch.common.settings.Settings settings37 = settings34.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData43.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings45 = new org.elasticsearch.common.settings.IndexScopedSettings(settings37, indexScopedSettings38, indexMetaData43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData46, settings47);
        boolean boolean49 = indexSettings48.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings48.settings = settings50;
        boolean boolean52 = indexSettings48.queryStringLenient;
        boolean boolean53 = indexSettings48.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig54 = indexSettings48.mergePolicyConfig;
        int int55 = indexSettings48.getMaxRescoreWindow();
        int int56 = indexSettings48.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate57 = indexSettings48.getindexNameMatcher();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state59 = indexMetaData58.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        boolean boolean63 = indexSettings62.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings62.settings = settings64;
        org.elasticsearch.common.settings.Settings settings67 = settings64.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate68 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData69);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings71 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean73 = indexScopedSettings71.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings71.archiveUnknownOrBrokenSettings(settings74);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap78 = settings74.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate79 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings80 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean82 = indexScopedSettings80.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings83 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings84 = indexScopedSettings80.archiveUnknownOrBrokenSettings(settings83);
        org.elasticsearch.index.IndexSettings indexSettings85 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData69, settings74, strPredicate79, indexScopedSettings80);
        org.elasticsearch.index.IndexSettings indexSettings86 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData58, settings64, strPredicate68, indexScopedSettings80);
        org.elasticsearch.index.IndexSettings indexSettings87 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings37, strPredicate57, indexScopedSettings80);
        org.elasticsearch.common.settings.Settings settings89 = settings37.getAsSettings("index.number_of_shards");
        indexSettings2.settings = settings89;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(indexMetaDataDiff29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10000 + "'", int55 == 10000);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10000 + "'", int56 == 10000);
        org.junit.Assert.assertNotNull(strPredicate57);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertTrue("'" + state59 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state59.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNotNull(indexScopedSettings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(indexScopedSettings80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertNotNull(settings89);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.putCustom("index.version.upgraded", custom7);
        int int9 = builder1.numberOfReplicas();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting10 = indexSettings2.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        java.lang.String str11 = indexSettings2.getNodeName();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValueSetting10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings8 = indexSettings2.scopedSettings;
        indexSettings2.maxRescoreWindow = ' ';
        boolean boolean11 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexScopedSettings8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(booleanSetting12);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = new org.elasticsearch.common.settings.IndexScopedSettings(settings3, indexScopedSettings26, indexMetaData33);
        boolean boolean37 = indexScopedSettings26.isPrivateSetting("primary_terms");
        org.elasticsearch.common.settings.Setting.Property property38 = indexScopedSettings26.getScope();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + property38 + "' != '" + org.elasticsearch.common.settings.Setting.Property.IndexScope + "'", property38.equals(org.elasticsearch.common.settings.Setting.Property.IndexScope));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        java.lang.String str6 = builder4.remove("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("index.version.upgraded", "index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder14 = builder9.put("index.number_of_replicas=0 index.number_of_shards=1 index.version.created=5000099 ", (long) (short) 1, byteSizeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder32.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings36 = builder35.build();
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings21.dryRun(settings36);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.elasticsearch.common.settings.Settings settings0 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings2 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings3 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings2);
        boolean boolean4 = indexSettings3.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings3.settings = settings5;
        boolean boolean7 = indexSettings3.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting8 = indexSettings3.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings9 = indexSettings3.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings3.refreshInterval;
        indexSettings3.setMaxRescoreWindow((int) 'a');
        org.elasticsearch.common.logging.ESLogger eSLogger13 = indexSettings3.logger;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = indexSettings3.scopedSettings;
        java.util.function.Predicate<java.lang.String> strPredicate15 = indexScopedSettings14.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.common.settings.Settings settings16 = settings0.filter(strPredicate15);
        org.elasticsearch.common.unit.SizeValue sizeValue18 = null;
        org.elasticsearch.common.unit.SizeValue sizeValue19 = settings0.getAsSize("index.creation_date_string", sizeValue18);
        org.junit.Assert.assertNotNull(settings0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(booleanSetting8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(eSLogger13);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertNotNull(strPredicate15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNull(sizeValue19);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder26.put("hi!", (int) (short) 100);
        java.lang.String str38 = builder26.get("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder26.replacePropertyPlaceholders();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings43.archiveUnknownOrBrokenSettings(settings46);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap49 = settings47.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData51.getState();
        java.util.Set<java.lang.String> strSet54 = null; // flaky: indexMetaData51.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap55 = indexMetaData51.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff56 = indexMetaData41.diff(indexMetaData51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData41);
        org.elasticsearch.Version version58 = indexMetaData41.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder26.put("hi!", version58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder61.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder62.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder62.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder70 = builder62.putNull("");
        java.lang.String[] strArray91 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList92 = new java.util.ArrayList<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList92, strArray91);
        org.elasticsearch.common.settings.Settings.Builder builder94 = builder62.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList92);
        java.lang.Class<?> wildcardClass95 = builder62.getClass();
        org.elasticsearch.common.settings.Settings.Builder builder96 = builder59.put("", (java.lang.Class) wildcardClass95);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(indexMetaDataDiff56);
        org.junit.Assert.assertNotNull(version58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData8.getState();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData8.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version12 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.Version version13 = settings6.getAsVersion("", version12);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.index.Index index16 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(index16);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = new org.elasticsearch.common.settings.IndexScopedSettings(settings3, indexScopedSettings26, indexMetaData33);
        long long36 = indexMetaData33.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        boolean boolean41 = indexMetaData37.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings46);
        boolean boolean48 = indexSettings47.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings47.settings = settings49;
        org.elasticsearch.common.settings.Settings settings52 = settings49.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings52);
        org.elasticsearch.common.settings.Settings settings55 = settings52.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate59 = indexScopedSettings56.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings62 = new org.elasticsearch.index.IndexSettings(indexMetaData60, settings61);
        boolean boolean63 = indexSettings62.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings62.settings = settings64;
        boolean boolean66 = indexSettings62.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting67 = indexSettings62.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = indexSettings62.scopedSettings;
        java.lang.String str69 = indexScopedSettings68.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings70 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings52, strPredicate59, indexScopedSettings68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData71 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings73 = new org.elasticsearch.index.IndexSettings(indexMetaData71, settings72);
        boolean boolean74 = indexSettings73.isQueryStringLenient();
        java.lang.String str75 = indexSettings73.getNodeName();
        boolean boolean76 = indexSettings73.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig77 = indexSettings73.mergePolicyConfig;
        indexSettings73.gcDeletesInMillis = (byte) 100;
        org.elasticsearch.common.unit.TimeValue timeValue80 = indexSettings73.getTranslogSyncInterval();
// flaky:         indexSettings70.setRefreshInterval(timeValue80);
        org.elasticsearch.common.settings.Settings settings82 = null; // flaky: indexSettings70.getNodeSettings();
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings82);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData84 = null; // flaky: indexSettings83.getIndexMetaData();
// flaky:         indexSettings83.setMaxRescoreWindow((int) (short) 1);
        org.elasticsearch.Version version87 = null; // flaky: indexSettings83.getIndexVersionCreated();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strPredicate59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(booleanSetting67);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexMetaData71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(mergePolicyConfig77);
        org.junit.Assert.assertNotNull(timeValue80);
// flaky:         org.junit.Assert.assertNotNull(settings82);
// flaky:         org.junit.Assert.assertNotNull(indexMetaData84);
// flaky:         org.junit.Assert.assertNotNull(version87);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        boolean boolean8 = indexSettings2.isWarmerEnabled();
        indexSettings2.setTTLPurgeDisabled(true);
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting12 = indexSettings2.getINDEX_CHECK_ON_STARTUP();
        int int13 = indexSettings2.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSetting12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        int int2 = builder1.numberOfShards();
        java.lang.String str3 = builder1.index();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "index.blocks.read" + "'", str3, "index.blocks.read");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str14 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability16 = null;
        indexSettings2.setTranslogDurability(durability16);
        org.elasticsearch.common.unit.TimeValue timeValue18 = indexSettings2.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertNotNull(timeValue18);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings2.settings;
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.getDEFAULT_GC_DELETES();
        boolean boolean14 = indexSettings2.warmerEnabled;
        org.elasticsearch.index.translog.Translog.Durability durability15 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings2.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + durability15 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability15.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue16);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
// flaky:         indexSettings27.maxRescoreWindow = 1;
        org.elasticsearch.common.settings.Settings settings30 = null; // flaky: indexSettings27.settings;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings31 = null; // flaky: indexSettings27.scopedSettings;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
// flaky:         org.junit.Assert.assertNotNull(settings30);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings31);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = builder10.mapping("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.numberOfShards((int) (short) 10);
        int int15 = builder14.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData9.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData9.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version13 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        long long15 = indexMetaData9.getCreationDate();
        indexSettings2.indexMetaData = indexMetaData9;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData23, settings24);
        boolean boolean26 = indexSettings25.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings25.settings = settings27;
        org.elasticsearch.common.settings.Settings settings30 = settings27.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings30);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = indexMetaData33.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings37 = new org.elasticsearch.index.IndexSettings(indexMetaData35, settings36);
        boolean boolean38 = indexSettings37.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings37.settings = settings39;
        org.elasticsearch.common.settings.Settings settings42 = settings39.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate43 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData44);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings46 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean48 = indexScopedSettings46.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings46.archiveUnknownOrBrokenSettings(settings49);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings49.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate54 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings59 = indexScopedSettings55.archiveUnknownOrBrokenSettings(settings58);
        org.elasticsearch.index.IndexSettings indexSettings60 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData44, settings49, strPredicate54, indexScopedSettings55);
        org.elasticsearch.index.IndexSettings indexSettings61 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39, strPredicate43, indexScopedSettings55);
        java.lang.String str63 = settings39.get("index.shadow_replicas");
        org.elasticsearch.common.unit.TimeValue timeValue65 = org.elasticsearch.index.IndexSettings.DEFAULT_REFRESH_INTERVAL;
        org.elasticsearch.common.unit.TimeValue timeValue66 = settings39.getAsTime("index.", timeValue65);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings69 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings70 = new org.elasticsearch.index.IndexSettings(indexMetaData68, settings69);
        boolean boolean71 = indexSettings70.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings70.settings = settings72;
        org.elasticsearch.common.settings.Settings settings75 = settings72.getAsSettings("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder76 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params77 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder78 = settings75.toXContent(xContentBuilder76, params77);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder79 = settings39.toXContent(xContentBuilder67, params77);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = settings30.toXContent(xContentBuilder32, params77);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder81 = settings18.toXContent(xContentBuilder19, params77);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData9, xContentBuilder17, params77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(indexScopedSettings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(timeValue66);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(params77);
        org.junit.Assert.assertNull(xContentBuilder78);
        org.junit.Assert.assertNull(xContentBuilder79);
        org.junit.Assert.assertNull(xContentBuilder80);
        org.junit.Assert.assertNull(xContentBuilder81);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        int int5 = indexSettings2.getMaxResultWindow();
        boolean boolean6 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        java.lang.String str9 = builder8.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.numberOfShards((int) (short) 1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = null;
        indexSettings2.flushThresholdSize = byteSizeValue8;
        boolean boolean10 = indexSettings2.warmerEnabled;
        indexSettings2.setMaxRescoreWindow(100);
        long long13 = indexSettings2.getGcDeletesInMillis();
        indexSettings2.setTTLPurgeDisabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        java.lang.String str6 = builder4.remove("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder4.put("index.version.upgraded", "index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder9.replacePropertyPlaceholders();
        java.lang.String str12 = builder9.get("index.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        indexSettings63.setwarmerEnabled(true);
        int int67 = indexSettings63.maxResultWindow;
        boolean boolean68 = indexSettings63.isQueryStringLenient();
        boolean boolean69 = indexSettings63.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.unit.TimeValue timeValue70 = indexSettings63.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher71 = indexSettings63.parseFieldMatcher;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(timeValue70);
        org.junit.Assert.assertNotNull(parseFieldMatcher71);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig10 = indexSettings2.getmergePolicyConfig();
        boolean boolean11 = indexSettings2.getqueryStringLenient();
        boolean boolean12 = indexSettings2.queryStringLenient;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(mergePolicyConfig10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder10 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder11.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder11.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder11.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder21 = builder20.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder21.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder25 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder25.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder26.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder34 = builder26.putNull("");
        java.lang.String[] strArray55 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        org.elasticsearch.common.settings.Settings.Builder builder58 = builder26.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList56);
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder21.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList56);
        org.elasticsearch.common.settings.Settings.Builder builder60 = builder8.putArray("index.blocks.read", (java.util.List<java.lang.String>) strList56);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap19 = settings15.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings25 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings24);
        org.elasticsearch.index.IndexSettings indexSettings26 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings15, strPredicate20, indexScopedSettings21);
        org.elasticsearch.index.IndexSettings indexSettings27 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6, strPredicate9, indexScopedSettings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        java.lang.String str36 = indexSettings30.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue37 = indexSettings30.syncInterval;
// flaky:         indexSettings27.setRefreshInterval(timeValue37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = null; // flaky: indexSettings27.getTranslogSyncInterval();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData40.getState();
        int int42 = indexMetaData40.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap43 = indexMetaData40.getMappings();
// flaky:         indexSettings27.indexMetaData = indexMetaData40;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap53 = settings51.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData55.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings59 = new org.elasticsearch.index.IndexSettings(indexMetaData57, settings58);
        boolean boolean60 = indexSettings59.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings59.settings = settings61;
        org.elasticsearch.common.settings.Settings settings64 = settings61.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate65 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData66);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings68 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean70 = indexScopedSettings68.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings72 = indexScopedSettings68.archiveUnknownOrBrokenSettings(settings71);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap75 = settings71.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate76 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings77 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean79 = indexScopedSettings77.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings80 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings81 = indexScopedSettings77.archiveUnknownOrBrokenSettings(settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData66, settings71, strPredicate76, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData55, settings61, strPredicate65, indexScopedSettings77);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings61);
        org.elasticsearch.index.IndexSettings indexSettings85 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings61);
        boolean boolean87 = indexSettings85.matchesIndexName("index.creation_date");
        int int88 = indexSettings85.numberOfShards;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeValue37);
// flaky:         org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(indexScopedSettings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(indexScopedSettings77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        int int21 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData19.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("_na_", true);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher40 = indexSettings39.parseFieldMatcher;
        boolean boolean41 = indexSettings39.isQueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(parseFieldMatcher40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap10 = settings9.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings9);
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings23 = settings20.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData25);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings27 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean29 = indexScopedSettings27.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings31 = indexScopedSettings27.archiveUnknownOrBrokenSettings(settings30);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap34 = settings30.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate35 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings36 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean38 = indexScopedSettings36.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings40 = indexScopedSettings36.archiveUnknownOrBrokenSettings(settings39);
        org.elasticsearch.index.IndexSettings indexSettings41 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData25, settings30, strPredicate35, indexScopedSettings36);
        org.elasticsearch.index.IndexSettings indexSettings42 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData14, settings20, strPredicate24, indexScopedSettings36);
        java.lang.String str43 = indexScopedSettings36.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings45);
        boolean boolean47 = indexSettings46.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings46.settings = settings48;
        org.elasticsearch.common.settings.Settings settings51 = settings48.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean54 = indexScopedSettings52.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings56 = indexScopedSettings52.archiveUnknownOrBrokenSettings(settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state58 = indexMetaData57.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = new org.elasticsearch.common.settings.IndexScopedSettings(settings51, indexScopedSettings52, indexMetaData57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = new org.elasticsearch.common.settings.IndexScopedSettings(settings12, indexScopedSettings36, indexMetaData57);
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = indexMetaData0.toXContent(xContentBuilder63, params64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(indexScopedSettings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(indexScopedSettings36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state58.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters62);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings2.settings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting13 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(durabilitySetting13);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.logging.ESLogger eSLogger10 = indexSettings2.logger;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig11 = indexSettings2.mergePolicyConfig;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting12 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(eSLogger10);
        org.junit.Assert.assertNotNull(mergePolicyConfig11);
        org.junit.Assert.assertNotNull(durabilitySetting12);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        int int16 = indexMetaData10.getTotalNumberOfShards();
        java.lang.String str17 = indexMetaData10.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData10.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.common.logging.ESLogger eSLogger5 = indexSettings2.getlogger();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(eSLogger5);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        boolean boolean40 = indexSettings39.isIndexUsingShadowReplicas();
        boolean boolean41 = indexSettings39.getwarmerEnabled();
        boolean boolean42 = indexSettings39.isOnSharedFilesystem();
        java.lang.String str43 = indexSettings39.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "_all" + "'", str43, "_all");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.shared_filesystem.recover_on_any_node", (float) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder4.loadFromSource("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig12 = indexSettings10.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        int int19 = indexSettings15.maxRescoreWindow;
        java.lang.String str20 = indexSettings15.getUUID();
        org.elasticsearch.common.settings.Settings settings21 = indexSettings15.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = indexSettings15.getINDEX_GC_DELETES_SETTING();
        int int23 = indexSettings15.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = indexSettings15.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig25 = indexSettings15.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexSettings15.indexMetaData;
        boolean boolean27 = indexSettings10.updateIndexMetaData(indexMetaData26);
        boolean boolean28 = indexSettings10.warmerEnabled;
        org.elasticsearch.Version version29 = indexSettings10.version;
        org.elasticsearch.common.settings.Settings.Builder builder30 = builder4.put("_all", version29);
        java.util.concurrent.TimeUnit timeUnit33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder34 = builder4.put("archived.", (long) (short) 0, timeUnit33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(timeValueSetting22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder7.putNull("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.put("index.version.upgraded_string", (float) (byte) 10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings13 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean15 = indexScopedSettings13.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings18 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean20 = indexScopedSettings18.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings22 = indexScopedSettings18.archiveUnknownOrBrokenSettings(settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings22.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData26);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings28 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean30 = indexScopedSettings28.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings28.archiveUnknownOrBrokenSettings(settings31);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings31.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate36 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings41 = indexScopedSettings37.archiveUnknownOrBrokenSettings(settings40);
        org.elasticsearch.index.IndexSettings indexSettings42 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData26, settings31, strPredicate36, indexScopedSettings37);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData16, settings22, strPredicate25, indexScopedSettings37);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue45 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue46 = settings22.getAsBytesSize("index.creation_date_string", byteSizeValue45);
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings13.dryRun(settings22);
        boolean boolean49 = indexScopedSettings13.isPrivateSetting("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings51);
        boolean boolean53 = indexSettings52.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings52.settings = settings54;
        boolean boolean56 = indexSettings52.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting57 = indexSettings52.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings58 = indexSettings52.nodeSettings;
        boolean boolean59 = indexSettings52.isQueryStringAllowLeadingWildcard();
        long long60 = indexSettings52.gcDeletesInMillis;
        org.elasticsearch.index.translog.Translog.Durability durability61 = indexSettings52.getTranslogDurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings62 = indexSettings52.scopedSettings;
        indexSettings52.setwarmerEnabled(true);
        org.elasticsearch.common.settings.Settings settings65 = indexSettings52.getNodeSettings();
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings13.applySettings(settings65);
        org.elasticsearch.common.settings.Settings.Builder builder67 = builder9.put(settings65);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexScopedSettings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexScopedSettings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexScopedSettings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(byteSizeValue46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(booleanSetting57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60000L + "'", long60 == 60000L);
        org.junit.Assert.assertTrue("'" + durability61 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability61.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        int int46 = indexSettings42.maxRescoreWindow;
        java.lang.String str47 = indexSettings42.getUUID();
        org.elasticsearch.common.settings.Settings settings48 = indexSettings42.nodeSettings;
        boolean boolean49 = indexSettings42.isOnSharedFilesystem();
        indexSettings42.setMaxRescoreWindow((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData52, settings53);
        boolean boolean55 = indexSettings54.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings54.settings = settings56;
        boolean boolean58 = indexSettings54.queryStringLenient;
        boolean boolean59 = indexSettings54.TTLPurgeDisabled;
        java.lang.String str60 = indexSettings54.customDataPath();
        indexSettings54.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability63 = indexSettings54.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings66 = new org.elasticsearch.index.IndexSettings(indexMetaData64, settings65);
        java.util.function.Predicate<java.lang.String> strPredicate67 = indexSettings66.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate68 = indexSettings66.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue69 = indexSettings66.flushThresholdSize;
        indexSettings54.flushThresholdSize = byteSizeValue69;
        indexSettings42.setTranslogFlushThresholdSize(byteSizeValue69);
        indexSettings39.flushThresholdSize = byteSizeValue69;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting73 = indexSettings39.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10000 + "'", int46 == 10000);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "_na_" + "'", str47, "_na_");
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + durability63 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability63.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strPredicate67);
        org.junit.Assert.assertNotNull(strPredicate68);
        org.junit.Assert.assertNotNull(byteSizeValue69);
        org.junit.Assert.assertNotNull(timeValueSetting73);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        java.nio.file.Path path1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromPath(path1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder10.put("index.shared_filesystem.recover_on_any_node", (int) '#');
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("");
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.loadFromStream("state-", inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        boolean boolean13 = indexScopedSettings0.hasDynamicSetting("index.blocks.read");
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData3.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        org.elasticsearch.common.settings.Settings settings12 = settings9.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean18 = indexScopedSettings16.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings20 = indexScopedSettings16.archiveUnknownOrBrokenSettings(settings19);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap23 = settings19.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate24 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        org.elasticsearch.index.IndexSettings indexSettings30 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData14, settings19, strPredicate24, indexScopedSettings25);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings9, strPredicate13, indexScopedSettings25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData3.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder38.settings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData34, settings45);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings45);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings45);
        org.elasticsearch.common.xcontent.XContentParser xContentParser53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings56 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap59 = settings58.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        org.elasticsearch.common.settings.Settings settings74 = settings71.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings75 = indexScopedSettings64.archiveUnknownOrBrokenSettings(settings74);
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData61, settings75);
        org.elasticsearch.index.IndexSettings indexSettings77 = new org.elasticsearch.index.IndexSettings(indexMetaData54, settings75);
        boolean boolean78 = indexSettings77.getqueryStringAllowLeadingWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting79 = indexSettings77.getALLOW_UNMAPPED();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue80 = indexSettings77.flushThresholdSize;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher81 = indexSettings77.getParseFieldMatcher();
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher82 = indexSettings77.parseFieldMatcher;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData83 = indexMetaData0.fromXContent(xContentParser53, parseFieldMatcher82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(booleanSetting79);
        org.junit.Assert.assertNotNull(byteSizeValue80);
        org.junit.Assert.assertNotNull(parseFieldMatcher81);
        org.junit.Assert.assertNotNull(parseFieldMatcher82);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting14 = indexSettings7.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings7.nodeSettings;
        indexSettings7.setMaxRescoreWindow(0);
        int int18 = indexSettings7.maxResultWindow;
        boolean boolean19 = settings3.equals((java.lang.Object) indexSettings7);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = indexSettings7.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting21 = indexSettings7.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(booleanSetting14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertNotNull(intSetting21);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int6 = builder5.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting14 = indexSettings7.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings15 = indexSettings7.nodeSettings;
        indexSettings7.setMaxRescoreWindow(0);
        int int18 = indexSettings7.maxResultWindow;
        boolean boolean19 = settings3.equals((java.lang.Object) indexSettings7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData21, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings23.settings = settings25;
        int int27 = indexSettings23.maxRescoreWindow;
        java.lang.String str28 = indexSettings23.getUUID();
        java.lang.String str29 = indexSettings23.getNodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData30.getState();
        java.util.Set<java.lang.String> strSet33 = null; // flaky: indexMetaData30.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version34 = indexMetaData30.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        long long36 = indexMetaData30.getCreationDate();
        indexSettings23.indexMetaData = indexMetaData30;
        org.elasticsearch.Version version38 = indexMetaData30.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData30.mappingOrDefault("hi!");
        org.elasticsearch.Version version41 = indexMetaData30.getCreationVersion();
        org.elasticsearch.Version version42 = settings3.getAsVersion("index.blocks.read_only", version41);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(booleanSetting14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_na_" + "'", str28, "_na_");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(version38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNotNull(version42);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.version((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = builder12.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder2.extendArray("index.creation_date_string", strArray26);
        java.util.concurrent.TimeUnit timeUnit30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder31 = builder2.put("index.shared_filesystem", (long) 'a', timeUnit30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        boolean boolean8 = indexSettings2.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexSettings2.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings13 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap16 = settings15.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings21 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean23 = indexScopedSettings21.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings26 = new org.elasticsearch.index.IndexSettings(indexMetaData24, settings25);
        boolean boolean27 = indexSettings26.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings26.settings = settings28;
        org.elasticsearch.common.settings.Settings settings31 = settings28.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings32 = indexScopedSettings21.archiveUnknownOrBrokenSettings(settings31);
        org.elasticsearch.index.IndexSettings indexSettings33 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings32);
        org.elasticsearch.index.IndexSettings indexSettings34 = new org.elasticsearch.index.IndexSettings(indexMetaData11, settings32);
        java.lang.Boolean boolean37 = settings32.getAsBoolean("index.version.created_string", (java.lang.Boolean) false);
        java.util.Set<java.lang.String> strSet38 = settings32.names();
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexScopedSettings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertEquals("'" + boolean37 + "' != '" + false + "'", boolean37, false);
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate26, indexScopedSettings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings38, indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean52 = indexMetaData48.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings47, indexMetaData48);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap54 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData48.getCustoms();
        long long57 = indexMetaData48.getVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData59);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap64 = settings63.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings65 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings63);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings74 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings73);
        boolean boolean75 = indexSettings74.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings74.settings = settings76;
        org.elasticsearch.common.settings.Settings settings79 = settings76.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings69.archiveUnknownOrBrokenSettings(settings79);
        org.elasticsearch.index.IndexSettings indexSettings81 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings80);
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData59, settings80);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder83 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params84 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = settings80.toXContent(xContentBuilder83, params84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData48, xContentBuilder58, params84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(params84);
        org.junit.Assert.assertNull(xContentBuilder85);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putMapping("hi!", "_all");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        boolean boolean8 = indexSettings2.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexSettings2.indexMetaData;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting11 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(booleanSetting11);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        org.elasticsearch.index.translog.Translog.Durability durability9 = indexSettings2.durability;
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.getSettings();
        boolean boolean11 = indexSettings2.queryStringAllowLeadingWildcard;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting12 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + durability9 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability9.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(intSetting12);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings63.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexSettings63.getIndexMetaData();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters67 = indexMetaData66.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertNull(discoveryNodeFilters67);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder1.settings(settings11);
        java.lang.String str17 = builder1.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.putMapping(mappingMetaData18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings8 = builder7.build();
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder7.put("index.blocks.write", true);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder7.put("index.data_path", (int) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder14.normalizePrefix("index.blocks.read_only");
        java.lang.String str18 = builder14.remove("true");
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.putNull("index.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.nodeName;
        indexSettings2.setwarmerEnabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean7 = indexScopedSettings5.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings9 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings8);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap12 = settings8.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate13 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings14 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean16 = indexScopedSettings14.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings18 = indexScopedSettings14.archiveUnknownOrBrokenSettings(settings17);
        org.elasticsearch.index.IndexSettings indexSettings19 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings8, strPredicate13, indexScopedSettings14);
        org.elasticsearch.index.Index index20 = indexMetaData3.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData21.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean25 = indexMetaData21.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings31 = new org.elasticsearch.index.IndexSettings(indexMetaData29, settings30);
        boolean boolean32 = indexSettings31.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings31.settings = settings33;
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings36);
        org.elasticsearch.common.settings.Settings settings39 = settings36.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings40 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean42 = indexScopedSettings40.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate43 = indexScopedSettings40.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings46 = new org.elasticsearch.index.IndexSettings(indexMetaData44, settings45);
        boolean boolean47 = indexSettings46.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings46.settings = settings48;
        boolean boolean50 = indexSettings46.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting51 = indexSettings46.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings52 = indexSettings46.scopedSettings;
        java.lang.String str53 = indexScopedSettings52.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings54 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings36, strPredicate43, indexScopedSettings52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean57 = indexScopedSettings55.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings60 = new org.elasticsearch.index.IndexSettings(indexMetaData58, settings59);
        boolean boolean61 = indexSettings60.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings60.settings = settings62;
        org.elasticsearch.common.settings.Settings settings65 = settings62.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings66 = indexScopedSettings55.archiveUnknownOrBrokenSettings(settings65);
        boolean boolean68 = indexScopedSettings55.isPrivateSetting("hi!");
        java.util.function.Predicate<java.lang.String> strPredicate69 = indexScopedSettings55.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData70 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData70, settings71);
        boolean boolean73 = indexSettings72.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings74 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings72.settings = settings74;
        boolean boolean76 = indexSettings72.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting77 = indexSettings72.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = indexSettings72.scopedSettings;
        org.elasticsearch.index.IndexSettings indexSettings79 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData3, settings36, strPredicate69, indexScopedSettings78);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings82 = new org.elasticsearch.index.IndexSettings(indexMetaData80, settings81);
        boolean boolean83 = indexSettings82.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings84 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings82.settings = settings84;
        boolean boolean86 = indexSettings82.queryStringLenient;
        boolean boolean87 = indexSettings82.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig88 = indexSettings82.mergePolicyConfig;
        int int89 = indexSettings82.getMaxRescoreWindow();
        int int90 = indexSettings82.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate91 = indexSettings82.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings92 = settings36.filter(strPredicate91);
        org.elasticsearch.index.IndexSettings indexSettings93 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(indexScopedSettings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNull(index20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(indexScopedSettings40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strPredicate43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(booleanSetting51);
        org.junit.Assert.assertNotNull(indexScopedSettings52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexScopedSettings55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strPredicate69);
        org.junit.Assert.assertNotNull(indexMetaData70);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(booleanSetting77);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(settings84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10000 + "'", int89 == 10000);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10000 + "'", int90 == 10000);
        org.junit.Assert.assertNotNull(strPredicate91);
        org.junit.Assert.assertNotNull(settings92);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        boolean boolean10 = indexSettings2.queryStringLenient;
        java.lang.String str11 = indexSettings2.getNodeName();
        org.elasticsearch.Version version12 = indexSettings2.getIndexVersionCreated();
        boolean boolean13 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig14 = indexSettings2.getmergePolicyConfig();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting15 = indexSettings2.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig14);
        org.junit.Assert.assertNotNull(timeValueSetting15);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.queryStringLenient;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig4 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings7 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings6);
        boolean boolean8 = indexSettings7.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings7.settings = settings9;
        int int11 = indexSettings7.maxRescoreWindow;
        java.lang.String str12 = indexSettings7.getUUID();
        org.elasticsearch.common.settings.Settings settings13 = indexSettings7.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting14 = indexSettings7.getINDEX_GC_DELETES_SETTING();
        int int15 = indexSettings7.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings16 = indexSettings7.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig17 = indexSettings7.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = indexSettings7.indexMetaData;
        boolean boolean19 = indexSettings2.updateIndexMetaData(indexMetaData18);
        indexSettings2.setwarmerEnabled(false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(timeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings16);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        boolean boolean10 = indexSettings2.queryStringLenient;
        boolean boolean11 = indexSettings2.getqueryStringAnalyzeWildcard();
        java.lang.String str12 = indexSettings2.getUUID();
        long long13 = indexSettings2.gcDeletesInMillis;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        boolean boolean1 = org.elasticsearch.common.settings.AbstractScopedSettings.isValidKey("index.creation_date");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap18 = settings17.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings34);
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings34);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings48 = indexScopedSettings37.archiveUnknownOrBrokenSettings(settings47);
        boolean boolean50 = indexScopedSettings37.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData51.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData51);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = new org.elasticsearch.common.settings.IndexScopedSettings(settings34, indexScopedSettings37, indexMetaData51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap60 = settings59.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings61 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        org.elasticsearch.common.settings.Settings.Builder builder75 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder76 = builder75.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder76.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings83 = builder82.build();
        org.elasticsearch.common.settings.Settings.Builder builder84 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder85 = builder84.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap86 = builder84.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder82.put(strMap86);
        boolean boolean89 = indexScopedSettings54.updateSettings(settings59, builder74, builder87, "state-");
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder74.putNull("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder12.settings(builder91);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder12.primaryTerm(97, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        int int9 = indexSettings2.maxResultWindow;
        boolean boolean10 = indexSettings2.getdefaultAllowUnmappedFields();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig11 = indexSettings2.mergeSchedulerConfig;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig11);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings.Builder builder2 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder3 = builder2.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder6 = builder3.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder3.put("primary_terms", "");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.settings(builder9);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder9.putNull("index.version.minimum_compatible");
        java.io.InputStream inputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder15 = builder9.loadFromStream("index.uuid", inputStream14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability11 = null;
        indexSettings2.durability = durability11;
        boolean boolean13 = indexSettings2.getqueryStringAllowLeadingWildcard();
        boolean boolean14 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = indexSettings2.getNumberOfReplicas();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(booleanSetting15);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.creationDate((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.primaryTerm((int) ' ', (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        java.lang.String str8 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting9 = indexSettings2.getDEFAULT_FIELD_SETTING();
        boolean boolean10 = indexSettings2.getisShadowReplicaIndex();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting11 = indexSettings2.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSetting9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(booleanSetting11);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        boolean boolean20 = false; // flaky: indexSettings16.queryStringAnalyzeWildcard;
        boolean boolean21 = false; // flaky: indexSettings16.getwarmerEnabled();
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig22 = null; // flaky: indexSettings16.getmergePolicyConfig();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting18);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertNotNull(mergePolicyConfig22);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        indexSettings15.warmerEnabled = false;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings15.indexMetaData;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean24 = indexScopedSettings22.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings26 = indexScopedSettings22.archiveUnknownOrBrokenSettings(settings25);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap28 = settings26.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData30);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap39 = settings35.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate40 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        org.elasticsearch.index.IndexSettings indexSettings46 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData30, settings35, strPredicate40, indexScopedSettings41);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26, strPredicate29, indexScopedSettings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings50 = new org.elasticsearch.index.IndexSettings(indexMetaData48, settings49);
        boolean boolean51 = indexSettings50.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings50.settings = settings52;
        boolean boolean54 = indexSettings50.queryStringLenient;
        boolean boolean55 = indexSettings50.TTLPurgeDisabled;
        java.lang.String str56 = indexSettings50.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue57 = indexSettings50.syncInterval;
// flaky:         indexSettings47.setRefreshInterval(timeValue57);
        indexSettings15.setGCDeletes(timeValue57);
        boolean boolean60 = indexSettings15.defaultAllowUnmappedFields;
        java.lang.String str61 = indexSettings15.customDataPath();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting62 = indexSettings15.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(timeValue57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(timeValueSetting62);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.syncInterval;
        boolean boolean10 = indexSettings2.isShadowReplicaIndex;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = indexSettings2.getFlushThresholdSize();
        org.elasticsearch.Version version12 = indexSettings2.version;
        boolean boolean13 = indexSettings2.isWarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
// flaky:         indexSettings16.setTTLPurgeDisabled(false);
        org.elasticsearch.index.translog.Translog.Durability durability20 = null; // flaky: indexSettings16.durability;
        boolean boolean21 = false; // flaky: indexSettings16.isIndexUsingShadowReplicas();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings22 = null; // flaky: indexSettings16.scopedSettings;
        boolean boolean23 = false; // flaky: indexSettings16.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertTrue("'" + durability20 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability20.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertNotNull(indexScopedSettings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.index.translog.Translog.Durability durability17 = indexSettings16.durability;
        boolean boolean18 = indexSettings16.isQueryStringAnalyzeWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = indexSettings16.getIndexMetaData();
        org.elasticsearch.common.unit.TimeValue timeValue20 = indexSettings16.getsyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + durability17 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability17.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        int int2 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap3 = indexMetaData0.getMappings();
        long long4 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData10.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData10.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings18 = new org.elasticsearch.index.IndexSettings(indexMetaData16, settings17);
        boolean boolean19 = indexSettings18.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings18.settings = settings20;
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings22);
        boolean boolean24 = indexSettings23.isQueryStringLenient();
        indexSettings23.setEnableWarmer(true);
        boolean boolean27 = indexSettings23.getqueryStringLenient();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings30 = new org.elasticsearch.index.IndexSettings(indexMetaData28, settings29);
        boolean boolean31 = indexSettings30.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings30.settings = settings32;
        boolean boolean34 = indexSettings30.queryStringLenient;
        boolean boolean35 = indexSettings30.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig36 = indexSettings30.mergePolicyConfig;
        int int37 = indexSettings30.getMaxRescoreWindow();
        int int38 = indexSettings30.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap47 = settings45.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate48 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap58 = settings54.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate59 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings60 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean62 = indexScopedSettings60.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings64 = indexScopedSettings60.archiveUnknownOrBrokenSettings(settings63);
        org.elasticsearch.index.IndexSettings indexSettings65 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData49, settings54, strPredicate59, indexScopedSettings60);
        org.elasticsearch.index.IndexSettings indexSettings66 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData39, settings45, strPredicate48, indexScopedSettings60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings69 = new org.elasticsearch.index.IndexSettings(indexMetaData67, settings68);
        boolean boolean70 = indexSettings69.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings71 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings69.settings = settings71;
        boolean boolean73 = indexSettings69.queryStringLenient;
        boolean boolean74 = indexSettings69.TTLPurgeDisabled;
        java.lang.String str75 = indexSettings69.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue76 = indexSettings69.syncInterval;
// flaky:         indexSettings66.setRefreshInterval(timeValue76);
        indexSettings30.refreshInterval = timeValue76;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings79 = indexSettings30.getScopedSettings();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting80 = indexSettings30.getQUERY_STRING_ALLOW_LEADING_WILDCARD();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Boolean boolean81 = indexSettings23.getValue(booleanSetting80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: settings scope doesn't match the setting scope [IndexScope] not in [[NodeScope]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10000 + "'", int37 == 10000);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10000 + "'", int38 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(indexScopedSettings60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(settings71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertNotNull(indexScopedSettings79);
        org.junit.Assert.assertNotNull(booleanSetting80);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting19 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting20 = null; // flaky: indexSettings16.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting18);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting19);
// flaky:         org.junit.Assert.assertNotNull(durabilitySetting20);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = indexSettings2.getQUERY_STRING_LENIENT_SETTING();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting11 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        java.lang.String str12 = indexSettings2.defaultField;
        boolean boolean13 = indexSettings2.getqueryStringAllowLeadingWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(intSetting11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isQueryStringAllowLeadingWildcard();
        long long10 = indexSettings2.gcDeletesInMillis;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = indexSettings2.scopedSettings;
        indexSettings2.setTTLPurgeDisabled(false);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.index.translog.Translog.Durability> durabilitySetting15 = indexSettings2.getINDEX_TRANSLOG_DURABILITY_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(durabilitySetting15);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder8.put("index.creation_date_string", (double) 60000L);
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder11.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder16 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder16.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder17.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder20.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings24 = builder23.build();
        org.elasticsearch.common.settings.Settings settings25 = builder23.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap35 = settings33.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings36 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings33);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData27.getSettings();
        java.lang.String[] strArray39 = settings37.getAsArray("hi!");
        java.lang.String[] strArray40 = settings25.getAsArray("index.data_path", strArray39);
        org.elasticsearch.common.settings.Settings.Builder builder41 = builder14.putArray("hi!", strArray40);
        org.elasticsearch.common.settings.Settings settings42 = builder14.build();
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings42);
        org.elasticsearch.common.unit.SizeValue sizeValue45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.SizeValue sizeValue46 = settings43.getAsSize("index.creation_date_string", sizeValue45);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [60000.0]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder4.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder7.put("index.version.upgraded_string", (float) 100);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = builder10.internalMap();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = builder10.internalMap();
        java.lang.String str14 = builder10.get("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder15 = builder10.replacePropertyPlaceholders();
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder10.loadFromStream("index.creation_date", inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate11 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings12 = indexSettings2.settings;
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.unit.TimeValue timeValue14 = indexSettings2.refreshInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(strPredicate11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(timeValue14);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("10.0");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        boolean boolean12 = indexSettings2.warmerEnabled;
        org.elasticsearch.common.unit.TimeValue timeValue13 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean14 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData22);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings27);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings28.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings37.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate42 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings43 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean45 = indexScopedSettings43.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings47 = indexScopedSettings43.archiveUnknownOrBrokenSettings(settings46);
        org.elasticsearch.index.IndexSettings indexSettings48 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData32, settings37, strPredicate42, indexScopedSettings43);
        org.elasticsearch.index.IndexSettings indexSettings49 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData22, settings28, strPredicate31, indexScopedSettings43);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue51 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue52 = settings28.getAsBytesSize("index.creation_date_string", byteSizeValue51);
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings19.dryRun(settings28);
        org.elasticsearch.index.IndexSettings indexSettings54 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.unit.RatioValue ratioValue57 = settings53.getAsRatio("index.auto_expand_replicas", "index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Invalid ratio or percentage [index.shared_filesystem]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexScopedSettings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNull(byteSizeValue52);
        org.junit.Assert.assertNotNull(settings53);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData17);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean21 = indexScopedSettings19.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings23 = indexScopedSettings19.archiveUnknownOrBrokenSettings(settings22);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings23.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData27);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings29 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean31 = indexScopedSettings29.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings33 = indexScopedSettings29.archiveUnknownOrBrokenSettings(settings32);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap36 = settings32.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate37 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings38 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean40 = indexScopedSettings38.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings42 = indexScopedSettings38.archiveUnknownOrBrokenSettings(settings41);
        org.elasticsearch.index.IndexSettings indexSettings43 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData27, settings32, strPredicate37, indexScopedSettings38);
        org.elasticsearch.index.IndexSettings indexSettings44 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData17, settings23, strPredicate26, indexScopedSettings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData45);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = new org.elasticsearch.common.settings.IndexScopedSettings(settings15, indexScopedSettings38, indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData48);
        boolean boolean52 = indexMetaData48.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings53 = new org.elasticsearch.common.settings.IndexScopedSettings(settings10, indexScopedSettings47, indexMetaData48);
        java.lang.String str54 = indexScopedSettings53.nodeName();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings56 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData55, settings56);
        java.util.function.Predicate<java.lang.String> strPredicate58 = indexSettings57.indexNameMatcher;
        int int59 = indexSettings57.numberOfShards;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig60 = indexSettings57.getmergePolicyConfig();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = indexSettings57.scopedSettings;
        boolean boolean63 = indexScopedSettings61.isPrivateSetting("index.blocks.read");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting64 = org.elasticsearch.index.IndexSettings.ALLOW_UNMAPPED;
        java.lang.Boolean boolean65 = indexScopedSettings61.get(booleanSetting64);
        java.lang.Boolean boolean66 = indexScopedSettings53.get(booleanSetting64);
        org.elasticsearch.common.settings.Settings.Builder builder67 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder67.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder71.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings75 = builder74.build();
        org.elasticsearch.common.settings.Settings.Builder builder76 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder77 = builder76.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap78 = builder76.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder79 = builder74.put(strMap78);
        org.elasticsearch.common.settings.Settings.Builder builder82 = builder79.put("index.number_of_shards", "index.blocks.write");
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings53.validate(builder79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting [index.]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(indexScopedSettings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexScopedSettings29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(indexScopedSettings38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(strPredicate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(mergePolicyConfig60);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(booleanSetting64);
        org.junit.Assert.assertEquals("'" + boolean65 + "' != '" + true + "'", boolean65, true);
        org.junit.Assert.assertEquals("'" + boolean66 + "' != '" + true + "'", boolean66, true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = indexSettings16.matchesIndexName("index.blocks.write");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        boolean boolean22 = indexMetaData18.isSameUUID("primary_terms");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.common.settings.Settings settings36 = settings33.getAsSettings("hi!");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings37 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean39 = indexScopedSettings37.hasDynamicSetting("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate40 = indexScopedSettings37.getINDEX_SETTINGS_KEY_PREDICATE();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings42);
        boolean boolean44 = indexSettings43.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings43.settings = settings45;
        boolean boolean47 = indexSettings43.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting48 = indexSettings43.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = indexSettings43.scopedSettings;
        java.lang.String str50 = indexScopedSettings49.nodeName();
        org.elasticsearch.index.IndexSettings indexSettings51 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData18, settings33, strPredicate40, indexScopedSettings49);
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexScopedSettings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strPredicate40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(booleanSetting48);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings3 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings4 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = new org.elasticsearch.common.settings.IndexScopedSettings(settings3, indexScopedSettings26, indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings37);
        boolean boolean39 = indexSettings38.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings38.settings = settings40;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData47.getState();
        java.util.Set<java.lang.String> strSet50 = null; // flaky: indexMetaData47.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = new org.elasticsearch.common.settings.IndexScopedSettings(settings40, indexScopedSettings42, indexMetaData47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings54 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean56 = indexScopedSettings54.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings57 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings58 = indexScopedSettings54.archiveUnknownOrBrokenSettings(settings57);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap60 = settings58.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate61 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData62);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings64 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean66 = indexScopedSettings64.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings68 = indexScopedSettings64.archiveUnknownOrBrokenSettings(settings67);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap71 = settings67.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate72 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean75 = indexScopedSettings73.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings76 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings77 = indexScopedSettings73.archiveUnknownOrBrokenSettings(settings76);
        org.elasticsearch.index.IndexSettings indexSettings78 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData62, settings67, strPredicate72, indexScopedSettings73);
        org.elasticsearch.index.IndexSettings indexSettings79 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData52, settings58, strPredicate61, indexScopedSettings73);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue81 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue82 = settings58.getAsBytesSize("index.creation_date_string", byteSizeValue81);
        org.elasticsearch.common.settings.Settings settings83 = indexScopedSettings51.applySettings(settings58);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings83);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap86 = settings83.getAsGroups(false);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap87 = settings83.getAsGroups();
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(settings3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(indexScopedSettings54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(indexScopedSettings64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(indexScopedSettings73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(settings76);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNull(byteSizeValue82);
        org.junit.Assert.assertNotNull(settings83);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(strMap87);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        int int7 = indexSettings6.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue8 = indexSettings6.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting9 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean10 = indexSettings6.getValue(booleanSetting9);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue11 = indexSettings6.flushThresholdSize;
        org.elasticsearch.Version version12 = indexSettings6.version;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings6.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting14 = indexSettings6.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings6.TTLPurgeDisabled = false;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue8);
        org.junit.Assert.assertNotNull(booleanSetting9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertNotNull(byteSizeValue11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNotNull(booleanSetting14);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings15.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        boolean boolean24 = indexSettings20.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings20.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings20.scopedSettings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings20.globalCheckpointInterval;
        indexSettings15.setRefreshInterval(timeValue27);
        int int29 = indexSettings15.getMaxRescoreWindow();
        boolean boolean30 = indexSettings15.hasCustomDataPath();
        int int31 = indexSettings15.maxResultWindow;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putNull("");
        java.lang.String[] strArray58 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder24.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder11.putArray("state-", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("hi!");
        org.elasticsearch.common.settings.Settings.Builder builder68 = builder65.put("index.blocks.metadata", (int) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder71 = builder68.put("index.auto_expand_replicas", "hi!");
        java.util.concurrent.TimeUnit timeUnit74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder75 = builder68.put("index.blocks.read_only", (long) '#', timeUnit74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig13 = indexSettings2.getMergeSchedulerConfig();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.ByteSizeValue> byteSizeValueSetting14 = indexSettings2.getINDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING();
        int int15 = indexSettings2.getMaxRescoreWindow();
        org.elasticsearch.common.unit.TimeValue timeValue16 = indexSettings2.getRefreshInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig13);
        org.junit.Assert.assertNotNull(byteSizeValueSetting14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertNotNull(timeValue16);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        boolean boolean9 = indexSettings2.isWarmerEnabled();
        org.elasticsearch.common.settings.Settings settings10 = indexSettings2.settings;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getdurability();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting12 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValueSetting12);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        boolean boolean10 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue11 = indexSettings2.refreshInterval;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher12 = indexSettings2.getParseFieldMatcher();
        indexSettings2.maxResultWindow = 10000;
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.getTranslogSyncInterval();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertNotNull(parseFieldMatcher12);
        org.junit.Assert.assertNotNull(timeValue15);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings0 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean2 = indexScopedSettings0.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings5 = new org.elasticsearch.index.IndexSettings(indexMetaData3, settings4);
        boolean boolean6 = indexSettings5.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings5.settings = settings7;
        org.elasticsearch.common.settings.Settings settings10 = settings7.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings0.archiveUnknownOrBrokenSettings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings15 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean17 = indexScopedSettings15.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings19 = indexScopedSettings15.archiveUnknownOrBrokenSettings(settings18);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap21 = settings19.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28, strPredicate33, indexScopedSettings34);
        org.elasticsearch.index.IndexSettings indexSettings40 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData13, settings19, strPredicate22, indexScopedSettings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings42);
        boolean boolean44 = indexSettings43.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings43.settings = settings45;
        boolean boolean47 = indexSettings43.queryStringLenient;
        boolean boolean48 = indexSettings43.TTLPurgeDisabled;
        java.lang.String str49 = indexSettings43.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue50 = indexSettings43.syncInterval;
// flaky:         indexSettings40.setRefreshInterval(timeValue50);
        org.elasticsearch.common.unit.TimeValue timeValue52 = null; // flaky: indexSettings40.getTranslogSyncInterval();
        org.elasticsearch.common.unit.TimeValue timeValue53 = settings11.getAsTime("index.blocks.write", timeValue52);
        java.lang.Boolean boolean56 = settings11.getAsBoolean("index.data_path", (java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(indexScopedSettings0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexScopedSettings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(timeValue50);
// flaky:         org.junit.Assert.assertNotNull(timeValue52);
// flaky:         org.junit.Assert.assertNotNull(timeValue53);
        org.junit.Assert.assertEquals("'" + boolean56 + "' != '" + false + "'", boolean56, false);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = indexMetaData1.getState();
        int int3 = indexMetaData1.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData1.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings5 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean7 = indexScopedSettings5.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings10 = new org.elasticsearch.index.IndexSettings(indexMetaData8, settings9);
        boolean boolean11 = indexSettings10.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings12 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings10.settings = settings12;
        org.elasticsearch.common.settings.Settings settings15 = settings12.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings5.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.index.IndexSettings indexSettings17 = new org.elasticsearch.index.IndexSettings(indexMetaData1, settings16);
        org.elasticsearch.Version version18 = indexSettings17.getversion();
        org.elasticsearch.common.settings.Settings settings19 = indexSettings17.settings;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getByPrefix("index.version.upgraded");
        java.lang.String str24 = settings19.get("index.version.created", "index.number_of_replicas");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings25 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexScopedSettings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "5000099" + "'", str24, "5000099");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("state-", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isQueryStringAllowLeadingWildcard();
        long long10 = indexSettings2.gcDeletesInMillis;
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = indexSettings2.scopedSettings;
        indexSettings2.setwarmerEnabled(true);
        org.elasticsearch.common.settings.Settings settings15 = indexSettings2.getNodeSettings();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting16 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings2.getALLOW_UNMAPPED();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strSetting16);
        org.junit.Assert.assertNotNull(booleanSetting17);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder26.put("hi!", (int) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder38 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder39 = builder38.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder42 = builder39.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder45 = builder39.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder48 = builder39.put("", (double) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData50.getState();
        java.util.Set<java.lang.String> strSet53 = null; // flaky: indexMetaData50.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version54 = indexMetaData50.getCreationVersion();
        org.elasticsearch.common.settings.Settings.Builder builder55 = builder48.put("index.version.upgraded_string", version54);
        java.lang.String[] strArray63 = new java.lang.String[] { "index.blocks.metadata", "index.creation_date_string", "index.blocks.metadata", "index.uuid", "", "primary_terms" };
        org.elasticsearch.common.settings.Settings.Builder builder64 = builder55.putArray("index.uuid", strArray63);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder36.putArray("index.priority", strArray63);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.lang.String str21 = settings19.toDelimitedString('#');
        org.elasticsearch.common.settings.Settings.Builder builder22 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder22.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder23.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder26.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder30 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder31 = builder30.replacePropertyPlaceholders();
        boolean boolean33 = indexScopedSettings11.updateDynamicSettings(settings19, builder26, builder31, "_all");
        org.elasticsearch.common.settings.Settings.Builder builder36 = builder26.put("index.version.created", true);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.common.unit.TimeValue timeValue4 = indexSettings2.refreshInterval;
        indexSettings2.setMaxResultWindow(10000);
        org.elasticsearch.index.translog.Translog.Durability durability7 = null;
        indexSettings2.durability = durability7;
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting9 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.common.logging.ESLogger eSLogger10 = indexSettings2.logger;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeValue4);
        org.junit.Assert.assertNotNull(strSetting9);
        org.junit.Assert.assertNotNull(eSLogger10);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        int int20 = indexSettings16.maxRescoreWindow;
        java.lang.String str21 = indexSettings16.getUUID();
        org.elasticsearch.common.settings.Settings settings22 = indexSettings16.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting23 = indexSettings16.getINDEX_GC_DELETES_SETTING();
        int int24 = indexSettings16.maxRescoreWindow;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData25, settings26);
        boolean boolean28 = indexSettings27.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings27.settings = settings29;
        int int31 = indexSettings27.maxRescoreWindow;
        boolean boolean32 = indexSettings27.TTLPurgeDisabled;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue33 = indexSettings27.getFlushThresholdSize();
        indexSettings16.setTranslogFlushThresholdSize(byteSizeValue33);
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue33);
        java.lang.String str36 = indexSettings2.getUUID();
        org.apache.lucene.index.MergePolicy mergePolicy37 = indexSettings2.getMergePolicy();
        boolean boolean38 = indexSettings2.defaultAllowUnmappedFields;
        long long39 = indexSettings2.getGcDeletesInMillis();
        boolean boolean40 = indexSettings2.defaultAllowUnmappedFields;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(timeValueSetting23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteSizeValue33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "_na_" + "'", str36, "_na_");
        org.junit.Assert.assertNotNull(mergePolicy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 60000L + "'", long39 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings8);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings10 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean12 = indexScopedSettings10.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings14);
        boolean boolean16 = indexSettings15.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings15.settings = settings17;
        org.elasticsearch.common.settings.Settings settings20 = settings17.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings10.archiveUnknownOrBrokenSettings(settings20);
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData7, settings21);
        org.elasticsearch.index.IndexSettings indexSettings23 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings24 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean26 = indexScopedSettings24.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        boolean boolean30 = indexSettings29.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings29.settings = settings31;
        org.elasticsearch.common.settings.Settings settings34 = settings31.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings35 = indexScopedSettings24.archiveUnknownOrBrokenSettings(settings34);
        boolean boolean37 = indexScopedSettings24.isPrivateSetting("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData38.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData38);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings24, indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap47 = settings46.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings48 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings46);
        org.elasticsearch.common.settings.Settings.Builder builder49 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder50 = builder49.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder53 = builder50.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder56 = builder53.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings57 = builder56.build();
        org.elasticsearch.common.settings.Settings.Builder builder58 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder59 = builder58.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = builder58.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder56.put(strMap60);
        org.elasticsearch.common.settings.Settings.Builder builder62 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder62.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder66 = builder63.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder69 = builder66.put("index.", (long) (byte) 100);
        org.elasticsearch.common.settings.Settings settings70 = builder69.build();
        org.elasticsearch.common.settings.Settings.Builder builder71 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder72 = builder71.replacePropertyPlaceholders();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = builder71.internalMap();
        org.elasticsearch.common.settings.Settings.Builder builder74 = builder69.put(strMap73);
        boolean boolean76 = indexScopedSettings41.updateSettings(settings46, builder61, builder74, "state-");
        boolean boolean78 = indexScopedSettings41.hasDynamicSetting("index.version.minimum_compatible");
        java.lang.String str79 = indexScopedSettings41.nodeName();
        org.elasticsearch.common.settings.Settings.Builder builder80 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder81 = builder80.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder84 = builder81.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder87 = builder81.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder90 = builder81.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder91 = builder90.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder92 = builder90.replacePropertyPlaceholders();
        // The following exception was thrown during execution in test generation
        try {
            indexScopedSettings41.validate(builder92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown setting []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(indexScopedSettings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder9 = builder1.putNull("");
        org.elasticsearch.common.settings.Settings.Builder builder12 = builder1.put("index.creation_date", 1.0d);
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder12.putNull("active_allocations");
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.uuid", (int) (short) -1);
        org.elasticsearch.common.settings.Settings.Builder builder19 = builder14.normalizePrefix("index.shadow_replicas");
        java.io.InputStream inputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder22 = builder14.loadFromStream("true", inputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder2 = builder0.loadFromSource("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.common.settings.Settings.Builder builder27 = builder2.extendArray("index.creation_date_string", strArray26);
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder27.loadFromSource("index.");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings2 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        int int18 = indexSettings14.maxRescoreWindow;
        java.lang.String str19 = indexSettings14.getUUID();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.nodeSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting21 = indexSettings14.getQUERY_STRING_LENIENT_SETTING();
        boolean boolean22 = indexSettings14.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue23 = indexSettings14.globalCheckpointInterval;
        org.elasticsearch.index.translog.Translog.Durability durability24 = indexSettings14.durability;
        indexSettings2.setTranslogDurability(durability24);
        indexSettings2.setMaxResultWindow(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(booleanSetting21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + durability24 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability24.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        indexSettings2.setwarmerEnabled(true);
        java.lang.String str10 = indexSettings2.nodeName;
        java.lang.String str11 = indexSettings2.defaultField;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_all" + "'", str11, "_all");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings21 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings20);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap24 = settings20.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate25 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean28 = indexScopedSettings26.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings30 = indexScopedSettings26.archiveUnknownOrBrokenSettings(settings29);
        org.elasticsearch.index.IndexSettings indexSettings31 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData15, settings20, strPredicate25, indexScopedSettings26);
        org.elasticsearch.index.IndexSettings indexSettings32 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData4, settings10, strPredicate14, indexScopedSettings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings34);
        boolean boolean36 = indexSettings35.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings35.settings = settings37;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData44.getState();
        java.util.Set<java.lang.String> strSet47 = null; // flaky: indexMetaData44.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = new org.elasticsearch.common.settings.IndexScopedSettings(settings37, indexScopedSettings39, indexMetaData44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings51 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean53 = indexScopedSettings51.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings55 = indexScopedSettings51.archiveUnknownOrBrokenSettings(settings54);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap57 = settings55.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate58 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData59);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings61 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean63 = indexScopedSettings61.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings65 = indexScopedSettings61.archiveUnknownOrBrokenSettings(settings64);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap68 = settings64.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate69 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings70 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean72 = indexScopedSettings70.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings73 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings74 = indexScopedSettings70.archiveUnknownOrBrokenSettings(settings73);
        org.elasticsearch.index.IndexSettings indexSettings75 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData59, settings64, strPredicate69, indexScopedSettings70);
        org.elasticsearch.index.IndexSettings indexSettings76 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData49, settings55, strPredicate58, indexScopedSettings70);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue78 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = settings55.getAsBytesSize("index.creation_date_string", byteSizeValue78);
        org.elasticsearch.common.settings.Settings settings80 = indexScopedSettings48.applySettings(settings55);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap83 = settings80.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings84 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder3.settings(settings80);
        java.util.Set<java.lang.String> strSet86 = settings80.names();
        boolean boolean87 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings80);
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings80);
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(indexScopedSettings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNotNull(indexScopedSettings61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(indexScopedSettings70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNull(byteSizeValue79);
        org.junit.Assert.assertNotNull(settings80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(settings88);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        java.nio.file.Path path12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder13 = builder10.loadFromPath(path12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings3 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean5 = indexScopedSettings3.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData6, settings7);
        boolean boolean9 = indexSettings8.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings8.settings = settings10;
        org.elasticsearch.common.settings.Settings settings13 = settings10.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings14 = indexScopedSettings3.archiveUnknownOrBrokenSettings(settings13);
        org.elasticsearch.index.IndexSettings indexSettings15 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings14);
        org.elasticsearch.Version version16 = indexSettings15.version;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings15.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings20 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings19);
        boolean boolean21 = indexSettings20.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings20.settings = settings22;
        boolean boolean24 = indexSettings20.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting25 = indexSettings20.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings26 = indexSettings20.scopedSettings;
        org.elasticsearch.common.unit.TimeValue timeValue27 = indexSettings20.globalCheckpointInterval;
        indexSettings15.setRefreshInterval(timeValue27);
        boolean boolean29 = indexSettings15.queryStringAnalyzeWildcard;
        org.elasticsearch.common.settings.Settings settings30 = indexSettings15.getNodeSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexScopedSettings3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanSetting25);
        org.junit.Assert.assertNotNull(indexScopedSettings26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting5 = indexSettings2.getDEFAULT_FIELD_SETTING();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.globalCheckpointInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        boolean boolean13 = indexSettings12.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings12.settings = settings14;
        boolean boolean16 = indexSettings12.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = indexSettings12.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings18 = indexSettings12.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue19 = indexSettings12.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        boolean boolean23 = indexSettings22.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings22.settings = settings24;
        boolean boolean26 = indexSettings22.queryStringLenient;
        boolean boolean27 = indexSettings22.TTLPurgeDisabled;
        java.lang.String str28 = indexSettings22.customDataPath();
        indexSettings22.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability31 = indexSettings22.durability;
        indexSettings12.durability = durability31;
        int int33 = indexSettings12.getNumberOfShards();
        indexSettings12.setEnableWarmer(false);
        org.elasticsearch.index.translog.Translog.Durability durability36 = indexSettings12.durability;
        indexSettings2.setTranslogDurability(durability36);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSetting5);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + durability31 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability31.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + durability36 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability36.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        boolean boolean10 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Settings settings11 = indexSettings2.nodeSettings;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        boolean boolean18 = indexSettings14.queryStringLenient;
        boolean boolean19 = indexSettings14.TTLPurgeDisabled;
        java.lang.String str20 = indexSettings14.customDataPath();
        boolean boolean21 = indexSettings14.hasCustomDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue22 = indexSettings14.refreshInterval;
        indexSettings2.setGCDeletes(timeValue22);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeValue22);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.elasticsearch.common.settings.Settings.Builder builder0 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder1 = builder0.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder4 = builder1.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder7 = builder1.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder10 = builder1.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder10.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder13 = builder11.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder16 = builder13.put("archived.", (float) (short) -1);
        java.nio.file.Path path17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder18 = builder13.loadFromPath(path17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        int int11 = indexSettings2.getNumberOfShards();
        boolean boolean12 = indexSettings2.isTTLPurgeDisabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting13 = indexSettings2.getINDEX_TRANSLOG_SYNC_INTERVAL_SETTING();
        java.lang.String str14 = indexSettings2.customDataPath();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getINDEX_TTL_DISABLE_PURGE_SETTING();
        boolean boolean16 = indexSettings2.isShadowReplicaIndex;
        boolean boolean17 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeValueSetting13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        java.lang.String str8 = indexSettings2.customDataPath();
        org.elasticsearch.common.unit.TimeValue timeValue9 = indexSettings2.syncInterval;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.common.settings.Setting<java.lang.String> strSetting11 = indexSettings2.getDEFAULT_FIELD_SETTING();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        boolean boolean18 = indexSettings14.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = indexSettings14.getINDEX_WARMER_ENABLED_SETTING();
        org.elasticsearch.common.settings.Settings settings20 = indexSettings14.getNodeSettings();
        org.elasticsearch.common.unit.TimeValue timeValue21 = indexSettings14.refreshInterval;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings23);
        boolean boolean25 = indexSettings24.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings24.settings = settings26;
        boolean boolean28 = indexSettings24.queryStringLenient;
        boolean boolean29 = indexSettings24.TTLPurgeDisabled;
        java.lang.String str30 = indexSettings24.customDataPath();
        indexSettings24.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability33 = indexSettings24.durability;
        indexSettings14.durability = durability33;
        indexSettings2.durability = durability33;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings38 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings43 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings44 = new org.elasticsearch.index.IndexSettings(indexMetaData42, settings43);
        boolean boolean45 = indexSettings44.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings44.settings = settings46;
        org.elasticsearch.common.settings.Settings settings49 = settings46.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings50 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings49);
        org.elasticsearch.index.IndexSettings indexSettings51 = new org.elasticsearch.index.IndexSettings(indexMetaData36, settings50);
        int int52 = indexSettings51.maxResultWindow;
        org.elasticsearch.common.settings.Settings settings53 = null;
        indexSettings51.settings = settings53;
        java.util.function.Predicate<java.lang.String> strPredicate55 = indexSettings51.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue56 = indexSettings51.getFlushThresholdSize();
        indexSettings2.setTranslogFlushThresholdSize(byteSizeValue56);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(strSetting11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(booleanSetting19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + durability33 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability33.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10000 + "'", int52 == 10000);
        org.junit.Assert.assertNotNull(strPredicate55);
        org.junit.Assert.assertNotNull(byteSizeValue56);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        indexSettings2.TTLPurgeDisabled = true;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings12 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap15 = settings14.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings14);
        int int17 = indexSettings16.getNumberOfReplicas();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue18 = indexSettings16.flushThresholdSize;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting19 = org.elasticsearch.index.IndexSettings.INDEX_WARMER_ENABLED_SETTING;
        java.lang.Boolean boolean20 = indexSettings16.getValue(booleanSetting19);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue21 = indexSettings16.flushThresholdSize;
        indexSettings2.flushThresholdSize = byteSizeValue21;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue23 = indexSettings2.flushThresholdSize;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteSizeValue18);
        org.junit.Assert.assertNotNull(booleanSetting19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
        org.junit.Assert.assertNotNull(byteSizeValue21);
        org.junit.Assert.assertNotNull(byteSizeValue23);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.Version version17 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData19.getState();
        int int21 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData19.getMappings();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings28 = new org.elasticsearch.index.IndexSettings(indexMetaData26, settings27);
        boolean boolean29 = indexSettings28.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings28.settings = settings30;
        org.elasticsearch.common.settings.Settings settings33 = settings30.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings34 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings33);
        org.elasticsearch.index.IndexSettings indexSettings35 = new org.elasticsearch.index.IndexSettings(indexMetaData19, settings34);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap38 = settings34.getGroups("_na_", true);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings34);
        boolean boolean40 = indexSettings39.isIndexUsingShadowReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        java.lang.String str4 = indexSettings2.getNodeName();
        int int5 = indexSettings2.getMaxResultWindow();
        boolean boolean6 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData7);
        java.lang.String str9 = builder8.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.version((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData12.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        boolean boolean17 = indexSettings16.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings16.settings = settings18;
        org.elasticsearch.common.settings.Settings settings21 = settings18.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings25 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean27 = indexScopedSettings25.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings29 = indexScopedSettings25.archiveUnknownOrBrokenSettings(settings28);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap32 = settings28.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate33 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings34 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean36 = indexScopedSettings34.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings38 = indexScopedSettings34.archiveUnknownOrBrokenSettings(settings37);
        org.elasticsearch.index.IndexSettings indexSettings39 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData23, settings28, strPredicate33, indexScopedSettings34);
        org.elasticsearch.index.IndexSettings indexSettings40 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData12, settings18, strPredicate22, indexScopedSettings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings43 = new org.elasticsearch.index.IndexSettings(indexMetaData41, settings42);
        boolean boolean44 = indexSettings43.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings43.settings = settings45;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings47 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean49 = indexScopedSettings47.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings51 = indexScopedSettings47.archiveUnknownOrBrokenSettings(settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = indexMetaData52.getState();
        java.util.Set<java.lang.String> strSet55 = null; // flaky: indexMetaData52.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = new org.elasticsearch.common.settings.IndexScopedSettings(settings45, indexScopedSettings47, indexMetaData52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData57);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings59 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean61 = indexScopedSettings59.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings63 = indexScopedSettings59.archiveUnknownOrBrokenSettings(settings62);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap65 = settings63.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate66 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData67);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings69 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean71 = indexScopedSettings69.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings72 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings73 = indexScopedSettings69.archiveUnknownOrBrokenSettings(settings72);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap76 = settings72.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate77 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings78 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean80 = indexScopedSettings78.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings81 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings82 = indexScopedSettings78.archiveUnknownOrBrokenSettings(settings81);
        org.elasticsearch.index.IndexSettings indexSettings83 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData67, settings72, strPredicate77, indexScopedSettings78);
        org.elasticsearch.index.IndexSettings indexSettings84 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData57, settings63, strPredicate66, indexScopedSettings78);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue86 = null;
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue87 = settings63.getAsBytesSize("index.creation_date_string", byteSizeValue86);
        org.elasticsearch.common.settings.Settings settings88 = indexScopedSettings56.applySettings(settings63);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap91 = settings88.getGroups("index.blocks.write", false);
        org.elasticsearch.index.IndexSettings indexSettings92 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings88);
        int int93 = indexMetaData12.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state96 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder97 = builder94.state(state96);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = builder11.state(state96);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10000 + "'", int5 == 10000);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(indexScopedSettings25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(indexScopedSettings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(indexScopedSettings47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(indexScopedSettings59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNotNull(indexScopedSettings69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(settings72);
        org.junit.Assert.assertNotNull(settings73);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(indexScopedSettings78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertNull(byteSizeValue87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + state96 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state96.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("_all");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        java.util.function.Predicate<java.lang.String> strPredicate3 = indexSettings2.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate4 = indexSettings2.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue5 = indexSettings2.flushThresholdSize;
        int int6 = indexSettings2.maxResultWindow;
        boolean boolean7 = indexSettings2.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(strPredicate3);
        org.junit.Assert.assertNotNull(strPredicate4);
        org.junit.Assert.assertNotNull(byteSizeValue5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        boolean boolean9 = indexSettings2.isOnSharedFilesystem();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting10 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting12 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean13 = indexSettings2.isShadowReplicaIndex;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexSettings2.indexMetaData;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intSetting10);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(booleanSetting12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indexMetaData14);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig8 = indexSettings2.mergePolicyConfig;
        int int9 = indexSettings2.getMaxRescoreWindow();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.index.translog.Translog.Durability durability11 = null;
        indexSettings2.durability = durability11;
        boolean boolean13 = indexSettings2.getqueryStringAllowLeadingWildcard();
        boolean boolean14 = indexSettings2.isQueryStringAnalyzeWildcard();
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting15 = indexSettings2.getQUERY_STRING_ANALYZE_WILDCARD();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting16 = indexSettings2.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(booleanSetting15);
        org.junit.Assert.assertNotNull(timeValueSetting16);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData5);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings7 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean9 = indexScopedSettings7.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings11 = indexScopedSettings7.archiveUnknownOrBrokenSettings(settings10);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap13 = settings11.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData5, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings11);
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData17, settings18);
        boolean boolean20 = indexSettings19.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings19.settings = settings21;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        java.util.Set<java.lang.String> strSet31 = null; // flaky: indexMetaData28.activeAllocationIds((int) (short) 100);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = new org.elasticsearch.common.settings.IndexScopedSettings(settings21, indexScopedSettings23, indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings35 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean37 = indexScopedSettings35.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings39 = indexScopedSettings35.archiveUnknownOrBrokenSettings(settings38);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap41 = settings39.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData43.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings46 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings47 = new org.elasticsearch.index.IndexSettings(indexMetaData45, settings46);
        boolean boolean48 = indexSettings47.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings47.settings = settings49;
        org.elasticsearch.common.settings.Settings settings52 = settings49.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate53 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData54);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings56 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean58 = indexScopedSettings56.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings60 = indexScopedSettings56.archiveUnknownOrBrokenSettings(settings59);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap63 = settings59.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate64 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings65 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean67 = indexScopedSettings65.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings69 = indexScopedSettings65.archiveUnknownOrBrokenSettings(settings68);
        org.elasticsearch.index.IndexSettings indexSettings70 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData54, settings59, strPredicate64, indexScopedSettings65);
        org.elasticsearch.index.IndexSettings indexSettings71 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData43, settings49, strPredicate53, indexScopedSettings65);
        org.elasticsearch.index.IndexSettings indexSettings72 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings49);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings73 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings23, indexMetaData33);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean76 = indexScopedSettings74.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings78 = indexScopedSettings74.archiveUnknownOrBrokenSettings(settings77);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData80.getState();
        java.util.Set<java.lang.String> strSet83 = null; // flaky: indexMetaData80.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version84 = indexMetaData80.getUpgradedVersion();
        org.elasticsearch.Version version85 = settings78.getAsVersion("", version84);
        org.elasticsearch.index.IndexSettings indexSettings86 = new org.elasticsearch.index.IndexSettings(indexMetaData33, settings78);
        org.elasticsearch.Version version87 = indexSettings86.getversion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNotNull(indexScopedSettings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexScopedSettings35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNotNull(indexScopedSettings56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(indexScopedSettings65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertNotNull(version84);
        org.junit.Assert.assertNotNull(version85);
        org.junit.Assert.assertNotNull(version87);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData4, settings5);
        boolean boolean7 = indexSettings6.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings6.settings = settings8;
        org.elasticsearch.common.settings.Settings settings11 = settings8.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData17.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings19 = new org.elasticsearch.common.settings.IndexScopedSettings(settings11, indexScopedSettings12, indexMetaData17);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray26 = settings11.getAsArray("", strArray24, (java.lang.Boolean) true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData27, settings28);
        java.util.function.Predicate<java.lang.String> strPredicate30 = indexSettings29.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate31 = indexSettings29.getindexNameMatcher();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData37);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings39 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean41 = indexScopedSettings39.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings43 = indexScopedSettings39.archiveUnknownOrBrokenSettings(settings42);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap45 = settings43.getGroups("index.shadow_replicas");
        java.util.function.Predicate<java.lang.String> strPredicate46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData47);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings49 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean51 = indexScopedSettings49.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings52 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings53 = indexScopedSettings49.archiveUnknownOrBrokenSettings(settings52);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap56 = settings52.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate57 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings58 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean60 = indexScopedSettings58.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings61 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings62 = indexScopedSettings58.archiveUnknownOrBrokenSettings(settings61);
        org.elasticsearch.index.IndexSettings indexSettings63 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData47, settings52, strPredicate57, indexScopedSettings58);
        org.elasticsearch.index.IndexSettings indexSettings64 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData37, settings43, strPredicate46, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData65);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings67 = new org.elasticsearch.common.settings.IndexScopedSettings(settings35, indexScopedSettings58, indexMetaData65);
        org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings11, strPredicate31, indexScopedSettings58);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        long long71 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData72);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings74 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean76 = indexScopedSettings74.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings77 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings78 = indexScopedSettings74.archiveUnknownOrBrokenSettings(settings77);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap81 = settings77.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate82 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings83 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean85 = indexScopedSettings83.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings87 = indexScopedSettings83.archiveUnknownOrBrokenSettings(settings86);
        org.elasticsearch.index.IndexSettings indexSettings88 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData72, settings77, strPredicate82, indexScopedSettings83);
        org.elasticsearch.index.Index index89 = indexMetaData72.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state90 = indexMetaData72.getState();
        org.elasticsearch.common.settings.Settings settings91 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings93 = settings91.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings94 = new org.elasticsearch.index.IndexSettings(indexMetaData72, settings93);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state95 = indexMetaData72.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters96 = indexMetaData72.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap97 = indexMetaData72.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff98 = indexMetaData0.diff(indexMetaData72);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(strPredicate30);
        org.junit.Assert.assertNotNull(strPredicate31);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNotNull(indexScopedSettings39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNotNull(indexScopedSettings49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(indexScopedSettings58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNotNull(indexScopedSettings74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(settings77);
        org.junit.Assert.assertNotNull(settings78);
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(indexScopedSettings83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNull(index89);
        org.junit.Assert.assertTrue("'" + state90 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state90.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings91);
        org.junit.Assert.assertNotNull(settings93);
        org.junit.Assert.assertTrue("'" + state95 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state95.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters96);
        org.junit.Assert.assertNotNull(strImmutableOpenMap97);
        org.junit.Assert.assertNotNull(indexMetaDataDiff98);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        boolean boolean14 = indexSettings2.getqueryStringAnalyzeWildcard();
        org.elasticsearch.common.unit.TimeValue timeValue15 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean16 = indexSettings2.getwarmerEnabled();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(intSetting13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings12 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean14 = indexScopedSettings12.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings16 = indexScopedSettings12.archiveUnknownOrBrokenSettings(settings15);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap18 = settings16.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings19 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData20.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings24 = new org.elasticsearch.index.IndexSettings(indexMetaData22, settings23);
        boolean boolean25 = indexSettings24.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings24.settings = settings26;
        org.elasticsearch.common.settings.Settings settings29 = settings26.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData31);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings33 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean35 = indexScopedSettings33.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings37 = indexScopedSettings33.archiveUnknownOrBrokenSettings(settings36);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap40 = settings36.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate41 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings42 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean44 = indexScopedSettings42.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings46 = indexScopedSettings42.archiveUnknownOrBrokenSettings(settings45);
        org.elasticsearch.index.IndexSettings indexSettings47 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData31, settings36, strPredicate41, indexScopedSettings42);
        org.elasticsearch.index.IndexSettings indexSettings48 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData20, settings26, strPredicate30, indexScopedSettings42);
        org.elasticsearch.index.IndexSettings indexSettings49 = new org.elasticsearch.index.IndexSettings(indexMetaData10, settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings52 = new org.elasticsearch.index.IndexSettings(indexMetaData50, settings51);
        boolean boolean53 = indexSettings52.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings54 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings52.settings = settings54;
        int int56 = indexSettings52.maxRescoreWindow;
        java.lang.String str57 = indexSettings52.getUUID();
        org.elasticsearch.common.settings.Settings settings58 = indexSettings52.nodeSettings;
        boolean boolean59 = indexSettings52.isOnSharedFilesystem();
        indexSettings52.setMaxRescoreWindow((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings64 = new org.elasticsearch.index.IndexSettings(indexMetaData62, settings63);
        boolean boolean65 = indexSettings64.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings64.settings = settings66;
        boolean boolean68 = indexSettings64.queryStringLenient;
        boolean boolean69 = indexSettings64.TTLPurgeDisabled;
        java.lang.String str70 = indexSettings64.customDataPath();
        indexSettings64.warmerEnabled = false;
        org.elasticsearch.index.translog.Translog.Durability durability73 = indexSettings64.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings75 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings76 = new org.elasticsearch.index.IndexSettings(indexMetaData74, settings75);
        java.util.function.Predicate<java.lang.String> strPredicate77 = indexSettings76.indexNameMatcher;
        java.util.function.Predicate<java.lang.String> strPredicate78 = indexSettings76.getindexNameMatcher();
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue79 = indexSettings76.flushThresholdSize;
        indexSettings64.flushThresholdSize = byteSizeValue79;
        indexSettings52.setTranslogFlushThresholdSize(byteSizeValue79);
        indexSettings49.flushThresholdSize = byteSizeValue79;
        indexSettings9.setTranslogFlushThresholdSize(byteSizeValue79);
        org.elasticsearch.Version version84 = indexSettings9.version;
        java.lang.String str85 = indexSettings9.nodeName;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(indexScopedSettings12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(indexScopedSettings33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(indexScopedSettings42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10000 + "'", int56 == 10000);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "_na_" + "'", str57, "_na_");
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + durability73 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability73.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertNotNull(settings75);
        org.junit.Assert.assertNotNull(strPredicate77);
        org.junit.Assert.assertNotNull(strPredicate78);
        org.junit.Assert.assertNotNull(byteSizeValue79);
        org.junit.Assert.assertNotNull(version84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        long long8 = indexSettings2.getGcDeletesInMillis();
        boolean boolean9 = indexSettings2.TTLPurgeDisabled;
        long long10 = indexSettings2.gcDeletesInMillis;
        boolean boolean11 = indexSettings2.isQueryStringAllowLeadingWildcard();
        java.lang.String str12 = indexSettings2.getDefaultField();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexSettings2.getIndexMetaData();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings16 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings15);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings17 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean19 = indexScopedSettings17.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData20, settings21);
        boolean boolean23 = indexSettings22.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings22.settings = settings24;
        org.elasticsearch.common.settings.Settings settings27 = settings24.getAsSettings("");
        org.elasticsearch.common.settings.Settings settings28 = indexScopedSettings17.archiveUnknownOrBrokenSettings(settings27);
        org.elasticsearch.index.IndexSettings indexSettings29 = new org.elasticsearch.index.IndexSettings(indexMetaData14, settings28);
        org.elasticsearch.common.settings.Settings settings30 = indexSettings29.nodeSettings;
        org.elasticsearch.common.settings.Settings settings31 = indexSettings29.getSettings();
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData13, settings31);
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData13.readDiffFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 60000L + "'", long8 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_all" + "'", str12, "_all");
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexScopedSettings17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state2 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.state(state2);
        org.elasticsearch.common.settings.Settings.Builder builder4 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
        org.elasticsearch.common.settings.Settings.Builder builder8 = builder4.put("index.uuid", true);
        org.elasticsearch.common.settings.Settings.Builder builder11 = builder4.put("", (long) 0);
        org.elasticsearch.common.settings.Settings.Builder builder13 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder14 = builder13.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder17 = builder14.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder20 = builder14.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder23 = builder14.put("", (double) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder24 = builder23.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder26 = builder24.normalizePrefix("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.settings.Settings.Builder builder28 = org.elasticsearch.common.settings.Settings.builder();
        org.elasticsearch.common.settings.Settings.Builder builder29 = builder28.replacePropertyPlaceholders();
        org.elasticsearch.common.settings.Settings.Builder builder32 = builder29.put("index.blocks.read", false);
        org.elasticsearch.common.settings.Settings.Builder builder35 = builder29.put("primary_terms", "");
        org.elasticsearch.common.settings.Settings.Builder builder37 = builder29.putNull("");
        java.lang.String[] strArray58 = new java.lang.String[] { "_na_", "index.number_of_shards", "index.auto_expand_replicas", "index.priority", "", "active_allocations", "index.blocks.metadata", "active_allocations", "_all", "index.shadow_replicas", "index.version.upgraded_string", "index.data_path", "active_allocations", "archived.", "index.auto_expand_replicas", "index.shared_filesystem.recover_on_any_node", "index.blocks.read_only", "index.creation_date", "index.number_of_replicas" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        org.elasticsearch.common.settings.Settings.Builder builder61 = builder29.putArray("index.blocks.write", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder62 = builder24.putArray("index.blocks.read_only", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder63 = builder11.putArray("state-", (java.util.List<java.lang.String>) strList59);
        org.elasticsearch.common.settings.Settings.Builder builder65 = builder63.putNull("hi!");
        org.elasticsearch.common.unit.ByteSizeUnit byteSizeUnit68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.settings.Settings.Builder builder69 = builder65.put("index.blocks.read_only", (long) (-1), byteSizeUnit68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state2.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        org.elasticsearch.index.translog.Translog.Durability durability65 = indexSettings63.durability;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = indexSettings63.getIndexMetaData();
        org.elasticsearch.common.settings.Settings settings67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.IndexSettings indexSettings68 = new org.elasticsearch.index.IndexSettings(indexMetaData66, settings67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + durability65 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability65.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(indexMetaData66);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Settings settings9 = indexSettings2.nodeSettings;
        boolean boolean10 = indexSettings2.isDefaultAllowUnmappedFields();
        org.apache.lucene.index.MergePolicy mergePolicy11 = indexSettings2.getMergePolicy();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        boolean boolean14 = indexSettings2.matchesIndexName("_all");
        long long15 = indexSettings2.getGcDeletesInMillis();
        indexSettings2.setEnableWarmer(true);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings20 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean22 = indexScopedSettings20.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings24 = indexScopedSettings20.archiveUnknownOrBrokenSettings(settings23);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap26 = settings24.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings27 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = indexMetaData28.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings32 = new org.elasticsearch.index.IndexSettings(indexMetaData30, settings31);
        boolean boolean33 = indexSettings32.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings32.settings = settings34;
        org.elasticsearch.common.settings.Settings settings37 = settings34.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate38 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings41 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean43 = indexScopedSettings41.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings45 = indexScopedSettings41.archiveUnknownOrBrokenSettings(settings44);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap48 = settings44.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate49 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings50 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean52 = indexScopedSettings50.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings53 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings54 = indexScopedSettings50.archiveUnknownOrBrokenSettings(settings53);
        org.elasticsearch.index.IndexSettings indexSettings55 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData39, settings44, strPredicate49, indexScopedSettings50);
        org.elasticsearch.index.IndexSettings indexSettings56 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData28, settings34, strPredicate38, indexScopedSettings50);
        org.elasticsearch.index.IndexSettings indexSettings57 = new org.elasticsearch.index.IndexSettings(indexMetaData18, settings34);
        org.elasticsearch.common.unit.ByteSizeValue byteSizeValue58 = indexSettings57.getFlushThresholdSize();
        indexSettings2.flushThresholdSize = byteSizeValue58;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting60 = indexSettings2.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mergePolicy11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 60000L + "'", long15 == 60000L);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexScopedSettings20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNotNull(indexScopedSettings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(indexScopedSettings50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(byteSizeValue58);
        org.junit.Assert.assertNotNull(timeValueSetting60);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = indexMetaData0.readFrom(streamInput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting7 = indexSettings2.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean8 = indexSettings2.queryStringAnalyzeWildcard;
        boolean boolean9 = indexSettings2.hasCustomDataPath();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(booleanSetting7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap8 = settings6.getGroups("index.shadow_replicas");
        org.elasticsearch.index.IndexSettings indexSettings9 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings14 = new org.elasticsearch.index.IndexSettings(indexMetaData12, settings13);
        boolean boolean15 = indexSettings14.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings14.settings = settings16;
        org.elasticsearch.common.settings.Settings settings19 = settings16.getAsSettings("");
        java.util.function.Predicate<java.lang.String> strPredicate20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings23 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean25 = indexScopedSettings23.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings27 = indexScopedSettings23.archiveUnknownOrBrokenSettings(settings26);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap30 = settings26.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate31 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings32 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean34 = indexScopedSettings32.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings36 = indexScopedSettings32.archiveUnknownOrBrokenSettings(settings35);
        org.elasticsearch.index.IndexSettings indexSettings37 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData21, settings26, strPredicate31, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings38 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData10, settings16, strPredicate20, indexScopedSettings32);
        org.elasticsearch.index.IndexSettings indexSettings39 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings42 = new org.elasticsearch.index.IndexSettings(indexMetaData40, settings41);
        boolean boolean43 = indexSettings42.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings42.settings = settings44;
        org.elasticsearch.common.settings.Settings settings47 = settings44.getAsSettings("");
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings48 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean50 = indexScopedSettings48.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings52 = indexScopedSettings48.archiveUnknownOrBrokenSettings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData53.getState();
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings55 = new org.elasticsearch.common.settings.IndexScopedSettings(settings47, indexScopedSettings48, indexMetaData53);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "index.blocks.read_only", "index.creation_date_string" };
        java.lang.String[] strArray62 = settings47.getAsArray("", strArray60, (java.lang.Boolean) true);
        org.elasticsearch.index.IndexSettings indexSettings63 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings47);
        boolean boolean64 = indexSettings63.getqueryStringAnalyzeWildcard();
        indexSettings63.setwarmerEnabled(true);
        int int67 = indexSettings63.maxResultWindow;
        boolean boolean68 = indexSettings63.isQueryStringLenient();
        boolean boolean69 = indexSettings63.queryStringAllowLeadingWildcard;
        boolean boolean70 = indexSettings63.getisShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue71 = indexSettings63.syncInterval;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexScopedSettings23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(indexScopedSettings32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(indexScopedSettings48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(settings52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10000 + "'", int67 == 10000);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(timeValue71);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting17 = null; // flaky: indexSettings16.getINDEX_WARMER_ENABLED_SETTING();
        boolean boolean18 = false; // flaky: indexSettings16.isShadowReplicaIndex();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null; // flaky: indexSettings16.getDEFAULT_GC_DELETES();
        boolean boolean20 = false; // flaky: indexSettings16.queryStringLenient;
        boolean boolean21 = false; // flaky: indexSettings16.isWarmerEnabled();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting22 = null; // flaky: indexSettings16.getINDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
// flaky:         org.junit.Assert.assertNotNull(booleanSetting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertNotNull(timeValueSetting22);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int20 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version21 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(version21);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings2 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean4 = indexScopedSettings2.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings5 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings6 = indexScopedSettings2.archiveUnknownOrBrokenSettings(settings5);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap9 = settings5.getGroups("index.creation_date_string", false);
        java.util.function.Predicate<java.lang.String> strPredicate10 = null;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = org.elasticsearch.common.settings.IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;
        boolean boolean13 = indexScopedSettings11.hasDynamicSetting("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings14 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.common.settings.Settings settings15 = indexScopedSettings11.archiveUnknownOrBrokenSettings(settings14);
        org.elasticsearch.index.IndexSettings indexSettings16 = null; // flaky: new org.elasticsearch.index.IndexSettings(indexMetaData0, settings5, strPredicate10, indexScopedSettings11);
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.common.settings.Settings.Builder.EMPTY_SETTINGS;
        org.elasticsearch.common.settings.Settings settings21 = settings19.getAsSettings("index.number_of_replicas");
        org.elasticsearch.index.IndexSettings indexSettings22 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings21);
        java.util.Map<java.lang.String, org.elasticsearch.common.settings.Settings> strMap25 = settings21.getGroups("hi!", false);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(indexScopedSettings2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = settings4.getAsStructuredMap();
        org.elasticsearch.index.IndexSettings indexSettings6 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings4);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings8 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings11 = new org.elasticsearch.index.IndexSettings(indexMetaData9, settings10);
        boolean boolean12 = indexSettings11.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings13 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings11.settings = settings13;
        boolean boolean15 = indexSettings11.queryStringLenient;
        boolean boolean16 = indexSettings11.TTLPurgeDisabled;
        org.elasticsearch.index.MergePolicyConfig mergePolicyConfig17 = indexSettings11.mergePolicyConfig;
        int int18 = indexSettings11.getMaxRescoreWindow();
        int int19 = indexSettings11.maxRescoreWindow;
        java.util.function.Predicate<java.lang.String> strPredicate20 = indexSettings11.getindexNameMatcher();
        org.elasticsearch.common.settings.Settings settings21 = settings7.filter(strPredicate20);
        java.util.Set<java.lang.String> strSet22 = settings7.names();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mergePolicyConfig17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertNotNull(strPredicate20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData11.getState();
        byte byte13 = state12.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.state(state12);
        java.lang.String[] strArray42 = new java.lang.String[] { "index.version.minimum_compatible", "index.priority", "index.version.created", "index.version.minimum_compatible", "index.blocks.write", "index.blocks.read", "index.version.upgraded", "hi!", "index.", "primary_terms", "index.version.created_string", "", "", "archived.", "index.blocks.write", "hi!", "archived.", "index.version.created_string", "index.priority", "index.blocks.read", "archived.", "index.shared_filesystem.recover_on_any_node", "index.uuid", "index.uuid", "active_allocations", "index.priority" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder10.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder7.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet43);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.putAlias(aliasMetaData47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putMapping(mappingMetaData3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        boolean boolean6 = indexSettings2.queryStringLenient;
        boolean boolean7 = indexSettings2.TTLPurgeDisabled;
        boolean boolean8 = indexSettings2.isDefaultAllowUnmappedFields();
        org.elasticsearch.Version version9 = indexSettings2.version;
        org.elasticsearch.common.unit.TimeValue timeValue10 = indexSettings2.getDEFAULT_REFRESH_INTERVAL();
        org.elasticsearch.index.translog.Translog.Durability durability11 = indexSettings2.getTranslogDurability();
        org.elasticsearch.common.unit.TimeValue timeValue12 = indexSettings2.getDEFAULT_GC_DELETES();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting13 = indexSettings2.getMAX_RESULT_WINDOW_SETTING();
        org.elasticsearch.index.translog.Translog.Durability durability14 = indexSettings2.getdurability();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + durability11 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability11.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(intSetting13);
        org.junit.Assert.assertTrue("'" + durability14 + "' != '" + org.elasticsearch.index.translog.Translog.Durability.REQUEST + "'", durability14.equals(org.elasticsearch.index.translog.Translog.Durability.REQUEST));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.settings.Settings settings1 = org.elasticsearch.common.settings.Settings.EMPTY;
        org.elasticsearch.index.IndexSettings indexSettings2 = new org.elasticsearch.index.IndexSettings(indexMetaData0, settings1);
        boolean boolean3 = indexSettings2.isQueryStringLenient();
        org.elasticsearch.common.settings.Settings settings4 = org.elasticsearch.common.settings.Settings.EMPTY;
        indexSettings2.settings = settings4;
        int int6 = indexSettings2.maxRescoreWindow;
        java.lang.String str7 = indexSettings2.getUUID();
        org.elasticsearch.common.settings.Settings settings8 = indexSettings2.nodeSettings;
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.unit.TimeValue> timeValueSetting9 = indexSettings2.getINDEX_GC_DELETES_SETTING();
        int int10 = indexSettings2.maxRescoreWindow;
        org.elasticsearch.common.settings.IndexScopedSettings indexScopedSettings11 = indexSettings2.scopedSettings;
        org.elasticsearch.index.MergeSchedulerConfig mergeSchedulerConfig12 = indexSettings2.mergeSchedulerConfig;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData13.getState();
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData13.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData13.getCustoms();
        org.elasticsearch.index.Index index19 = indexMetaData13.getMergeSourceIndex();
        boolean boolean20 = indexSettings2.updateIndexMetaData(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.putCustom("state-", custom23);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(settings1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10000 + "'", int6 == 10000);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(timeValueSetting9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(indexScopedSettings11);
        org.junit.Assert.assertNotNull(mergeSchedulerConfig12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNull(index19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder24);
    }
}
