/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 11:25:24 GMT 2021
 */

package org.elasticsearch.cluster.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.Dictionary;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.apache.lucene.index.DocValuesType;
import org.apache.lucene.index.FieldInfo;
import org.apache.lucene.index.IndexOptions;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.admin.indices.alias.Alias;
import org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest;
import org.elasticsearch.action.get.GetRequest;
import org.elasticsearch.action.support.replication.BasicReplicationRequest;
import org.elasticsearch.action.termvectors.TermVectorsRequest;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.block.ClusterBlock;
import org.elasticsearch.cluster.block.ClusterBlockLevel;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexTemplateMetaData;
import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;
import org.elasticsearch.cluster.routing.RoutingNodes;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.query.AbstractQueryBuilder;
import org.elasticsearch.index.query.IdsQueryBuilder;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetaDataCreateIndexService_ESTest extends MetaDataCreateIndexService_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertNotNull(basicReplicationRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      
      String string0 = "";
      boolean boolean0 = false;
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest0 = new CreateIndexClusterStateUpdateRequest(basicReplicationRequest0, string0, string0, boolean0);
      assertNotNull(createIndexClusterStateUpdateRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      
      IndexMetaData.State indexMetaData_State0 = IndexMetaData.State.OPEN;
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest1 = createIndexClusterStateUpdateRequest0.state(indexMetaData_State0);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertNotNull(createIndexClusterStateUpdateRequest1);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      
      TreeSet<Alias> treeSet0 = new TreeSet<Alias>();
      assertNotNull(treeSet0);
      
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest2 = createIndexClusterStateUpdateRequest1.aliases((Set<Alias>) treeSet0);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest1);
      assertNotNull(createIndexClusterStateUpdateRequest2);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertEquals("", createIndexClusterStateUpdateRequest2.cause());
      assertEquals("", createIndexClusterStateUpdateRequest2.index());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest2.state());
      assertFalse(createIndexClusterStateUpdateRequest2.updateAllTypes());
      
      ClusterBlock[] clusterBlockArray0 = new ClusterBlock[2];
      ClusterBlock clusterBlock0 = IndexMetaData.INDEX_METADATA_BLOCK;
      assertNotNull(clusterBlock0);
      assertEquals("index metadata (api)", clusterBlock0.description());
      assertEquals(RestStatus.FORBIDDEN, clusterBlock0.status());
      assertFalse(clusterBlock0.disableStatePersistence());
      assertEquals(9, clusterBlock0.id());
      assertFalse(clusterBlock0.retryable());
      
      clusterBlockArray0[0] = clusterBlock0;
      int int0 = 4548;
      boolean boolean1 = false;
      RestStatus restStatus0 = RestStatus.FOUND;
      EnumSet<ClusterBlockLevel> enumSet0 = ClusterBlockLevel.READ_WRITE;
      assertNotNull(enumSet0);
      assertEquals(2, enumSet0.size());
      
      EnumSet<ClusterBlockLevel> enumSet1 = EnumSet.copyOf(enumSet0);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet0, enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertEquals(2, enumSet1.size());
      assertEquals(2, enumSet0.size());
      
      ClusterBlock clusterBlock1 = new ClusterBlock(int0, string0, boolean0, boolean1, restStatus0, enumSet1);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertFalse(clusterBlock1.equals((Object)clusterBlock0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertNotNull(clusterBlock1);
      assertEquals(2, enumSet1.size());
      assertEquals("", clusterBlock1.description());
      assertFalse(clusterBlock1.retryable());
      assertEquals(RestStatus.FOUND, clusterBlock1.status());
      assertFalse(clusterBlock1.disableStatePersistence());
      assertEquals(4548, clusterBlock1.id());
      assertEquals(2, enumSet0.size());
      
      clusterBlockArray0[1] = clusterBlock1;
      Set<ClusterBlock> set0 = LuceneTestCase.asSet(clusterBlockArray0);
      assertEquals(2, clusterBlockArray0.length);
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(set0.contains(clusterBlock0));
      
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest3 = createIndexClusterStateUpdateRequest2.blocks(set0);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest1);
      assertEquals(2, clusterBlockArray0.length);
      assertNotNull(createIndexClusterStateUpdateRequest3);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest3.state());
      assertFalse(createIndexClusterStateUpdateRequest3.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest3.index());
      assertEquals("", createIndexClusterStateUpdateRequest3.cause());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertEquals("", createIndexClusterStateUpdateRequest2.cause());
      assertEquals("", createIndexClusterStateUpdateRequest2.index());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest2.state());
      assertFalse(createIndexClusterStateUpdateRequest2.updateAllTypes());
      assertTrue(set0.contains(clusterBlock0));
      
      Settings settings0 = null;
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest4 = createIndexClusterStateUpdateRequest3.settings(settings0);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest4);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest4);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest4);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest4);
      assertEquals(2, clusterBlockArray0.length);
      assertNotNull(createIndexClusterStateUpdateRequest4);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest3.state());
      assertFalse(createIndexClusterStateUpdateRequest3.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest3.index());
      assertEquals("", createIndexClusterStateUpdateRequest3.cause());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest4.index());
      assertFalse(createIndexClusterStateUpdateRequest4.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest4.state());
      assertEquals("", createIndexClusterStateUpdateRequest4.cause());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertEquals("", createIndexClusterStateUpdateRequest2.cause());
      assertEquals("", createIndexClusterStateUpdateRequest2.index());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest2.state());
      assertFalse(createIndexClusterStateUpdateRequest2.updateAllTypes());
      assertTrue(set0.contains(clusterBlock0));
      
      IndexTemplateMetaData indexTemplateMetaData0 = IndexTemplateMetaData.PROTO;
      assertNotNull(indexTemplateMetaData0);
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertEquals("", indexTemplateMetaData0.name());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertEquals("", indexTemplateMetaData0.getName());
      assertEquals(0, indexTemplateMetaData0.order());
      assertNull(indexTemplateMetaData0.template());
      
      boolean boolean2 = metaDataCreateIndexService_DefaultIndexTemplateFilter0.apply(createIndexClusterStateUpdateRequest4, indexTemplateMetaData0);
      assertFalse(boolean2);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest4);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest4);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest3);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest2, createIndexClusterStateUpdateRequest4);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest4);
      assertSame(createIndexClusterStateUpdateRequest3, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest0);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest2);
      assertSame(createIndexClusterStateUpdateRequest4, createIndexClusterStateUpdateRequest3);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, clusterBlockArray0.length);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest3.state());
      assertFalse(createIndexClusterStateUpdateRequest3.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest3.index());
      assertEquals("", createIndexClusterStateUpdateRequest3.cause());
      assertEquals("", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals("", createIndexClusterStateUpdateRequest0.index());
      assertFalse(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("", createIndexClusterStateUpdateRequest4.index());
      assertFalse(createIndexClusterStateUpdateRequest4.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest4.state());
      assertEquals("", createIndexClusterStateUpdateRequest4.cause());
      assertEquals("", createIndexClusterStateUpdateRequest1.cause());
      assertEquals("", createIndexClusterStateUpdateRequest1.index());
      assertFalse(createIndexClusterStateUpdateRequest1.updateAllTypes());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertEquals("", indexTemplateMetaData0.name());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertEquals("", indexTemplateMetaData0.getName());
      assertEquals(0, indexTemplateMetaData0.order());
      assertNull(indexTemplateMetaData0.template());
      assertEquals("", createIndexClusterStateUpdateRequest2.cause());
      assertEquals("", createIndexClusterStateUpdateRequest2.index());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest2.state());
      assertFalse(createIndexClusterStateUpdateRequest2.updateAllTypes());
      assertTrue(set0.contains(clusterBlock0));
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      
      String string0 = "failed to create index";
      String string1 = null;
      String string2 = "";
      TermVectorsRequest termVectorsRequest0 = new TermVectorsRequest(string1, clusterState0.UNKNOWN_UUID, string2);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(termVectorsRequest0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      
      boolean boolean0 = true;
      TermVectorsRequest termVectorsRequest1 = termVectorsRequest0.termStatistics(boolean0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(string2, string0);
      assertSame(termVectorsRequest0, termVectorsRequest1);
      assertSame(termVectorsRequest1, termVectorsRequest0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(termVectorsRequest1);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      assertTrue(termVectorsRequest1.realtime());
      assertEquals((-3L), termVectorsRequest1.version());
      assertTrue(termVectorsRequest1.operationThreaded());
      assertEquals(VersionType.INTERNAL, termVectorsRequest1.versionType());
      assertNull(termVectorsRequest1.parent());
      assertNull(termVectorsRequest1.preference());
      assertEquals("", termVectorsRequest1.id());
      assertNull(termVectorsRequest1.index());
      assertEquals("_na_", termVectorsRequest1.type());
      assertFalse(termVectorsRequest1.getShouldPersistResult());
      assertNull(termVectorsRequest1.routing());
      
      boolean boolean1 = false;
      TermVectorsRequest termVectorsRequest2 = termVectorsRequest0.termStatistics(boolean1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(string2, string0);
      assertSame(termVectorsRequest0, termVectorsRequest2);
      assertSame(termVectorsRequest0, termVectorsRequest1);
      assertSame(termVectorsRequest2, termVectorsRequest1);
      assertSame(termVectorsRequest2, termVectorsRequest0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNotNull(termVectorsRequest2);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      assertNull(termVectorsRequest2.parent());
      assertNull(termVectorsRequest2.preference());
      assertEquals("_na_", termVectorsRequest2.type());
      assertEquals(VersionType.INTERNAL, termVectorsRequest2.versionType());
      assertEquals((-3L), termVectorsRequest2.version());
      assertTrue(termVectorsRequest2.operationThreaded());
      assertTrue(termVectorsRequest2.realtime());
      assertFalse(termVectorsRequest2.getShouldPersistResult());
      assertNull(termVectorsRequest2.routing());
      assertEquals("", termVectorsRequest2.id());
      assertNull(termVectorsRequest2.index());
      
      TermVectorsRequest termVectorsRequest3 = termVectorsRequest0.realtime(boolean0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(string2, string0);
      assertSame(termVectorsRequest0, termVectorsRequest2);
      assertSame(termVectorsRequest0, termVectorsRequest3);
      assertSame(termVectorsRequest0, termVectorsRequest1);
      assertSame(termVectorsRequest3, termVectorsRequest1);
      assertSame(termVectorsRequest3, termVectorsRequest2);
      assertSame(termVectorsRequest3, termVectorsRequest0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertNotNull(termVectorsRequest3);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      assertTrue(termVectorsRequest3.operationThreaded());
      assertEquals((-3L), termVectorsRequest3.version());
      assertTrue(termVectorsRequest3.realtime());
      assertEquals("_na_", termVectorsRequest3.type());
      assertEquals(VersionType.INTERNAL, termVectorsRequest3.versionType());
      assertNull(termVectorsRequest3.parent());
      assertNull(termVectorsRequest3.preference());
      assertFalse(termVectorsRequest3.getShouldPersistResult());
      assertNull(termVectorsRequest3.index());
      assertNull(termVectorsRequest3.routing());
      assertEquals("", termVectorsRequest3.id());
      
      TermVectorsRequest termVectorsRequest4 = termVectorsRequest0.offsets(boolean0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(string2, string0);
      assertSame(termVectorsRequest0, termVectorsRequest4);
      assertSame(termVectorsRequest0, termVectorsRequest2);
      assertSame(termVectorsRequest0, termVectorsRequest3);
      assertSame(termVectorsRequest0, termVectorsRequest1);
      assertSame(termVectorsRequest4, termVectorsRequest0);
      assertSame(termVectorsRequest4, termVectorsRequest1);
      assertSame(termVectorsRequest4, termVectorsRequest2);
      assertSame(termVectorsRequest4, termVectorsRequest3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertNotNull(termVectorsRequest4);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      assertTrue(termVectorsRequest4.realtime());
      assertEquals((-3L), termVectorsRequest4.version());
      assertTrue(termVectorsRequest4.operationThreaded());
      assertNull(termVectorsRequest4.routing());
      assertEquals("", termVectorsRequest4.id());
      assertNull(termVectorsRequest4.index());
      assertEquals("_na_", termVectorsRequest4.type());
      assertFalse(termVectorsRequest4.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, termVectorsRequest4.versionType());
      assertNull(termVectorsRequest4.parent());
      assertNull(termVectorsRequest4.preference());
      
      String string3 = "";
      String string4 = "S/Qg";
      Set<String> set0 = termVectorsRequest0.selectedFields();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(termVectorsRequest0, termVectorsRequest4);
      assertSame(termVectorsRequest0, termVectorsRequest2);
      assertSame(termVectorsRequest0, termVectorsRequest3);
      assertSame(termVectorsRequest0, termVectorsRequest1);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertNull(set0);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      
      boolean boolean2 = true;
      String string5 = "";
      TermVectorsRequest termVectorsRequest5 = termVectorsRequest0.type(string5);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(termVectorsRequest5, termVectorsRequest2);
      assertSame(termVectorsRequest5, termVectorsRequest4);
      assertSame(termVectorsRequest5, termVectorsRequest0);
      assertSame(termVectorsRequest5, termVectorsRequest1);
      assertSame(termVectorsRequest5, termVectorsRequest3);
      assertSame(string2, string5);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(termVectorsRequest0, termVectorsRequest4);
      assertSame(termVectorsRequest0, termVectorsRequest2);
      assertSame(termVectorsRequest0, termVectorsRequest3);
      assertSame(termVectorsRequest0, termVectorsRequest5);
      assertSame(termVectorsRequest0, termVectorsRequest1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertSame(string5, string2);
      assertSame(string5, string3);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(termVectorsRequest5);
      assertEquals("", termVectorsRequest5.id());
      assertNull(termVectorsRequest5.index());
      assertFalse(termVectorsRequest5.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest5.version());
      assertNull(termVectorsRequest5.routing());
      assertTrue(termVectorsRequest5.realtime());
      assertEquals("", termVectorsRequest5.type());
      assertTrue(termVectorsRequest5.operationThreaded());
      assertEquals(VersionType.INTERNAL, termVectorsRequest5.versionType());
      assertNull(termVectorsRequest5.preference());
      assertNull(termVectorsRequest5.parent());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertEquals("", termVectorsRequest0.type());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      
      TermVectorsRequest termVectorsRequest6 = termVectorsRequest0.offsets(boolean2);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertSame(termVectorsRequest6, termVectorsRequest0);
      assertSame(termVectorsRequest6, termVectorsRequest1);
      assertSame(termVectorsRequest6, termVectorsRequest4);
      assertSame(termVectorsRequest6, termVectorsRequest5);
      assertSame(termVectorsRequest6, termVectorsRequest2);
      assertSame(termVectorsRequest6, termVectorsRequest3);
      assertSame(string2, string5);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(termVectorsRequest0, termVectorsRequest6);
      assertSame(termVectorsRequest0, termVectorsRequest4);
      assertSame(termVectorsRequest0, termVectorsRequest3);
      assertSame(termVectorsRequest0, termVectorsRequest2);
      assertSame(termVectorsRequest0, termVectorsRequest5);
      assertSame(termVectorsRequest0, termVectorsRequest1);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertNotNull(termVectorsRequest6);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNull(termVectorsRequest6.preference());
      assertEquals("", termVectorsRequest6.type());
      assertTrue(termVectorsRequest6.operationThreaded());
      assertEquals((-3L), termVectorsRequest6.version());
      assertNull(termVectorsRequest6.index());
      assertEquals("", termVectorsRequest6.id());
      assertNull(termVectorsRequest6.routing());
      assertFalse(termVectorsRequest6.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, termVectorsRequest6.versionType());
      assertNull(termVectorsRequest6.parent());
      assertTrue(termVectorsRequest6.realtime());
      assertNull(termVectorsRequest0.routing());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.preference());
      assertEquals("", termVectorsRequest0.type());
      assertTrue(termVectorsRequest0.realtime());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(termVectorsRequest0.index());
      assertEquals("", termVectorsRequest0.id());
      
      Settings settings0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string0, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      int int0 = (-1988);
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = MetaDataCreateIndexService.DEFAULT_INDEX_TEMPLATE_FILTER;
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      String string0 = clusterState0.prettyPrint();
      assertEquals("version: 0\nstate uuid: AwAAAAQAQACFAAAABgAAAA\nfrom_diff: false\nmeta data version: 0\nnodes: \nrouting_table (version 0):\nrouting_nodes:\n---- unassigned\n", string0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(string0);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      Set<String> set0 = null;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      Settings settings2 = settings1.getAsSettings(clusterState0.UNKNOWN_UUID);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(settings0, settings1);
      assertNotSame(settings0, settings2);
      assertNotSame(settings1, settings2);
      assertNotSame(settings1, settings0);
      assertNotSame(settings2, settings0);
      assertNotSame(settings2, settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings1));
      assertNotNull(settings2);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertEquals(0, routingNodes0.size());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertFalse(routingNodes0.hasInactivePrimaries());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      String string1 = "B=";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = 192L;
      System.setCurrentTimeMillis(long0);
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      
      String[] stringArray0 = new String[0];
      IdsQueryBuilder idsQueryBuilder0 = new IdsQueryBuilder(stringArray0);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(0, stringArray0.length);
      assertNotNull(idsQueryBuilder0);
      assertEquals("ids", idsQueryBuilder0.getWriteableName());
      assertNull(idsQueryBuilder0.queryName());
      assertEquals(1.0F, idsQueryBuilder0.boost(), 0.01F);
      
      IdsQueryBuilder idsQueryBuilder1 = idsQueryBuilder0.queryName(clusterState0.UNKNOWN_UUID);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertSame(idsQueryBuilder0, idsQueryBuilder1);
      assertSame(idsQueryBuilder1, idsQueryBuilder0);
      assertEquals(0, stringArray0.length);
      assertNotNull(idsQueryBuilder1);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("ids", idsQueryBuilder0.getWriteableName());
      assertEquals("_na_", idsQueryBuilder0.queryName());
      assertEquals(1.0F, idsQueryBuilder0.boost(), 0.01F);
      assertEquals("ids", idsQueryBuilder1.getWriteableName());
      assertEquals("_na_", idsQueryBuilder1.queryName());
      assertEquals(1.0F, idsQueryBuilder1.boost(), 0.01F);
      
      Set<String> set0 = idsQueryBuilder0.ids();
      assertEquals(1.0F, AbstractQueryBuilder.DEFAULT_BOOST, 0.01F);
      assertSame(idsQueryBuilder0, idsQueryBuilder1);
      assertEquals(0, stringArray0.length);
      assertNotNull(set0);
      assertEquals("ids", idsQueryBuilder0.getWriteableName());
      assertEquals("_na_", idsQueryBuilder0.queryName());
      assertEquals(1.0F, idsQueryBuilder0.boost(), 0.01F);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string1));
      
      Settings.Builder settings_Builder0 = null;
      Index index0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, set0, settings_Builder0, index0, idsQueryBuilder0.NAME);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      
      String string0 = "}`F1^1Yl~";
      String string1 = clusterState0.prettyPrint();
      assertEquals("version: 0\nstate uuid: AAAAAAEAQACCAAAAAwAAAA\nfrom_diff: false\nmeta data version: 0\nnodes: \nrouting_table (version 0):\nrouting_nodes:\n---- unassigned\n", string1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      
      Set<String> set0 = null;
      Settings settings0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, clusterState0.UNKNOWN_UUID, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      String string0 = clusterState0.prettyPrint();
      assertEquals("version: 0\nstate uuid: AAAAAAEAQACCAAAAAwAAAA\nfrom_diff: false\nmeta data version: 0\nnodes: \nrouting_table (version 0):\nrouting_nodes:\n---- unassigned\n", string0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(string0);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      Set<String> set0 = null;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      Settings settings2 = settings1.getAsSettings(clusterState0.UNKNOWN_UUID);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(settings0, settings1);
      assertNotSame(settings0, settings2);
      assertNotSame(settings1, settings2);
      assertNotSame(settings1, settings0);
      assertNotSame(settings2, settings0);
      assertNotSame(settings2, settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings0));
      assertTrue(settings2.equals((Object)settings1));
      assertNotNull(settings2);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      
      RoutingNodes routingNodes0 = clusterState0.getRoutingNodes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(routingNodes0);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(routingNodes0.hasUnassignedPrimaries());
      assertEquals(0, routingNodes0.getRelocatingShardCount());
      assertEquals(0, routingNodes0.size());
      assertFalse(routingNodes0.hasUnassignedShards());
      assertFalse(routingNodes0.hasInactiveShards());
      assertFalse(routingNodes0.hasInactivePrimaries());
      
      boolean boolean0 = false;
      Map<String, Settings> map0 = settings1.getGroups(string0, boolean0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotSame(settings0, settings1);
      assertNotSame(settings0, settings2);
      assertNotSame(settings1, settings2);
      assertNotSame(settings1, settings0);
      assertTrue(settings0.equals((Object)settings2));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertTrue(settings1.equals((Object)settings2));
      assertNotNull(map0);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, clusterState0.UNKNOWN_UUID, set0, clusterState0.UNKNOWN_UUID, settings1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter1 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter1.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter0));
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter1);
      
      String string0 = "index must have 1 or more primary shards";
      GetRequest getRequest0 = new GetRequest(string0);
      assertNotNull(getRequest0);
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertNull(getRequest0.parent());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertFalse(getRequest0.getShouldPersistResult());
      assertFalse(getRequest0.refresh());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      
      boolean boolean0 = true;
      GetRequest getRequest1 = getRequest0.refresh(boolean0);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest1, getRequest0);
      assertNotNull(getRequest1);
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertNull(getRequest0.parent());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertFalse(getRequest0.getShouldPersistResult());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      assertTrue(getRequest0.refresh());
      assertTrue(getRequest1.refresh());
      assertEquals("index must have 1 or more primary shards", getRequest1.index());
      assertNull(getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest1.type());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertTrue(getRequest1.realtime());
      assertEquals((-3L), getRequest1.version());
      assertNull(getRequest1.routing());
      assertFalse(getRequest1.getShouldPersistResult());
      assertNull(getRequest1.parent());
      assertNull(getRequest1.preference());
      
      GetRequest getRequest2 = getRequest1.parent(string0);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest0, getRequest2);
      assertSame(getRequest1, getRequest2);
      assertSame(getRequest1, getRequest0);
      assertSame(getRequest2, getRequest0);
      assertSame(getRequest2, getRequest1);
      assertNotNull(getRequest2);
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertEquals("index must have 1 or more primary shards", getRequest0.parent());
      assertFalse(getRequest0.getShouldPersistResult());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      assertTrue(getRequest0.refresh());
      assertTrue(getRequest1.refresh());
      assertEquals("index must have 1 or more primary shards", getRequest1.index());
      assertNull(getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest1.type());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertTrue(getRequest1.realtime());
      assertEquals((-3L), getRequest1.version());
      assertNull(getRequest1.routing());
      assertFalse(getRequest1.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest1.parent());
      assertNull(getRequest1.preference());
      assertTrue(getRequest2.realtime());
      assertNull(getRequest2.routing());
      assertTrue(getRequest2.operationThreaded());
      assertNull(getRequest2.id());
      assertEquals(VersionType.INTERNAL, getRequest2.versionType());
      assertNull(getRequest2.preference());
      assertTrue(getRequest2.refresh());
      assertFalse(getRequest2.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest2.parent());
      assertFalse(getRequest2.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest2.version());
      assertEquals("index must have 1 or more primary shards", getRequest2.index());
      assertEquals("_all", getRequest2.type());
      
      String string1 = "{index}";
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest0 = new CreateIndexClusterStateUpdateRequest(getRequest2, string0, string1, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(createIndexClusterStateUpdateRequest0);
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertEquals("index must have 1 or more primary shards", getRequest0.parent());
      assertFalse(getRequest0.getShouldPersistResult());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      assertTrue(getRequest0.refresh());
      assertTrue(getRequest1.refresh());
      assertEquals("index must have 1 or more primary shards", getRequest1.index());
      assertNull(getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest1.type());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertTrue(getRequest1.realtime());
      assertEquals((-3L), getRequest1.version());
      assertNull(getRequest1.routing());
      assertFalse(getRequest1.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest1.parent());
      assertNull(getRequest1.preference());
      assertTrue(getRequest2.realtime());
      assertNull(getRequest2.routing());
      assertTrue(getRequest2.operationThreaded());
      assertNull(getRequest2.id());
      assertEquals(VersionType.INTERNAL, getRequest2.versionType());
      assertNull(getRequest2.preference());
      assertTrue(getRequest2.refresh());
      assertFalse(getRequest2.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest2.parent());
      assertFalse(getRequest2.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest2.version());
      assertEquals("index must have 1 or more primary shards", getRequest2.index());
      assertEquals("_all", getRequest2.type());
      assertEquals("{index}", createIndexClusterStateUpdateRequest0.index());
      assertTrue(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("index must have 1 or more primary shards", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      
      Index index0 = null;
      int int0 = 2751;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockInetSocketAddress0);
      
      InetSocketTransportAddress inetSocketTransportAddress0 = new InetSocketTransportAddress(mockInetSocketAddress0);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(inetSocketTransportAddress0);
      assertEquals(2751, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals("/200.42.42.0:2751", mockInetSocketAddress0.toString());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(2751, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      
      String string2 = inetSocketTransportAddress0.getAddress();
      assertEquals("200.42.42.0", string2);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2751, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals("/200.42.42.0:2751", mockInetSocketAddress0.toString());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(2751, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      
      getRequest0.remoteAddress((TransportAddress) inetSocketTransportAddress0);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest0, getRequest2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertEquals("index must have 1 or more primary shards", getRequest0.parent());
      assertFalse(getRequest0.getShouldPersistResult());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      assertTrue(getRequest0.refresh());
      assertEquals(2751, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals("/200.42.42.0:2751", mockInetSocketAddress0.toString());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(2751, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      
      CreateIndexClusterStateUpdateRequest createIndexClusterStateUpdateRequest1 = createIndexClusterStateUpdateRequest0.shrinkFrom(index0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest0, getRequest2);
      assertSame(getRequest1, getRequest2);
      assertSame(getRequest1, getRequest0);
      assertSame(getRequest2, getRequest0);
      assertSame(getRequest2, getRequest1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertSame(createIndexClusterStateUpdateRequest1, createIndexClusterStateUpdateRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(createIndexClusterStateUpdateRequest1);
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertEquals("index must have 1 or more primary shards", getRequest0.parent());
      assertFalse(getRequest0.getShouldPersistResult());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      assertTrue(getRequest0.refresh());
      assertTrue(getRequest1.refresh());
      assertEquals("index must have 1 or more primary shards", getRequest1.index());
      assertNull(getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest1.type());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertTrue(getRequest1.realtime());
      assertEquals((-3L), getRequest1.version());
      assertNull(getRequest1.routing());
      assertFalse(getRequest1.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest1.parent());
      assertNull(getRequest1.preference());
      assertTrue(getRequest2.realtime());
      assertNull(getRequest2.routing());
      assertTrue(getRequest2.operationThreaded());
      assertNull(getRequest2.id());
      assertEquals(VersionType.INTERNAL, getRequest2.versionType());
      assertNull(getRequest2.preference());
      assertTrue(getRequest2.refresh());
      assertFalse(getRequest2.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest2.parent());
      assertFalse(getRequest2.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest2.version());
      assertEquals("index must have 1 or more primary shards", getRequest2.index());
      assertEquals("_all", getRequest2.type());
      assertEquals("{index}", createIndexClusterStateUpdateRequest0.index());
      assertTrue(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("index must have 1 or more primary shards", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest1.state());
      assertEquals("{index}", createIndexClusterStateUpdateRequest1.index());
      assertEquals("index must have 1 or more primary shards", createIndexClusterStateUpdateRequest1.cause());
      assertTrue(createIndexClusterStateUpdateRequest1.updateAllTypes());
      
      String[] stringArray0 = new String[4];
      String string3 = "wait what? ";
      stringArray0[0] = string3;
      stringArray0[1] = string2;
      stringArray0[2] = string2;
      stringArray0[3] = string1;
      GetRequest getRequest3 = getRequest2.fields(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(getRequest0, getRequest3);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest0, getRequest2);
      assertSame(getRequest1, getRequest3);
      assertSame(getRequest1, getRequest2);
      assertSame(getRequest1, getRequest0);
      assertSame(getRequest3, getRequest1);
      assertSame(getRequest3, getRequest2);
      assertSame(getRequest3, getRequest0);
      assertSame(getRequest2, getRequest0);
      assertSame(getRequest2, getRequest1);
      assertSame(getRequest2, getRequest3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertNotNull(getRequest3);
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertEquals("index must have 1 or more primary shards", getRequest0.parent());
      assertFalse(getRequest0.getShouldPersistResult());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      assertTrue(getRequest0.refresh());
      assertTrue(getRequest1.refresh());
      assertEquals("index must have 1 or more primary shards", getRequest1.index());
      assertNull(getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest1.type());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertTrue(getRequest1.realtime());
      assertEquals((-3L), getRequest1.version());
      assertNull(getRequest1.routing());
      assertFalse(getRequest1.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest1.parent());
      assertNull(getRequest1.preference());
      assertEquals(VersionType.INTERNAL, getRequest3.versionType());
      assertEquals((-3L), getRequest3.version());
      assertTrue(getRequest3.realtime());
      assertEquals("_all", getRequest3.type());
      assertTrue(getRequest3.operationThreaded());
      assertNull(getRequest3.preference());
      assertTrue(getRequest3.refresh());
      assertEquals("index must have 1 or more primary shards", getRequest3.parent());
      assertFalse(getRequest3.ignoreErrorsOnGeneratedFields());
      assertFalse(getRequest3.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest3.index());
      assertNull(getRequest3.id());
      assertNull(getRequest3.routing());
      assertTrue(getRequest2.realtime());
      assertNull(getRequest2.routing());
      assertTrue(getRequest2.operationThreaded());
      assertNull(getRequest2.id());
      assertEquals(VersionType.INTERNAL, getRequest2.versionType());
      assertNull(getRequest2.preference());
      assertTrue(getRequest2.refresh());
      assertFalse(getRequest2.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest2.parent());
      assertFalse(getRequest2.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest2.version());
      assertEquals("index must have 1 or more primary shards", getRequest2.index());
      assertEquals("_all", getRequest2.type());
      
      IndexTemplateMetaData indexTemplateMetaData0 = IndexTemplateMetaData.PROTO;
      assertNotNull(indexTemplateMetaData0);
      assertEquals("", indexTemplateMetaData0.name());
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertEquals("", indexTemplateMetaData0.getName());
      assertNull(indexTemplateMetaData0.template());
      assertEquals(0, indexTemplateMetaData0.order());
      
      boolean boolean1 = metaDataCreateIndexService_DefaultIndexTemplateFilter0.apply(createIndexClusterStateUpdateRequest0, indexTemplateMetaData0);
      assertFalse(boolean1);
      assertNotSame(metaDataCreateIndexService_DefaultIndexTemplateFilter0, metaDataCreateIndexService_DefaultIndexTemplateFilter1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(getRequest0, getRequest3);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest0, getRequest2);
      assertSame(getRequest1, getRequest3);
      assertSame(getRequest1, getRequest2);
      assertSame(getRequest1, getRequest0);
      assertSame(getRequest2, getRequest0);
      assertSame(getRequest2, getRequest1);
      assertSame(getRequest2, getRequest3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(createIndexClusterStateUpdateRequest0, createIndexClusterStateUpdateRequest1);
      assertFalse(metaDataCreateIndexService_DefaultIndexTemplateFilter0.equals((Object)metaDataCreateIndexService_DefaultIndexTemplateFilter1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.id());
      assertEquals("index must have 1 or more primary shards", getRequest0.index());
      assertTrue(getRequest0.realtime());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest0.type());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertEquals((-3L), getRequest0.version());
      assertEquals("index must have 1 or more primary shards", getRequest0.parent());
      assertFalse(getRequest0.getShouldPersistResult());
      assertNull(getRequest0.routing());
      assertNull(getRequest0.preference());
      assertTrue(getRequest0.refresh());
      assertTrue(getRequest1.refresh());
      assertEquals("index must have 1 or more primary shards", getRequest1.index());
      assertNull(getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals("_all", getRequest1.type());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertTrue(getRequest1.realtime());
      assertEquals((-3L), getRequest1.version());
      assertNull(getRequest1.routing());
      assertFalse(getRequest1.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest1.parent());
      assertNull(getRequest1.preference());
      assertTrue(getRequest2.realtime());
      assertNull(getRequest2.routing());
      assertTrue(getRequest2.operationThreaded());
      assertNull(getRequest2.id());
      assertEquals(VersionType.INTERNAL, getRequest2.versionType());
      assertNull(getRequest2.preference());
      assertTrue(getRequest2.refresh());
      assertFalse(getRequest2.getShouldPersistResult());
      assertEquals("index must have 1 or more primary shards", getRequest2.parent());
      assertFalse(getRequest2.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest2.version());
      assertEquals("index must have 1 or more primary shards", getRequest2.index());
      assertEquals("_all", getRequest2.type());
      assertEquals("", indexTemplateMetaData0.name());
      assertEquals(0, indexTemplateMetaData0.getOrder());
      assertNull(indexTemplateMetaData0.getTemplate());
      assertEquals("", indexTemplateMetaData0.getName());
      assertNull(indexTemplateMetaData0.template());
      assertEquals(0, indexTemplateMetaData0.order());
      assertEquals("{index}", createIndexClusterStateUpdateRequest0.index());
      assertTrue(createIndexClusterStateUpdateRequest0.updateAllTypes());
      assertEquals("index must have 1 or more primary shards", createIndexClusterStateUpdateRequest0.cause());
      assertEquals(IndexMetaData.State.OPEN, createIndexClusterStateUpdateRequest0.state());
      
      ClusterState clusterState0 = null;
      Set<String> set0 = null;
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string3, set0, stringArray0[0], settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = new MetaDataCreateIndexService.DefaultIndexTemplateFilter();
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      ClusterState clusterState0 = null;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<String> set1 = charset0.aliases();
      assertSame(set1, set0);
      assertNotNull(set1);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      String string0 = "PyV2)Gt\\3";
      String[] stringArray0 = new String[0];
      Settings.Builder settings_Builder1 = settings_Builder0.extendArray(string0, stringArray0);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertEquals(0, stringArray0.length);
      assertNotNull(settings_Builder1);
      
      String string1 = null;
      double double0 = 216.8;
      Settings.Builder settings_Builder2 = settings_Builder1.put(string1, double0);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertEquals(0, stringArray0.length);
      assertNotNull(settings_Builder2);
      
      String string2 = "";
      boolean boolean0 = false;
      Settings.Builder settings_Builder3 = settings_Builder1.put(settings_Builder2.EMPTY_SETTINGS);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder1);
      assertNotSame(string0, string2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder0);
      assertFalse(string0.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertNotNull(settings_Builder3);
      
      Settings.Builder settings_Builder4 = settings_Builder2.put(string2, boolean0);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder1);
      assertNotSame(string0, string2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder3);
      assertNotSame(string2, string0);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(settings_Builder4);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Properties properties1 = new Properties(properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      char char0 = 'I';
      StringWriter stringWriter1 = stringWriter0.append(char0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("I", stringWriter0.toString());
      assertEquals("I", stringWriter1.toString());
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) string0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      assertNotNull(stringWriter2);
      assertEquals("IPyV2)Gt\\3", stringWriter0.toString());
      assertEquals("IPyV2)Gt\\3", stringWriter1.toString());
      assertEquals("IPyV2)Gt\\3", stringWriter2.toString());
      
      String string3 = "[]5z1XShZ";
      properties0.store((Writer) stringWriter2, string3);
      assertNotSame(properties0, properties1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertTrue(properties0.equals((Object)properties1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals("IPyV2)Gt\\3#[]5z1XShZ\n#Sat Nov 06 11:25:14 GMT 2021\n", stringWriter0.toString());
      assertEquals("IPyV2)Gt\\3#[]5z1XShZ\n#Sat Nov 06 11:25:14 GMT 2021\n", stringWriter1.toString());
      assertEquals("IPyV2)Gt\\3#[]5z1XShZ\n#Sat Nov 06 11:25:14 GMT 2021\n", stringWriter2.toString());
      
      Settings.Builder settings_Builder5 = settings_Builder4.put((Dictionary<Object, Object>) properties1);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder5);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(settings_Builder5, settings_Builder4);
      assertSame(settings_Builder5, settings_Builder3);
      assertSame(settings_Builder5, settings_Builder0);
      assertSame(settings_Builder5, settings_Builder1);
      assertSame(settings_Builder5, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder5);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder5);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder4, settings_Builder5);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals(0, stringArray0.length);
      assertNotNull(settings_Builder5);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      
      int int0 = 0;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      assertNotNull(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(mockThread0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      MockThread.reset();
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) int0, timeUnit0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(scheduledFuture0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      BiFunction<Object, Object, SQLIntegrityConstraintViolationException> biFunction0 = (BiFunction<Object, Object, SQLIntegrityConstraintViolationException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Object object0 = properties1.compute(scheduledFuture0, biFunction0);
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNull(object0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      Index index0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, set1, settings_Builder5, index0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      MetaDataCreateIndexService.DefaultIndexTemplateFilter metaDataCreateIndexService_DefaultIndexTemplateFilter0 = MetaDataCreateIndexService.DEFAULT_INDEX_TEMPLATE_FILTER;
      assertNotNull(metaDataCreateIndexService_DefaultIndexTemplateFilter0);
      
      long long0 = 2071L;
      String string0 = "E'5\"[[xNtn|R";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertNotNull(clusterState0);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertNotNull(clusterState1);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(2071L, clusterState1.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(2071L, clusterState1.version());
      assertEquals("E'5\"[[xNtn|R", clusterState1.stateUUID());
      
      String string1 = "#}";
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(string1));
      
      String string2 = " Hx*Mnuz\\";
      int int0 = 773;
      boolean boolean0 = true;
      boolean boolean1 = false;
      IndexOptions indexOptions0 = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;
      DocValuesType docValuesType0 = DocValuesType.SORTED;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int1 = 16777216;
      FieldInfo fieldInfo0 = new FieldInfo(string2, int0, boolean0, boolean1, boolean1, indexOptions0, docValuesType0, clusterState1.UNKNOWN_VERSION, hashMap0, int0, int1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(773, fieldInfo0.number);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertNotNull(fieldInfo0);
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(2071L, clusterState1.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(2071L, clusterState1.version());
      assertEquals("E'5\"[[xNtn|R", clusterState1.stateUUID());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertFalse(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasNorms());
      assertEquals(16777216, fieldInfo0.getPointNumBytes());
      assertEquals(773, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, fieldInfo0.getIndexOptions());
      assertFalse(fieldInfo0.hasPayloads());
      
      Map<String, String> map0 = fieldInfo0.attributes();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(773, fieldInfo0.number);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(2071L, clusterState1.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(2071L, clusterState1.version());
      assertEquals("E'5\"[[xNtn|R", clusterState1.stateUUID());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertFalse(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasNorms());
      assertEquals(16777216, fieldInfo0.getPointNumBytes());
      assertEquals(773, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, fieldInfo0.getIndexOptions());
      assertFalse(fieldInfo0.hasPayloads());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(773, fieldInfo0.number);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertNotNull(fakeRestRequest0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(2071L, clusterState1.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(2071L, clusterState1.version());
      assertEquals("E'5\"[[xNtn|R", clusterState1.stateUUID());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertFalse(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasNorms());
      assertEquals(16777216, fieldInfo0.getPointNumBytes());
      assertEquals(773, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, fieldInfo0.getIndexOptions());
      assertFalse(fieldInfo0.hasPayloads());
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = SettingsFilter.filterSettings(fakeRestRequest0, settings0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(773, fieldInfo0.number);
      assertSame(settings0, settings1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(settings1, settings0);
      assertNotSame(clusterState0, clusterState1);
      assertNotSame(clusterState1, clusterState0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertNotNull(settings1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("AAAAAAEAQACCAAAAAwAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(2071L, clusterState1.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(2071L, clusterState1.version());
      assertEquals("E'5\"[[xNtn|R", clusterState1.stateUUID());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertFalse(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.SORTED, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasNorms());
      assertEquals(16777216, fieldInfo0.getPointNumBytes());
      assertEquals(773, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, fieldInfo0.getIndexOptions());
      assertFalse(fieldInfo0.hasPayloads());
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState1, string1, hashSet0, string1, settings1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }
}
