/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 10:32:04 GMT 2021
 */

package org.elasticsearch.cluster.metadata;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.util.automaton.RegExp;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.Version;
import org.elasticsearch.action.termvectors.TermVectorsRequest;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.block.ClusterBlocks;
import org.elasticsearch.cluster.metadata.IndexTemplateFilter;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;
import org.elasticsearch.cluster.node.DiscoveryNodes;
import org.elasticsearch.cluster.routing.RoutingTable;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.query.MoreLikeThisQueryBuilder;
import org.elasticsearch.rest.RestStatus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetaDataCreateIndexService_ESTest extends MetaDataCreateIndexService_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertNotNull(clusterState0);
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, metaData0.ALL, metaData0.CLUSTER_BYTES_SIZE_SETTINGS, metaData0.CONTEXT_MODE_PARAM, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertNotNull(clusterState0);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertNotNull(set0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Index index0 = new Index(clusterState0.UNKNOWN_UUID, clusterState0.UNKNOWN_UUID);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("_na_", index0.getUUID());
      assertEquals("_na_", index0.getName());
      assertNotNull(index0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, set0, settings_Builder0, index0, clusterState0.UNKNOWN_UUID);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      ClusterState clusterState0 = null;
      String string0 = "sVgmk\\&;9>I80?ub^i";
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertEquals(600, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string0, settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      ClusterState clusterState0 = null;
      String string0 = "1OH\\]/a{;o";
      Set<String> set0 = null;
      String string1 = "/s_K-~>is{u\"TAG\"";
      int int0 = 3202;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3202, byteBuffer0.limit());
      assertEquals(3202, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3202 cap=3202]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3202, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3202, byteBuffer0.limit());
      assertEquals(3202, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3202 cap=3202]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3202, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotNull(byteBufferBytesReference0);
      
      int int1 = byteBufferBytesReference0.length();
      assertTrue(int1 == int0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3202, byteBuffer0.limit());
      assertEquals(3202, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3202 cap=3202]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3202, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals(3202, int1);
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertTrue(int0 == int1);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3202, byteBuffer0.limit());
      assertEquals(3202, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3202 cap=3202]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3202, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      
      Settings settings0 = Settings.readSettingsFromStream(streamInput0);
      assertTrue(int0 == int1);
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3202, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=3202 cap=3202]", byteBuffer0.toString());
      assertEquals(3201, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3202, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertNotNull(settings0);
      
      Map<String, Settings> map0 = settings0.getAsGroups();
      assertTrue(int0 == int1);
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3202, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=3202 cap=3202]", byteBuffer0.toString());
      assertEquals(3201, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3202, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string1, settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertNotNull(clusterState0);
      
      String string0 = ":PlBA~w7Id<,a%(kLSn";
      Set<String> set0 = null;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string0, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertNotNull(clusterState0);
      
      String string0 = "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = "create-index [";
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.validateShrinkIndex(clusterState0, string0, set0, string1, settings0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      long long0 = 0L;
      String string0 = "create-index [";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(0L, clusterState1.version());
      assertEquals("create-index [", clusterState1.stateUUID());
      assertEquals(0L, clusterState1.getVersion());
      assertNotNull(clusterState1);
      
      TermVectorsRequest termVectorsRequest0 = new TermVectorsRequest();
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertNull(termVectorsRequest0.type());
      assertTrue(termVectorsRequest0.realtime());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.routing());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertNull(termVectorsRequest0.index());
      assertNull(termVectorsRequest0.id());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNotNull(termVectorsRequest0);
      
      Set<String> set0 = termVectorsRequest0.selectedFields();
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals((-3L), termVectorsRequest0.version());
      assertNull(termVectorsRequest0.type());
      assertTrue(termVectorsRequest0.realtime());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.routing());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertNull(termVectorsRequest0.index());
      assertNull(termVectorsRequest0.id());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(set0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Class<QueryParser.Operator> class0 = QueryParser.Operator.class;
      Settings.Builder settings_Builder1 = settings_Builder0.put(clusterState0.UNKNOWN_UUID, class0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(settings_Builder1);
      
      int int0 = 3;
      float float0 = 1.0F;
      Hashtable<Object, Object> hashtable0 = new Hashtable<Object, Object>(int0, float0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Settings.Builder settings_Builder2 = settings_Builder1.put((Dictionary<Object, Object>) hashtable0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(settings_Builder2);
      
      String string1 = ");y@kHv${{Wn9#9&[A";
      Version version0 = Version.V_2_3_3;
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)3, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, version0.id);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)3, version0.revision);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertNotNull(version0);
      
      Settings.Builder settings_Builder3 = settings_Builder2.put(string1, version0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertNotSame(string1, string0);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder2);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)3, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, version0.id);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)3, version0.revision);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertNotNull(settings_Builder3);
      
      long long1 = (-959L);
      Settings.Builder settings_Builder4 = settings_Builder3.put(string0, long1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long1 == long0);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder4);
      assertNotSame(string1, string0);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder4);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)3, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, version0.id);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)3, version0.revision);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertNotNull(settings_Builder4);
      
      Index index0 = null;
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState1, set0, settings_Builder4, index0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      long long0 = 705L;
      String string0 = "dl,@ZFm}J";
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("dl,@ZFm}J", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertEquals(705L, clusterState1.version());
      assertEquals(705L, clusterState1.getVersion());
      assertNotNull(clusterState1);
      
      RegExp regExp0 = new RegExp(string0);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertNotNull(regExp0);
      
      Set<String> set0 = regExp0.getIdentifiers();
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Class<IndexTemplateFilter.Compound> class0 = IndexTemplateFilter.Compound.class;
      Settings.Builder settings_Builder1 = settings_Builder0.put(clusterState0.UNKNOWN_UUID, class0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertNotNull(settings_Builder1);
      
      Map<String, String> map0 = settings_Builder1.EMPTY_SETTINGS.getAsMap();
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Settings.Builder settings_Builder2 = settings_Builder1.put(map0);
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(settings_Builder2);
      
      String string1 = "Adding AppenderMBean for appender named ";
      Settings.Builder settings_Builder3 = settings_Builder2.put(string1, regExp0.INTERVAL);
      assertFalse(string0.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertNotSame(string1, string0);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(settings_Builder3);
      
      String string2 = "org.apache.lucene.search.FakeScorer";
      String[] stringArray0 = new String[6];
      stringArray0[0] = clusterState1.UNKNOWN_UUID;
      stringArray0[1] = string1;
      stringArray0[2] = string2;
      String string3 = "";
      Settings.Builder settings_Builder4 = settings_Builder2.put(string3, regExp0.INTERSECTION);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(settings_Builder4);
      
      stringArray0[3] = clusterState1.UNKNOWN_UUID;
      stringArray0[4] = clusterState1.UNKNOWN_UUID;
      stringArray0[5] = clusterState1.UNKNOWN_UUID;
      Settings.Builder settings_Builder5 = settings_Builder3.putArray(string2, stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(clusterState0.equals((Object)clusterState1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(clusterState0, clusterState1);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder5);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder5);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder5);
      assertSame(settings_Builder2, settings_Builder1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder4);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(settings_Builder5, settings_Builder1);
      assertSame(settings_Builder5, settings_Builder2);
      assertSame(settings_Builder5, settings_Builder0);
      assertSame(settings_Builder5, settings_Builder3);
      assertSame(settings_Builder5, settings_Builder4);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertFalse(clusterState0.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(0L, clusterState0.version());
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(settings_Builder5);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(regExp0.AUTOMATON);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(16, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=16 cap=16]", byteBuffer0.toString());
      assertEquals(16, byteBuffer0.limit());
      assertEquals(16, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(16, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=16 cap=16]", byteBuffer0.toString());
      assertEquals(16, byteBuffer0.limit());
      assertEquals(16, byteBuffer0.capacity());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertNotNull(byteBufferBytesReference0);
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(16, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=16 cap=16]", byteBuffer0.toString());
      assertEquals(16, byteBuffer0.limit());
      assertEquals(16, byteBuffer0.capacity());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      
      ByteBuffer byteBuffer1 = byteBuffer0.slice();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(16, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=16 cap=16]", byteBuffer0.toString());
      assertEquals(16, byteBuffer0.limit());
      assertEquals(16, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=16 cap=16]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(16, byteBuffer1.limit());
      assertEquals(16, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(16, byteBuffer1.remaining());
      assertTrue(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.hasArray());
      assertNotNull(byteBuffer1);
      
      ParsingException parsingException0 = new ParsingException(streamInput0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(byteBuffer0.equals((Object)byteBuffer1));
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertNotNull(parsingException0);
      
      Index index0 = parsingException0.getIndex();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(byteBuffer0.equals((Object)byteBuffer1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertEquals(16, RegExp.AUTOMATON);
      assertEquals(2, RegExp.COMPLEMENT);
      assertEquals(65535, RegExp.ALL);
      assertEquals(0, RegExp.NONE);
      assertEquals(32, RegExp.INTERVAL);
      assertEquals(4, RegExp.EMPTY);
      assertEquals(1, RegExp.INTERSECTION);
      assertEquals(8, RegExp.ANYSTRING);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals("dl,@ZFm}J", regExp0.getOriginalString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=13 lim=16 cap=16]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(13, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(16, byteBuffer0.limit());
      assertEquals(16, byteBuffer0.capacity());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertNull(index0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState1, set0, settings_Builder5, index0, clusterState1.UNKNOWN_UUID);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      long long0 = (-2488L);
      String string0 = "";
      ClusterName clusterName0 = null;
      long long1 = 0L;
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      RoutingTable routingTable0 = null;
      DiscoveryNodes discoveryNodes0 = DiscoveryNodes.EMPTY_NODES;
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertNotNull(discoveryNodes0);
      
      ClusterBlocks clusterBlocks0 = ClusterBlocks.PROTO;
      assertNotNull(clusterBlocks0);
      
      ImmutableOpenMap<String, ClusterState.Custom> immutableOpenMap0 = ImmutableOpenMap.of();
      assertEquals(0, immutableOpenMap0.size());
      assertTrue(immutableOpenMap0.isEmpty());
      assertNotNull(immutableOpenMap0);
      
      boolean boolean0 = true;
      ClusterState clusterState0 = new ClusterState(clusterName0, long1, string0, metaData0, routingTable0, discoveryNodes0, clusterBlocks0, immutableOpenMap0, boolean0);
      assertFalse(long1 == long0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertEquals(0, immutableOpenMap0.size());
      assertTrue(immutableOpenMap0.isEmpty());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("", clusterState0.stateUUID());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertNotNull(clusterState0);
      
      ClusterState clusterState1 = new ClusterState(long0, string0, clusterState0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(clusterState1.equals((Object)clusterState0));
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNull(discoveryNodes0.getMasterNodeId());
      assertFalse(discoveryNodes0.isLocalNodeElectedMaster());
      assertEquals(0, discoveryNodes0.getSize());
      assertNull(discoveryNodes0.getLocalNodeId());
      assertEquals(0, immutableOpenMap0.size());
      assertTrue(immutableOpenMap0.isEmpty());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals("", clusterState0.stateUUID());
      assertTrue(clusterState0.wasReadFromDiff());
      assertEquals(0L, clusterState0.version());
      assertEquals((-2488L), clusterState1.version());
      assertEquals((-2488L), clusterState1.getVersion());
      assertEquals("", clusterState1.stateUUID());
      assertFalse(clusterState1.wasReadFromDiff());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState1.status());
      assertNotNull(clusterState1);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      String string1 = "";
      Settings.Builder settings_Builder1 = settings_Builder0.loadFromSource(string1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(string1, string0);
      assertSame(settings_Builder1, settings_Builder0);
      assertNotNull(settings_Builder1);
      
      Settings.Builder settings_Builder2 = settings_Builder1.replacePropertyPlaceholders();
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(string1, string0);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertNotNull(settings_Builder2);
      
      Settings.Builder settings_Builder3 = settings_Builder2.put(settings_Builder1.EMPTY_SETTINGS);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(string1, string0);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder3);
      assertNotNull(settings_Builder3);
      
      String string2 = "wait what? ";
      Settings.Builder settings_Builder4 = settings_Builder3.normalizePrefix(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertSame(settings_Builder3, settings_Builder4);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder0);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder3);
      assertNotNull(settings_Builder4);
      
      String string3 = "script";
      Index index0 = new Index(metaData0.ALL, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("script", index0.getUUID());
      assertEquals("_all", index0.getName());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotNull(index0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState1, metaData0.CLUSTER_BYTES_SIZE_SETTINGS, settings_Builder4, index0, metaData0.ALL);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }

  @Test(timeout = 11000)
  public void test9()  throws Throwable  {
      ClusterState clusterState0 = ClusterState.PROTO;
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(clusterState0);
      
      XContentBuilder xContentBuilder0 = SmileXContent.contentBuilder();
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      MoreLikeThisQueryBuilder.Item moreLikeThisQueryBuilder_Item0 = new MoreLikeThisQueryBuilder.Item(clusterState0.UNKNOWN_UUID, clusterState0.UNKNOWN_UUID, xContentBuilder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertNull(moreLikeThisQueryBuilder_Item0.id());
      assertEquals("_na_", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("_na_", moreLikeThisQueryBuilder_Item0.type());
      assertNotNull(moreLikeThisQueryBuilder_Item0);
      
      TermVectorsRequest termVectorsRequest0 = moreLikeThisQueryBuilder_Item0.toTermVectorsRequest();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("0", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("_na_", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("_na_", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals("0", termVectorsRequest0.id());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.realtime());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.routing());
      assertEquals("_na_", termVectorsRequest0.index());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNotNull(termVectorsRequest0);
      
      Set<String> set0 = termVectorsRequest0.selectedFields();
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(VersionType.INTERNAL, moreLikeThisQueryBuilder_Item0.versionType());
      assertEquals((-3L), moreLikeThisQueryBuilder_Item0.version());
      assertNull(moreLikeThisQueryBuilder_Item0.routing());
      assertEquals("0", moreLikeThisQueryBuilder_Item0.id());
      assertEquals("_na_", moreLikeThisQueryBuilder_Item0.index());
      assertEquals("_na_", moreLikeThisQueryBuilder_Item0.type());
      assertEquals("_na_", termVectorsRequest0.type());
      assertFalse(termVectorsRequest0.getShouldPersistResult());
      assertEquals("0", termVectorsRequest0.id());
      assertEquals(VersionType.INTERNAL, termVectorsRequest0.versionType());
      assertEquals((-3L), termVectorsRequest0.version());
      assertTrue(termVectorsRequest0.realtime());
      assertNull(termVectorsRequest0.parent());
      assertNull(termVectorsRequest0.routing());
      assertEquals("_na_", termVectorsRequest0.index());
      assertNull(termVectorsRequest0.preference());
      assertTrue(termVectorsRequest0.operationThreaded());
      assertNull(set0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Settings.Builder settings_Builder1 = settings_Builder0.replacePropertyPlaceholders();
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertNotNull(settings_Builder1);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Settings.Builder settings_Builder2 = settings_Builder1.put(clusterState0.UNKNOWN_UUID, clusterState0.UNKNOWN_VERSION, timeUnit0);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(settings_Builder2);
      
      String[] stringArray0 = new String[6];
      String string0 = "-4+<H^AJMJ7{1";
      stringArray0[0] = string0;
      stringArray0[1] = clusterState0.UNKNOWN_UUID;
      stringArray0[2] = clusterState0.UNKNOWN_UUID;
      stringArray0[3] = clusterState0.UNKNOWN_UUID;
      stringArray0[4] = clusterState0.UNKNOWN_UUID;
      String string1 = "'_|NFyg{v%";
      stringArray0[5] = string1;
      Settings.Builder settings_Builder3 = settings_Builder2.extendArray(clusterState0.UNKNOWN_UUID, stringArray0);
      assertEquals(6, stringArray0.length);
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(settings_Builder3);
      
      String string2 = "$+.lE";
      boolean boolean0 = false;
      Settings.Builder settings_Builder4 = settings_Builder3.put(string2, boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(settings_Builder3, settings_Builder1);
      assertSame(settings_Builder3, settings_Builder0);
      assertSame(settings_Builder3, settings_Builder2);
      assertSame(settings_Builder3, settings_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(settings_Builder4, settings_Builder3);
      assertSame(settings_Builder4, settings_Builder0);
      assertSame(settings_Builder4, settings_Builder2);
      assertSame(settings_Builder4, settings_Builder1);
      assertSame(settings_Builder0, settings_Builder3);
      assertSame(settings_Builder0, settings_Builder4);
      assertSame(settings_Builder0, settings_Builder2);
      assertSame(settings_Builder0, settings_Builder1);
      assertSame(settings_Builder1, settings_Builder0);
      assertSame(settings_Builder1, settings_Builder2);
      assertSame(settings_Builder1, settings_Builder4);
      assertSame(settings_Builder1, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder1);
      assertSame(settings_Builder2, settings_Builder3);
      assertSame(settings_Builder2, settings_Builder4);
      assertSame(settings_Builder2, settings_Builder0);
      assertEquals((-1L), ClusterState.UNKNOWN_VERSION);
      assertEquals("AwAAAAQAQACFAAAABgAAAA", clusterState0.stateUUID());
      assertEquals(0L, clusterState0.version());
      assertEquals(0L, clusterState0.getVersion());
      assertEquals(ClusterState.ClusterStateStatus.UNKNOWN, clusterState0.status());
      assertFalse(clusterState0.wasReadFromDiff());
      assertNotNull(settings_Builder4);
      
      String string3 = "BP4B1)cO1V,:(";
      Index index0 = new Index(stringArray0[3], string3);
      assertEquals(6, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_na_", index0.getName());
      assertEquals("BP4B1)cO1V,:(", index0.getUUID());
      assertNotNull(index0);
      
      // Undeclared exception!
      try { 
        MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState0, set0, settings_Builder4, index0, string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no such index
         //
         verifyException("org.elasticsearch.cluster.metadata.MetaDataCreateIndexService", e);
      }
  }
}
