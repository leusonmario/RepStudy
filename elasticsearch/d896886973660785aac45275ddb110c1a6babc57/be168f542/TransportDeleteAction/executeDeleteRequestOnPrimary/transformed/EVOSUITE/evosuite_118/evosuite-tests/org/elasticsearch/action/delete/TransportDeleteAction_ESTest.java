/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 15:20:37 GMT 2021
 */

package org.elasticsearch.action.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.TransportDeleteAction;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.shard.IndexShard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportDeleteAction_ESTest extends TransportDeleteAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.type());
      assertNotNull(deleteRequest0);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNotNull(deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_SNAPSHOT, deleteRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.GLOBAL_STATE_FILE_PREFIX, deleteRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      IndexShard indexShard0 = null;
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertNotNull(deleteRequest0);
      
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      DeleteRequest deleteRequest0 = new DeleteRequest(metaData0.CONTEXT_MODE_PARAM);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(deleteRequest0.type());
      assertEquals("context_mode", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.parent(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(deleteRequest0.type());
      assertEquals("context_mode", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertEquals("global-", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("context_mode", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertEquals("global-", deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.ALL, deleteRequest1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(deleteRequest0.type());
      assertEquals("context_mode", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("global-", deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertEquals("global-", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("context_mode", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertEquals("global-", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("global-", deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = ")omuNK";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(")omuNK", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertNotNull(deleteRequest0);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      MetaData metaData0 = null;
      String string0 = "g(sMv:i-YlMl~";
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertNotNull(deleteRequest0);
      
      // Undeclared exception!
      try { 
        TransportDeleteAction.resolveAndValidateRouting(metaData0, string0, deleteRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      String string0 = "OPEN";
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNotNull(deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, string0, deleteRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertNotNull(deleteRequest0);
      
      WriteRequest.RefreshPolicy writeRequest_RefreshPolicy0 = WriteRequest.RefreshPolicy.WAIT_UNTIL;
      DeleteRequest deleteRequest1 = deleteRequest0.setRefreshPolicy(writeRequest_RefreshPolicy0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest1.type());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, deleteRequest1.getRefreshPolicy());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNotNull(deleteRequest0);
      
      String string0 = "";
      DeleteRequest deleteRequest1 = deleteRequest0.routing(string0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      
      String string1 = "";
      DeleteRequest deleteRequest2 = deleteRequest1.parent(string1);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("", deleteRequest0.parent());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("", deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.index());
      assertNull(deleteRequest2.routing());
      assertEquals("", deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertNull(deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertNull(deleteRequest2.type());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(string0, string1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotNull(deleteRequest2);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest2, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      String string1 = "key";
      String string2 = "<5AEQ3R:)K,%Dn4MdaP";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string1, string2);
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("key", deleteRequest0.type());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNotNull(deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      VersionType versionType0 = VersionType.EXTERNAL;
      DeleteRequest deleteRequest1 = deleteRequest0.versionType(versionType0);
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("key", deleteRequest0.type());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("key", deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.routing());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long0 = 0L;
      DeleteRequest deleteRequest2 = deleteRequest1.version(long0);
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.version());
      assertEquals("key", deleteRequest0.type());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("key", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.version());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(0L, deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest2.id());
      assertEquals("key", deleteRequest2.type());
      assertEquals("", deleteRequest2.index());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotNull(deleteRequest2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = deleteRequest2.getDescription();
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL, deleteRequest0.versionType());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.version());
      assertEquals("key", deleteRequest0.type());
      assertEquals("", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.EXTERNAL, deleteRequest1.versionType());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("key", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.version());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(0L, deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("<5AEQ3R:)K,%Dn4MdaP", deleteRequest2.id());
      assertEquals("key", deleteRequest2.type());
      assertEquals("", deleteRequest2.index());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(VersionType.EXTERNAL, deleteRequest2.versionType());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals("delete {[][key][<5AEQ3R:)K,%Dn4MdaP]}", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest2, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      String string0 = "Node(";
      DeleteRequest deleteRequest0 = new DeleteRequest(metaData0.CONTEXT_MODE_PARAM, string0, metaData0.CONTEXT_MODE_SNAPSHOT);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("context_mode", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("SNAPSHOT", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("Node(", deleteRequest0.type());
      assertNotNull(deleteRequest0);
      
      String string1 = "org.elasticsearch.index.mapper.Mapper$TypeParser$ParserContext";
      DeleteRequest deleteRequest1 = deleteRequest0.routing(string1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("org.elasticsearch.index.mapper.Mapper$TypeParser$ParserContext", deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("context_mode", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.parent());
      assertEquals("SNAPSHOT", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("Node(", deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.parent());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("org.elasticsearch.index.mapper.Mapper$TypeParser$ParserContext", deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("context_mode", deleteRequest1.index());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("SNAPSHOT", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("Node(", deleteRequest1.type());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.ALL, deleteRequest1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("org.elasticsearch.index.mapper.Mapper$TypeParser$ParserContext", deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("context_mode", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.parent());
      assertEquals("SNAPSHOT", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("Node(", deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.parent());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("org.elasticsearch.index.mapper.Mapper$TypeParser$ParserContext", deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals("context_mode", deleteRequest1.index());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("SNAPSHOT", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("Node(", deleteRequest1.type());
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MetaData metaData0 = null;
      String string0 = null;
      String string1 = "";
      DeleteRequest deleteRequest0 = new DeleteRequest(string1);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNotNull(deleteRequest0);
      
      String string2 = "J#KOji{gE;3\\2tLS+.";
      DeleteRequest deleteRequest1 = deleteRequest0.type(string2);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNotSame(string1, string2);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string2, string1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "65. V@~NDfM";
      WriteConsistencyLevel writeConsistencyLevel0 = WriteConsistencyLevel.DEFAULT;
      DeleteRequest deleteRequest2 = deleteRequest1.consistencyLevel(writeConsistencyLevel0);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest2.type());
      assertEquals("", deleteRequest2.index());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertNull(deleteRequest2.id());
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertNotNull(deleteRequest2);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      DeleteRequest deleteRequest3 = deleteRequest1.parent(string3);
      assertEquals("65. V@~NDfM", deleteRequest0.parent());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals("65. V@~NDfM", deleteRequest1.parent());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("65. V@~NDfM", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals("", deleteRequest3.index());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest3.type());
      assertNull(deleteRequest3.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertNull(deleteRequest3.id());
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest1);
      assertNotNull(deleteRequest3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      VersionType versionType0 = VersionType.INTERNAL;
      DeleteRequest deleteRequest4 = deleteRequest3.versionType(versionType0);
      assertEquals("65. V@~NDfM", deleteRequest0.parent());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals("65. V@~NDfM", deleteRequest1.parent());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("65. V@~NDfM", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals("", deleteRequest3.index());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest3.type());
      assertNull(deleteRequest3.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertNull(deleteRequest3.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest4.consistencyLevel());
      assertEquals("65. V@~NDfM", deleteRequest4.parent());
      assertEquals((-3L), deleteRequest4.version());
      assertEquals("", deleteRequest4.index());
      assertFalse(deleteRequest4.getShouldPersistResult());
      assertEquals(0L, deleteRequest4.primaryTerm());
      assertNull(deleteRequest4.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest4.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest4.type());
      assertNull(deleteRequest4.id());
      assertEquals(VersionType.INTERNAL, deleteRequest4.versionType());
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest4);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest4, deleteRequest2);
      assertSame(deleteRequest4, deleteRequest0);
      assertSame(deleteRequest4, deleteRequest3);
      assertSame(deleteRequest4, deleteRequest1);
      assertNotNull(deleteRequest4);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = "4:zq;";
      DeleteRequest deleteRequest5 = deleteRequest4.id(string4);
      assertEquals("65. V@~NDfM", deleteRequest0.parent());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("4:zq;", deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("", deleteRequest1.index());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertEquals("65. V@~NDfM", deleteRequest1.parent());
      assertEquals("4:zq;", deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("65. V@~NDfM", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals("4:zq;", deleteRequest3.id());
      assertEquals("", deleteRequest3.index());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest3.type());
      assertNull(deleteRequest3.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest4.consistencyLevel());
      assertEquals("65. V@~NDfM", deleteRequest4.parent());
      assertEquals((-3L), deleteRequest4.version());
      assertEquals("", deleteRequest4.index());
      assertFalse(deleteRequest4.getShouldPersistResult());
      assertEquals("4:zq;", deleteRequest4.id());
      assertEquals(0L, deleteRequest4.primaryTerm());
      assertNull(deleteRequest4.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest4.getRefreshPolicy());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest4.type());
      assertEquals(VersionType.INTERNAL, deleteRequest4.versionType());
      assertEquals(0L, deleteRequest5.primaryTerm());
      assertEquals((-3L), deleteRequest5.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest5.getRefreshPolicy());
      assertFalse(deleteRequest5.getShouldPersistResult());
      assertNull(deleteRequest5.routing());
      assertEquals("65. V@~NDfM", deleteRequest5.parent());
      assertEquals("J#KOji{gE;3\\2tLS+.", deleteRequest5.type());
      assertEquals(VersionType.INTERNAL, deleteRequest5.versionType());
      assertEquals("4:zq;", deleteRequest5.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest5.consistencyLevel());
      assertEquals("", deleteRequest5.index());
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(deleteRequest0, deleteRequest5);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest4);
      assertSame(deleteRequest1, deleteRequest5);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest5);
      assertSame(deleteRequest3, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest4);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest4, deleteRequest5);
      assertSame(deleteRequest4, deleteRequest2);
      assertSame(deleteRequest4, deleteRequest0);
      assertSame(deleteRequest4, deleteRequest3);
      assertSame(deleteRequest4, deleteRequest1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(deleteRequest5, deleteRequest1);
      assertSame(deleteRequest5, deleteRequest4);
      assertSame(deleteRequest5, deleteRequest3);
      assertSame(deleteRequest5, deleteRequest0);
      assertSame(deleteRequest5, deleteRequest2);
      assertNotNull(deleteRequest5);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        TransportDeleteAction.resolveAndValidateRouting(metaData0, string0, deleteRequest5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }
}
