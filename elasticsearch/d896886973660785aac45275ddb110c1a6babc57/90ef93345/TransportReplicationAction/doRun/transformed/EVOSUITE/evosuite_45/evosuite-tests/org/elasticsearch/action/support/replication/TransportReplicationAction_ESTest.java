/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 21:00:05 GMT 2021
 */

package org.elasticsearch.action.support.replication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.file.FileSystem;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.CountDownLatch;
import java.util.function.Consumer;
import org.apache.log4j.Logger;
import org.apache.lucene.index.Term;
import org.apache.lucene.mockfile.HandleLimitFS;
import org.apache.lucene.util.BytesRef;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.LatchedActionListener;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.support.PlainActionFuture;
import org.elasticsearch.action.support.replication.BasicReplicationRequest;
import org.elasticsearch.action.support.replication.ReplicationOperationTests;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.action.support.replication.TransportReplicationAction;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.DummyTransportAddress;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.query.SimpleQueryStringBuilder;
import org.elasticsearch.index.shard.IndexingOperationListener;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.index.translog.BufferedChecksumStreamOutput;
import org.elasticsearch.index.translog.Translog;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.internal.ShardSearchTransportRequest;
import org.elasticsearch.search.rescore.QueryRescorerBuilder;
import org.elasticsearch.tasks.TaskId;
import org.elasticsearch.transport.TransportChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportReplicationAction_ESTest extends TransportReplicationAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "startCommit index=";
      long long0 = 3654L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      int int0 = 897;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      assertNotNull(mockInetSocketAddress0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      transportReplicationAction_ReplicaResponse0.writeTo(bytesStreamOutput0);
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(21L, bytesStreamOutput0.position());
      assertEquals(21, bytesStreamOutput0.size());
      
      String string1 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string1);
      assertEquals("192.168.1.42", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string2);
      assertEquals("192.168.1.42", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      InetSocketTransportAddress inetSocketTransportAddress0 = new InetSocketTransportAddress(mockInetSocketAddress0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertNotNull(inetSocketTransportAddress0);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      String string3 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string3);
      assertEquals("192.168.1.42", string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string4);
      assertEquals("192.168.1.42", string4);
      assertSame(string4, string1);
      assertSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(string4.equals((Object)string0));
      
      inetSocketTransportAddress0.writeTo(bytesStreamOutput0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals(30L, bytesStreamOutput0.position());
      assertEquals(30, bytesStreamOutput0.size());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      inetSocketTransportAddress0.writeTo(bytesStreamOutput0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals(39L, bytesStreamOutput0.position());
      assertEquals(39, bytesStreamOutput0.size());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      transportReplicationAction_ReplicaResponse0.remoteAddress((TransportAddress) inetSocketTransportAddress0);
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      long long1 = transportReplicationAction_ReplicaResponse0.localCheckpoint();
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(3654L, long1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(long1 == long0);
      
      String string5 = "rerouting indexing to target primary ";
      String string6 = "bO.}Ekdy\\rJwl98";
      DummyTransportAddress dummyTransportAddress0 = DummyTransportAddress.INSTANCE;
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertNotNull(dummyTransportAddress0);
      
      transportReplicationAction_ReplicaResponse0.remoteAddress((TransportAddress) dummyTransportAddress0);
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("startCommit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertTrue(long0 == long1);
      
      transportReplicationAction_ReplicaResponse0.setallocationId(string6);
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.allocationId());
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(long0 == long1);
      
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long1, string0, string5, string5, taskId0);
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getAction());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getDescription());
      assertEquals(3654L, replicationTask0.getId());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("startCommit index=", replicationTask0.getType());
      assertNotNull(replicationTask0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      String string7 = "3";
      TransportReplicationAction.setPhase(replicationTask0, string7);
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("3", replicationTask0.getPhase());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getAction());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getDescription());
      assertEquals(3654L, replicationTask0.getId());
      assertEquals("startCommit index=", replicationTask0.getType());
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertTrue(long0 == long1);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(long1 == long0);
      
      ReplicationTask.Status replicationTask_Status0 = replicationTask0.getStatus();
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("3", replicationTask0.getPhase());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getAction());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getDescription());
      assertEquals(3654L, replicationTask0.getId());
      assertEquals("startCommit index=", replicationTask0.getType());
      assertEquals("replication", replicationTask_Status0.getWriteableName());
      assertNotNull(replicationTask_Status0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse1 = new TransportReplicationAction.ReplicaResponse();
      assertEquals(0L, transportReplicationAction_ReplicaResponse1.getlocalCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse1.allocationId());
      assertNull(transportReplicationAction_ReplicaResponse1.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse1.localCheckpoint());
      assertNotNull(transportReplicationAction_ReplicaResponse1);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-49);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-115);
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-64);
      byteArray0[5] = byte5;
      int int1 = 0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int1, (int) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-115), (byte)1, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(streamInput0);
      assertFalse(int1 == int0);
      assertEquals(6, byteArray0.length);
      
      try { 
        transportReplicationAction_ReplicaResponse1.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNull(transportReplicationActionTests_Request0.index());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertEquals(0L, transportReplicationActionTests_Request0.seqNo());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNotNull(transportReplicationActionTests_Request0);
      
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      String string0 = "8KIc?AO";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(outputStream0, boolean0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = 0L;
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, transportReplicationAction0.transportReplicaAction, transportReplicationAction0.transportReplicaAction, transportReplicationAction0.transportPrimaryAction, taskId0);
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertNull(replicationTask0.getAction());
      assertEquals("starting", replicationTask0.getPhase());
      assertNull(replicationTask0.getDescription());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertNull(replicationTask0.getType());
      assertEquals(0L, replicationTask0.getId());
      assertNotNull(replicationTask0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertNull(basicReplicationRequest0.index());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNotNull(basicReplicationRequest0);
      
      ActionListener<ReplicationResponse> actionListener0 = null;
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, basicReplicationRequest0, actionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)93;
      byteArray0[0] = byte0;
      byte byte1 = (byte)42;
      byteArray0[1] = byte1;
      byte byte2 = (byte)111;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte)33;
      byteArray0[5] = byte5;
      byte byte6 = (byte)10;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)2;
      byteArray0[8] = byte8;
      int int0 = 895;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byteArray0[2], int0);
      assertArrayEquals(new byte[] {(byte)93, (byte)42, (byte)111, (byte)0, (byte)4, (byte)33, (byte)10, (byte)0, (byte)2}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(9, byteArray0.length);
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = null;
      try {
        transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      long long0 = 0L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertEquals("", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("", transportReplicationAction_ReplicaResponse0.allocationId());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      DummyTransportAddress dummyTransportAddress0 = DummyTransportAddress.INSTANCE;
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertNotNull(dummyTransportAddress0);
      
      transportReplicationAction_ReplicaResponse0.remoteAddress((TransportAddress) dummyTransportAddress0);
      assertEquals("", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      
      int int0 = 61;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      transportReplicationAction_ReplicaResponse0.writeTo(bytesStreamOutput0);
      assertEquals("", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(2L, bytesStreamOutput0.position());
      assertEquals(2, bytesStreamOutput0.size());
      
      long long1 = transportReplicationAction_ReplicaResponse0.getlocalCheckpoint();
      assertEquals("", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      String string0 = "Mj5Q3";
      Term term0 = new Term(string0);
      assertEquals("Mj5Q3", term0.field());
      assertNotNull(term0);
      
      Engine.Delete engine_Delete0 = new Engine.Delete(string0, string0, term0);
      assertEquals("Mj5Q3", term0.field());
      assertEquals("Mj5Q3", engine_Delete0.id());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertFalse(engine_Delete0.found());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals("Mj5Q3", engine_Delete0.type());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertEquals((-3L), engine_Delete0.version());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertNotNull(engine_Delete0);
      
      Translog.Location translog_Location0 = engine_Delete0.getTranslogLocation();
      assertEquals("Mj5Q3", term0.field());
      assertEquals("Mj5Q3", engine_Delete0.id());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertFalse(engine_Delete0.found());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals("Mj5Q3", engine_Delete0.type());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertEquals((-3L), engine_Delete0.version());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertNull(translog_Location0);
      
      TransportReplicationAction.WriteResult<ReplicationResponse> transportReplicationAction_WriteResult0 = new TransportReplicationAction.WriteResult<ReplicationResponse>(updateResponse0, translog_Location0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals("Mj5Q3", term0.field());
      assertEquals("Mj5Q3", engine_Delete0.id());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertFalse(engine_Delete0.found());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals("Mj5Q3", engine_Delete0.type());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertEquals((-3L), engine_Delete0.version());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertNotNull(transportReplicationAction_WriteResult0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      
      Translog.Location translog_Location1 = transportReplicationAction_WriteResult0.getlocation();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals("Mj5Q3", term0.field());
      assertEquals("Mj5Q3", engine_Delete0.id());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertFalse(engine_Delete0.found());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals("Mj5Q3", engine_Delete0.type());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertEquals((-3L), engine_Delete0.version());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertNull(translog_Location1);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, TransportReplicationActionTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, TransportReplicationActionTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      ReplicationOperationTests.Request replicationOperationTests_Request0 = null;
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, replicationOperationTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse();
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      String string0 = transportReplicationAction_ReplicaResponse0.getallocationId();
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNull(string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse();
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      String string0 = transportReplicationAction_ReplicaResponse0.allocationId();
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertNull(string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      int int0 = 1665;
      ArrayList<IndexingOperationListener> arrayList0 = new ArrayList<IndexingOperationListener>(int0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Logger logger0 = Logger.getRootLogger();
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(deleteResponse0.type, logger0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertNotNull(eSLogger0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      IndexingOperationListener.CompositeListener indexingOperationListener_CompositeListener0 = new IndexingOperationListener.CompositeListener(arrayList0, eSLogger0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertNotNull(indexingOperationListener_CompositeListener0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      String string1 = "\"<[L|";
      Term term0 = null;
      Engine.Delete engine_Delete0 = new Engine.Delete(string1, transportReplicationAction_ReplicaResponse0.allocationId, term0);
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertFalse(engine_Delete0.found());
      assertEquals("\"<[L|", engine_Delete0.type());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals((-3L), engine_Delete0.version());
      assertNull(engine_Delete0.id());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertNotNull(engine_Delete0);
      
      Engine.Delete engine_Delete1 = indexingOperationListener_CompositeListener0.preDelete(engine_Delete0);
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertFalse(engine_Delete0.found());
      assertEquals("\"<[L|", engine_Delete0.type());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals((-3L), engine_Delete0.version());
      assertNull(engine_Delete0.id());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertFalse(engine_Delete1.found());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete1.origin());
      assertEquals(1392409281320000L, engine_Delete1.startTime());
      assertEquals(0L, engine_Delete1.endTime());
      assertEquals((-2L), engine_Delete1.seqNo());
      assertEquals(VersionType.INTERNAL, engine_Delete1.versionType());
      assertEquals("\"<[L|", engine_Delete1.type());
      assertEquals((-3L), engine_Delete1.version());
      assertNull(engine_Delete1.id());
      assertNotNull(engine_Delete1);
      assertSame(engine_Delete0, engine_Delete1);
      assertSame(engine_Delete1, engine_Delete0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      Translog.Location translog_Location0 = engine_Delete1.getTranslogLocation();
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertFalse(engine_Delete0.found());
      assertEquals("\"<[L|", engine_Delete0.type());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals((-3L), engine_Delete0.version());
      assertNull(engine_Delete0.id());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertFalse(engine_Delete1.found());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete1.origin());
      assertEquals(1392409281320000L, engine_Delete1.startTime());
      assertEquals(0L, engine_Delete1.endTime());
      assertEquals((-2L), engine_Delete1.seqNo());
      assertEquals(VersionType.INTERNAL, engine_Delete1.versionType());
      assertEquals("\"<[L|", engine_Delete1.type());
      assertEquals((-3L), engine_Delete1.version());
      assertNull(engine_Delete1.id());
      assertNull(translog_Location0);
      assertSame(engine_Delete0, engine_Delete1);
      assertSame(engine_Delete1, engine_Delete0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      
      TransportReplicationAction.WriteResult<ReplicationResponse> transportReplicationAction_WriteResult0 = new TransportReplicationAction.WriteResult<ReplicationResponse>(deleteResponse0, translog_Location0);
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("root", eSLogger0.getName());
      assertEquals(0L, engine_Delete0.endTime());
      assertEquals(1392409281320000L, engine_Delete0.startTime());
      assertEquals((-2L), engine_Delete0.seqNo());
      assertFalse(engine_Delete0.found());
      assertEquals("\"<[L|", engine_Delete0.type());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete0.origin());
      assertEquals((-3L), engine_Delete0.version());
      assertNull(engine_Delete0.id());
      assertEquals(VersionType.INTERNAL, engine_Delete0.versionType());
      assertFalse(engine_Delete1.found());
      assertEquals(Engine.Operation.Origin.PRIMARY, engine_Delete1.origin());
      assertEquals(1392409281320000L, engine_Delete1.startTime());
      assertEquals(0L, engine_Delete1.endTime());
      assertEquals((-2L), engine_Delete1.seqNo());
      assertEquals(VersionType.INTERNAL, engine_Delete1.versionType());
      assertEquals("\"<[L|", engine_Delete1.type());
      assertEquals((-3L), engine_Delete1.version());
      assertNull(engine_Delete1.id());
      assertNotNull(transportReplicationAction_WriteResult0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ReplicationResponse replicationResponse0 = null;
      Translog.Location translog_Location0 = null;
      TransportReplicationAction.WriteResult<ReplicationResponse> transportReplicationAction_WriteResult0 = new TransportReplicationAction.WriteResult<ReplicationResponse>(replicationResponse0, translog_Location0);
      assertNotNull(transportReplicationAction_WriteResult0);
      
      // Undeclared exception!
      try { 
        transportReplicationAction_WriteResult0.response();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$WriteResult", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "^)rbiGx<eXU,G.\"0";
      long long0 = 0L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      long long1 = 0L;
      transportReplicationAction_ReplicaResponse0.setlocalCheckpoint(long1);
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      
      long long2 = 1024L;
      long long3 = 3627L;
      transportReplicationAction_ReplicaResponse0.setlocalCheckpoint(long3);
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3627L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3627L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      
      transportReplicationAction_ReplicaResponse0.setlocalCheckpoint(long2);
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(1024L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(1024L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      
      String string1 = transportReplicationAction_ReplicaResponse0.allocationId();
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(1024L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("^)rbiGx<eXU,G.\"0", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(1024L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNotNull(string1);
      assertEquals("^)rbiGx<eXU,G.\"0", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      
      FileSystem fileSystem0 = null;
      int int0 = (-1165);
      HandleLimitFS handleLimitFS0 = null;
      try {
        handleLimitFS0 = new HandleLimitFS(fileSystem0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertNotNull(replicationOperationTests_Request0);
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, replicationOperationTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = (-1778L);
      String string0 = "zj%5$qn#C~9z";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string0, transportReplicationAction0.transportPrimaryAction, taskId0);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("zj%5$qn#C~9z", replicationTask0.getType());
      assertEquals("zj%5$qn#C~9z", replicationTask0.getAction());
      assertEquals((-1778L), replicationTask0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertNull(replicationTask0.getDescription());
      assertNotNull(replicationTask0);
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertNotNull(replicationOperationTests_Request0);
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, replicationOperationTests_Request0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse();
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      long long0 = 1L;
      transportReplicationAction_ReplicaResponse0.setlocalCheckpoint(long0);
      assertEquals(1L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(1L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertEquals(1, byteArray0.length);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(littleEndianHeapChannelBuffer0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, channelBufferBytesReference0.length());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals(1, byteArray0.length);
      
      BytesRef bytesRef0 = channelBufferBytesReference0.copyBytesRef();
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, channelBufferBytesReference0.length());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bytesRef0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, bytesRef0.offset);
      assertEquals(1, bytesRef0.length);
      
      ChannelBuffer channelBuffer0 = channelBufferBytesReference0.toChannelBuffer();
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, channelBufferBytesReference0.length());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(1, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(channelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = channelBufferBytesReference0.toBytes();
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, channelBufferBytesReference0.length());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(littleEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(1, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, channelBufferBytesReference0.length());
      assertEquals(1, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(streamInput0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(littleEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        transportReplicationAction_ReplicaResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 1
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "delete: ";
      long long0 = 1389L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertEquals(1389L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(1389L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("delete: ", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("delete: ", transportReplicationAction_ReplicaResponse0.allocationId());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      transportReplicationAction_ReplicaResponse0.setlocalCheckpoint(long0);
      assertEquals(1389L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(1389L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("delete: ", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("delete: ", transportReplicationAction_ReplicaResponse0.allocationId());
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-23);
      byteArray0[1] = byte1;
      byte byte2 = (byte)46;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-2);
      byteArray0[4] = byte4;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)46, (byte)0, (byte) (-2)}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(5, byteArray0.length);
      
      Class<QueryRescorerBuilder> class0 = QueryRescorerBuilder.class;
      QueryRescorerBuilder queryRescorerBuilder0 = streamInput0.readOptionalNamedWriteable(class0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)46, (byte)0, (byte) (-2)}, byteArray0);
      assertNull(queryRescorerBuilder0);
      assertEquals(5, byteArray0.length);
      
      transportReplicationAction_ReplicaResponse0.readFrom(streamInput0);
      assertEquals((-2997L), transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals((-2997L), transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals("", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("", transportReplicationAction_ReplicaResponse0.allocationId());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)46, (byte)0, (byte) (-2)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(shardId0, string0);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ShardId shardId1 = transportReplicationAction_RetryOnReplicaException0.getShardId();
      assertNull(shardId1);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = null;
      try {
        transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request(shardId1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationActionTests$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "startComwmit index=";
      long long0 = 3654L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      
      int int0 = 897;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      assertNotNull(mockInetSocketAddress0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      transportReplicationAction_ReplicaResponse0.writeTo(bytesStreamOutput0);
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(22, bytesStreamOutput0.size());
      assertEquals(22L, bytesStreamOutput0.position());
      
      String string1 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string1);
      assertEquals("192.168.1.42", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string2);
      assertEquals("192.168.1.42", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      
      InetSocketTransportAddress inetSocketTransportAddress0 = new InetSocketTransportAddress(mockInetSocketAddress0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertNotNull(inetSocketTransportAddress0);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      String string3 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string3);
      assertEquals("192.168.1.42", string3);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = mockInetSocketAddress0.getHostName();
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertNotNull(string4);
      assertEquals("192.168.1.42", string4);
      assertSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertSame(string4, string2);
      assertFalse(string4.equals((Object)string0));
      
      inetSocketTransportAddress0.writeTo(bytesStreamOutput0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals(31, bytesStreamOutput0.size());
      assertEquals(31L, bytesStreamOutput0.position());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      inetSocketTransportAddress0.writeTo(bytesStreamOutput0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals(40L, bytesStreamOutput0.position());
      assertEquals(40, bytesStreamOutput0.size());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      transportReplicationAction_ReplicaResponse0.remoteAddress((TransportAddress) inetSocketTransportAddress0);
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(897, mockInetSocketAddress0.getPort());
      assertEquals("192.168.1.42/192.168.1.42:897", mockInetSocketAddress0.toString());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(897, inetSocketTransportAddress0.getPort());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      long long1 = transportReplicationAction_ReplicaResponse0.localCheckpoint();
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals(3654L, long1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(long1 == long0);
      
      String string5 = "rerouting indexing to target primary ";
      String string6 = "bO.}Ekdy\\rJwl98";
      DummyTransportAddress dummyTransportAddress0 = DummyTransportAddress.INSTANCE;
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertNotNull(dummyTransportAddress0);
      
      transportReplicationAction_ReplicaResponse0.remoteAddress((TransportAddress) dummyTransportAddress0);
      assertFalse(dummyTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("0.0.0.0", dummyTransportAddress0.getAddress());
      assertEquals("dummy", dummyTransportAddress0.getHost());
      assertEquals(42, dummyTransportAddress0.getPort());
      assertEquals("_dummy_addr_", dummyTransportAddress0.toString());
      assertEquals((short)0, dummyTransportAddress0.uniqueAddressTypeId());
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("startComwmit index=", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(long0 == long1);
      
      transportReplicationAction_ReplicaResponse0.setallocationId(string6);
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(long0 == long1);
      
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long1, string0, string5, string5, taskId0);
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("startComwmit index=", replicationTask0.getType());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getDescription());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getAction());
      assertEquals(3654L, replicationTask0.getId());
      assertNotNull(replicationTask0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      String string7 = "3";
      ReplicationTask replicationTask1 = null;
      TransportReplicationAction.setPhase(replicationTask1, string7);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      ReplicationTask.Status replicationTask_Status0 = replicationTask0.getStatus();
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.getlocalCheckpoint());
      assertEquals(3654L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("bO.}Ekdy\\rJwl98", transportReplicationAction_ReplicaResponse0.getallocationId());
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("startComwmit index=", replicationTask0.getType());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getDescription());
      assertEquals("rerouting indexing to target primary ", replicationTask0.getAction());
      assertEquals(3654L, replicationTask0.getId());
      assertEquals("replication", replicationTask_Status0.getWriteableName());
      assertNotNull(replicationTask_Status0);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string7);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse1 = new TransportReplicationAction.ReplicaResponse();
      assertEquals(0L, transportReplicationAction_ReplicaResponse1.localCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse1.getallocationId());
      assertNull(transportReplicationAction_ReplicaResponse1.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse1.getlocalCheckpoint());
      assertNotNull(transportReplicationAction_ReplicaResponse1);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-49);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-115);
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-64);
      byteArray0[5] = byte5;
      int int1 = 0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int1, (int) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-115), (byte)1, (byte)0, (byte)0, (byte) (-64)}, byteArray0);
      assertNotNull(streamInput0);
      assertFalse(int1 == int0);
      assertEquals(6, byteArray0.length);
      
      try { 
        transportReplicationAction_ReplicaResponse1.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ReplicationTask replicationTask0 = null;
      String string0 = "org.jboss.netty.channel.SimpleChannelUpstreamHandler";
      TransportReplicationAction.setPhase(replicationTask0, string0);
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, ReplicationOperationTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, ReplicationOperationTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "Z5y\"";
      String string1 = "elision";
      Index index0 = new Index(string0, string1);
      assertEquals("elision", index0.getUUID());
      assertEquals("Z5y\"", index0.getName());
      assertNotNull(index0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = (-1078031094);
      ShardId shardId0 = new ShardId(index0, int0);
      assertEquals("elision", index0.getUUID());
      assertEquals("Z5y\"", index0.getName());
      assertEquals((-1078031094), shardId0.getId());
      assertEquals((-1078031094), shardId0.id());
      assertEquals("Z5y\"", shardId0.getIndexName());
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request(shardId0);
      assertEquals("elision", index0.getUUID());
      assertEquals("Z5y\"", index0.getName());
      assertEquals((-1078031094), shardId0.getId());
      assertEquals((-1078031094), shardId0.id());
      assertEquals("Z5y\"", shardId0.getIndexName());
      assertEquals("Z5y\"", replicationOperationTests_Request0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNotNull(replicationOperationTests_Request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      TransportChannel transportChannel0 = null;
      long long0 = 934L;
      String string2 = " ^_";
      String string3 = "~w^>zfmVarQ";
      String string4 = "Y^Mr\\d4N@0Uf-<\"~u_";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string2, string3, string4, taskId0);
      assertEquals((-1L), taskId0.getId());
      assertFalse(taskId0.isSet());
      assertEquals("", taskId0.getNodeId());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals(" ^_", replicationTask0.getType());
      assertEquals(934L, replicationTask0.getId());
      assertEquals("~w^>zfmVarQ", replicationTask0.getAction());
      assertNotNull(replicationTask0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      TransportReplicationAction.AsyncReplicaAction transportReplicationAction_AsyncReplicaAction0 = null;
      try {
        transportReplicationAction_AsyncReplicaAction0 = transportReplicationAction0.new AsyncReplicaAction(replicationOperationTests_Request0, transportChannel0, replicationTask0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncReplicaAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "'&\\A^H4|LHX82jybl/J";
      String string1 = "org.elasticsearch.search.aggregations.metrics.geocentroid.GeoCentroidAggregationBuilder";
      int int0 = 841;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = "0.IT;8V$";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      assertFalse(boolean2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertEquals("'&\\A^H4|LHX82jybl/J", shardId0.getIndexName());
      assertEquals(841, shardId0.id());
      assertEquals(841, shardId0.getId());
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(shardId0, string0);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      Translog.Location translog_Location0 = null;
      TransportReplicationAction.WriteResult<ReplicationResponse> transportReplicationAction_WriteResult0 = new TransportReplicationAction.WriteResult<ReplicationResponse>(deleteResponse0, translog_Location0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(transportReplicationAction_WriteResult0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      
      DeleteResponse deleteResponse1 = (DeleteResponse)transportReplicationAction_WriteResult0.response();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse1.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse1.status());
      assertNull(deleteResponse1.getType());
      assertFalse(deleteResponse1.isFound());
      assertEquals(0L, deleteResponse1.getSeqNo());
      assertNull(deleteResponse1.getId());
      assertNotNull(deleteResponse1);
      assertSame(deleteResponse0, deleteResponse1);
      assertSame(deleteResponse1, deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse1.seqNo);
      assertEquals(0L, deleteResponse1.version);
      
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      BasicReplicationRequest basicReplicationRequest0 = null;
      try {
        basicReplicationRequest0 = new BasicReplicationRequest(deleteResponse0.shardId);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationRequest", e);
      }
  }
}
