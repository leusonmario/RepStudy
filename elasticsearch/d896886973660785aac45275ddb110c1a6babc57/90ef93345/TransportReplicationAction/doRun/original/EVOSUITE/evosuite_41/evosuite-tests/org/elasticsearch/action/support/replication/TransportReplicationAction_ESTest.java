/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 17:28:12 GMT 2021
 */

package org.elasticsearch.action.support.replication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Supplier;
import org.apache.lucene.index.SegmentInfos;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.ActionRequestValidationException;
import org.elasticsearch.action.LatchedActionListener;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.ingest.DeletePipelineRequest;
import org.elasticsearch.action.support.PlainActionFuture;
import org.elasticsearch.action.support.replication.BasicReplicationRequest;
import org.elasticsearch.action.support.replication.ReplicationOperationTests;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.action.support.replication.TransportReplicationAction;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.cluster.routing.OperationRouting;
import org.elasticsearch.cluster.routing.allocation.decider.AwarenessAllocationDecider;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.IndexModule;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.index.analysis.AnalysisRegistry;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.index.store.IndexStoreConfig;
import org.elasticsearch.index.translog.Translog;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.tasks.TaskId;
import org.elasticsearch.transport.TransportChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.buffer.ChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportReplicationAction_ESTest extends TransportReplicationAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, TransportReplicationActionTests.Request, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, TransportReplicationActionTests.Request, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      ReplicationTask replicationTask0 = null;
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertNotNull(basicReplicationRequest0);
      assertNull(basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, basicReplicationRequest0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertNotNull(indexResponse1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getType());
      assertNotSame(indexResponse1, indexResponse0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      
      Translog.Location translog_Location0 = null;
      TransportReplicationAction.WriteResult<ReplicationResponse> transportReplicationAction_WriteResult0 = new TransportReplicationAction.WriteResult<ReplicationResponse>(indexResponse1, translog_Location0);
      assertNotNull(transportReplicationAction_WriteResult0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      
      IndexResponse indexResponse2 = (IndexResponse)transportReplicationAction_WriteResult0.response();
      assertNotNull(indexResponse2);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getType());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertNull(indexResponse2.getId());
      assertEquals(0L, indexResponse2.getSeqNo());
      assertNull(indexResponse2.getType());
      assertEquals(0L, indexResponse2.getVersion());
      assertEquals(RestStatus.OK, indexResponse2.status());
      assertFalse(indexResponse2.isCreated());
      assertSame(indexResponse1, indexResponse2);
      assertNotSame(indexResponse1, indexResponse0);
      assertNotSame(indexResponse2, indexResponse0);
      assertSame(indexResponse2, indexResponse1);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(indexResponse2.equals((Object)indexResponse0));
      
      IndexResponse indexResponse3 = (IndexResponse)transportReplicationAction_WriteResult0.response();
      assertNotNull(indexResponse3);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getType());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertEquals(0L, indexResponse3.getSeqNo());
      assertNull(indexResponse3.getId());
      assertEquals(RestStatus.OK, indexResponse3.status());
      assertNull(indexResponse3.getType());
      assertEquals(0L, indexResponse3.getVersion());
      assertFalse(indexResponse3.isCreated());
      assertSame(indexResponse1, indexResponse2);
      assertNotSame(indexResponse1, indexResponse0);
      assertSame(indexResponse1, indexResponse3);
      assertSame(indexResponse3, indexResponse2);
      assertSame(indexResponse3, indexResponse1);
      assertNotSame(indexResponse3, indexResponse0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(indexResponse3.equals((Object)indexResponse0));
      
      IndexResponse indexResponse4 = (IndexResponse)transportReplicationAction_WriteResult0.response();
      assertNotNull(indexResponse4);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(indexResponse1.isCreated());
      assertNull(indexResponse1.getType());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertEquals(0L, indexResponse4.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse4.status());
      assertEquals(0L, indexResponse4.getVersion());
      assertNull(indexResponse4.getType());
      assertFalse(indexResponse4.isCreated());
      assertNull(indexResponse4.getId());
      assertSame(indexResponse1, indexResponse2);
      assertNotSame(indexResponse1, indexResponse0);
      assertSame(indexResponse1, indexResponse3);
      assertSame(indexResponse1, indexResponse4);
      assertSame(indexResponse4, indexResponse1);
      assertSame(indexResponse4, indexResponse2);
      assertNotSame(indexResponse4, indexResponse0);
      assertSame(indexResponse4, indexResponse3);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(indexResponse4.equals((Object)indexResponse0));
      
      Translog.Location translog_Location1 = transportReplicationAction_WriteResult0.location;
      assertNull(translog_Location1);
      
      DiscoveryNode discoveryNode0 = null;
      String string0 = null;
      String string1 = "org.elasticsearch.comon.logging.ESLoggerFactory";
      byte byte0 = (byte)71;
      byte byte1 = (byte)114;
      byte byte2 = (byte)0;
      byte byte3 = (byte) (-57);
      byte byte4 = (byte)84;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse();
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      
      String string0 = "";
      long long0 = 1768L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse1 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertNotNull(transportReplicationAction_ReplicaResponse1);
      assertEquals("", transportReplicationAction_ReplicaResponse1.allocationId());
      assertEquals(1768L, transportReplicationAction_ReplicaResponse1.localCheckpoint());
      
      TransportReplicationAction<TransportReplicationActionTests.Request, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<TransportReplicationActionTests.Request, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long1 = 0L;
      String string1 = "xyMVq";
      String string2 = "&";
      long long2 = 1L;
      TaskId taskId0 = new TaskId(string2, long2);
      assertNotNull(taskId0);
      assertEquals("&", taskId0.getNodeId());
      assertTrue(taskId0.isSet());
      assertEquals(1L, taskId0.getId());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      ReplicationTask replicationTask0 = new ReplicationTask(long1, string0, string0, string1, taskId0);
      assertNotNull(replicationTask0);
      assertEquals("&", taskId0.getNodeId());
      assertTrue(taskId0.isSet());
      assertEquals(1L, taskId0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("", replicationTask0.getAction());
      assertEquals(0L, replicationTask0.getId());
      assertEquals("xyMVq", replicationTask0.getDescription());
      assertEquals("", replicationTask0.getType());
      assertEquals("starting", replicationTask0.getPhase());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      ActionListener<ReplicationResponse> actionListener0 = null;
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1";
      long long0 = 86400L;
      StreamInput streamInput0 = null;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse();
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      long[] longArray0 = new long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      bytesStreamOutput0.writeLongArray(longArray0);
      assertArrayEquals(new long[] {86400L, 86400L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(17L, bytesStreamOutput0.position());
      assertEquals(17, bytesStreamOutput0.size());
      
      BytesReference bytesReference0 = bytesStreamOutput0.bytes();
      assertNotNull(bytesReference0);
      assertEquals(17L, bytesStreamOutput0.position());
      assertEquals(17, bytesStreamOutput0.size());
      assertTrue(bytesReference0.hasArray());
      assertEquals(17, bytesReference0.length());
      
      // Undeclared exception!
      try { 
        transportReplicationAction_ReplicaResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.StreamOutput", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = null;
      long long0 = (-1360L);
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals((-1360L), transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      
      long long1 = 1410L;
      String string1 = "unknown node [";
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertNotNull(taskId0);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      
      ReplicationTask replicationTask0 = new ReplicationTask(long1, string0, string0, string1, taskId0);
      assertNotNull(replicationTask0);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("unknown node [", replicationTask0.getDescription());
      assertEquals("starting", replicationTask0.getPhase());
      assertNull(replicationTask0.getAction());
      assertEquals(1410L, replicationTask0.getId());
      assertNull(replicationTask0.getType());
      assertFalse(long1 == long0);
      
      String string2 = "indices[";
      TransportReplicationAction.setPhase(replicationTask0, string2);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("unknown node [", replicationTask0.getDescription());
      assertEquals("indices[", replicationTask0.getPhase());
      assertNull(replicationTask0.getAction());
      assertEquals(1410L, replicationTask0.getId());
      assertNull(replicationTask0.getType());
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertFalse(long1 == long0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long0 = (-155L);
      String string0 = "p5ML'0J*w_/oaCV";
      InputStream inputStream0 = null;
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(inputStream0);
      assertNotNull(inputStreamStreamInput0);
      
      // Undeclared exception!
      try { 
        TaskId.readFromStream(inputStreamStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 4;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) byteBufferBytesReference0);
      assertNotNull(streamInput0);
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      Supplier<ReplicationResponse> supplier0 = (Supplier<ReplicationResponse>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      streamInput0.reset();
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      String[] stringArray0 = streamInput0.readStringArray();
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      char char0 = byteBuffer0.getChar();
      assertEquals(2, byteBuffer0.position());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=2 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals('\u0000', char0);
      
      ChannelBuffer channelBuffer0 = byteBufferBytesReference0.toChannelBuffer();
      assertNotNull(channelBuffer0);
      assertEquals(2, byteBuffer0.position());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=2 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      
      byte[] byteArray0 = byteBufferBytesReference0.toBytes();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(2, byteBuffer0.position());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=2 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      boolean boolean0 = streamInput0.readBoolean();
      assertEquals(2, byteBuffer0.position());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=2 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertFalse(boolean0);
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = null;
      try {
        transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      long long0 = (-561L);
      String string0 = "rerouted";
      String string1 = " C5Z_Xm)LtI}6";
      TaskId taskId0 = null;
      try {
        taskId0 = new TaskId(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed task id rerouted
         //
         verifyException("org.elasticsearch.tasks.TaskId", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse();
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      
      long long0 = transportReplicationAction_ReplicaResponse0.localCheckpoint();
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals(0L, long0);
      
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      long long1 = 2746L;
      String string0 = null;
      TaskId taskId0 = TaskId.EMPTY_TASK_ID;
      assertNotNull(taskId0);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      
      ReplicationTask replicationTask0 = new ReplicationTask(long1, string0, string0, string0, taskId0);
      assertNotNull(replicationTask0);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertNull(replicationTask0.getAction());
      assertEquals(2746L, replicationTask0.getId());
      assertNull(replicationTask0.getDescription());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("starting", replicationTask0.getPhase());
      assertNull(replicationTask0.getType());
      assertFalse(long1 == long0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertNotNull(basicReplicationRequest0);
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertNull(basicReplicationRequest0.index());
      
      String string1 = taskId0.toString();
      assertNotNull(string1);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals("unset", string1);
      
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      BasicReplicationRequest basicReplicationRequest1 = basicReplicationRequest0.index(string1);
      assertNotNull(basicReplicationRequest1);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals("unset", basicReplicationRequest0.index());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(0L, basicReplicationRequest1.seqNo());
      assertEquals(0L, basicReplicationRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest1.consistencyLevel());
      assertFalse(basicReplicationRequest1.getShouldPersistResult());
      assertEquals("unset", basicReplicationRequest1.index());
      assertSame(basicReplicationRequest0, basicReplicationRequest1);
      assertSame(basicReplicationRequest1, basicReplicationRequest0);
      
      replicationTask0.setPhase(string0);
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertNull(replicationTask0.getAction());
      assertEquals(2746L, replicationTask0.getId());
      assertNull(replicationTask0.getPhase());
      assertNull(replicationTask0.getDescription());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertNull(replicationTask0.getType());
      assertFalse(long1 == long0);
      
      TransportReplicationAction.ReroutePhase transportReplicationAction_ReroutePhase0 = null;
      try {
        transportReplicationAction_ReroutePhase0 = transportReplicationAction0.new ReroutePhase(replicationTask0, basicReplicationRequest0, plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request0);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertEquals(0L, transportReplicationActionTests_Request0.seqNo());
      assertNull(transportReplicationActionTests_Request0.index());
      
      long long0 = 1L;
      String string0 = "org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1";
      String string1 = "org.elasticsearch.deprecation.";
      TaskId taskId0 = new TaskId(string1, long0);
      assertNotNull(taskId0);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = taskId0.toString();
      assertNotNull(string2);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("org.elasticsearch.deprecation.:1", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string0, string0, taskId0);
      assertNotNull(replicationTask0);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getDescription());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getType());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getAction());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      String string3 = "xmH\"Z_FTTX)w:~3L";
      replicationTask0.setPhase(string3);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getDescription());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getType());
      assertEquals("xmH\"Z_FTTX)w:~3L", replicationTask0.getPhase());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getAction());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      TransportReplicationAction.setPhase(replicationTask0, string0);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getDescription());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getType());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getPhase());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getAction());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      
      String string4 = "nAdbyD";
      int int0 = 1365;
      ShardId shardId0 = new ShardId(string1, string4, int0);
      assertNotNull(shardId0);
      assertEquals(1365, shardId0.id());
      assertEquals("org.elasticsearch.deprecation.", shardId0.getIndexName());
      assertEquals(1365, shardId0.getId());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "`G{";
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(shardId0, string5);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request1 = new TransportReplicationActionTests.Request(shardId0);
      assertNotNull(transportReplicationActionTests_Request1);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request1.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request1.getShouldPersistResult());
      assertEquals("org.elasticsearch.deprecation.", transportReplicationActionTests_Request1.index());
      assertEquals(0L, transportReplicationActionTests_Request1.primaryTerm());
      assertEquals(0L, transportReplicationActionTests_Request1.seqNo());
      assertEquals(1365, shardId0.id());
      assertEquals("org.elasticsearch.deprecation.", shardId0.getIndexName());
      assertEquals(1365, shardId0.getId());
      assertFalse(transportReplicationActionTests_Request1.equals((Object)transportReplicationActionTests_Request0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "tYdM~hVu$4kIbX";
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(shardId0, string0);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      String string1 = "3Q`<otTK=4:";
      long long0 = (-839L);
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string1, long0);
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals((-839L), transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("3Q`<otTK=4:", transportReplicationAction_ReplicaResponse0.allocationId());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = transportReplicationAction_ReplicaResponse0.allocationId();
      assertNotNull(string2);
      assertEquals((-839L), transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("3Q`<otTK=4:", transportReplicationAction_ReplicaResponse0.allocationId());
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("3Q`<otTK=4:", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse();
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertNull(transportReplicationAction_ReplicaResponse0.allocationId());
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-44);
      byte byte1 = (byte)4;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-35);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte) (-35), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(streamInput0);
      
      try { 
        transportReplicationAction_ReplicaResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      String string0 = "p5ML'0J*w_/oaCV";
      InputStream inputStream0 = null;
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(inputStream0);
      assertNotNull(inputStreamStreamInput0);
      
      String string1 = "";
      TransportReplicationAction.ReplicaOperationTransportHandler transportReplicationAction_ReplicaOperationTransportHandler0 = transportReplicationAction0.new ReplicaOperationTransportHandler();
      assertNotNull(transportReplicationAction_ReplicaOperationTransportHandler0);
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertNotNull(replicationOperationTests_Request0);
      assertNull(replicationOperationTests_Request0.index());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)44;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-128);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-73);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      int int0 = 0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, (int) byteArray0[3]);
      assertArrayEquals(new byte[] {(byte)44, (byte) (-128), (byte) (-73), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(streamInput0);
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = null;
      try {
        transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request0);
      assertEquals(0L, transportReplicationActionTests_Request0.seqNo());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNull(transportReplicationActionTests_Request0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request1 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request1);
      assertNull(transportReplicationActionTests_Request1.index());
      assertEquals(0L, transportReplicationActionTests_Request1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request1.consistencyLevel());
      assertEquals(0L, transportReplicationActionTests_Request1.seqNo());
      assertFalse(transportReplicationActionTests_Request1.getShouldPersistResult());
      assertFalse(transportReplicationActionTests_Request1.equals((Object)transportReplicationActionTests_Request0));
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request2 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request2);
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request2.consistencyLevel());
      assertEquals(0L, transportReplicationActionTests_Request2.primaryTerm());
      assertNull(transportReplicationActionTests_Request2.index());
      assertFalse(transportReplicationActionTests_Request2.getShouldPersistResult());
      assertEquals(0L, transportReplicationActionTests_Request2.seqNo());
      assertFalse(transportReplicationActionTests_Request2.equals((Object)transportReplicationActionTests_Request0));
      assertFalse(transportReplicationActionTests_Request2.equals((Object)transportReplicationActionTests_Request1));
      
      String string0 = "";
      long long0 = 2097152L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals("", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(2097152L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      
      PrintStream printStream0 = SegmentInfos.getInfoStream();
      assertNull(printStream0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(printStream0);
      assertNotNull(outputStreamStreamOutput0);
      
      // Undeclared exception!
      try { 
        transportReplicationAction_ReplicaResponse0.writeTo(outputStreamStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.OutputStreamStreamOutput", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "3";
      long long0 = 2487L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals(2487L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("3", transportReplicationAction_ReplicaResponse0.allocationId());
      
      int int0 = 3;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      
      int int1 = 2181;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int1);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertFalse(int1 == int0);
      
      transportReplicationAction_ReplicaResponse0.writeTo(bytesStreamOutput0);
      assertEquals(2487L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("3", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(4, bytesStreamOutput0.size());
      assertEquals(4L, bytesStreamOutput0.position());
      assertFalse(int1 == int0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertFalse(int0 == int1);
      
      BytesArray bytesArray0 = byteBufferBytesReference0.copyBytesArray();
      assertNotNull(bytesArray0);
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(3, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertFalse(int0 == int1);
      
      String string1 = bytesArray0.toUtf8();
      assertNotNull(string1);
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(3, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertNotSame(string1, string0);
      assertEquals("\u0000\u0000\u0000", string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      
      BytesArray bytesArray1 = bytesArray0.copyBytesArray();
      assertNotNull(bytesArray1);
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(3, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(3, bytesArray1.length());
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray1, bytesArray0);
      assertFalse(int0 == int1);
      assertTrue(bytesArray1.equals((Object)bytesArray0));
      
      StreamInput streamInput0 = bytesArray1.streamInput();
      assertNotNull(streamInput0);
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(3, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(3, bytesArray1.length());
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray1, bytesArray0);
      assertFalse(int0 == int1);
      assertTrue(bytesArray0.equals((Object)bytesArray1));
      assertTrue(bytesArray1.equals((Object)bytesArray0));
      
      transportReplicationAction_ReplicaResponse0.readFrom(streamInput0);
      assertEquals(0L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("", transportReplicationAction_ReplicaResponse0.allocationId());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(bytesArray0.hasArray());
      assertEquals(3, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray1.hasArray());
      assertEquals(0, bytesArray1.arrayOffset());
      assertEquals(3, bytesArray1.length());
      assertNotSame(string0, string1);
      assertNotSame(bytesArray0, bytesArray1);
      assertNotSame(bytesArray1, bytesArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(bytesArray0.equals((Object)bytesArray1));
      assertTrue(bytesArray1.equals((Object)bytesArray0));
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      Translog.Location translog_Location0 = null;
      TransportReplicationAction.WriteResult<ReplicationResponse> transportReplicationAction_WriteResult0 = new TransportReplicationAction.WriteResult<ReplicationResponse>(transportReplicationActionTests_Response0, translog_Location0);
      assertNotNull(transportReplicationAction_WriteResult0);
      
      ReplicationResponse replicationResponse0 = transportReplicationAction_WriteResult0.response();
      assertNotNull(replicationResponse0);
      assertSame(transportReplicationActionTests_Response0, replicationResponse0);
      assertSame(replicationResponse0, transportReplicationActionTests_Response0);
      
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      assertNotNull(mockInetSocketAddress0);
      
      InetSocketTransportAddress inetSocketTransportAddress0 = new InetSocketTransportAddress(mockInetSocketAddress0);
      assertNotNull(inetSocketTransportAddress0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(0, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      transportReplicationActionTests_Response0.remoteAddress((TransportAddress) inetSocketTransportAddress0);
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertEquals("/192.168.1.42:0", mockInetSocketAddress0.toString());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertEquals(0, inetSocketTransportAddress0.getPort());
      assertSame(transportReplicationActionTests_Response0, replicationResponse0);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      
      ReplicationResponse replicationResponse1 = transportReplicationAction_WriteResult0.response();
      assertNotNull(replicationResponse1);
      assertSame(transportReplicationActionTests_Response0, replicationResponse1);
      assertSame(transportReplicationActionTests_Response0, replicationResponse0);
      assertSame(replicationResponse1, transportReplicationActionTests_Response0);
      assertSame(replicationResponse1, replicationResponse0);
      
      ReplicationResponse replicationResponse2 = transportReplicationAction_WriteResult0.response();
      assertNotNull(replicationResponse2);
      assertSame(transportReplicationActionTests_Response0, replicationResponse1);
      assertSame(transportReplicationActionTests_Response0, replicationResponse2);
      assertSame(transportReplicationActionTests_Response0, replicationResponse0);
      assertSame(replicationResponse2, replicationResponse1);
      assertSame(replicationResponse2, replicationResponse0);
      assertSame(replicationResponse2, transportReplicationActionTests_Response0);
      
      ReplicationResponse replicationResponse3 = transportReplicationAction_WriteResult0.response();
      assertNotNull(replicationResponse3);
      assertSame(transportReplicationActionTests_Response0, replicationResponse3);
      assertSame(transportReplicationActionTests_Response0, replicationResponse1);
      assertSame(transportReplicationActionTests_Response0, replicationResponse2);
      assertSame(transportReplicationActionTests_Response0, replicationResponse0);
      assertSame(replicationResponse3, replicationResponse1);
      assertSame(replicationResponse3, replicationResponse0);
      assertSame(replicationResponse3, transportReplicationActionTests_Response0);
      assertSame(replicationResponse3, replicationResponse2);
      
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> transportReplicationAction0 = (TransportReplicationAction<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>) mock(TransportReplicationAction.class, CALLS_REAL_METHODS);
      TransportReplicationAction.PrimaryOperationTransportHandler transportReplicationAction_PrimaryOperationTransportHandler0 = transportReplicationAction0.new PrimaryOperationTransportHandler();
      assertNotNull(transportReplicationAction_PrimaryOperationTransportHandler0);
      
      BasicReplicationRequest basicReplicationRequest0 = null;
      TransportReplicationActionTests transportReplicationActionTests0 = null;
      try {
        transportReplicationActionTests0 = new TransportReplicationActionTests();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      ReplicationTask replicationTask0 = null;
      String string0 = "66+U~";
      TransportReplicationAction.setPhase(replicationTask0, string0);
      long long0 = 1373L;
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse0 = new TransportReplicationAction.ReplicaResponse(string0, long0);
      assertNotNull(transportReplicationAction_ReplicaResponse0);
      assertEquals(1373L, transportReplicationAction_ReplicaResponse0.localCheckpoint());
      assertEquals("66+U~", transportReplicationAction_ReplicaResponse0.allocationId());
      
      TransportReplicationAction.ReplicaResponse transportReplicationAction_ReplicaResponse1 = new TransportReplicationAction.ReplicaResponse();
      assertNotNull(transportReplicationAction_ReplicaResponse1);
      assertNull(transportReplicationAction_ReplicaResponse1.allocationId());
      assertEquals(0L, transportReplicationAction_ReplicaResponse1.localCheckpoint());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        transportReplicationAction_ReplicaResponse1.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReplicaResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = new TransportReplicationActionTests.Request();
      assertNotNull(transportReplicationActionTests_Request0);
      assertEquals(0L, transportReplicationActionTests_Request0.seqNo());
      assertEquals(0L, transportReplicationActionTests_Request0.primaryTerm());
      assertNull(transportReplicationActionTests_Request0.index());
      assertFalse(transportReplicationActionTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request0.consistencyLevel());
      
      long long0 = 1L;
      String string0 = "org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1";
      String string1 = "";
      String string2 = "org.elasticsearch.deprecation.";
      TaskId taskId0 = new TaskId(string2, long0);
      assertNotNull(taskId0);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = taskId0.toString();
      assertNotNull(string3);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertEquals("org.elasticsearch.deprecation.:1", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = taskId0.toString();
      assertNotNull(string4);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("org.elasticsearch.deprecation.:1", string4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      ReplicationTask replicationTask0 = new ReplicationTask(long0, string0, string0, string1, taskId0);
      assertNotNull(replicationTask0);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getAction());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getType());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("", replicationTask0.getDescription());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      
      String string5 = "xmH\"Z_FTTX)w:~3L";
      replicationTask0.setPhase(string5);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertEquals("xmH\"Z_FTTX)w:~3L", replicationTask0.getPhase());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getAction());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getType());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("", replicationTask0.getDescription());
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      TransportReplicationAction.setPhase(replicationTask0, string1);
      assertEquals("org.elasticsearch.deprecation.", taskId0.getNodeId());
      assertEquals(1L, taskId0.getId());
      assertTrue(taskId0.isSet());
      assertEquals("", replicationTask0.getPhase());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getAction());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler$1", replicationTask0.getType());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertEquals("", replicationTask0.getDescription());
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      
      String string6 = "nAdbyD";
      int int0 = 1365;
      ShardId shardId0 = new ShardId(string2, string6, int0);
      assertNotNull(shardId0);
      assertEquals(1365, shardId0.id());
      assertEquals(1365, shardId0.getId());
      assertEquals("org.elasticsearch.deprecation.", shardId0.getIndexName());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = "`G{";
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException0 = new TransportReplicationAction.RetryOnReplicaException(shardId0, string7);
      assertNotNull(transportReplicationAction_RetryOnReplicaException0);
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      TransportReplicationActionTests.Response transportReplicationActionTests_Response0 = new TransportReplicationActionTests.Response();
      assertNotNull(transportReplicationActionTests_Response0);
      
      TransportReplicationActionTests.Request transportReplicationActionTests_Request1 = new TransportReplicationActionTests.Request(shardId0);
      assertNotNull(transportReplicationActionTests_Request1);
      assertFalse(transportReplicationActionTests_Request1.getShouldPersistResult());
      assertEquals("org.elasticsearch.deprecation.", transportReplicationActionTests_Request1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, transportReplicationActionTests_Request1.consistencyLevel());
      assertEquals(0L, transportReplicationActionTests_Request1.primaryTerm());
      assertEquals(0L, transportReplicationActionTests_Request1.seqNo());
      assertEquals(1365, shardId0.id());
      assertEquals(1365, shardId0.getId());
      assertEquals("org.elasticsearch.deprecation.", shardId0.getIndexName());
      assertFalse(transportReplicationActionTests_Request1.equals((Object)transportReplicationActionTests_Request0));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      int int1 = 1485;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int1);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1485, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1485, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1485 cap=1485]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(1485, byteBuffer0.remaining());
      assertFalse(int1 == int0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1485, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1485, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1485 cap=1485]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(1485, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertFalse(int1 == int0);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(byteBufferStreamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(1485, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1485, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1485 cap=1485]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(1485, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertFalse(int1 == int0);
      
      TransportReplicationAction.RetryOnReplicaException transportReplicationAction_RetryOnReplicaException1 = new TransportReplicationAction.RetryOnReplicaException(namedWriteableAwareStreamInput0);
      assertNotNull(transportReplicationAction_RetryOnReplicaException1);
      assertFalse(int1 == int0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
  }
}
