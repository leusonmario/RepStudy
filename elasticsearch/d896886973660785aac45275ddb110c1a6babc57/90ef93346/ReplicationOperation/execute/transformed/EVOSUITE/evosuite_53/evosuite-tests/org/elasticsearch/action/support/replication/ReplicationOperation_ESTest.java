/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 02:01:23 GMT 2021
 */

package org.elasticsearch.action.support.replication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.PrintStream;
import java.sql.SQLException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.Enumeration;
import java.util.function.Consumer;
import java.util.function.Supplier;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.NOPLoggerRepository;
import org.apache.lucene.index.SegmentInfos;
import org.apache.lucene.search.TimeLimitingCollector;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.support.PlainActionFuture;
import org.elasticsearch.action.support.replication.BasicReplicationRequest;
import org.elasticsearch.action.support.replication.ReplicationOperation;
import org.elasticsearch.action.support.replication.ReplicationOperationTests;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.routing.ShardRouting;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.PageCacheRecycler;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.engine.VersionConflictEngineException;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.CircuitBreakerService;
import org.elasticsearch.rest.RestStatus;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReplicationOperation_ESTest extends ReplicationOperation_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertNotNull(replicationOperationTests_Request0);
      
      ReplicationOperation.Primary<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> replicationOperation_Primary0 = null;
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      boolean boolean0 = true;
      ReplicationOperation.Replicas<BasicReplicationRequest> replicationOperation_Replicas0 = null;
      Supplier<ClusterState> supplier0 = null;
      String string0 = null;
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      Logger logger0 = nOPLoggerRepository0.getRootLogger();
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertNotNull(eSLogger0);
      
      String string1 = "{} Timeout: [{}], request: [{}]";
      Enumeration enumeration0 = nOPLoggerRepository0.getCurrentCategories();
      assertNotNull(enumeration0);
      
      Logger logger1 = nOPLoggerRepository0.getRootLogger();
      assertFalse(logger1.isDebugEnabled());
      assertFalse(logger1.isInfoEnabled());
      assertFalse(logger1.isTraceEnabled());
      assertTrue(logger1.getAdditivity());
      assertEquals("root", logger1.getName());
      assertNotNull(logger1);
      assertFalse(logger1.equals((Object)logger0));
      assertNotSame(logger1, logger0);
      
      ReplicationOperation<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> replicationOperation0 = new ReplicationOperation<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse>(replicationOperationTests_Request0, replicationOperation_Primary0, plainActionFuture0, boolean0, boolean0, replicationOperation_Replicas0, supplier0, eSLogger0, string1);
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("{} Timeout: [{}], request: [{}]", replicationOperation0.getopType());
      assertTrue(replicationOperation0.getcheckWriteConsistency());
      assertTrue(replicationOperation0.getexecuteOnReplicas());
      assertTrue(replicationOperation0.checkWriteConsistency);
      assertTrue(replicationOperation0.executeOnReplicas);
      assertNotNull(replicationOperation0);
      assertFalse(logger0.equals((Object)logger1));
      
      ReplicationOperation.Primary<ReplicationOperationTests.Request, BasicReplicationRequest, ReplicationResponse> replicationOperation_Primary1 = replicationOperation0.getprimary();
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertEquals("root", logger0.getName());
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("root", eSLogger0.getName());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("{} Timeout: [{}], request: [{}]", replicationOperation0.getopType());
      assertTrue(replicationOperation0.getcheckWriteConsistency());
      assertTrue(replicationOperation0.getexecuteOnReplicas());
      assertTrue(replicationOperation0.checkWriteConsistency);
      assertTrue(replicationOperation0.executeOnReplicas);
      assertNull(replicationOperation_Primary1);
      assertFalse(logger0.equals((Object)logger1));
      assertNotSame(logger0, logger1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 4;
      String string0 = "dXYdZSolid: {planetmodel=";
      String string1 = "";
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[4];
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Throwable throwable0 = null;
      boolean boolean0 = ReplicationOperation.isConflictException(throwable0);
      assertFalse(boolean0);
      
      String string0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      PrintStream printStream0 = SegmentInfos.getInfoStream();
      assertNull(printStream0);
      
      // Undeclared exception!
      try { 
        sQLNonTransientException0.printStackTrace(printStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = " Gl1_otA\"M; J*";
      String string1 = "internal:cluster/shard/started";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(" Gl1_otA\"M; J*", shardId0.getIndexName());
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        ShardId.readShardId(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.Index", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "Failed to bind to [";
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(replicationOperation_RetryOnPrimaryException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "M:6~uPIh{`XA\\u1oO`X";
      SQLException sQLException0 = new SQLException(string0);
      assertEquals("M:6~uPIh{`XA\\u1oO`X", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      MockException mockException0 = new MockException(sQLException0);
      assertNotNull(mockException0);
      
      SQLException sQLException1 = (SQLException)sQLException0.fillInStackTrace();
      assertEquals("M:6~uPIh{`XA\\u1oO`X", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", sQLException1.toString());
      assertEquals(0, sQLException1.getErrorCode());
      assertNull(sQLException1.getSQLState());
      assertEquals("M:6~uPIh{`XA\\u1oO`X", sQLException1.getMessage());
      assertNotNull(sQLException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      
      String string1 = mockException0.getLocalizedMessage();
      assertEquals("M:6~uPIh{`XA\\u1oO`X", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(sQLException0, sQLException1);
      assertNotSame(string1, string0);
      
      StackTraceElement[] stackTraceElementArray0 = mockException0.getStackTrace();
      assertEquals("M:6~uPIh{`XA\\u1oO`X", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(sQLException0, sQLException1);
      
      sQLException0.addSuppressed(mockException0);
      assertEquals("M:6~uPIh{`XA\\u1oO`X", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(sQLException0, sQLException1);
      
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(sQLException0);
      assertEquals("M:6~uPIh{`XA\\u1oO`X", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: M:6~uPIh{`XA\\u1oO`X", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(sQLException0, sQLException1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-81);
      byteArray0[0] = byte0;
      InputStreamStreamInput inputStreamStreamInput0 = (InputStreamStreamInput)StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(inputStreamStreamInput0);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = null;
      try {
        replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      PageCacheRecycler pageCacheRecycler0 = mock(PageCacheRecycler.class, new ViolatedAssumptionAnswer());
      CircuitBreakerService circuitBreakerService0 = null;
      boolean boolean0 = true;
      BigArrays bigArrays0 = new BigArrays(pageCacheRecycler0, circuitBreakerService0, boolean0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      long long0 = 2662L;
      int int0 = 0;
      String string0 = null;
      Throwable throwable0 = null;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Throwable throwable0 = null;
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(throwable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ReplicationOperationTests.TestReplicaProxy replicationOperationTests_TestReplicaProxy0 = new ReplicationOperationTests.TestReplicaProxy();
      assertNotNull(replicationOperationTests_TestReplicaProxy0);
      
      ShardRouting shardRouting0 = null;
      String string0 = "";
      String string1 = "$X";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string1, string0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("$X", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: $X", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      TimeLimitingCollector.TimerThread timeLimitingCollector_TimerThread0 = TimeLimitingCollector.getGlobalTimerThread();
      assertTrue(timeLimitingCollector_TimerThread0.isDaemon());
      assertFalse(timeLimitingCollector_TimerThread0.isInterrupted());
      assertEquals(0, timeLimitingCollector_TimerThread0.countStackFrames());
      assertEquals(20L, timeLimitingCollector_TimerThread0.getResolution());
      assertEquals(0L, timeLimitingCollector_TimerThread0.getMilliseconds());
      assertEquals(20, TimeLimitingCollector.TimerThread.DEFAULT_RESOLUTION);
      assertNotNull(timeLimitingCollector_TimerThread0);
      
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        replicationOperationTests_TestReplicaProxy0.failShard(shardRouting0, shardRouting0, string0, sQLRecoverableException0, timeLimitingCollector_TimerThread0, consumer0, consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "=/ho_hXtmF";
      String string1 = "org.elasticsearch.index.mapper.internal.SeqNoFieldMapper";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string1, string0);
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptString());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.type());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("=/ho_hXtmF", updateRequest0.index());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertEquals("=/ho_hXtmF", updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNotNull(updateRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      UpdateRequest updateRequest1 = updateRequest0.id(string1);
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptString());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.type());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("=/ho_hXtmF", updateRequest0.index());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("=/ho_hXtmF", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertNotNull(updateRequest1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      boolean boolean0 = true;
      UpdateRequest updateRequest2 = updateRequest1.detectNoop(boolean0);
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptString());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.type());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("=/ho_hXtmF", updateRequest0.index());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("=/ho_hXtmF", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.scriptType());
      assertEquals("=/ho_hXtmF", updateRequest2.index());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.routing());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest2.type());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.refresh());
      assertNotNull(updateRequest2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      WriteConsistencyLevel writeConsistencyLevel0 = WriteConsistencyLevel.ALL;
      UpdateRequest updateRequest3 = updateRequest2.consistencyLevel(writeConsistencyLevel0);
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptString());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.type());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("=/ho_hXtmF", updateRequest0.index());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest0.consistencyLevel());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("=/ho_hXtmF", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.scriptLang());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.scriptType());
      assertEquals("=/ho_hXtmF", updateRequest2.index());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.routing());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest2.type());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest3.scriptString());
      assertEquals((-3L), updateRequest3.version());
      assertNull(updateRequest3.concreteIndex());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest3.id());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest3.consistencyLevel());
      assertNull(updateRequest3.scriptLang());
      assertFalse(updateRequest3.docAsUpsert());
      assertNull(updateRequest3.parent());
      assertNull(updateRequest3.scriptType());
      assertEquals("=/ho_hXtmF", updateRequest3.index());
      assertFalse(updateRequest3.scriptedUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertFalse(updateRequest3.refresh());
      assertNull(updateRequest3.routing());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest3.type());
      assertNotNull(updateRequest3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      
      ShardId shardId0 = updateRequest3.getShardId();
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptString());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.type());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.refresh());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("=/ho_hXtmF", updateRequest0.index());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest0.consistencyLevel());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("=/ho_hXtmF", updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.type());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.scriptLang());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.scriptType());
      assertEquals("=/ho_hXtmF", updateRequest2.index());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest2.id());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest2.consistencyLevel());
      assertEquals((-3L), updateRequest2.version());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.routing());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest2.type());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest3.scriptString());
      assertEquals((-3L), updateRequest3.version());
      assertNull(updateRequest3.concreteIndex());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest3.id());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest3.consistencyLevel());
      assertNull(updateRequest3.scriptLang());
      assertFalse(updateRequest3.docAsUpsert());
      assertNull(updateRequest3.parent());
      assertNull(updateRequest3.scriptType());
      assertEquals("=/ho_hXtmF", updateRequest3.index());
      assertFalse(updateRequest3.scriptedUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertFalse(updateRequest3.refresh());
      assertNull(updateRequest3.routing());
      assertEquals("org.elasticsearch.index.mapper.internal.SeqNoFieldMapper", updateRequest3.type());
      assertNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest1);
      
      String string2 = "";
      String string3 = "2riflf\\=`a]=m|F/";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string2, string3);
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("2riflf\\=`a]=m|F/", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string2, sQLTransientConnectionException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string0, string0);
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptType());
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertEquals("", updateRequest0.index());
      assertNotNull(updateRequest0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-95);
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)115;
      byteArray0[2] = byte2;
      byte byte3 = (byte)25;
      byteArray0[3] = byte3;
      byteArray0[4] = byte2;
      byte byte4 = (byte)0;
      byteArray0[5] = byte4;
      int int0 = 0;
      UpdateRequest updateRequest1 = updateRequest0.upsert(byteArray0, (int) byte3, int0);
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptType());
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertEquals("", updateRequest0.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)1, (byte)115, (byte)25, (byte)115, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(updateRequest1);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      ShardId shardId0 = updateRequest1.getShardId();
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptType());
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertEquals("", updateRequest0.index());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertArrayEquals(new byte[] {(byte) (-95), (byte)1, (byte)115, (byte)25, (byte)115, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNull(shardId0);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string0, sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      String string1 = "] not found.";
      VersionConflictEngineException versionConflictEngineException0 = new VersionConflictEngineException(shardId0, sQLNonTransientException0, string0, string1, string0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)1, (byte)115, (byte)25, (byte)115, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(versionConflictEngineException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte2);
      
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(versionConflictEngineException0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptType());
      assertEquals("", updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertEquals("", updateRequest0.index());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals("", updateRequest1.id());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.scriptLang());
      assertEquals("", updateRequest1.index());
      assertFalse(updateRequest1.refresh());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)1, (byte)115, (byte)25, (byte)115, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte4);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte2);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string0);
      assertSame(updateRequest1, updateRequest0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = 3946;
      Random.setNextRandom(int0);
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertNotNull(updateRequest0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = (-2674);
      int int2 = 0;
      UpdateRequest updateRequest1 = updateRequest0.upsert(byteArray0, int1, int2);
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertEquals((-3L), updateRequest1.version());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(updateRequest1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      ShardId shardId0 = updateRequest1.getShardId();
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertEquals((-3L), updateRequest1.version());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNull(shardId0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      String string0 = "\\Yd$W29;2el}Kea";
      String string1 = "D&d?qz";
      SQLTransientException sQLTransientException0 = new SQLTransientException(string1, string1, int1);
      assertEquals("D&d?qz", sQLTransientException0.getSQLState());
      assertEquals("D&d?qz", sQLTransientException0.getMessage());
      assertEquals((-2674), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: D&d?qz", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) shardId0;
      objectArray0[1] = (Object) updateRequest1;
      objectArray0[2] = (Object) sQLTransientException0;
      VersionConflictEngineException versionConflictEngineException0 = new VersionConflictEngineException(shardId0, string0, sQLTransientException0, objectArray0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(versionConflictEngineException0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = versionConflictEngineException0.REST_EXCEPTION_SKIP_CAUSE;
      stringArray0[3] = versionConflictEngineException0.REST_EXCEPTION_SKIP_STACK_TRACE;
      stringArray0[4] = versionConflictEngineException0.REST_EXCEPTION_SKIP_CAUSE;
      stringArray0[5] = string1;
      stringArray0[6] = versionConflictEngineException0.REST_EXCEPTION_SKIP_STACK_TRACE;
      versionConflictEngineException0.setResources(string1, stringArray0);
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("D&d?qz", sQLTransientException0.getSQLState());
      assertEquals("D&d?qz", sQLTransientException0.getMessage());
      assertEquals((-2674), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: D&d?qz", sQLTransientException0.toString());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean3 = ReplicationOperation.isConflictException(versionConflictEngineException0);
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.scriptLang());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("D&d?qz", sQLTransientException0.getSQLState());
      assertEquals("D&d?qz", sQLTransientException0.getMessage());
      assertEquals((-2674), sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: D&d?qz", sQLTransientException0.toString());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertTrue(boolean3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte) (-50);
      byteArray0[0] = byte0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(15, byteArray0.length);
      assertNotNull(streamInput0);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(streamInput0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(15, byteArray0.length);
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
  }
}
