/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 00:05:52 GMT 2021
 */

package org.elasticsearch.action.support.replication;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.sql.BatchUpdateException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.util.Hashtable;
import java.util.concurrent.CountDownLatch;
import java.util.function.Supplier;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.NOPLoggerRepository;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.ActionRequestValidationException;
import org.elasticsearch.action.LatchedActionListener;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.get.GetRequest;
import org.elasticsearch.action.support.PlainActionFuture;
import org.elasticsearch.action.support.replication.BasicReplicationRequest;
import org.elasticsearch.action.support.replication.ReplicationOperation;
import org.elasticsearch.action.support.replication.ReplicationOperationTests;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.routing.ShardRouting;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.engine.VersionConflictEngineException;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.tasks.TaskId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReplicationOperation_ESTest extends ReplicationOperation_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(batchUpdateException0);
      assertFalse(boolean0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "MEDIAN";
      String string1 = "*yQa'y]Terf-5rag";
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      InputStream inputStream0 = null;
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(inputStream0);
      assertNotNull(inputStreamStreamInput0);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException1 = null;
      try {
        replicationOperation_RetryOnPrimaryException1 = new ReplicationOperation.RetryOnPrimaryException(inputStreamStreamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "s~x]wWEHru2sxkYf";
      VersionConflictEngineException versionConflictEngineException0 = new VersionConflictEngineException(shardId0, string0, string0, string0);
      assertNotNull(versionConflictEngineException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ElasticsearchException[] elasticsearchExceptionArray0 = ElasticsearchException.guessRootCauses((Throwable) versionConflictEngineException0);
      assertEquals(1, elasticsearchExceptionArray0.length);
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertNotNull(elasticsearchExceptionArray0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      Throwable throwable0 = versionConflictEngineException0.getCause();
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertNull(throwable0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      long long0 = 1050L;
      System.setCurrentTimeMillis(long0);
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(versionConflictEngineException0);
      assertTrue(boolean0);
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT;
      assertFalse(boolean0);
      
      String string0 = "-CN*/jzSz";
      int int0 = 1945;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals(1945, shardId0.getId());
      assertEquals(1945, shardId0.id());
      assertNotNull(shardId0);
      
      String string1 = "\\DOF{eMg";
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string1, batchUpdateException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ShardId shardId1 = replicationOperation_RetryOnPrimaryException0.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals(1945, shardId0.getId());
      assertEquals(1945, shardId0.id());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals(1945, shardId1.id());
      assertEquals(1945, shardId1.getId());
      assertNotNull(shardId1);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotSame(string0, string1);
      assertNotSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertNotSame(shardId1, shardId0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest(shardId1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(shardId0.equals((Object)shardId1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals(1945, shardId0.getId());
      assertEquals(1945, shardId0.id());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals(1945, shardId1.id());
      assertEquals(1945, shardId1.getId());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals("-CN*/jzSz", basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertNotNull(basicReplicationRequest0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ReplicationOperation.Primary<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation_Primary0 = null;
      ActionListener<ReplicationResponse> actionListener0 = null;
      boolean boolean1 = false;
      ReplicationOperation.Replicas<BasicReplicationRequest> replicationOperation_Replicas0 = null;
      Supplier<ClusterState> supplier0 = (Supplier<ClusterState>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = null;
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      Logger logger0 = nOPLoggerRepository0.exists(string2);
      assertNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string2, logger0);
      assertNull(eSLogger0.getPrefix());
      assertNotNull(eSLogger0);
      
      ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation0 = new ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>(basicReplicationRequest0, replicationOperation_Primary0, actionListener0, boolean0, boolean1, replicationOperation_Replicas0, supplier0, eSLogger0, string1);
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(shardId0.equals((Object)shardId1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertTrue(boolean1 == boolean0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(eSLogger0.getPrefix());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals(1945, shardId0.getId());
      assertEquals(1945, shardId0.id());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals(1945, shardId1.id());
      assertEquals(1945, shardId1.getId());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals("-CN*/jzSz", basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertNotNull(replicationOperation0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      try { 
        replicationOperation0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationOperation", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT;
      assertFalse(boolean0);
      
      String string0 = "-CN*/jzSz";
      int int0 = (-656);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.getId());
      assertNotNull(shardId0);
      
      String string1 = "\\DOF{eMg";
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string1, batchUpdateException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      ShardId shardId1 = new ShardId(replicationOperation_RetryOnPrimaryException0.REST_EXCEPTION_SKIP_STACK_TRACE, string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(shardId1.equals((Object)shardId0));
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.getId());
      assertEquals((-656), shardId1.id());
      assertEquals((-656), shardId1.getId());
      assertEquals("rest.exception.stacktrace.skip", shardId1.getIndexName());
      assertNotNull(shardId1);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertNotNull(basicReplicationRequest0);
      
      ReplicationOperation.Primary<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation_Primary0 = null;
      ActionListener<ReplicationResponse> actionListener0 = null;
      ReplicationOperation.Replicas<BasicReplicationRequest> replicationOperation_Replicas0 = null;
      Supplier<ClusterState> supplier0 = (Supplier<ClusterState>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = null;
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      Logger logger0 = nOPLoggerRepository0.exists(string2);
      assertNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string2, logger0);
      assertNull(eSLogger0.getPrefix());
      assertNotNull(eSLogger0);
      
      ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation0 = new ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>(basicReplicationRequest0, replicationOperation_Primary0, actionListener0, boolean0, replicationOperation_RetryOnPrimaryException0.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT, replicationOperation_Replicas0, supplier0, eSLogger0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(shardId0.equals((Object)shardId1));
      assertFalse(string1.equals((Object)string0));
      assertNull(eSLogger0.getPrefix());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.getId());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertNotNull(replicationOperation0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      // Undeclared exception!
      try { 
        replicationOperation0.execute();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // consistency level should be set
         //
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Throwable throwable0 = null;
      boolean boolean0 = ReplicationOperation.isConflictException(throwable0);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Index index0 = null;
      int int0 = 705;
      ShardId shardId0 = new ShardId(index0, int0);
      assertEquals(705, shardId0.getId());
      assertEquals(705, shardId0.id());
      assertNotNull(shardId0);
      
      String string0 = "~lJ$J";
      GetRequest getRequest0 = new GetRequest(string0, string0, string0);
      assertEquals("~lJ$J", getRequest0.id());
      assertTrue(getRequest0.realtime());
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.preference());
      assertNull(getRequest0.routing());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertFalse(getRequest0.getShouldPersistResult());
      assertFalse(getRequest0.refresh());
      assertEquals("~lJ$J", getRequest0.type());
      assertEquals((-3L), getRequest0.version());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertNull(getRequest0.parent());
      assertEquals("~lJ$J", getRequest0.index());
      assertNotNull(getRequest0);
      
      boolean boolean0 = false;
      GetRequest getRequest1 = getRequest0.ignoreErrorsOnGeneratedFields(boolean0);
      assertEquals("~lJ$J", getRequest0.id());
      assertTrue(getRequest0.realtime());
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.preference());
      assertNull(getRequest0.routing());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertFalse(getRequest0.getShouldPersistResult());
      assertFalse(getRequest0.refresh());
      assertEquals("~lJ$J", getRequest0.type());
      assertEquals((-3L), getRequest0.version());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertNull(getRequest0.parent());
      assertEquals("~lJ$J", getRequest0.index());
      assertFalse(getRequest1.getShouldPersistResult());
      assertFalse(getRequest1.refresh());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertNull(getRequest1.parent());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest1.version());
      assertEquals("~lJ$J", getRequest1.index());
      assertTrue(getRequest1.realtime());
      assertEquals("~lJ$J", getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertNull(getRequest1.preference());
      assertNull(getRequest1.routing());
      assertEquals("~lJ$J", getRequest1.type());
      assertNotNull(getRequest1);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest1, getRequest0);
      
      ActionRequestValidationException actionRequestValidationException0 = getRequest1.validate();
      assertEquals("~lJ$J", getRequest0.id());
      assertTrue(getRequest0.realtime());
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.preference());
      assertNull(getRequest0.routing());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertFalse(getRequest0.getShouldPersistResult());
      assertFalse(getRequest0.refresh());
      assertEquals("~lJ$J", getRequest0.type());
      assertEquals((-3L), getRequest0.version());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertNull(getRequest0.parent());
      assertEquals("~lJ$J", getRequest0.index());
      assertFalse(getRequest1.getShouldPersistResult());
      assertFalse(getRequest1.refresh());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertNull(getRequest1.parent());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest1.version());
      assertEquals("~lJ$J", getRequest1.index());
      assertTrue(getRequest1.realtime());
      assertEquals("~lJ$J", getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertNull(getRequest1.preference());
      assertNull(getRequest1.routing());
      assertEquals("~lJ$J", getRequest1.type());
      assertNull(actionRequestValidationException0);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest1, getRequest0);
      
      String string1 = "now merge";
      String string2 = "r>S*C8L1/-";
      VersionConflictEngineException versionConflictEngineException0 = new VersionConflictEngineException(shardId0, actionRequestValidationException0, string1, string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(versionConflictEngineException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      boolean boolean1 = ReplicationOperation.isConflictException(versionConflictEngineException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(705, shardId0.getId());
      assertEquals(705, shardId0.id());
      assertEquals("~lJ$J", getRequest0.id());
      assertTrue(getRequest0.realtime());
      assertTrue(getRequest0.operationThreaded());
      assertNull(getRequest0.preference());
      assertNull(getRequest0.routing());
      assertFalse(getRequest0.ignoreErrorsOnGeneratedFields());
      assertFalse(getRequest0.getShouldPersistResult());
      assertFalse(getRequest0.refresh());
      assertEquals("~lJ$J", getRequest0.type());
      assertEquals((-3L), getRequest0.version());
      assertEquals(VersionType.INTERNAL, getRequest0.versionType());
      assertNull(getRequest0.parent());
      assertEquals("~lJ$J", getRequest0.index());
      assertFalse(getRequest1.getShouldPersistResult());
      assertFalse(getRequest1.refresh());
      assertEquals(VersionType.INTERNAL, getRequest1.versionType());
      assertNull(getRequest1.parent());
      assertFalse(getRequest1.ignoreErrorsOnGeneratedFields());
      assertEquals((-3L), getRequest1.version());
      assertEquals("~lJ$J", getRequest1.index());
      assertTrue(getRequest1.realtime());
      assertEquals("~lJ$J", getRequest1.id());
      assertTrue(getRequest1.operationThreaded());
      assertNull(getRequest1.preference());
      assertNull(getRequest1.routing());
      assertEquals("~lJ$J", getRequest1.type());
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(getRequest0, getRequest1);
      assertSame(getRequest1, getRequest0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Hashtable<ShardRouting, Throwable> hashtable0 = new Hashtable<ShardRouting, Throwable>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      ReplicationOperationTests.TestReplicaProxy replicationOperationTests_TestReplicaProxy0 = new ReplicationOperationTests.TestReplicaProxy(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(replicationOperationTests_TestReplicaProxy0);
      
      ShardRouting shardRouting0 = null;
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertNotNull(replicationOperationTests_Request0);
      
      long long0 = (-1501L);
      ActionRequestValidationException actionRequestValidationException0 = replicationOperationTests_Request0.validate();
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertNotNull(actionRequestValidationException0);
      
      String string0 = "flush postings as segment ";
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest();
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertNotNull(basicReplicationRequest0);
      
      TaskId taskId0 = basicReplicationRequest0.getParentTask();
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertNotNull(taskId0);
      
      ReplicationTask replicationTask0 = (ReplicationTask)replicationOperationTests_Request0.createTask(long0, string0, string0, taskId0);
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertNull(basicReplicationRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      assertFalse(taskId0.isSet());
      assertEquals("flush postings as segment ", replicationTask0.getType());
      assertEquals("flush postings as segment ", replicationTask0.getAction());
      assertEquals((-1501L), replicationTask0.getId());
      assertEquals(1392409281320L, replicationTask0.getStartTime());
      assertNull(replicationTask0.getDescription());
      assertEquals("starting", replicationTask0.getPhase());
      assertNotNull(replicationTask0);
      
      ActionListener<ReplicationOperation.ReplicaResponse> actionListener0 = (ActionListener<ReplicationOperation.ReplicaResponse>) mock(ActionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        replicationOperationTests_TestReplicaProxy0.performOn(shardRouting0, replicationOperationTests_Request0, actionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      StreamInput streamInput0 = null;
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = null;
      try {
        replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.ElasticsearchException", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "[{}] not enough active copies to meet write consistency of [{}] (have {}, needed {}), scheduling a retry. op [{}], request [{}]";
      String string1 = "UkE*?)y<}B\\1jY";
      String string2 = "wKi%cDXS4%2nC6b+?IG";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("UkE*?)y<}B\\1jY", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("[{}] not enough active copies to meet write consistency of [{}] (have {}, needed {}), scheduling a retry. op [{}], request [{}]", updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("wKi%cDXS4%2nC6b+?IG", updateRequest0.id());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNotNull(updateRequest0);
      
      ShardId shardId0 = updateRequest0.getShardId();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("UkE*?)y<}B\\1jY", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("[{}] not enough active copies to meet write consistency of [{}] (have {}, needed {}), scheduling a retry. op [{}], request [{}]", updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("wKi%cDXS4%2nC6b+?IG", updateRequest0.id());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(shardId0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ShardId shardId1 = replicationOperation_RetryOnPrimaryException0.getShardId();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("UkE*?)y<}B\\1jY", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("[{}] not enough active copies to meet write consistency of [{}] (have {}, needed {}), scheduling a retry. op [{}], request [{}]", updateRequest0.index());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptLang());
      assertEquals("wKi%cDXS4%2nC6b+?IG", updateRequest0.id());
      assertNull(updateRequest0.scriptString());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(shardId1);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException1 = new ReplicationOperation.RetryOnPrimaryException(shardId1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(replicationOperation_RetryOnPrimaryException1);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TransportReplicationActionTests.Request transportReplicationActionTests_Request0 = null;
      ReplicationOperation.Primary<TransportReplicationActionTests.Request, ReplicationOperationTests.Request, ReplicationResponse> replicationOperation_Primary0 = null;
      PlainActionFuture<ReplicationResponse> plainActionFuture0 = new PlainActionFuture<ReplicationResponse>();
      assertNotNull(plainActionFuture0);
      
      int int0 = 0;
      CountDownLatch countDownLatch0 = new CountDownLatch(int0);
      assertNotNull(countDownLatch0);
      
      LatchedActionListener<ReplicationResponse> latchedActionListener0 = new LatchedActionListener<ReplicationResponse>(plainActionFuture0, countDownLatch0);
      assertNotNull(latchedActionListener0);
      
      boolean boolean0 = true;
      ReplicationOperationTests.TestReplicaProxy replicationOperationTests_TestReplicaProxy0 = new ReplicationOperationTests.TestReplicaProxy();
      assertNotNull(replicationOperationTests_TestReplicaProxy0);
      
      Supplier<ClusterState> supplier0 = (Supplier<ClusterState>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      String string1 = "PV*9K!^/";
      Logger logger0 = nOPLoggerRepository0.exists(string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(logger0);
      assertNotSame(string1, string0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", eSLogger0.getPrefix());
      assertNotNull(eSLogger0);
      
      String string2 = "q!@WkOfjK@Ev";
      ReplicationOperation<TransportReplicationActionTests.Request, ReplicationOperationTests.Request, ReplicationResponse> replicationOperation0 = new ReplicationOperation<TransportReplicationActionTests.Request, ReplicationOperationTests.Request, ReplicationResponse>(transportReplicationActionTests_Request0, replicationOperation_Primary0, latchedActionListener0, boolean0, boolean0, replicationOperationTests_TestReplicaProxy0, supplier0, eSLogger0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", eSLogger0.getPrefix());
      assertNotNull(replicationOperation0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(mockException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Index index0 = null;
      int int0 = (-53);
      ShardId shardId0 = new ShardId(index0, int0);
      assertEquals((-53), shardId0.getId());
      assertEquals((-53), shardId0.id());
      assertNotNull(shardId0);
      
      String string0 = "lh\\t";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string0, sQLInvalidAuthorizationSpecException1);
      assertFalse(sQLInvalidAuthorizationSpecException0.equals((Object)sQLInvalidAuthorizationSpecException1));
      assertFalse(sQLInvalidAuthorizationSpecException1.equals((Object)sQLInvalidAuthorizationSpecException0));
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "s~x]wWEHru2sxkYf";
      String string1 = "";
      VersionConflictEngineException versionConflictEngineException0 = new VersionConflictEngineException(shardId0, string0, string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(versionConflictEngineException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = versionConflictEngineException0.REST_EXCEPTION_SKIP_STACK_TRACE;
      stringArray0[1] = versionConflictEngineException0.REST_EXCEPTION_SKIP_CAUSE;
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      String string2 = "1t&4VN+p+>f";
      stringArray0[7] = string2;
      stringArray0[8] = versionConflictEngineException0.REST_EXCEPTION_SKIP_CAUSE;
      versionConflictEngineException0.setResources(string0, stringArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      boolean boolean0 = ReplicationOperation.ignoreReplicaException(versionConflictEngineException0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean0);
      assertEquals(RestStatus.CONFLICT, versionConflictEngineException0.status());
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 2412;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int0);
      assertNotNull(directChannelBufferFactory0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertNotNull(channelBuffer0);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertNotNull(channelBufferBytesReference0);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertEquals(2412, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(streamInput0);
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ChannelBuffer channelBuffer1 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer1.readableBytes());
      assertEquals(2412, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(2412, channelBuffer1.capacity());
      assertFalse(channelBuffer1.hasArray());
      assertTrue(channelBuffer1.readable());
      assertTrue(channelBuffer1.isDirect());
      assertNotNull(channelBuffer1);
      assertNotSame(channelBuffer1, channelBuffer0);
      
      String string0 = ElasticsearchException.getExceptionName(replicationOperation_RetryOnPrimaryException0);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertEquals("retry_on_primary_exception", string0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(2407, streamInput0.available());
      assertNotNull(string0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotSame(channelBuffer0, channelBuffer1);
      
      boolean boolean1 = ReplicationOperation.isConflictException(replicationOperation_RetryOnPrimaryException0);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(2407, streamInput0.available());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotSame(channelBuffer0, channelBuffer1);
      
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException1 = new ReplicationOperation.RetryOnPrimaryException(streamInput0);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertFalse(replicationOperation_RetryOnPrimaryException1.equals((Object)replicationOperation_RetryOnPrimaryException0));
      assertNotNull(replicationOperation_RetryOnPrimaryException1);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      Index index0 = new Index(streamInput0);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(2400, streamInput0.available());
      assertEquals("", index0.getUUID());
      assertEquals("", index0.getName());
      assertNotNull(index0);
      
      String string1 = index0.toString();
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[/]", string1);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(2400, streamInput0.available());
      assertEquals("", index0.getUUID());
      assertEquals("", index0.getName());
      assertNotNull(string1);
      assertNotSame(channelBuffer0, channelBuffer1);
      assertNotSame(string1, string0);
      
      replicationOperation_RetryOnPrimaryException1.setIndex(index0);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertFalse(replicationOperation_RetryOnPrimaryException1.equals((Object)replicationOperation_RetryOnPrimaryException0));
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(2400, streamInput0.available());
      assertEquals("", index0.getUUID());
      assertEquals("", index0.getName());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotSame(channelBuffer0, channelBuffer1);
      assertNotSame(replicationOperation_RetryOnPrimaryException1, replicationOperation_RetryOnPrimaryException0);
      
      System.setCurrentTimeMillis(int0);
      boolean boolean2 = ReplicationOperation.isConflictException(replicationOperation_RetryOnPrimaryException1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertFalse(replicationOperation_RetryOnPrimaryException1.equals((Object)replicationOperation_RetryOnPrimaryException0));
      assertFalse(boolean2);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2412, byteBuffer0.limit());
      assertEquals(2412, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2412, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2412 cap=2412]", byteBuffer0.toString());
      assertEquals(2412, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2412, channelBuffer0.readableBytes());
      assertEquals(2412, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(2412, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(2400, streamInput0.available());
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotSame(channelBuffer0, channelBuffer1);
      assertNotSame(replicationOperation_RetryOnPrimaryException1, replicationOperation_RetryOnPrimaryException0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT;
      assertFalse(boolean0);
      
      String string0 = "-CN*/jzSz";
      int int0 = (-656);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.getId());
      assertNotNull(shardId0);
      
      String string1 = "\\DOF{eMg";
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string1, batchUpdateException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      ShardId shardId1 = replicationOperation_RetryOnPrimaryException0.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.getId());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals((-656), shardId1.id());
      assertEquals((-656), shardId1.getId());
      assertNotNull(shardId1);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertNotSame(string0, string1);
      assertNotSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertNotSame(shardId1, shardId0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest(shardId1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(shardId0.equals((Object)shardId1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.getId());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals((-656), shardId1.id());
      assertEquals((-656), shardId1.getId());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals("-CN*/jzSz", basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNotNull(basicReplicationRequest0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      ReplicationOperation.Primary<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation_Primary0 = null;
      ActionListener<ReplicationResponse> actionListener0 = null;
      boolean boolean1 = false;
      ReplicationOperation.Replicas<BasicReplicationRequest> replicationOperation_Replicas0 = null;
      Supplier<ClusterState> supplier0 = (Supplier<ClusterState>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = null;
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      Logger logger0 = nOPLoggerRepository0.exists(string2);
      assertNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string2, logger0);
      assertNull(eSLogger0.getPrefix());
      assertNotNull(eSLogger0);
      
      ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation0 = new ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>(basicReplicationRequest0, replicationOperation_Primary0, actionListener0, boolean0, boolean1, replicationOperation_Replicas0, supplier0, eSLogger0, string1);
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(shardId0.equals((Object)shardId1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertTrue(boolean1 == boolean0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(eSLogger0.getPrefix());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.getId());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals((-656), shardId1.id());
      assertEquals((-656), shardId1.getId());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals("-CN*/jzSz", basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNotNull(replicationOperation0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      try { 
        replicationOperation0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationOperation", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      boolean boolean0 = ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT;
      assertFalse(boolean0);
      
      String string0 = "-CN*/jzSz";
      int int0 = (-656);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals((-656), shardId0.getId());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.id());
      assertNotNull(shardId0);
      
      String string1 = "\\DOF{eMg";
      ReplicationOperation.RetryOnPrimaryException replicationOperation_RetryOnPrimaryException0 = new ReplicationOperation.RetryOnPrimaryException(shardId0, string1, batchUpdateException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(replicationOperation_RetryOnPrimaryException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      ShardId shardId1 = replicationOperation_RetryOnPrimaryException0.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals((-656), shardId0.getId());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals((-656), shardId1.id());
      assertEquals((-656), shardId1.getId());
      assertNotNull(shardId1);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertNotSame(string0, string1);
      assertNotSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertNotSame(shardId1, shardId0);
      
      BasicReplicationRequest basicReplicationRequest0 = new BasicReplicationRequest(shardId1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(shardId0.equals((Object)shardId1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals((-656), shardId0.getId());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals((-656), shardId1.id());
      assertEquals((-656), shardId1.getId());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals("-CN*/jzSz", basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNotNull(basicReplicationRequest0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      ReplicationOperation.Primary<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation_Primary0 = null;
      ActionListener<ReplicationResponse> actionListener0 = null;
      boolean boolean1 = false;
      ReplicationOperation.Replicas<BasicReplicationRequest> replicationOperation_Replicas0 = null;
      Supplier<ClusterState> supplier0 = (Supplier<ClusterState>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = null;
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      Logger logger0 = nOPLoggerRepository0.exists(string2);
      assertNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string2, logger0);
      assertNull(eSLogger0.getPrefix());
      assertNotNull(eSLogger0);
      
      ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse> replicationOperation0 = new ReplicationOperation<BasicReplicationRequest, BasicReplicationRequest, ReplicationResponse>(basicReplicationRequest0, replicationOperation_Primary0, actionListener0, boolean0, boolean1, replicationOperation_Replicas0, supplier0, eSLogger0, string1);
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(shardId0.equals((Object)shardId1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(shardId1.equals((Object)shardId0));
      assertTrue(boolean1 == boolean0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(eSLogger0.getPrefix());
      assertEquals((-656), shardId0.getId());
      assertEquals("-CN*/jzSz", shardId0.getIndexName());
      assertEquals((-656), shardId0.id());
      assertEquals("-CN*/jzSz", shardId1.getIndexName());
      assertEquals((-656), shardId1.id());
      assertEquals((-656), shardId1.getId());
      assertEquals(0L, basicReplicationRequest0.primaryTerm());
      assertEquals(0L, basicReplicationRequest0.seqNo());
      assertEquals("-CN*/jzSz", basicReplicationRequest0.index());
      assertFalse(basicReplicationRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, basicReplicationRequest0.consistencyLevel());
      assertNotNull(replicationOperation0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      // Undeclared exception!
      try { 
        replicationOperation0.checkWriteConsistency();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // consistency level should be set
         //
      }
  }
}
