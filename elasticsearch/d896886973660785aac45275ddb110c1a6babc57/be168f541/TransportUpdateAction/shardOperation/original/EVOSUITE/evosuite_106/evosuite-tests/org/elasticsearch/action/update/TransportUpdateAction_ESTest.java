/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 12:26:21 GMT 2021
 */

package org.elasticsearch.action.update;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.update.TransportUpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.VersionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportUpdateAction_ESTest extends TransportUpdateAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.index());
      assertNotNull(updateRequest0);
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.ALL, updateRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.index());
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_GATEWAY, updateRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.index());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals((-3L), updateRequest0.version());
      assertNotNull(updateRequest0);
      
      UpdateRequest updateRequest1 = updateRequest0.parent(metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals("GATEWAY", updateRequest0.parent());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptLang());
      assertEquals("GATEWAY", updateRequest1.parent());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.GLOBAL_STATE_FILE_PREFIX, updateRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("GATEWAY", updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals("GATEWAY", updateRequest0.parent());
      assertEquals((-3L), updateRequest0.version());
      assertSame(updateRequest0, updateRequest1);
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNotNull(metaData0);
      
      UpdateRequest updateRequest0 = null;
      // Undeclared exception!
      try { 
        TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, updateRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.update.TransportUpdateAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertNotNull(updateRequest0);
      
      UpdateRequest updateRequest1 = updateRequest0.routing(metaData0.CONTEXT_MODE_PARAM);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals("context_mode", updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.index());
      assertEquals("context_mode", updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      long long0 = 0L;
      UpdateRequest updateRequest2 = updateRequest1.version(long0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0L, updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals("context_mode", updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.index());
      assertEquals("context_mode", updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals(0L, updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.type());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.index());
      assertEquals("context_mode", updateRequest2.routing());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.GLOBAL_STATE_FILE_PREFIX, updateRequest2);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0L, updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals("context_mode", updateRequest0.routing());
      assertNull(updateRequest0.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.index());
      assertEquals("context_mode", updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0L, updateRequest1.version());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals(0L, updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.type());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.concreteIndex());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.index());
      assertEquals("context_mode", updateRequest2.routing());
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      MetaData metaData0 = null;
      String string0 = "+J|zRA;)Iy|~+n%";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string0, string0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.index());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals((-3L), updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertNotNull(updateRequest0);
      
      IndexRequest indexRequest0 = new IndexRequest(string0, string0);
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertNotNull(indexRequest0);
      
      UpdateRequest updateRequest1 = updateRequest0.doc(indexRequest0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.index());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals((-3L), updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.concreteIndex());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      WriteRequest.RefreshPolicy writeRequest_RefreshPolicy0 = WriteRequest.RefreshPolicy.WAIT_UNTIL;
      UpdateRequest updateRequest2 = updateRequest1.setRefreshPolicy(writeRequest_RefreshPolicy0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.index());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest0.getRefreshPolicy());
      assertEquals((-3L), updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptString());
      assertEquals((-3L), updateRequest2.version());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.id());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.type());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest2.getRefreshPolicy());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      String string1 = "";
      Integer integer0 = new Integer(byte1);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      IndexRequest indexRequest1 = indexRequest0.source(string0, (Object) updateRequest1, string1, (Object) integer0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.index());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest0.getRefreshPolicy());
      assertEquals((-3L), updateRequest0.version());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest1.index());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.id());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertNotNull(indexRequest1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string1, string0);
      assertSame(indexRequest1, indexRequest0);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-38);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-51);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-116);
      byteArray0[5] = byte5;
      byte byte6 = (byte)8;
      boolean boolean0 = true;
      UpdateRequest updateRequest3 = updateRequest1.scriptedUpsert(boolean0);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.index());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest0.getRefreshPolicy());
      assertEquals((-3L), updateRequest0.version());
      assertTrue(updateRequest0.scriptedUpsert());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest3.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest3.type());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.parent());
      assertTrue(updateRequest3.detectNoop());
      assertNull(updateRequest3.scriptLang());
      assertTrue(updateRequest3.scriptedUpsert());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.routing());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertNull(updateRequest3.concreteIndex());
      assertEquals((-3L), updateRequest3.version());
      assertEquals(WriteRequest.RefreshPolicy.WAIT_UNTIL, updateRequest3.getRefreshPolicy());
      assertNull(updateRequest3.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest3.index());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest3.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertNotNull(updateRequest3);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      
      byteArray0[6] = byte6;
      byte byte7 = (byte)33;
      String string2 = "";
      UpdateRequest updateRequest4 = updateRequest2.setRefreshPolicy(string2);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.parent());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.index());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals((-3L), updateRequest0.version());
      assertTrue(updateRequest0.scriptedUpsert());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.concreteIndex());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptString());
      assertEquals((-3L), updateRequest2.version());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.id());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest2.getRefreshPolicy());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest4.scriptType());
      assertNull(updateRequest4.routing());
      assertNull(updateRequest4.parent());
      assertFalse(updateRequest4.docAsUpsert());
      assertTrue(updateRequest4.scriptedUpsert());
      assertNull(updateRequest4.scriptLang());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertTrue(updateRequest4.detectNoop());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest4.type());
      assertNull(updateRequest4.concreteIndex());
      assertNull(updateRequest4.scriptString());
      assertEquals((-3L), updateRequest4.version());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest4.getRefreshPolicy());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest4.id());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest4.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertNotNull(updateRequest4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest4);
      assertSame(indexRequest0, indexRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(updateRequest4, updateRequest0);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest2);
      
      byteArray0[7] = byte7;
      UpdateRequest updateRequest5 = updateRequest2.doc(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-38), (byte) (-51), (byte) (-116), (byte)8, (byte)33}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.parent());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.index());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals((-3L), updateRequest0.version());
      assertTrue(updateRequest0.scriptedUpsert());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals("+J|zRA;)Iy|~+n%", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.type());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest1.id());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.concreteIndex());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest1.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest2.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptString());
      assertEquals((-3L), updateRequest2.version());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.id());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest2.getRefreshPolicy());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest5.scriptString());
      assertFalse(updateRequest5.getShouldPersistResult());
      assertEquals((-3L), updateRequest5.version());
      assertTrue(updateRequest5.scriptedUpsert());
      assertNull(updateRequest5.scriptType());
      assertNull(updateRequest5.concreteIndex());
      assertNull(updateRequest5.routing());
      assertTrue(updateRequest5.detectNoop());
      assertEquals(0, updateRequest5.retryOnConflict());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest5.type());
      assertEquals(WriteRequest.RefreshPolicy.IMMEDIATE, updateRequest5.getRefreshPolicy());
      assertNull(updateRequest5.scriptLang());
      assertNull(updateRequest5.parent());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest5.index());
      assertFalse(updateRequest5.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest5.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest5.consistencyLevel());
      assertEquals("+J|zRA;)Iy|~+n%", updateRequest5.id());
      assertNotNull(updateRequest5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest5);
      assertSame(updateRequest0, updateRequest4);
      assertSame(indexRequest0, indexRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest5);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest5);
      assertSame(updateRequest5, updateRequest0);
      assertSame(updateRequest5, updateRequest1);
      assertSame(updateRequest5, updateRequest4);
      assertSame(updateRequest5, updateRequest3);
      assertSame(updateRequest5, updateRequest2);
      
      // Undeclared exception!
      try { 
        TransportUpdateAction.resolveAndValidateRouting(metaData0, string0, updateRequest5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.update.TransportUpdateAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNull(updateRequest0.scriptLang());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNotNull(updateRequest0);
      
      String[] stringArray0 = null;
      UpdateRequest updateRequest1 = updateRequest0.fields(stringArray0);
      assertNull(updateRequest0.scriptLang());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      String string0 = "A^.XtT.{7X>-";
      UpdateRequest updateRequest2 = updateRequest1.type(string0);
      assertNull(updateRequest0.scriptLang());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals("A^.XtT.{7X>-", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("A^.XtT.{7X>-", updateRequest1.type());
      assertNull(updateRequest1.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals("A^.XtT.{7X>-", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.GLOBAL_STATE_FILE_PREFIX, updateRequest2);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(updateRequest0.scriptLang());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.parent());
      assertEquals("A^.XtT.{7X>-", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals("A^.XtT.{7X>-", updateRequest1.type());
      assertNull(updateRequest1.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptString());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals("A^.XtT.{7X>-", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.scriptedUpsert());
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
  }
}
