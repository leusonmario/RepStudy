/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 13:24:57 GMT 2021
 */

package org.elasticsearch.action.update;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.util.Hashtable;
import java.util.Map;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.update.TransportUpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.cluster.metadata.MappingMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.routing.ShardRouting;
import org.elasticsearch.common.ParseField;
import org.elasticsearch.common.ParseFieldMatcher;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.collect.ImmutableOpenMap;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContentParser;
import org.elasticsearch.common.xcontent.support.AbstractXContentParser;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportUpdateAction_ESTest extends TransportUpdateAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertNotNull(smileXContent0);
      
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      assertNotNull(pushbackInputStream0);
      
      SmileXContentParser smileXContentParser0 = (SmileXContentParser)smileXContent0.createParser((InputStream) pushbackInputStream0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, smileXContentParser0.contentType());
      assertNotNull(smileXContentParser0);
      assertTrue(AbstractXContentParser.DEFAULT_NUMBER_COERCE_POLICY);
      
      Settings settings0 = null;
      ParseFieldMatcher parseFieldMatcher0 = null;
      try {
        parseFieldMatcher0 = new ParseFieldMatcher(settings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.ParseFieldMatcher", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      String string0 = "";
      String string1 = "";
      String string2 = "n~SgTM\\OV#";
      String string3 = "p";
      UpdateRequest updateRequest0 = new UpdateRequest(string1, string2, string3);
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.index());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertEquals("n~SgTM\\OV#", updateRequest0.type());
      assertEquals("p", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNotNull(updateRequest0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      IndexRequest indexRequest0 = new IndexRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertNotNull(indexRequest0);
      
      UpdateRequest updateRequest1 = updateRequest0.doc(indexRequest0);
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.index());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertEquals("n~SgTM\\OV#", updateRequest0.type());
      assertEquals("p", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals("n~SgTM\\OV#", updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.index());
      assertEquals("p", updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertNotNull(updateRequest1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      WriteConsistencyLevel writeConsistencyLevel0 = WriteConsistencyLevel.ALL;
      UpdateRequest updateRequest2 = updateRequest1.consistencyLevel(writeConsistencyLevel0);
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.index());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptLang());
      assertEquals("n~SgTM\\OV#", updateRequest0.type());
      assertEquals("p", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals("n~SgTM\\OV#", updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.index());
      assertEquals("p", updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest1.consistencyLevel());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.routing());
      assertEquals("p", updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("n~SgTM\\OV#", updateRequest2.type());
      assertNull(updateRequest2.scriptLang());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertNull(updateRequest2.parent());
      assertNotNull(updateRequest2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      UpdateRequest updateRequest3 = updateRequest2.parent(string2);
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.routing());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.index());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("n~SgTM\\OV#", updateRequest0.parent());
      assertNull(updateRequest0.scriptLang());
      assertEquals("n~SgTM\\OV#", updateRequest0.type());
      assertEquals("p", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals("n~SgTM\\OV#", updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.index());
      assertEquals("n~SgTM\\OV#", updateRequest1.parent());
      assertEquals("p", updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest1.consistencyLevel());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.routing());
      assertEquals("p", updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("n~SgTM\\OV#", updateRequest2.type());
      assertNull(updateRequest2.scriptLang());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("n~SgTM\\OV#", updateRequest2.parent());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertEquals((-3L), updateRequest3.version());
      assertEquals("p", updateRequest3.id());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest3.consistencyLevel());
      assertNull(updateRequest3.scriptLang());
      assertTrue(updateRequest3.detectNoop());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertEquals("n~SgTM\\OV#", updateRequest3.type());
      assertNull(updateRequest3.scriptString());
      assertNull(updateRequest3.scriptType());
      assertFalse(updateRequest3.docAsUpsert());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertNull(updateRequest3.routing());
      assertEquals("", updateRequest3.index());
      assertEquals("n~SgTM\\OV#", updateRequest3.parent());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNotNull(updateRequest3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, string0, updateRequest3);
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals("", updateRequest0.index());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals("n~SgTM\\OV#", updateRequest0.routing());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals("n~SgTM\\OV#", updateRequest0.parent());
      assertNull(updateRequest0.scriptLang());
      assertEquals("n~SgTM\\OV#", updateRequest0.type());
      assertEquals("p", updateRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals("n~SgTM\\OV#", updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.index());
      assertEquals("n~SgTM\\OV#", updateRequest1.parent());
      assertEquals("p", updateRequest1.id());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptString());
      assertEquals("n~SgTM\\OV#", updateRequest1.routing());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest1.consistencyLevel());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals("p", updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals("n~SgTM\\OV#", updateRequest2.type());
      assertNull(updateRequest2.scriptLang());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.concreteIndex());
      assertEquals("n~SgTM\\OV#", updateRequest2.routing());
      assertEquals("n~SgTM\\OV#", updateRequest2.parent());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("", updateRequest2.index());
      assertEquals((-3L), updateRequest3.version());
      assertEquals("p", updateRequest3.id());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.ALL, updateRequest3.consistencyLevel());
      assertNull(updateRequest3.scriptLang());
      assertTrue(updateRequest3.detectNoop());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertEquals("n~SgTM\\OV#", updateRequest3.type());
      assertNull(updateRequest3.scriptString());
      assertNull(updateRequest3.scriptType());
      assertFalse(updateRequest3.docAsUpsert());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertEquals("", updateRequest3.index());
      assertEquals("n~SgTM\\OV#", updateRequest3.routing());
      assertEquals("n~SgTM\\OV#", updateRequest3.parent());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      String string0 = "%";
      String[] stringArray0 = new String[9];
      stringArray0[0] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      stringArray0[1] = string0;
      stringArray0[2] = metaData0.CONTEXT_MODE_PARAM;
      stringArray0[3] = metaData0.CONTEXT_MODE_GATEWAY;
      String string1 = "Po&al-E)utS7{hPJ";
      stringArray0[4] = string1;
      stringArray0[5] = metaData0.CONTEXT_MODE_SNAPSHOT;
      stringArray0[6] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      stringArray0[7] = string0;
      stringArray0[8] = metaData0.GLOBAL_STATE_FILE_PREFIX;
      ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> immutableOpenMap0 = metaData0.findMappings(stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(immutableOpenMap0);
      
      UpdateRequest updateRequest0 = new UpdateRequest(metaData0.CONTEXT_MODE_GATEWAY, metaData0.GLOBAL_STATE_FILE_PREFIX, metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("GATEWAY", updateRequest0.index());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptLang());
      assertEquals("global-", updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("global-", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertNotNull(updateRequest0);
      
      UpdateRequest updateRequest1 = updateRequest0.doc(string0, (Object) string0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("GATEWAY", updateRequest0.index());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptLang());
      assertEquals("global-", updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("global-", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptString());
      assertEquals("global-", updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals("global-", updateRequest1.id());
      assertEquals("GATEWAY", updateRequest1.index());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertNotNull(updateRequest1);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertFalse(string0.equals((Object)string1));
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, string0, updateRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.scriptType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals("GATEWAY", updateRequest0.index());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptLang());
      assertEquals("global-", updateRequest0.id());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals("global-", updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.parent());
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      String string0 = "";
      UpdateRequest updateRequest0 = new UpdateRequest(metaData0.CONTEXT_MODE_SNAPSHOT, string0, metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptLang());
      assertEquals("global-", updateRequest0.id());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("SNAPSHOT", updateRequest0.index());
      assertNotNull(updateRequest0);
      
      String string1 = "org.elasticsearch.action.update.TransportUpdateAction$2$1";
      UpdateRequest updateRequest1 = updateRequest0.doc(string1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptLang());
      assertEquals("global-", updateRequest0.id());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("SNAPSHOT", updateRequest0.index());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.scriptedUpsert());
      assertEquals("SNAPSHOT", updateRequest1.index());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals("global-", updateRequest1.id());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNotNull(updateRequest1);
      assertNotSame(string0, string1);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string1, string0);
      assertSame(updateRequest1, updateRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "DVz";
      IndexRequest indexRequest0 = new IndexRequest(string2);
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("DVz", indexRequest0.index());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNotNull(indexRequest0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) updateRequest1;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) indexRequest0;
      objectArray0[4] = (Object) updateRequest0;
      objectArray0[5] = (Object) metaData0;
      IndexRequest indexRequest1 = indexRequest0.source(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.id());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.parent());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals("DVz", indexRequest1.index());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("DVz", indexRequest0.index());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNotNull(indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(indexRequest0, indexRequest1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      UpdateRequest updateRequest2 = updateRequest0.doc(indexRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals("SNAPSHOT", updateRequest2.index());
      assertEquals("global-", updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertFalse(updateRequest2.scriptedUpsert());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals((-3L), updateRequest2.version());
      assertEquals("", updateRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.scriptLang());
      assertEquals("global-", updateRequest0.id());
      assertEquals("", updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals("SNAPSHOT", updateRequest0.index());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("DVz", indexRequest0.index());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNotNull(updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(indexRequest0, indexRequest1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        updateRequest1.upsert(metaData0.customPrototypes);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to generate [{repositories=org.elasticsearch.cluster.metadata.RepositoriesMetaData@1, stored_scripts=ScriptMetaData{scripts={}}, ingest=org.elasticsearch.ingest.IngestMetadata@0, index-graveyard=IndexGraveyard[[]]}]
         //
         verifyException("org.elasticsearch.action.index.IndexRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNotNull(updateRequest0);
      
      IndexRequest indexRequest0 = new IndexRequest(metaData0.GLOBAL_STATE_FILE_PREFIX, metaData0.CONTEXT_MODE_SNAPSHOT);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.getPipeline());
      assertEquals("SNAPSHOT", indexRequest0.type());
      assertEquals("global-", indexRequest0.index());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNotNull(indexRequest0);
      
      UpdateRequest updateRequest1 = updateRequest0.doc(indexRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.getPipeline());
      assertEquals("SNAPSHOT", indexRequest0.type());
      assertEquals("global-", indexRequest0.index());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-124);
      byteArray0[0] = byte0;
      int int0 = (-2237);
      UpdateRequest updateRequest2 = updateRequest1.doc(byteArray0, int0, int0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.getPipeline());
      assertEquals("SNAPSHOT", indexRequest0.type());
      assertEquals("global-", indexRequest0.index());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.scriptString());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      
      String[] stringArray0 = null;
      UpdateRequest updateRequest3 = updateRequest2.fields(stringArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.getPipeline());
      assertEquals("SNAPSHOT", indexRequest0.type());
      assertEquals("global-", indexRequest0.index());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.scriptString());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.routing());
      assertNull(updateRequest3.parent());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertFalse(updateRequest3.docAsUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.id());
      assertNull(updateRequest3.index());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.scriptLang());
      assertNull(updateRequest3.scriptString());
      assertEquals((-3L), updateRequest3.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertNull(updateRequest3.type());
      assertNotNull(updateRequest3);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      
      WriteRequest.RefreshPolicy writeRequest_RefreshPolicy0 = WriteRequest.RefreshPolicy.NONE;
      UpdateRequest updateRequest4 = updateRequest3.setRefreshPolicy(writeRequest_RefreshPolicy0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.getPipeline());
      assertEquals("SNAPSHOT", indexRequest0.type());
      assertEquals("global-", indexRequest0.index());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.scriptString());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.routing());
      assertNull(updateRequest3.parent());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertFalse(updateRequest3.docAsUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.id());
      assertNull(updateRequest3.index());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.scriptLang());
      assertNull(updateRequest3.scriptString());
      assertEquals((-3L), updateRequest3.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertNull(updateRequest3.type());
      assertNull(updateRequest4.id());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertFalse(updateRequest4.scriptedUpsert());
      assertNull(updateRequest4.scriptType());
      assertFalse(updateRequest4.docAsUpsert());
      assertNull(updateRequest4.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertNull(updateRequest4.scriptLang());
      assertEquals((-3L), updateRequest4.version());
      assertNull(updateRequest4.type());
      assertNull(updateRequest4.scriptString());
      assertNull(updateRequest4.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest4.getRefreshPolicy());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertTrue(updateRequest4.detectNoop());
      assertNull(updateRequest4.parent());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertNull(updateRequest4.index());
      assertNotNull(updateRequest4);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest4);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest4);
      assertSame(updateRequest4, updateRequest0);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest2);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, updateRequest4);
      assertEquals(1, byteArray0.length);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.id());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.routing());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.getPipeline());
      assertEquals("SNAPSHOT", indexRequest0.type());
      assertEquals("global-", indexRequest0.index());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.routing());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.concreteIndex());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.scriptString());
      assertTrue(updateRequest2.detectNoop());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.id());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest3.scriptType());
      assertNull(updateRequest3.routing());
      assertNull(updateRequest3.parent());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertFalse(updateRequest3.docAsUpsert());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.id());
      assertNull(updateRequest3.index());
      assertNull(updateRequest3.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertNull(updateRequest3.scriptLang());
      assertNull(updateRequest3.scriptString());
      assertEquals((-3L), updateRequest3.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertNull(updateRequest3.type());
      assertNull(updateRequest4.id());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertFalse(updateRequest4.scriptedUpsert());
      assertNull(updateRequest4.scriptType());
      assertFalse(updateRequest4.docAsUpsert());
      assertNull(updateRequest4.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertNull(updateRequest4.scriptLang());
      assertEquals((-3L), updateRequest4.version());
      assertNull(updateRequest4.type());
      assertNull(updateRequest4.scriptString());
      assertNull(updateRequest4.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest4.getRefreshPolicy());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertTrue(updateRequest4.detectNoop());
      assertNull(updateRequest4.parent());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertNull(updateRequest4.index());
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest4);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest3, updateRequest4);
      assertSame(updateRequest4, updateRequest0);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest2);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      MetaData metaData0 = null;
      String string0 = "doc_values_memory";
      UpdateRequest updateRequest0 = null;
      // Undeclared exception!
      try { 
        TransportUpdateAction.resolveAndValidateRouting(metaData0, string0, updateRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.update.TransportUpdateAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.docAsUpsert());
      assertNotNull(updateRequest0);
      
      UpdateRequest updateRequest1 = updateRequest0.doc(metaData0.CONTEXT_MODE_SNAPSHOT, (Object) metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.index());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      String string0 = "y>xl3%pxzE%\"R>jb";
      UpdateRequest updateRequest2 = updateRequest1.routing(string0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest0.routing());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.index());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      
      IndexRequest indexRequest0 = new IndexRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertNull(indexRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNotNull(indexRequest0);
      
      UpdateRequest updateRequest3 = updateRequest2.doc(indexRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest0.routing());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.index());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertNull(updateRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertNull(indexRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(updateRequest3.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertFalse(updateRequest3.docAsUpsert());
      assertNull(updateRequest3.concreteIndex());
      assertNull(updateRequest3.parent());
      assertNull(updateRequest3.id());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertNull(updateRequest3.index());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertNull(updateRequest3.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest3.routing());
      assertNull(updateRequest3.scriptString());
      assertNull(updateRequest3.type());
      assertEquals((-3L), updateRequest3.version());
      assertNotNull(updateRequest3);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      
      UpdateRequest updateRequest4 = updateRequest3.type(metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest0.routing());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.index());
      assertEquals("GATEWAY", updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.index());
      assertEquals("GATEWAY", updateRequest1.type());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals((-3L), updateRequest2.version());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertEquals("GATEWAY", updateRequest2.type());
      assertNull(updateRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertNull(indexRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(updateRequest3.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertFalse(updateRequest3.docAsUpsert());
      assertNull(updateRequest3.concreteIndex());
      assertNull(updateRequest3.parent());
      assertNull(updateRequest3.id());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertEquals("GATEWAY", updateRequest3.type());
      assertNull(updateRequest3.index());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertNull(updateRequest3.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest3.routing());
      assertNull(updateRequest3.scriptString());
      assertEquals((-3L), updateRequest3.version());
      assertEquals((-3L), updateRequest4.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest4.getRefreshPolicy());
      assertNull(updateRequest4.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertNull(updateRequest4.scriptLang());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertTrue(updateRequest4.detectNoop());
      assertNull(updateRequest4.scriptString());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest4.routing());
      assertNull(updateRequest4.scriptType());
      assertNull(updateRequest4.parent());
      assertFalse(updateRequest4.docAsUpsert());
      assertNull(updateRequest4.id());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertNull(updateRequest4.index());
      assertEquals("GATEWAY", updateRequest4.type());
      assertFalse(updateRequest4.scriptedUpsert());
      assertNotNull(updateRequest4);
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest4);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest4);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest4, updateRequest2);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest4, updateRequest0);
      
      TransportUpdateAction.resolveAndValidateRouting(metaData0, metaData0.GLOBAL_STATE_FILE_PREFIX, updateRequest4);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.concreteIndex());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest0.routing());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.index());
      assertEquals("GATEWAY", updateRequest0.type());
      assertNull(updateRequest0.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.id());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptLang());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.index());
      assertEquals("GATEWAY", updateRequest1.type());
      assertNull(updateRequest2.scriptString());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals((-3L), updateRequest2.version());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertEquals("GATEWAY", updateRequest2.type());
      assertNull(updateRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertNull(indexRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(updateRequest3.scriptLang());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest3.consistencyLevel());
      assertEquals(0, updateRequest3.retryOnConflict());
      assertFalse(updateRequest3.docAsUpsert());
      assertNull(updateRequest3.concreteIndex());
      assertNull(updateRequest3.parent());
      assertNull(updateRequest3.id());
      assertFalse(updateRequest3.scriptedUpsert());
      assertEquals(VersionType.INTERNAL, updateRequest3.versionType());
      assertEquals("GATEWAY", updateRequest3.type());
      assertNull(updateRequest3.index());
      assertFalse(updateRequest3.getShouldPersistResult());
      assertTrue(updateRequest3.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest3.getRefreshPolicy());
      assertNull(updateRequest3.scriptType());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest3.routing());
      assertNull(updateRequest3.scriptString());
      assertEquals((-3L), updateRequest3.version());
      assertEquals((-3L), updateRequest4.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest4.getRefreshPolicy());
      assertNull(updateRequest4.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest4.consistencyLevel());
      assertNull(updateRequest4.scriptLang());
      assertFalse(updateRequest4.getShouldPersistResult());
      assertTrue(updateRequest4.detectNoop());
      assertNull(updateRequest4.scriptString());
      assertEquals("y>xl3%pxzE%\"R>jb", updateRequest4.routing());
      assertNull(updateRequest4.scriptType());
      assertNull(updateRequest4.parent());
      assertFalse(updateRequest4.docAsUpsert());
      assertNull(updateRequest4.id());
      assertEquals(0, updateRequest4.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest4.versionType());
      assertNull(updateRequest4.index());
      assertEquals("GATEWAY", updateRequest4.type());
      assertFalse(updateRequest4.scriptedUpsert());
      assertSame(updateRequest0, updateRequest3);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest4);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest4);
      assertSame(updateRequest1, updateRequest3);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest3);
      assertSame(updateRequest2, updateRequest4);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest3, updateRequest1);
      assertSame(updateRequest3, updateRequest4);
      assertSame(updateRequest3, updateRequest2);
      assertSame(updateRequest3, updateRequest0);
      assertSame(updateRequest4, updateRequest2);
      assertSame(updateRequest4, updateRequest1);
      assertSame(updateRequest4, updateRequest3);
      assertSame(updateRequest4, updateRequest0);
  }
}
