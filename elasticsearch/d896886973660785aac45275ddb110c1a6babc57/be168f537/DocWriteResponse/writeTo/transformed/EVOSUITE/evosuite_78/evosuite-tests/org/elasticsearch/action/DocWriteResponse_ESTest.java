/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 06:26:00 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.DoubleBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.function.Consumer;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.Version;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.LatchedActionListener;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.admin.cluster.storedscripts.DeleteStoredScriptRequest;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.get.MultiGetRequest;
import org.elasticsearch.action.get.MultiGetResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.ParentTaskAssigningClient;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.io.stream.Writeable;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.SettingsFilter;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.SpanTermQueryBuilder;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.bucket.significant.SignificantTermsAggregationBuilder;
import org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;
import org.elasticsearch.search.aggregations.support.ValueType;
import org.elasticsearch.search.rescore.QueryRescorerBuilder;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.tasks.TaskId;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.elasticsearch.transport.TransportRequestOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.HeapChannelBufferFactory;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      deleteResponse0.setForcedRefresh(deleteResponse0.forcedRefresh);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      UpdateResponse updateResponse0 = new UpdateResponse(deleteResponse0.shardId, deleteResponse0.id, deleteResponse0.id, deleteResponse0.version, deleteResponse0.forcedRefresh);
      assertNotNull(updateResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      
      RestStatus restStatus0 = updateResponse0.status();
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(RestStatus.OK, restStatus0);
      
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      String string0 = updateResponse0.getId();
      assertNull(string0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      boolean boolean0 = updateResponse0.forcedRefresh();
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      long long0 = indexResponse0.getVersion();
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertNull(shardId0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", string0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertNotNull(string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", string0);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      assertNotNull(heapChannelBufferFactory0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int0 = 637;
      ChannelBuffer channelBuffer0 = heapChannelBufferFactory0.getBuffer(byteOrder0, int0);
      assertNotNull(channelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(637, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(637, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(637, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_type", string0);
      
      String string1 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", string1);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "D.2*8J78Ne7R$3VL<r";
      int int0 = (-23);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-23), shardId0.id());
      assertEquals((-23), shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals((-23L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals((-23), shardId0.id());
      assertEquals((-23), shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-23L), indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[4] = indexResponse0.type;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(6, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, stringArray0[2], indexResponse0.id, indexResponse0.version, indexResponse0.forcedRefresh);
      assertNotNull(updateResponse0);
      assertEquals((-23L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-23L), updateResponse0.version);
      assertEquals(6, stringArray0.length);
      assertEquals((-23), shardId0.id());
      assertEquals((-23), shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-23L), indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", updateResponse0.getId());
      assertEquals((-23L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals((-23L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-23L), updateResponse0.version);
      assertEquals(6, stringArray0.length);
      assertEquals((-23), shardId0.id());
      assertEquals((-23), shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-23L), indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", updateResponse0.getId());
      assertEquals((-23L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "p* ~~Omcq77J <9{.$3";
      int int0 = 836;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(836, shardId0.getId());
      assertEquals(836, shardId0.id());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(836L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(836, shardId0.getId());
      assertEquals(836, shardId0.id());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getId());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(836L, updateResponse0.getVersion());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertEquals(836L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(836, shardId0.getId());
      assertEquals(836, shardId0.id());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getId());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(836L, updateResponse0.getVersion());
      assertEquals(90, bytesStreamOutput0.size());
      assertEquals(90L, bytesStreamOutput0.position());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int0);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(836, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      
      int int1 = 0;
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(byteBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(836, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=836]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(836, byteBuffer0.capacity());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(836, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=836]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(836, byteBuffer0.capacity());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(streamInput0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(836, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=836]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(836, byteBuffer0.capacity());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", string0);
      
      String string1 = docWriteResponse_Fields0.get_INDEX();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_index", string1);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      
      // Undeclared exception!
      try { 
        deleteResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_ID();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", string1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      
      long long0 = 376L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, updateResponse0.id, updateResponse0.id, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(376L, indexResponse0.version);
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(376L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      
      boolean boolean1 = indexResponse0.isCreated();
      assertTrue(boolean1 == boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(376L, indexResponse0.version);
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals(376L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_index", string0);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      
      int int0 = 451;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(451, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(littleEndianHeapChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(451, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(451, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      
      updateResponse0.setGetResult(getResult0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      
      long long0 = updateResponse0.getVersion();
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, long0);
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", string0);
      
      long long1 = updateResponse0.getVersion();
      assertTrue(long1 == long0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, long1);
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_type", string1);
      
      String string2 = docWriteResponse_Fields0.get_VERSION();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", string2);
      
      int int0 = 0;
      BigArrays bigArrays0 = null;
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = null;
      try {
        releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, bigArrays0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.BytesStreamOutput", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      
      StreamOutput streamOutput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(streamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      
      boolean boolean0 = false;
      deleteResponse0.forcedRefresh = boolean0;
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      
      boolean boolean1 = deleteResponse0.isFound();
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(boolean1);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(mockFileInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertFalse(fileDescriptor0.valid());
      
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", string0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      Float float0 = new Float((float) deleteResponse0.version);
      assertNotNull(float0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      bytesStreamOutput0.writeOptionalFloat(float0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(5L, bytesStreamOutput0.position());
      assertEquals(5, bytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "] cluster then us [";
      long long0 = (-1446L);
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals((-1446L), indexResponse0.version);
      assertEquals((-1446L), indexResponse0.getVersion());
      assertEquals("] cluster then us [", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("] cluster then us [", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNull(shardId0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(404, restStatus0.getStatus());
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      
      ShardId shardId0 = updateResponse0.getShardId();
      assertNull(shardId0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      
      boolean boolean0 = updateResponse0.forcedRefresh();
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertFalse(boolean0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string0 = deleteResponse0.getId();
      assertNull(string0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 1280;
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[4];
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNull(shardId0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      
      String string0 = "@{>Y#I3}4[;dfx";
      String string1 = "I_9Fk-Qjb";
      int int1 = 0;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0, string1, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("@{>Y#I3}4[;dfx", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: @{>Y#I3}4[;dfx", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("I_9Fk-Qjb", sQLTimeoutException0.getSQLState());
      
      RestStatus restStatus0 = RestStatus.NO_CONTENT;
      boolean boolean0 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure(shardId0, string0, sQLTimeoutException0, restStatus0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals("@{>Y#I3}4[;dfx", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: @{>Y#I3}4[;dfx", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("I_9Fk-Qjb", sQLTimeoutException0.getSQLState());
      assertEquals(RestStatus.NO_CONTENT, replicationResponse_ShardInfo_Failure0.status());
      assertFalse(replicationResponse_ShardInfo_Failure0.primary());
      assertEquals("@{>Y#I3}4[;dfx", replicationResponse_ShardInfo_Failure0.nodeId());
      
      replicationResponse_ShardInfo_FailureArray0[0] = replicationResponse_ShardInfo_Failure0;
      MockThrowable mockThrowable0 = new MockThrowable(string0, sQLTimeoutException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(mockThrowable0);
      
      boolean boolean1 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure1 = new ReplicationResponse.ShardInfo.Failure(shardId0, string0, mockThrowable0, restStatus0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(replicationResponse_ShardInfo_Failure1.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertNotNull(replicationResponse_ShardInfo_Failure1);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals("@{>Y#I3}4[;dfx", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: @{>Y#I3}4[;dfx", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("I_9Fk-Qjb", sQLTimeoutException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: @{>Y#I3}4[;dfx", mockThrowable0.toString());
      assertEquals("@{>Y#I3}4[;dfx", mockThrowable0.getMessage());
      assertEquals("@{>Y#I3}4[;dfx", replicationResponse_ShardInfo_Failure1.nodeId());
      assertFalse(replicationResponse_ShardInfo_Failure1.primary());
      assertEquals(RestStatus.NO_CONTENT, replicationResponse_ShardInfo_Failure1.status());
      
      replicationResponse_ShardInfo_FailureArray0[1] = replicationResponse_ShardInfo_Failure1;
      String string2 = "";
      RestStatus restStatus1 = RestStatus.MULTI_STATUS;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure2 = new ReplicationResponse.ShardInfo.Failure(shardId0, string2, mockThrowable0, restStatus1, boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(restStatus1.equals((Object)restStatus0));
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertNotNull(replicationResponse_ShardInfo_Failure2);
      assertFalse(replicationResponse_ShardInfo_Failure2.primary());
      assertEquals(RestStatus.MULTI_STATUS, replicationResponse_ShardInfo_Failure2.status());
      assertEquals("", replicationResponse_ShardInfo_Failure2.nodeId());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals("@{>Y#I3}4[;dfx", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: @{>Y#I3}4[;dfx", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("I_9Fk-Qjb", sQLTimeoutException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: @{>Y#I3}4[;dfx", mockThrowable0.toString());
      assertEquals("@{>Y#I3}4[;dfx", mockThrowable0.getMessage());
      
      replicationResponse_ShardInfo_FailureArray0[2] = replicationResponse_ShardInfo_Failure2;
      String string3 = ",NO2JVR8~k+,p";
      boolean boolean2 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure3 = new ReplicationResponse.ShardInfo.Failure(shardId0, string3, mockThrowable0, restStatus1, boolean2);
      assertFalse(restStatus1.equals((Object)restStatus0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(int1 == int0);
      assertNotNull(replicationResponse_ShardInfo_Failure3);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertFalse(replicationResponse_ShardInfo_Failure3.primary());
      assertEquals(RestStatus.MULTI_STATUS, replicationResponse_ShardInfo_Failure3.status());
      assertEquals(",NO2JVR8~k+,p", replicationResponse_ShardInfo_Failure3.nodeId());
      assertEquals("@{>Y#I3}4[;dfx", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: @{>Y#I3}4[;dfx", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("I_9Fk-Qjb", sQLTimeoutException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: @{>Y#I3}4[;dfx", mockThrowable0.toString());
      assertEquals("@{>Y#I3}4[;dfx", mockThrowable0.getMessage());
      
      replicationResponse_ShardInfo_FailureArray0[3] = replicationResponse_ShardInfo_Failure3;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, replicationResponse_ShardInfo_FailureArray0);
      assertFalse(int0 == int1);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(4, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      
      String string4 = "_index";
      long long0 = 1029L;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string4, string1, long0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(1029L, updateResponse0.version);
      assertEquals(4, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(1029L, updateResponse0.getVersion());
      assertEquals("I_9Fk-Qjb", updateResponse0.getId());
      assertEquals("_index", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      String string5 = updateResponse0.getId();
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string1);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(1029L, updateResponse0.version);
      assertEquals(4, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(1029L, updateResponse0.getVersion());
      assertEquals("I_9Fk-Qjb", updateResponse0.getId());
      assertEquals("_index", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("I_9Fk-Qjb", string5);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_version", string0);
      
      int int0 = (-184);
      String string1 = "";
      String string2 = "_version";
      String string3 = "Sij*}";
      SQLWarning sQLWarning0 = new SQLWarning(string2, string3, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(sQLWarning0);
      assertEquals("Sij*}", sQLWarning0.getSQLState());
      assertEquals("_version", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: _version", sQLWarning0.toString());
      assertEquals((-184), sQLWarning0.getErrorCode());
      
      ParsingException parsingException0 = new ParsingException(int0, int0, string1, sQLWarning0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(parsingException0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNull(shardId0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals("Sij*}", sQLWarning0.getSQLState());
      assertEquals("_version", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: _version", sQLWarning0.toString());
      assertEquals((-184), sQLWarning0.getErrorCode());
      assertEquals((-184), parsingException0.getColumnNumber());
      assertEquals((-184), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(indexResponse0);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals((-184L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("Sij*}", sQLWarning0.getSQLState());
      assertEquals("_version", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: _version", sQLWarning0.toString());
      assertEquals((-184), sQLWarning0.getErrorCode());
      assertEquals((-184), parsingException0.getColumnNumber());
      assertEquals((-184), parsingException0.getLineNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals((-184L), indexResponse0.getVersion());
      assertEquals("_version", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-122);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)19;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-42);
      byteArray0[3] = byte3;
      byte byte4 = (byte)122;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-103);
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)19, (byte) (-42), (byte)122, (byte) (-103), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      
      boolean boolean0 = false;
      updateResponse0.setForcedRefresh(boolean0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      
      boolean boolean0 = true;
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      TransportRequestOptions transportRequestOptions0 = updateAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      assertFalse(transportRequestOptions0.compress());
      
      updateResponse0.setForcedRefresh(boolean0);
      assertTrue(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertTrue(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      ValueType valueType0 = ValueType.STRING;
      SignificantTermsAggregationBuilder significantTermsAggregationBuilder0 = null;
      try {
        significantTermsAggregationBuilder0 = new SignificantTermsAggregationBuilder(updateResponse0.id, valueType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [name] must not be null: [null]
         //
         verifyException("org.elasticsearch.search.aggregations.AggregationBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "p* ~~Omcq77J <9{.$3";
      int int0 = 836;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(836, shardId0.getId());
      assertEquals(836, shardId0.id());
      
      String string1 = "YF1Yq";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(836L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(836, shardId0.getId());
      assertEquals(836, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(836L, updateResponse0.getVersion());
      assertEquals("YF1Yq", updateResponse0.getId());
      
      int int1 = 1062;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int1);
      assertFalse(int1 == int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(836L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(836, shardId0.getId());
      assertEquals(836, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(836L, updateResponse0.getVersion());
      assertEquals("YF1Yq", updateResponse0.getId());
      assertEquals(76L, bytesStreamOutput0.position());
      assertEquals(76, bytesStreamOutput0.size());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int2 = 1527;
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      
      int int3 = 0;
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(int3, int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotNull(byteBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(1527, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1527]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotNull(byteBufferBytesReference0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(1527, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1527]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotNull(streamInput0);
      assertTrue(streamInput0.markSupported());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(1527, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1527]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBufferBytesReference0.hasArray());
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      int int0 = 0;
      int int1 = 392;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int1, indexResponse0.EMPTY);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(392, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      indexResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getType());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(392, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getType());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(200, restStatus0.getStatus());
      assertEquals(RestStatus.OK, restStatus0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)65;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-68);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-37);
      byteArray0[6] = byte6;
      byte byte7 = (byte)106;
      byteArray0[7] = byte7;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)1, (byte)65, (byte)0, (byte)0, (byte) (-68), (byte)0, (byte) (-37), (byte)106}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = 55;
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[8];
      String string0 = "\\^u";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string0, string0);
      assertNotNull(deleteRequest0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      
      DeleteRequest deleteRequest1 = deleteRequest0.type(string0);
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      
      VersionType versionType0 = VersionType.EXTERNAL_GTE;
      DeleteRequest deleteRequest2 = deleteRequest1.versionType(versionType0);
      assertNotNull(deleteRequest2);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("\\^u", deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals("\\^u", deleteRequest2.index());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertNull(shardId0);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("\\^u", deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals("\\^u", deleteRequest2.index());
      
      String string1 = "org.apache.log4j.varia.StringMatchFilter";
      String string2 = "v$FNM5 ]0|76RsN";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(string1, string2, int0, sQLTransactionRollbackException0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)45;
      byteArray0[2] = byte2;
      byte byte3 = (byte)59;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-37);
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)45, (byte)59, (byte) (-37), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException2 = (SQLTransactionRollbackException)ElasticsearchException.readStackTrace((Throwable) sQLTransactionRollbackException1, streamInput0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLTransactionRollbackException2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(sQLTransactionRollbackException2, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException2, sQLTransactionRollbackException0);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertNotSame(sQLTransactionRollbackException0, sQLTransactionRollbackException2);
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)45, (byte)59, (byte) (-37), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException2.toString());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException2.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException2.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      RestStatus restStatus0 = RestStatus.PRECONDITION_FAILED;
      boolean boolean0 = true;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure(shardId0, string0, sQLTransactionRollbackException2, restStatus0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)45, (byte)59, (byte) (-37), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("\\^u", deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals("\\^u", deleteRequest2.index());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException2.toString());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException2.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException2.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo_Failure0.status());
      assertEquals("\\^u", replicationResponse_ShardInfo_Failure0.nodeId());
      assertTrue(replicationResponse_ShardInfo_Failure0.primary());
      
      replicationResponse_ShardInfo_FailureArray0[0] = replicationResponse_ShardInfo_Failure0;
      ShardId shardId1 = null;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure1 = new ReplicationResponse.ShardInfo.Failure(shardId1, string1, sQLTransactionRollbackException1, restStatus0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(replicationResponse_ShardInfo_Failure1.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(replicationResponse_ShardInfo_Failure1);
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo_Failure1.status());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", replicationResponse_ShardInfo_Failure1.nodeId());
      assertTrue(replicationResponse_ShardInfo_Failure1.primary());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      replicationResponse_ShardInfo_FailureArray0[1] = replicationResponse_ShardInfo_Failure1;
      RestStatus restStatus1 = RestStatus.PARTIAL_CONTENT;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure2 = new ReplicationResponse.ShardInfo.Failure(shardId0, string0, sQLTransactionRollbackException2, restStatus1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(restStatus1.equals((Object)restStatus0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(sQLTransactionRollbackException2.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(replicationResponse_ShardInfo_Failure2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)45, (byte)59, (byte) (-37), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(replicationResponse_ShardInfo_Failure2.primary());
      assertEquals(RestStatus.PARTIAL_CONTENT, replicationResponse_ShardInfo_Failure2.status());
      assertEquals("\\^u", replicationResponse_ShardInfo_Failure2.nodeId());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("\\^u", deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals("\\^u", deleteRequest2.index());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException2.toString());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException2.getSQLState());
      assertEquals(0, sQLTransactionRollbackException2.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException2.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      replicationResponse_ShardInfo_FailureArray0[2] = replicationResponse_ShardInfo_Failure2;
      String string3 = "=be";
      boolean boolean1 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure3 = new ReplicationResponse.ShardInfo.Failure(shardId0, string3, sQLTransactionRollbackException1, restStatus1, boolean1);
      assertFalse(int0 == int1);
      assertFalse(restStatus1.equals((Object)restStatus0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure3.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(replicationResponse_ShardInfo_Failure3);
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("\\^u", deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals("\\^u", deleteRequest2.index());
      assertFalse(replicationResponse_ShardInfo_Failure3.primary());
      assertEquals(RestStatus.PARTIAL_CONTENT, replicationResponse_ShardInfo_Failure3.status());
      assertEquals("=be", replicationResponse_ShardInfo_Failure3.nodeId());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      replicationResponse_ShardInfo_FailureArray0[3] = replicationResponse_ShardInfo_Failure3;
      ShardId shardId2 = null;
      String string4 = "cvi;O)H";
      RestStatus restStatus2 = RestStatus.UNPROCESSABLE_ENTITY;
      boolean boolean2 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure4 = new ReplicationResponse.ShardInfo.Failure(shardId2, string4, sQLTransactionRollbackException0, restStatus2, boolean2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(restStatus2.equals((Object)restStatus1));
      assertFalse(restStatus2.equals((Object)restStatus0));
      assertFalse(boolean2 == boolean0);
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure3));
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(replicationResponse_ShardInfo_Failure4.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertNotNull(replicationResponse_ShardInfo_Failure4);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertFalse(replicationResponse_ShardInfo_Failure4.primary());
      assertEquals("cvi;O)H", replicationResponse_ShardInfo_Failure4.nodeId());
      assertEquals(RestStatus.UNPROCESSABLE_ENTITY, replicationResponse_ShardInfo_Failure4.status());
      
      replicationResponse_ShardInfo_FailureArray0[4] = replicationResponse_ShardInfo_Failure4;
      boolean boolean3 = false;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure5 = new ReplicationResponse.ShardInfo.Failure(shardId2, string1, sQLTransactionRollbackException0, restStatus0, boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure3));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure4));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure5.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(restStatus0.equals((Object)restStatus1));
      assertFalse(restStatus0.equals((Object)restStatus2));
      assertNotNull(replicationResponse_ShardInfo_Failure5);
      assertFalse(replicationResponse_ShardInfo_Failure5.primary());
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo_Failure5.status());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", replicationResponse_ShardInfo_Failure5.nodeId());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      replicationResponse_ShardInfo_FailureArray0[5] = replicationResponse_ShardInfo_Failure5;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure6 = new ReplicationResponse.ShardInfo.Failure(shardId1, string1, sQLTransactionRollbackException1, restStatus2, boolean1);
      assertFalse(int0 == int1);
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure5));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure4));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure3));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure6.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(restStatus2.equals((Object)restStatus1));
      assertFalse(restStatus2.equals((Object)restStatus0));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(replicationResponse_ShardInfo_Failure6);
      assertFalse(replicationResponse_ShardInfo_Failure6.primary());
      assertEquals(RestStatus.UNPROCESSABLE_ENTITY, replicationResponse_ShardInfo_Failure6.status());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", replicationResponse_ShardInfo_Failure6.nodeId());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      replicationResponse_ShardInfo_FailureArray0[6] = replicationResponse_ShardInfo_Failure6;
      String string5 = "e<RG!fyaPh";
      String string6 = "";
      SQLWarning sQLWarning0 = new SQLWarning(string6, string4, sQLTransactionRollbackException1);
      assertFalse(int0 == int1);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("cvi;O)H", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      boolean boolean4 = true;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure7 = new ReplicationResponse.ShardInfo.Failure(shardId1, string5, sQLWarning0, restStatus0, boolean4);
      assertFalse(int0 == int1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(replicationResponse_ShardInfo_Failure7.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure7.equals((Object)replicationResponse_ShardInfo_Failure2));
      assertFalse(replicationResponse_ShardInfo_Failure7.equals((Object)replicationResponse_ShardInfo_Failure3));
      assertFalse(replicationResponse_ShardInfo_Failure7.equals((Object)replicationResponse_ShardInfo_Failure4));
      assertFalse(replicationResponse_ShardInfo_Failure7.equals((Object)replicationResponse_ShardInfo_Failure5));
      assertFalse(replicationResponse_ShardInfo_Failure7.equals((Object)replicationResponse_ShardInfo_Failure6));
      assertFalse(replicationResponse_ShardInfo_Failure7.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException2));
      assertFalse(restStatus0.equals((Object)restStatus1));
      assertFalse(restStatus0.equals((Object)restStatus2));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertNotNull(replicationResponse_ShardInfo_Failure7);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("cvi;O)H", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("e<RG!fyaPh", replicationResponse_ShardInfo_Failure7.nodeId());
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo_Failure7.status());
      assertTrue(replicationResponse_ShardInfo_Failure7.primary());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("v$FNM5 ]0|76RsN", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: org.apache.log4j.varia.StringMatchFilter", sQLTransactionRollbackException1.toString());
      
      replicationResponse_ShardInfo_FailureArray0[7] = replicationResponse_ShardInfo_Failure7;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int1, replicationResponse_ShardInfo_FailureArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(8, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(55, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo0.status());
      assertEquals(8, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string7 = "org.joda.time.Days";
      String string8 = "4$c{gUgjqMk+w`y}K";
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string7, string8, int1, boolean2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(updateResponse0);
      assertEquals(55L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(8, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("\\^u", deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals("\\^u", deleteRequest2.index());
      assertEquals(55, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo0.status());
      assertEquals(8, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(55L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.joda.time.Days", updateResponse0.getType());
      assertEquals(RestStatus.PRECONDITION_FAILED, updateResponse0.status());
      assertEquals("4$c{gUgjqMk+w`y}K", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      
      long long0 = updateResponse0.getVersion();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotSame(string0, string8);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertNotSame(string7, string1);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertEquals(55L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(8, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("\\^u", deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals("\\^u", deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("\\^u", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.parent());
      assertEquals("\\^u", deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals("\\^u", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("\\^u", deleteRequest2.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals("\\^u", deleteRequest2.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertEquals("\\^u", deleteRequest2.index());
      assertEquals(55, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.PRECONDITION_FAILED, replicationResponse_ShardInfo0.status());
      assertEquals(8, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(55L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.joda.time.Days", updateResponse0.getType());
      assertEquals(RestStatus.PRECONDITION_FAILED, updateResponse0.status());
      assertEquals("4$c{gUgjqMk+w`y}K", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(55L, long0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", string0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string1 = deleteResponse0.getType();
      assertNull(string1);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      
      int int0 = 0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(bigEndianHeapChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      
      // Undeclared exception!
      try { 
        bigEndianHeapChannelBuffer0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Not enough readable bytes - Need 2, maximum is 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", string0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = deleteResponse0.id;
      stringArray0[1] = docWriteResponse_Fields0._INDEX;
      stringArray0[2] = docWriteResponse_Fields0._TYPE;
      stringArray0[3] = string0;
      stringArray0[4] = docWriteResponse_Fields0._VERSION;
      stringArray0[5] = deleteResponse0.type;
      stringArray0[6] = docWriteResponse_Fields0._ID;
      stringArray0[7] = docWriteResponse_Fields0._ID;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, byteArrayOutputStream0, stringArray0, deleteResponse0.forcedRefresh);
      assertNotNull(xContentBuilder0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(8, stringArray0.length);
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=false)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotNull(indexResponse1);
      assertNotSame(indexResponse1, indexResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      indexResponse1.setShardInfo(replicationResponse_ShardInfo0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotSame(indexResponse1, indexResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      boolean boolean0 = indexResponse1.isCreated();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotSame(indexResponse1, indexResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(boolean0);
      
      long long0 = indexResponse1.getVersion();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotSame(indexResponse1, indexResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals(0L, long0);
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      String string0 = replicationResponse_ShardInfo0.toString();
      assertNotNull(string0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}", string0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      
      int int0 = 252;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(252, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals(252, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=252 cap=252]", byteBuffer0.toString());
      
      IndexResponse indexResponse2 = indexAction0.newResponse();
      assertFalse(indexResponse2.equals((Object)indexResponse1));
      assertFalse(indexResponse2.equals((Object)indexResponse0));
      assertNotNull(indexResponse2);
      assertNotSame(indexResponse2, indexResponse1);
      assertNotSame(indexResponse2, indexResponse0);
      assertFalse(indexResponse2.forcedRefresh);
      assertEquals(0L, indexResponse2.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse2.getType());
      assertEquals(0L, indexResponse2.getVersion());
      assertFalse(indexResponse2.isCreated());
      assertNull(indexResponse2.getId());
      assertFalse(indexResponse2.forcedRefresh());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(252, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals(252, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=252 cap=252]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(252, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals(252, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=252 cap=252]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      int int1 = streamInput0.readInt();
      assertFalse(int1 == int0);
      assertEquals(4, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(248, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=252 cap=252]", byteBuffer0.toString());
      assertEquals(252, byteBuffer0.capacity());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, int1);
      
      DoubleBuffer doubleBuffer0 = byteBuffer0.asDoubleBuffer();
      assertFalse(int0 == int1);
      assertNotNull(doubleBuffer0);
      assertEquals(31, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.position());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(31, doubleBuffer0.remaining());
      assertTrue(doubleBuffer0.isDirect());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals("java.nio.DirectDoubleBufferS[pos=0 lim=31 cap=31]", doubleBuffer0.toString());
      assertEquals(31, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.hasArray());
      assertEquals(4, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(248, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=252 cap=252]", byteBuffer0.toString());
      assertEquals(252, byteBuffer0.capacity());
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      Class<QueryRescorerBuilder> class0 = QueryRescorerBuilder.class;
      String string1 = "Fk_[SbN";
      Writeable.Reader<QueryRescorerBuilder> writeable_Reader0 = (Writeable.Reader<QueryRescorerBuilder>) mock(Writeable.Reader.class, new ViolatedAssumptionAnswer());
      namedWriteableRegistry0.register(class0, string1, (Writeable.Reader<? extends QueryRescorerBuilder>) writeable_Reader0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertFalse(int0 == int1);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals(4, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(248, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=252 cap=252]", byteBuffer0.toString());
      assertEquals(252, byteBuffer0.capacity());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      deleteResponse0.readFrom(namedWriteableAwareStreamInput0);
      assertFalse(int0 == int1);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(237, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=15 lim=252 cap=252]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals(15, byteBuffer0.position());
      assertEquals(252, byteBuffer0.capacity());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      deleteResponse0.readFrom(streamInput0);
      assertFalse(int0 == int1);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=26 lim=252 cap=252]", byteBuffer0.toString());
      assertEquals(252, byteBuffer0.capacity());
      assertEquals(26, byteBuffer0.position());
      assertEquals(226, byteBuffer0.remaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      String string2 = deleteResponse0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string2);
      
      long long1 = 0L;
      boolean boolean1 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, deleteResponse0.shardId, indexResponse1.id, indexResponse1.id, long1, boolean1);
      assertFalse(indexResponse1.equals((Object)indexResponse2));
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertTrue(long1 == long0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertNull(updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      
      RestStatus restStatus0 = updateResponse0.status();
      assertFalse(indexResponse1.equals((Object)indexResponse2));
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertTrue(long1 == long0);
      assertFalse(boolean1 == boolean0);
      assertNotSame(indexResponse1, indexResponse2);
      assertNotSame(indexResponse1, indexResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertNull(updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
      assertEquals(RestStatus.CREATED, restStatus0);
      
      indexResponse0.setForcedRefresh(boolean1);
      assertFalse(indexResponse0.equals((Object)indexResponse1));
      assertFalse(indexResponse0.equals((Object)indexResponse2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(indexResponse0, indexResponse1);
      assertNotSame(indexResponse0, indexResponse2);
      assertTrue(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals(11L, bytesStreamOutput0.position());
      assertEquals(11, bytesStreamOutput0.size());
      
      String string3 = updateResponse0.toString();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(indexResponse1.equals((Object)indexResponse2));
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertTrue(long1 == long0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(indexResponse1, indexResponse2);
      assertNotSame(indexResponse1, indexResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertNull(updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("UpdateResponse[index=,type=null,id=null,version=0,created=true,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string3);
      
      indexResponse1.readFrom(namedWriteableAwareStreamInput0);
      assertFalse(indexResponse1.equals((Object)indexResponse2));
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(int0 == int1);
      assertNotSame(indexResponse1, indexResponse2);
      assertNotSame(indexResponse1, indexResponse0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertEquals("", indexResponse1.getId());
      assertEquals("", indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals("java.nio.DirectByteBuffer[pos=37 lim=252 cap=252]", byteBuffer0.toString());
      assertEquals(37, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(215, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(252, byteBuffer0.limit());
      assertEquals(252, byteBuffer0.capacity());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      String string4 = indexResponse1.getIndex();
      assertFalse(indexResponse1.equals((Object)indexResponse2));
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(indexResponse1, indexResponse2);
      assertNotSame(indexResponse1, indexResponse0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertEquals(0L, indexResponse1.version);
      assertFalse(indexResponse1.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertFalse(indexResponse1.forcedRefresh());
      assertEquals(RestStatus.OK, indexResponse1.status());
      assertEquals("", indexResponse1.getId());
      assertEquals("", indexResponse1.getType());
      assertEquals(0L, indexResponse1.getVersion());
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        indexResponse2.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      
      XContentBuilder xContentBuilder0 = null;
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "D.2*8J78Ne7R$3VL<r";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = indexResponse0.type;
      String string1 = "9xP\"'?\"ASB|;yfM'Z";
      stringArray0[3] = string1;
      stringArray0[4] = indexResponse0.type;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(6, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(hashtable0, hashtable0);
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Map<String, String> map0 = settings_Builder0.internalMap();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Settings settings0 = SettingsFilter.filterSettings(toXContent_MapParams0, settings_Builder0.EMPTY_SETTINGS);
      assertNotNull(settings0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string0 = settings1.get(indexAction0.NAME);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNull(string0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      TransportRequestOptions transportRequestOptions0 = indexAction0.transportOptions(settings1);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(transportRequestOptions0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      assertFalse(transportRequestOptions0.compress());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertNull(shardId0);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      
      XContentBuilder xContentBuilder0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_MapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "zuXX^%&^";
      String string1 = "";
      UpdateRequest updateRequest0 = new UpdateRequest(string0, string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateRequest0);
      assertNull(updateRequest0.scriptLang());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals("", updateRequest0.type());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals("zuXX^%&^", updateRequest0.index());
      assertNull(updateRequest0.parent());
      assertEquals("zuXX^%&^", updateRequest0.id());
      assertNull(updateRequest0.routing());
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      int int0 = 3894;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      String[] stringArray0 = null;
      boolean boolean0 = true;
      XContentBuilder xContentBuilder0 = new XContentBuilder(cborXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      
      UpdateRequest updateRequest1 = updateRequest0.doc(xContentBuilder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateRequest1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertNull(updateRequest0.scriptLang());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals("", updateRequest0.type());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals("zuXX^%&^", updateRequest0.index());
      assertNull(updateRequest0.parent());
      assertEquals("zuXX^%&^", updateRequest0.id());
      assertNull(updateRequest0.routing());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("zuXX^%&^", updateRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("zuXX^%&^", updateRequest1.index());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertEquals("", updateRequest1.type());
      
      String string2 = "9}BY$7c.nW45:I\"^=";
      UpdateRequest updateRequest2 = updateRequest1.type(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(updateRequest2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNull(updateRequest0.scriptLang());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals("zuXX^%&^", updateRequest0.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertEquals("zuXX^%&^", updateRequest0.id());
      assertNull(updateRequest0.routing());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("zuXX^%&^", updateRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("zuXX^%&^", updateRequest1.index());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("zuXX^%&^", updateRequest2.id());
      assertNull(updateRequest2.parent());
      assertEquals("zuXX^%&^", updateRequest2.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest2.type());
      assertFalse(updateRequest2.docAsUpsert());
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(shardId0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNull(updateRequest0.scriptLang());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals("zuXX^%&^", updateRequest0.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertEquals("zuXX^%&^", updateRequest0.id());
      assertNull(updateRequest0.routing());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("zuXX^%&^", updateRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("zuXX^%&^", updateRequest1.index());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("zuXX^%&^", updateRequest2.id());
      assertNull(updateRequest2.parent());
      assertEquals("zuXX^%&^", updateRequest2.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest2.type());
      assertFalse(updateRequest2.docAsUpsert());
      
      String string3 = "ze";
      String string4 = "M ";
      long long0 = 0L;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string3, string4, long0, boolean0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("M ", updateResponse0.getId());
      assertEquals("ze", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateRequest0.scriptLang());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals("zuXX^%&^", updateRequest0.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertEquals("zuXX^%&^", updateRequest0.id());
      assertNull(updateRequest0.routing());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("zuXX^%&^", updateRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("zuXX^%&^", updateRequest1.index());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("zuXX^%&^", updateRequest2.id());
      assertNull(updateRequest2.parent());
      assertEquals("zuXX^%&^", updateRequest2.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest2.type());
      assertFalse(updateRequest2.docAsUpsert());
      
      String string5 = updateResponse0.getType();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("M ", updateResponse0.getId());
      assertEquals("ze", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(updateRequest0.scriptLang());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest0.getRefreshPolicy());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals("zuXX^%&^", updateRequest0.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest0.type());
      assertNull(updateRequest0.parent());
      assertEquals("zuXX^%&^", updateRequest0.id());
      assertNull(updateRequest0.routing());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.parent());
      assertNull(updateRequest1.scriptString());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("zuXX^%&^", updateRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest1.getRefreshPolicy());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals("zuXX^%&^", updateRequest1.index());
      assertTrue(updateRequest1.detectNoop());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.scriptString());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertTrue(updateRequest2.detectNoop());
      assertEquals(WriteRequest.RefreshPolicy.NONE, updateRequest2.getRefreshPolicy());
      assertFalse(updateRequest2.scriptedUpsert());
      assertEquals("zuXX^%&^", updateRequest2.id());
      assertNull(updateRequest2.parent());
      assertEquals("zuXX^%&^", updateRequest2.index());
      assertEquals("9}BY$7c.nW45:I\"^=", updateRequest2.type());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals("ze", string5);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-60);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)125;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      byteArray0[3] = byte3;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte)125, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(bigEndianHeapChannelBuffer0);
      assertNotNull(readOnlyChannelBuffer0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte)125, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(readOnlyChannelBuffer0.readable());
      assertEquals(4, readOnlyChannelBuffer0.readableBytes());
      assertEquals(4, readOnlyChannelBuffer0.writerIndex());
      assertFalse(readOnlyChannelBuffer0.isDirect());
      assertEquals(4, readOnlyChannelBuffer0.capacity());
      assertEquals(0, readOnlyChannelBuffer0.readerIndex());
      assertFalse(readOnlyChannelBuffer0.hasArray());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(readOnlyChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte)125, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(readOnlyChannelBuffer0.readable());
      assertEquals(4, readOnlyChannelBuffer0.readableBytes());
      assertEquals(4, readOnlyChannelBuffer0.writerIndex());
      assertFalse(readOnlyChannelBuffer0.isDirect());
      assertEquals(4, readOnlyChannelBuffer0.capacity());
      assertEquals(0, readOnlyChannelBuffer0.readerIndex());
      assertFalse(readOnlyChannelBuffer0.hasArray());
      assertEquals(4, channelBufferBytesReference0.length());
      assertFalse(channelBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte)125, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(readOnlyChannelBuffer0.readable());
      assertEquals(4, readOnlyChannelBuffer0.readableBytes());
      assertEquals(4, readOnlyChannelBuffer0.writerIndex());
      assertFalse(readOnlyChannelBuffer0.isDirect());
      assertEquals(4, readOnlyChannelBuffer0.capacity());
      assertEquals(0, readOnlyChannelBuffer0.readerIndex());
      assertFalse(readOnlyChannelBuffer0.hasArray());
      assertEquals(4, channelBufferBytesReference0.length());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(4, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte)125, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(4, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(4, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(readOnlyChannelBuffer0.readable());
      assertEquals(4, readOnlyChannelBuffer0.readableBytes());
      assertEquals(4, readOnlyChannelBuffer0.writerIndex());
      assertFalse(readOnlyChannelBuffer0.isDirect());
      assertEquals(4, readOnlyChannelBuffer0.capacity());
      assertEquals(0, readOnlyChannelBuffer0.readerIndex());
      assertFalse(readOnlyChannelBuffer0.hasArray());
      assertEquals(4, channelBufferBytesReference0.length());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(4, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 4
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "D.2*8J78Ne7R$3VL<r";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = indexResponse0.type;
      String string1 = "9xP\"'?\"ASB|;yfM'Z";
      stringArray0[3] = string1;
      stringArray0[4] = indexResponse0.type;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(6, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(hashtable0, hashtable0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      XContentBuilder xContentBuilder1 = CborXContent.contentBuilder();
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertNotNull(xContentBuilder1);
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      
      String string2 = "W}fp[?q<fd";
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, stringArray0[2], string2, indexResponse0.version, indexResponse0.forcedRefresh);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(6, stringArray0.length);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("W}fp[?q<fd", updateResponse0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(xContentBuilder0.equals((Object)xContentBuilder1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(xContentBuilder2.equals((Object)xContentBuilder1));
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotSame(xContentBuilder2, xContentBuilder1);
      assertNotSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(6, stringArray0.length);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("W}fp[?q<fd", updateResponse0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string0, string0);
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.id());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      
      DeleteRequest deleteRequest1 = deleteRequest0.parent(string0);
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.id());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals("", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("", deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      
      String string1 = "mO'OB2o{{n8P9W\"\"Q;F";
      DeleteRequest deleteRequest2 = deleteRequest1.id(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest2);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest1.id());
      assertEquals("", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertEquals("", deleteRequest2.parent());
      assertEquals("", deleteRequest2.index());
      assertEquals(0L, deleteRequest2.primaryTerm());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(shardId0);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string0);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest1.id());
      assertEquals("", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertEquals("", deleteRequest2.parent());
      assertEquals("", deleteRequest2.index());
      assertEquals(0L, deleteRequest2.primaryTerm());
      
      String string2 = "org.elasticsearch.common.util.BigArrays$ByteArrayWrapper";
      String string3 = "";
      DeleteStoredScriptRequest deleteStoredScriptRequest0 = new DeleteStoredScriptRequest(string2, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(deleteStoredScriptRequest0);
      assertEquals("", deleteStoredScriptRequest0.id());
      assertEquals("org.elasticsearch.common.util.BigArrays$ByteArrayWrapper", deleteStoredScriptRequest0.scriptLang());
      assertFalse(deleteStoredScriptRequest0.getShouldPersistResult());
      
      DeleteStoredScriptRequest deleteStoredScriptRequest1 = deleteStoredScriptRequest0.id(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(deleteStoredScriptRequest1);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest1);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest0);
      assertEquals("", deleteStoredScriptRequest0.id());
      assertEquals("org.elasticsearch.common.util.BigArrays$ByteArrayWrapper", deleteStoredScriptRequest0.scriptLang());
      assertFalse(deleteStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.id());
      assertFalse(deleteStoredScriptRequest1.getShouldPersistResult());
      assertEquals("org.elasticsearch.common.util.BigArrays$ByteArrayWrapper", deleteStoredScriptRequest1.scriptLang());
      
      DeleteStoredScriptRequest deleteStoredScriptRequest2 = deleteStoredScriptRequest1.scriptLang(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(deleteStoredScriptRequest2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest1);
      assertEquals("", deleteStoredScriptRequest0.id());
      assertEquals("", deleteStoredScriptRequest0.scriptLang());
      assertFalse(deleteStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.id());
      assertFalse(deleteStoredScriptRequest1.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.scriptLang());
      assertFalse(deleteStoredScriptRequest2.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest2.scriptLang());
      assertEquals("", deleteStoredScriptRequest2.id());
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      
      int int0 = 353;
      InetSocketTransportAddress inetSocketTransportAddress0 = new InetSocketTransportAddress(inetAddress0, int0);
      assertNotNull(inetSocketTransportAddress0);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals(353, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      
      deleteStoredScriptRequest2.remoteAddress((TransportAddress) inetSocketTransportAddress0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest1);
      assertEquals((short)1, InetSocketTransportAddress.TYPE_ID);
      assertEquals("", deleteStoredScriptRequest0.id());
      assertEquals("", deleteStoredScriptRequest0.scriptLang());
      assertFalse(deleteStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.id());
      assertFalse(deleteStoredScriptRequest1.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.scriptLang());
      assertFalse(deleteStoredScriptRequest2.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest2.scriptLang());
      assertEquals("", deleteStoredScriptRequest2.id());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals(353, inetSocketTransportAddress0.getPort());
      assertEquals((short)1, inetSocketTransportAddress0.uniqueAddressTypeId());
      assertFalse(inetSocketTransportAddress0.isLoopbackOrLinkLocalAddress());
      
      TaskId taskId0 = deleteStoredScriptRequest2.getParentTask();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(taskId0);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest1);
      assertEquals("", deleteStoredScriptRequest0.id());
      assertEquals("", deleteStoredScriptRequest0.scriptLang());
      assertFalse(deleteStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.id());
      assertFalse(deleteStoredScriptRequest1.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.scriptLang());
      assertFalse(deleteStoredScriptRequest2.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest2.scriptLang());
      assertEquals("", deleteStoredScriptRequest2.id());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      
      deleteRequest0.setParentTask(taskId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest1);
      assertSame(deleteStoredScriptRequest0, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest1, deleteStoredScriptRequest2);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest0);
      assertSame(deleteStoredScriptRequest2, deleteStoredScriptRequest1);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest0.id());
      assertEquals("", deleteStoredScriptRequest0.scriptLang());
      assertFalse(deleteStoredScriptRequest0.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.id());
      assertFalse(deleteStoredScriptRequest1.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest1.scriptLang());
      assertFalse(deleteStoredScriptRequest2.getShouldPersistResult());
      assertEquals("", deleteStoredScriptRequest2.scriptLang());
      assertEquals("", deleteStoredScriptRequest2.id());
      assertFalse(taskId0.isSet());
      assertEquals((-1L), taskId0.getId());
      assertEquals("", taskId0.getNodeId());
      
      long long0 = (-1L);
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(indexResponse0);
      assertEquals((-1L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest1.id());
      assertEquals("", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-1L), indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", indexResponse0.getId());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertEquals("", deleteRequest2.parent());
      assertEquals("", deleteRequest2.index());
      assertEquals(0L, deleteRequest2.primaryTerm());
      
      boolean boolean1 = false;
      indexResponse0.setForcedRefresh(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertEquals((-1L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest1.id());
      assertEquals("", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-1L), indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", indexResponse0.getId());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertEquals("", deleteRequest2.parent());
      assertEquals("", deleteRequest2.index());
      assertEquals(0L, deleteRequest2.primaryTerm());
      
      String string4 = indexResponse0.getType();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertEquals((-1L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest1.id());
      assertEquals("", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-1L), indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", indexResponse0.getId());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertEquals("", deleteRequest2.parent());
      assertEquals("", deleteRequest2.index());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("", string4);
      
      String string5 = indexResponse0.getId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertSame(string0, string3);
      assertNotSame(string0, string5);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertEquals((-1L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.parent());
      assertEquals("", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("", deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest1.id());
      assertEquals("", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-1L), indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", indexResponse0.getId());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("", deleteRequest2.type());
      assertNull(deleteRequest2.routing());
      assertEquals("", deleteRequest2.parent());
      assertEquals("", deleteRequest2.index());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("mO'OB2o{{n8P9W\"\"Q;F", string5);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      Client client0 = null;
      ParentTaskAssigningClient parentTaskAssigningClient0 = null;
      try {
        parentTaskAssigningClient0 = new ParentTaskAssigningClient(client0, taskId0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.client.FilterClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "p* ~~Omcq77J <9{.$3";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = 836;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(836, shardId0.id());
      assertEquals(836, shardId0.getId());
      
      String string1 = "YF1Yq";
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, int0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotNull(updateResponse0);
      assertEquals(836L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(836, shardId0.id());
      assertEquals(836, shardId0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("YF1Yq", updateResponse0.getId());
      assertEquals(836L, updateResponse0.getVersion());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      int int1 = 1062;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int1);
      assertFalse(int1 == int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(836L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(836, shardId0.id());
      assertEquals(836, shardId0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("YF1Yq", updateResponse0.getId());
      assertEquals(836L, updateResponse0.getVersion());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(76, bytesStreamOutput0.size());
      assertEquals(76L, bytesStreamOutput0.position());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int2 = 1527;
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      
      int int3 = 0;
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(int3, int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(byteBuffer0);
      assertEquals(1527, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1527]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(1527, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1527]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(streamInput0);
      assertEquals(1527, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1527]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1527, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      
      byte[] byteArray0 = new byte[6];
      ShardId shardId1 = updateResponse0.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotNull(shardId1);
      assertNotSame(string0, string1);
      assertSame(shardId1, shardId0);
      assertSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertEquals(836L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(836, shardId1.id());
      assertEquals(836, shardId1.getId());
      assertEquals(836, shardId0.id());
      assertEquals(836, shardId0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("YF1Yq", updateResponse0.getId());
      assertEquals(836L, updateResponse0.getVersion());
      assertEquals("p* ~~Omcq77J <9{.$3", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-93);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)89;
      byteArray0[4] = byte4;
      byte byte5 = (byte)117;
      byteArray0[5] = byte5;
      try { 
        streamInput0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "D.2*8J78Ne7R$3VL<r";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String string1 = indexResponse0.getIndex();
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[0] = string0;
      stringArray0[2] = stringArray0[0];
      String string2 = "9xP\"'?\"ASB|;yfM'Z";
      stringArray0[3] = string2;
      stringArray0[4] = indexResponse0.type;
      stringArray0[5] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(6, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(hashtable0, hashtable0);
      assertNotNull(fakeRestRequest0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      int int0 = 467;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(467, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=467 cap=467]", byteBuffer0.toString());
      assertEquals(467, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(467, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(467, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=467 cap=467]", byteBuffer0.toString());
      assertEquals(467, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(467, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(467, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=467 cap=467]", byteBuffer0.toString());
      assertEquals(467, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(467, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertEquals(467, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=467 cap=467]", byteBuffer0.toString());
      assertEquals(467, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(467, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      updateResponse0.readFrom(namedWriteableAwareStreamInput0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(467, byteBuffer0.capacity());
      assertEquals(467, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=12 lim=467 cap=467]", byteBuffer0.toString());
      assertEquals(455, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      String string0 = DocWriteResponse.Fields._INDEX;
      assertNotNull(string0);
      assertEquals("_index", string0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)39;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-117);
      byteArray0[1] = byte1;
      byte byte2 = (byte)68;
      byteArray0[2] = byte2;
      int int1 = 2083;
      StreamInput streamInput1 = StreamInput.wrap(byteArray0, int1, int1);
      assertFalse(int1 == int0);
      assertNotNull(streamInput1);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-117), (byte)68, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      NamedWriteableRegistry namedWriteableRegistry1 = new NamedWriteableRegistry();
      assertFalse(namedWriteableRegistry1.equals((Object)namedWriteableRegistry0));
      assertNotNull(namedWriteableRegistry1);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput1 = new NamedWriteableAwareStreamInput(streamInput1, namedWriteableRegistry1);
      assertFalse(int1 == int0);
      assertFalse(namedWriteableRegistry1.equals((Object)namedWriteableRegistry0));
      assertFalse(namedWriteableAwareStreamInput1.equals((Object)namedWriteableAwareStreamInput0));
      assertNotNull(namedWriteableAwareStreamInput1);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-117), (byte)68, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      try { 
        ReplicationResponse.ShardInfo.readShardInfo(namedWriteableAwareStreamInput1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      String string0 = "_version";
      int int0 = (-153);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-153), shardId0.id());
      assertEquals((-153), shardId0.getId());
      
      String string1 = "XX_{\"EfbqJH\\CA";
      String string2 = null;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals((-153L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-153), shardId0.id());
      assertEquals((-153), shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals("XX_{\"EfbqJH\\CA", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-153L), updateResponse0.getVersion());
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId1);
      assertNotSame(string0, string1);
      assertSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertSame(shardId1, shardId0);
      assertEquals((-153L), updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-153), shardId0.id());
      assertEquals((-153), shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals("XX_{\"EfbqJH\\CA", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-153L), updateResponse0.getVersion());
      assertEquals((-153), shardId1.getId());
      assertEquals((-153), shardId1.id());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      int int0 = 3608;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3608 cap=3608]", byteBuffer0.toString());
      assertEquals(3608, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3608, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3608, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3608 cap=3608]", byteBuffer0.toString());
      assertEquals(3608, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3608, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3608, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = ReplicationResponse.ShardInfo.readShardInfo(byteBufferStreamInput0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3, byteBuffer0.position());
      assertEquals(3608, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3608 cap=3608]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3608, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3605, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string1, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(3608L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3, byteBuffer0.position());
      assertEquals(3608, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3608 cap=3608]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3608, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3605, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(3608L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      
      String string2 = updateResponse0.getId();
      assertNotNull(string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(3608L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3, byteBuffer0.position());
      assertEquals(3608, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3608 cap=3608]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3608, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3605, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("", updateResponse0.getId());
      assertEquals(3608L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals("", string2);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      int int0 = 1280;
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[4];
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.id());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNull(shardId0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.id());
      
      String string0 = "@{>Y#I3}4[;dfx";
      String string1 = "I_9Fk-Qjb";
      int int1 = 0;
      boolean boolean0 = false;
      boolean boolean1 = false;
      String string2 = "";
      RestStatus restStatus0 = RestStatus.MULTI_STATUS;
      String string3 = ",NO2JVR8~k+,p";
      boolean boolean2 = true;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, replicationResponse_ShardInfo_FailureArray0);
      assertFalse(int0 == int1);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(4, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      
      String string4 = "_index";
      long long0 = 1029L;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string4, string1, long0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(updateResponse0);
      assertEquals(1029L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(4, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals("_index", updateResponse0.getType());
      assertEquals("I_9Fk-Qjb", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(1029L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.id());
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      
      boolean boolean3 = true;
      updateResponse0.forcedRefresh = boolean3;
      assertEquals("_index", updateResponse0.getType());
      assertEquals("I_9Fk-Qjb", updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals(1029L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.id());
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      
      String string5 = updateResponse0.getId();
      assertFalse(int0 == int1);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertTrue(updateResponse0.forcedRefresh);
      assertEquals(1029L, updateResponse0.version);
      assertEquals(4, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals("_index", updateResponse0.getType());
      assertEquals("I_9Fk-Qjb", updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals(1029L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.id());
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      assertEquals("I_9Fk-Qjb", string5);
      
      boolean boolean4 = updateResponse0.forcedRefresh();
      assertFalse(int0 == int1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertTrue(updateResponse0.forcedRefresh);
      assertEquals(1029L, updateResponse0.version);
      assertEquals(4, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals("_index", updateResponse0.getType());
      assertEquals("I_9Fk-Qjb", updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      assertEquals(1029L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.id());
      assertEquals(4, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1280, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(1280, replicationResponse_ShardInfo0.getTotal());
      assertTrue(boolean4);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      
      int int0 = 749;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(749, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(749, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(749, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=749 cap=749]", byteBuffer0.toString());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(749, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(749, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(749, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=749 cap=749]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = byteBufferBytesReference0.toBytesArray();
      assertNotNull(bytesArray0);
      assertEquals(749, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(749, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(749, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=749 cap=749]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(749, bytesArray0.length());
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) bytesArray0);
      assertNotNull(streamInput0);
      assertEquals(749, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(749, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(749, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=749 cap=749]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(749, bytesArray0.length());
      
      deleteResponse0.readFrom(streamInput0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals(749, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(749, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(749, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=749 cap=749]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertEquals(749, bytesArray0.length());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNotNull(shardId0);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.forcedRefresh);
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertNotNull(string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", string0);
      
      String string1 = docWriteResponse_Fields0.get_TYPE();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_type", string1);
      
      String string2 = DocWriteResponse.Fields._VERSION;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("_version", string2);
      
      BigArrays bigArrays0 = null;
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      byte[] byteArray0 = new byte[9];
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      int int0 = 110;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(110, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(110, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(110, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=110 cap=110]", byteBuffer0.toString());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(110, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(110, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(110, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=110 cap=110]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(110, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(110, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(110, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=110 cap=110]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      GetResult getResult0 = GetResult.readGetResult(streamInput0);
      assertNotNull(getResult0);
      assertEquals(110, byteBuffer0.capacity());
      assertEquals(110, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(98, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=12 lim=110 cap=110]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0L, getResult0.getVersion());
      assertFalse(getResult0.isExists());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals("", getResult0.getIndex());
      assertNull(getResult0.getType());
      assertEquals("", getResult0.getId());
      
      updateResponse0.setGetResult(getResult0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(110, byteBuffer0.capacity());
      assertEquals(110, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(98, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=12 lim=110 cap=110]", byteBuffer0.toString());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertEquals(0L, getResult0.getVersion());
      assertFalse(getResult0.isExists());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals("", getResult0.getIndex());
      assertNull(getResult0.getType());
      assertEquals("", getResult0.getId());
      
      byte byte0 = (byte)75;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)58;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)1;
      byteArray0[5] = byte5;
      byte byte6 = (byte)47;
      byteArray0[6] = byte6;
      byte byte7 = (byte)108;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-97);
      byteArray0[8] = byte8;
      int int1 = (-2182);
      StreamInput streamInput1 = StreamInput.wrap(byteArray0, int1, (int) byteArray0[5]);
      assertFalse(int1 == int0);
      assertNotNull(streamInput1);
      assertArrayEquals(new byte[] {(byte)75, (byte)0, (byte)58, (byte)0, (byte)0, (byte)1, (byte)47, (byte)108, (byte) (-97)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput1, namedWriteableRegistry0);
      assertFalse(int1 == int0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertArrayEquals(new byte[] {(byte)75, (byte)0, (byte)58, (byte)0, (byte)0, (byte)1, (byte)47, (byte)108, (byte) (-97)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2182
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      int int0 = (-1);
      XContentLocation xContentLocation0 = new XContentLocation(int0, int0);
      assertNotNull(xContentLocation0);
      assertEquals((-1), xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      
      String string0 = "_id";
      Object[] objectArray0 = new Object[0];
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, objectArray0);
      assertNotNull(parsingException0);
      assertEquals((-1), xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, objectArray0.length);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertNull(shardId0);
      assertEquals((-1), xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-1), parsingException0.getLineNumber());
      
      String string1 = "FH{xQ'pWEX5.}j'bPC";
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE, int0, parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexResponse0);
      assertEquals((-1), xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals((-1L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals("FH{xQ'pWEX5.}j'bPC", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-1L), indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("rest.exception.stacktrace.skip", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      indexResponse0.shardId = shardId0;
      assertEquals((-1), parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals("FH{xQ'pWEX5.}j'bPC", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-1L), indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("rest.exception.stacktrace.skip", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      long long0 = indexResponse0.getVersion();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), xContentLocation0.columnNumber);
      assertEquals((-1), xContentLocation0.lineNumber);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertEquals((-1L), indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-1), parsingException0.getLineNumber());
      assertEquals("FH{xQ'pWEX5.}j'bPC", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals((-1L), indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("rest.exception.stacktrace.skip", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals((-1L), long0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      int int0 = (-557);
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._INDEX, int0);
      assertNotNull(shardId0);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-557), shardId0.getId());
      assertEquals((-557), shardId0.id());
      
      String string0 = "&G+Lgtc!xh8";
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, docWriteResponse_Fields0._TYPE, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-557L), updateResponse0.version);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-557), shardId0.getId());
      assertEquals((-557), shardId0.id());
      assertEquals("_type", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("&G+Lgtc!xh8", updateResponse0.getId());
      assertEquals((-557L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeVInt(int0);
      assertEquals(5L, bytesStreamOutput0.position());
      assertEquals(5, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals((-557L), updateResponse0.version);
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals((-557), shardId0.getId());
      assertEquals((-557), shardId0.id());
      assertEquals("_type", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("&G+Lgtc!xh8", updateResponse0.getId());
      assertEquals((-557L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(49L, bytesStreamOutput0.position());
      assertEquals(49, bytesStreamOutput0.size());
      
      System.setCurrentTimeMillis(int0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "D.2*8J78Ne7R$3VL<r";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[4] = indexResponse0.type;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(6, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      
      String string1 = "W}[?q<fd";
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, stringArray0[2], string1, indexResponse0.version, indexResponse0.forcedRefresh);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(6, stringArray0.length);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("W}[?q<fd", updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(xContentBuilder1);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotSame(string1, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(6, stringArray0.length);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("W}[?q<fd", updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      
      XContentBuilder xContentBuilder2 = updateResponse0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(xContentBuilder2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotSame(string1, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertEquals(0L, indexResponse0.version);
      assertFalse(indexResponse0.forcedRefresh);
      assertEquals(0L, updateResponse0.version);
      assertFalse(updateResponse0.forcedRefresh);
      assertEquals(6, stringArray0.length);
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("D.2*8J78Ne7R$3VL<r", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("W}[?q<fd", updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(indexResponse0.type);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
