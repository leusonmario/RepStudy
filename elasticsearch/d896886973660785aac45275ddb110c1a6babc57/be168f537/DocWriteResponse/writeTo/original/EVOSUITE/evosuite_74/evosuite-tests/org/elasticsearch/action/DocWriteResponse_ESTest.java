/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 05:39:32 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.CoordinateSequence;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LinearRing;
import com.vividsolutions.jts.geom.MultiPoint;
import com.vividsolutions.jts.geom.Polygon;
import com.vividsolutions.jts.geom.PrecisionModel;
import com.vividsolutions.jts.geom.impl.CoordinateArraySequence;
import com.vividsolutions.jts.geom.impl.PackedCoordinateSequence;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.LongBuffer;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;
import org.elasticsearch.Build;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.Version;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.get.GetAction;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.main.MainResponse;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.geo.builders.EnvelopeBuilder;
import org.elasticsearch.common.geo.builders.GeometryCollectionBuilder;
import org.elasticsearch.common.geo.builders.MultiPolygonBuilder;
import org.elasticsearch.common.geo.builders.ShapeBuilder;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.unit.ByteSizeValue;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetField;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.mapper.FieldMapper;
import org.elasticsearch.index.mapper.MappedFieldType;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.bucket.filters.FiltersAggregator;
import org.elasticsearch.search.aggregations.metrics.geocentroid.GeoCentroidAggregationBuilder;
import org.elasticsearch.search.internal.ShardSearchTransportRequest;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.elasticsearch.transport.TransportRequestOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferFactory;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      boolean boolean0 = deleteResponse0.forcedRefresh();
      assertFalse(boolean0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      String string0 = "'request' mu#t no7 be null";
      int int0 = (-1396);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1396), shardId0.id());
      assertEquals((-1396), shardId0.getId());
      
      boolean boolean0 = true;
      indexResponse0.setForcedRefresh(boolean0);
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-1396), shardId0.id());
      assertEquals((-1396), shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("'request' mu#t no7 be null", updateResponse0.getId());
      assertEquals("'request' mu#t no7 be null", updateResponse0.getType());
      assertEquals((-1396L), updateResponse0.getVersion());
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals((-1396), shardId0.id());
      assertEquals((-1396), shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals("'request' mu#t no7 be null", updateResponse0.getId());
      assertEquals("'request' mu#t no7 be null", updateResponse0.getType());
      assertEquals((-1396L), updateResponse0.getVersion());
      assertEquals(121L, releasableBytesStreamOutput0.position());
      assertEquals(121, releasableBytesStreamOutput0.size());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertNull(shardId1);
      assertTrue(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      ShardSearchTransportRequest shardSearchTransportRequest0 = new ShardSearchTransportRequest();
      assertNotNull(shardSearchTransportRequest0);
      
      // Undeclared exception!
      try { 
        shardSearchTransportRequest0.shardId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.internal.ShardSearchTransportRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "=7P!jRRw+m(1D";
      int int0 = 1;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(1L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = string0;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) cborXContent0, stringArray0, boolean0);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      String string1 = indexResponse0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("IndexResponse[index==7P!jRRw+m(1D,type==7P!jRRw+m(1D,id==7P!jRRw+m(1D,version=1,created=true,shards=null]", string1);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(1L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string0 = deleteResponse0.getId();
      assertNull(string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      String string1 = deleteResponse0.getType();
      assertNull(string1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      int int0 = 573;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(573, shardId0.id());
      assertEquals(573, shardId0.getId());
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(573, shardId0.id());
      assertEquals(573, shardId0.getId());
      assertEquals(573L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      assertNotNull(shardId1);
      assertEquals(573, shardId0.id());
      assertEquals(573, shardId0.getId());
      assertEquals(573L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals("", updateResponse0.getType());
      assertEquals(573, shardId1.getId());
      assertEquals(573, shardId1.id());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      
      boolean boolean0 = false;
      updateResponse0.setForcedRefresh(boolean0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      boolean boolean0 = false;
      indexResponse0.setForcedRefresh(boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      boolean boolean0 = deleteResponse0.forcedRefresh();
      assertFalse(boolean0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(404, restStatus0.getStatus());
      
      RestStatus restStatus1 = deleteResponse0.status();
      assertSame(restStatus1, restStatus0);
      assertEquals(RestStatus.NOT_FOUND, restStatus1);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(404, restStatus1.getStatus());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      
      int int0 = 0;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, deleteResponse0.EMPTY);
      assertNotNull(replicationResponse_ShardInfo0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string0 = replicationResponse_ShardInfo0.toString();
      assertNotNull(string0);
      assertEquals("\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}", string0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      deleteResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      bytesStreamOutput0.writeFloat(int0);
      assertEquals(4, bytesStreamOutput0.size());
      assertEquals(4L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        bytesStreamOutput0.writeOptionalStreamable(deleteResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      boolean boolean0 = deleteResponse0.isFound();
      assertFalse(boolean0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      
      String string0 = deleteResponse0.getId();
      assertNull(string0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertNotNull(smileXContent0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      indexResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      TransportRequestOptions transportRequestOptions0 = indexAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertFalse(transportRequestOptions0.compress());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      int int0 = 719;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, deleteResponse0.EMPTY);
      assertNotNull(replicationResponse_ShardInfo0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(719, replicationResponse_ShardInfo0.getTotal());
      assertEquals(719, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      deleteResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(719, replicationResponse_ShardInfo0.getTotal());
      assertEquals(719, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertNull(shardId0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      XContentBuilder xContentBuilder0 = null;
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.DeleteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 654;
      int int1 = (-3401);
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[0];
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int1, replicationResponse_ShardInfo_FailureArray0);
      assertEquals(0, replicationResponse_ShardInfo_FailureArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(654, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-3401), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      String string0 = "q}@^.?Bz!lF";
      int int2 = (-1440);
      ShardId shardId0 = new ShardId(string0, string0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(shardId0);
      assertEquals((-1440), shardId0.id());
      assertEquals((-1440), shardId0.getId());
      
      String string1 = "_id";
      String string2 = "r8NJ#b+v-CTKY(Q>";
      long long0 = 32L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, string2, long0, boolean0);
      assertEquals(0, replicationResponse_ShardInfo_FailureArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals(654, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals((-3401), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-1440), shardId0.id());
      assertEquals((-1440), shardId0.getId());
      assertEquals("_id", updateResponse0.getType());
      assertEquals("r8NJ#b+v-CTKY(Q>", updateResponse0.getId());
      assertEquals(32L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(bytesStreamOutput0);
      assertNotNull(outputStreamStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      boolean boolean0 = false;
      deleteResponse0.setForcedRefresh(boolean0);
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStreamStreamOutput0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(dataOutputStream0);
      assertNotNull(dataOutputStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(dataOutputStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      
      String string0 = "";
      String string1 = "#)Dg@pK";
      int int0 = (-1396);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      
      long long0 = 256L;
      boolean boolean0 = false;
      indexResponse0.setForcedRefresh(boolean0);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string0, long0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(256L, updateResponse0.getVersion());
      assertEquals("#)Dg@pK", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(getResult0);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(256L, updateResponse0.getVersion());
      assertEquals("#)Dg@pK", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      boolean boolean2 = false;
      indexResponse0.setForcedRefresh(boolean2);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(settings0, noneCircuitBreakerService0);
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(31, releasableBytesStreamOutput0.size());
      assertEquals(31L, releasableBytesStreamOutput0.position());
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(256L, updateResponse0.getVersion());
      assertEquals("#)Dg@pK", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      boolean boolean3 = deleteResponse0.isFound();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      
      RestStatus restStatus0 = updateResponse0.status();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean3);
      assertEquals(RestStatus.OK, restStatus0);
      assertEquals(200, restStatus0.getStatus());
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(256L, updateResponse0.getVersion());
      assertEquals("#)Dg@pK", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.isCreated());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertNull(shardId1);
      assertFalse(indexResponse0.isCreated());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "_index";
      String string1 = "[j2Gk";
      long long0 = 1334L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexResponse0);
      assertTrue(indexResponse0.isCreated());
      assertEquals(1334L, indexResponse0.getVersion());
      assertEquals("[j2Gk", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("_index", indexResponse0.getType());
      
      boolean boolean1 = true;
      indexResponse0.setForcedRefresh(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(indexResponse0.isCreated());
      assertEquals(1334L, indexResponse0.getVersion());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals("[j2Gk", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", indexResponse0.getType());
      
      String string2 = indexResponse0.getType();
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("_index", string2);
      assertTrue(indexResponse0.isCreated());
      assertEquals(1334L, indexResponse0.getVersion());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals("[j2Gk", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", indexResponse0.getType());
      
      int int0 = 295;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertEquals(295, byteBuffer0.limit());
      assertEquals(295, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=295 cap=295]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(295, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertEquals(295, byteBuffer0.limit());
      assertEquals(295, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=295 cap=295]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(295, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(295, byteBuffer0.limit());
      assertEquals(295, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=295 cap=295]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(295, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      LocalTransportAddress localTransportAddress0 = new LocalTransportAddress(streamInput0);
      assertNotNull(localTransportAddress0);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertEquals(295, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=295 cap=295]", byteBuffer0.toString());
      assertEquals(295, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(294, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals("", localTransportAddress0.id());
      
      indexResponse0.remoteAddress((TransportAddress) localTransportAddress0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertTrue(indexResponse0.isCreated());
      assertEquals(1334L, indexResponse0.getVersion());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals("[j2Gk", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", indexResponse0.getType());
      assertEquals(295, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=295 cap=295]", byteBuffer0.toString());
      assertEquals(295, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(294, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals("", localTransportAddress0.id());
      
      String string3 = indexResponse0.getId();
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("[j2Gk", string3);
      assertTrue(indexResponse0.isCreated());
      assertEquals(1334L, indexResponse0.getVersion());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals("[j2Gk", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", indexResponse0.getType());
      
      String string4 = indexResponse0.getType();
      assertNotSame(string4, string1);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("_index", string4);
      assertTrue(indexResponse0.isCreated());
      assertEquals(1334L, indexResponse0.getVersion());
      assertTrue(indexResponse0.forcedRefresh());
      assertEquals("[j2Gk", indexResponse0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("_index", indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        indexResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "org.elasticsearch.action.DocWriteResponse$Fields";
      int int0 = 1390;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(1390, shardId0.id());
      assertEquals(1390, shardId0.getId());
      
      String string1 = "0CdV;d&f_SueQ2_>";
      String string2 = "";
      long long0 = 0L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string2, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(deleteResponse0);
      assertEquals(1390, shardId0.id());
      assertEquals(1390, shardId0.getId());
      assertEquals("0CdV;d&f_SueQ2_>", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      String string3 = deleteResponse0.getIndex();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.elasticsearch.action.DocWriteResponse$Fields", string3);
      assertEquals(1390, shardId0.id());
      assertEquals(1390, shardId0.getId());
      assertEquals("0CdV;d&f_SueQ2_>", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      String string4 = deleteResponse0.getType();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("0CdV;d&f_SueQ2_>", string4);
      assertEquals(1390, shardId0.id());
      assertEquals(1390, shardId0.getId());
      assertEquals("0CdV;d&f_SueQ2_>", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      String string5 = "u?K";
      String string6 = "_type";
      long long1 = 1541L;
      boolean boolean1 = false;
      ShardSearchTransportRequest shardSearchTransportRequest0 = new ShardSearchTransportRequest();
      assertNotNull(shardSearchTransportRequest0);
      
      // Undeclared exception!
      try { 
        shardSearchTransportRequest0.cacheKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.internal.ShardSearchTransportRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      
      byte[] byteArray0 = new byte[0];
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(bigEndianHeapChannelBuffer0);
      assertEquals(0, byteArray0.length);
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = true;
      updateResponse0.setForcedRefresh(boolean0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertTrue(updateResponse0.forcedRefresh());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(duplicatedChannelBuffer0);
      assertEquals(0, byteArray0.length);
      assertNotNull(channelBufferBytesReference0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertEquals(0, byteArray0.length);
      assertNotNull(streamInput0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      StreamInput streamInput1 = channelBufferBytesReference0.streamInput();
      assertEquals(0, byteArray0.length);
      assertNotSame(streamInput1, streamInput0);
      assertFalse(streamInput1.equals((Object)streamInput0));
      assertNotNull(streamInput1);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(streamInput1.markSupported());
      assertEquals(0, streamInput1.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(streamInput0);
      assertEquals(0, byteArray0.length);
      assertFalse(streamInput0.equals((Object)streamInput1));
      assertNotNull(inputStreamStreamInput0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(0, streamInput0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      try { 
        updateResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      
      FieldMapper.MultiFields fieldMapper_MultiFields0 = FieldMapper.MultiFields.empty();
      assertNotNull(fieldMapper_MultiFields0);
      
      GeometryCollectionBuilder geometryCollectionBuilder0 = new GeometryCollectionBuilder();
      assertNotNull(geometryCollectionBuilder0);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(0, geometryCollectionBuilder0.numShapes());
      assertEquals(ShapeBuilder.GeoShapeType.GEOMETRYCOLLECTION, geometryCollectionBuilder0.type());
      
      ShapeBuilder.Orientation shapeBuilder_Orientation0 = ShapeBuilder.Orientation.LEFT;
      MultiPolygonBuilder multiPolygonBuilder0 = new MultiPolygonBuilder(shapeBuilder_Orientation0);
      assertNotNull(multiPolygonBuilder0);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertEquals(ShapeBuilder.Orientation.LEFT, multiPolygonBuilder0.orientation());
      
      GeometryCollectionBuilder geometryCollectionBuilder1 = geometryCollectionBuilder0.multiPolygon(multiPolygonBuilder0);
      assertSame(geometryCollectionBuilder0, geometryCollectionBuilder1);
      assertSame(geometryCollectionBuilder1, geometryCollectionBuilder0);
      assertNotNull(geometryCollectionBuilder1);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(1, geometryCollectionBuilder0.numShapes());
      assertEquals(ShapeBuilder.GeoShapeType.GEOMETRYCOLLECTION, geometryCollectionBuilder0.type());
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertEquals(ShapeBuilder.Orientation.LEFT, multiPolygonBuilder0.orientation());
      assertEquals(1, geometryCollectionBuilder1.numShapes());
      assertEquals(ShapeBuilder.GeoShapeType.GEOMETRYCOLLECTION, geometryCollectionBuilder1.type());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = multiPolygonBuilder0.FIELD_COORDINATES;
      stringArray0[1] = geometryCollectionBuilder1.FIELD_TYPE;
      stringArray0[2] = geometryCollectionBuilder1.FIELD_TYPE;
      stringArray0[3] = geometryCollectionBuilder0.FIELD_ORIENTATION;
      stringArray0[4] = geometryCollectionBuilder0.FIELD_COORDINATES;
      boolean boolean0 = false;
      deleteResponse0.setForcedRefresh(boolean0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      
      boolean boolean1 = false;
      HashMap<String, MappedFieldType> hashMap0 = new HashMap<String, MappedFieldType>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      FieldMapper.MultiFields fieldMapper_MultiFields1 = fieldMapper_MultiFields0.updateFieldType(hashMap0);
      assertSame(fieldMapper_MultiFields1, fieldMapper_MultiFields0);
      assertSame(fieldMapper_MultiFields0, fieldMapper_MultiFields1);
      assertNotNull(fieldMapper_MultiFields1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0, boolean1);
      assertEquals(5, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = geometryCollectionBuilder1.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(5, stringArray0.length);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(geometryCollectionBuilder0, geometryCollectionBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(geometryCollectionBuilder1, geometryCollectionBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1, geometryCollectionBuilder0.numShapes());
      assertEquals(ShapeBuilder.GeoShapeType.GEOMETRYCOLLECTION, geometryCollectionBuilder0.type());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertEquals(ShapeBuilder.Orientation.LEFT, multiPolygonBuilder0.orientation());
      assertEquals(1, geometryCollectionBuilder1.numShapes());
      assertEquals(ShapeBuilder.GeoShapeType.GEOMETRYCOLLECTION, geometryCollectionBuilder1.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      
      XContentBuilder xContentBuilder2 = fieldMapper_MultiFields0.toXContent(xContentBuilder1, toXContent_Params0);
      assertEquals(5, stringArray0.length);
      assertSame(fieldMapper_MultiFields0, fieldMapper_MultiFields1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(geometryCollectionBuilder0, geometryCollectionBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(geometryCollectionBuilder1, geometryCollectionBuilder0);
      assertNotNull(xContentBuilder2);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertEquals(180.0, ShapeBuilder.DATELINE, 0.01);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(1, geometryCollectionBuilder0.numShapes());
      assertEquals(ShapeBuilder.GeoShapeType.GEOMETRYCOLLECTION, geometryCollectionBuilder0.type());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(ShapeBuilder.GeoShapeType.MULTIPOLYGON, multiPolygonBuilder0.type());
      assertEquals(ShapeBuilder.Orientation.LEFT, multiPolygonBuilder0.orientation());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(1, geometryCollectionBuilder1.numShapes());
      assertEquals(ShapeBuilder.GeoShapeType.GEOMETRYCOLLECTION, geometryCollectionBuilder1.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder2, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      byte[] byteArray0 = null;
      String string0 = "org.elasticsearch.action.DocWriteResponse";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string0, string0);
      assertNotNull(deleteRequest0);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      
      DeleteRequest deleteRequest1 = deleteRequest0.parent(string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(shardId0);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      
      String string1 = "";
      String string2 = "org.elasticsearch.search.aggregations.bucket.filter.FilterAggregatorFactory";
      long long0 = (-1714L);
      boolean boolean1 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, long0, boolean1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertNotNull(indexResponse0);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("", indexResponse0.getType());
      assertEquals((-1714L), indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.search.aggregations.bucket.filter.FilterAggregatorFactory", indexResponse0.getId());
      
      long long1 = indexResponse0.getVersion();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertEquals((-1714L), long1);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest0.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.id());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.parent());
      assertEquals("org.elasticsearch.action.DocWriteResponse", deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("", indexResponse0.getType());
      assertEquals((-1714L), indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("org.elasticsearch.search.aggregations.bucket.filter.FilterAggregatorFactory", indexResponse0.getId());
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = (-1154);
      int int1 = (-827);
      XContentLocation xContentLocation0 = new XContentLocation(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(xContentLocation0);
      assertEquals((-1154), xContentLocation0.lineNumber);
      assertEquals((-827), xContentLocation0.columnNumber);
      
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      objectArray0[1] = (Object) string0;
      ParsingException parsingException0 = new ParsingException(xContentLocation0, string0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(parsingException0);
      assertEquals((-1154), xContentLocation0.lineNumber);
      assertEquals((-827), xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      
      ElasticsearchException[] elasticsearchExceptionArray0 = parsingException0.guessRootCauses();
      assertEquals(2, objectArray0.length);
      assertEquals(1, elasticsearchExceptionArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(elasticsearchExceptionArray0);
      assertEquals((-1154), xContentLocation0.lineNumber);
      assertEquals((-827), xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-827), parsingException0.getColumnNumber());
      assertEquals((-1154), parsingException0.getLineNumber());
      
      ShardId shardId0 = parsingException0.getShardId();
      assertEquals(2, objectArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(shardId0);
      assertEquals((-1154), xContentLocation0.lineNumber);
      assertEquals((-827), xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-827), parsingException0.getColumnNumber());
      assertEquals((-1154), parsingException0.getLineNumber());
      
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, int1, parsingException0.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(2, objectArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(deleteResponse0);
      assertEquals((-1154), xContentLocation0.lineNumber);
      assertEquals((-827), xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertTrue(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals((-827L), deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-827), parsingException0.getColumnNumber());
      assertEquals((-1154), parsingException0.getLineNumber());
      
      String string1 = deleteResponse0.getType();
      assertEquals(2, objectArray0.length);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals((-1154), xContentLocation0.lineNumber);
      assertEquals((-827), xContentLocation0.columnNumber);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertTrue(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals((-827L), deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals((-827), parsingException0.getColumnNumber());
      assertEquals((-1154), parsingException0.getLineNumber());
      
      System.setCurrentTimeMillis(xContentLocation0.columnNumber);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1154), xContentLocation0.lineNumber);
      assertEquals((-827), xContentLocation0.columnNumber);
      
      // Undeclared exception!
      try { 
        deleteResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      boolean boolean0 = deleteResponse0.forcedRefresh();
      assertFalse(boolean0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus0.getStatus());
      
      RestStatus restStatus1 = deleteResponse0.status();
      assertSame(restStatus1, restStatus0);
      assertEquals(RestStatus.NOT_FOUND, restStatus1);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus1.getStatus());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      
      int int0 = 0;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, deleteResponse0.EMPTY);
      assertNotNull(replicationResponse_ShardInfo0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string0 = DocWriteResponse.Fields._ID;
      assertNotNull(string0);
      assertEquals("_id", string0);
      
      deleteResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(settings1);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings1, noneCircuitBreakerService0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(mockBigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = mockBigArrays0.withCircuitBreaking();
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      long long1 = 0L;
      ByteArray byteArray0 = mockBigArrays0.newByteArray(long1, boolean0);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertTrue(long1 == long0);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(byteArray0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, byteArray0.size());
      
      ByteArray byteArray1 = mockBigArrays0.grow(byteArray0, (long) bigArrays0.LONG_PAGE_SIZE);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertTrue(long1 == long0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(byteArray1);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, byteArray0.size());
      assertEquals(2304L, byteArray1.size());
      
      ReleasablePagedBytesReference releasablePagedBytesReference0 = new ReleasablePagedBytesReference(bigArrays0, byteArray1, bigArrays0.OBJECT_PAGE_SIZE);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertTrue(long1 == long0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(releasablePagedBytesReference0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, byteArray0.size());
      assertEquals(2304L, byteArray1.size());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(2048, releasablePagedBytesReference0.length());
      
      StreamInput streamInput0 = releasablePagedBytesReference0.streamInput();
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertTrue(long1 == long0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertNotNull(streamInput0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, byteArray0.size());
      assertEquals(2304L, byteArray1.size());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(2048, releasablePagedBytesReference0.length());
      
      deleteResponse0.readFrom(streamInput0);
      assertNotSame(mockBigArrays0, bigArrays0);
      assertNotSame(bigArrays0, mockBigArrays0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertFalse(mockBigArrays0.equals((Object)bigArrays0));
      assertFalse(bigArrays0.equals((Object)mockBigArrays0));
      assertTrue(long1 == long0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, byteArray0.size());
      assertEquals(2304L, byteArray1.size());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(2048, releasablePagedBytesReference0.length());
      
      stringArray0[1] = string0;
      stringArray0[2] = indexAction0.NAME;
      stringArray0[3] = indexAction0.NAME;
      bytesStreamOutput0.writeStringArray(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(59L, bytesStreamOutput0.position());
      assertEquals(59, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeFloat(int0);
      assertEquals(63L, bytesStreamOutput0.position());
      assertEquals(63, bytesStreamOutput0.size());
      
      bytesStreamOutput0.writeOptionalStreamable(deleteResponse0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(75L, bytesStreamOutput0.position());
      assertEquals(75, bytesStreamOutput0.size());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      boolean boolean0 = true;
      deleteResponse0.setForcedRefresh(boolean0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertTrue(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      boolean boolean1 = deleteResponse0.forcedRefresh();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertTrue(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertTrue(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      long long1 = deleteResponse0.getVersion();
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertTrue(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      boolean boolean1 = false;
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertNotSame(indexResponse1, indexResponse0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNotNull(indexResponse1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      
      String string1 = indexResponse1.getId();
      assertNotSame(indexResponse1, indexResponse0);
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertNull(string1);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse1.getVersion());
      assertFalse(indexResponse1.forcedRefresh());
      assertNull(indexResponse1.getId());
      assertNull(indexResponse1.getType());
      assertFalse(indexResponse1.isCreated());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-45);
      byteArray0[0] = byte0;
      byte byte1 = (byte)36;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-65);
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)35;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-87);
      byteArray0[5] = byte5;
      byte byte6 = (byte)81;
      byteArray0[6] = byte6;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byteArray0[2], (int) byteArray0[3]);
      assertEquals(7, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)36, (byte) (-65), (byte)1, (byte)35, (byte) (-87), (byte)81}, byteArray0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(streamInput0);
      assertEquals(7, byteArray0.length);
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertNotNull(inputStreamStreamInput0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)36, (byte) (-65), (byte)1, (byte)35, (byte) (-87), (byte)81}, byteArray0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "=7P!jRRw+m(1D";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      
      String string1 = "meF[zon";
      String string2 = "ZF~5:;M*";
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(indexResponse0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals("meF[zon", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("ZF~5:;M*", indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      XContentType xContentType0 = XContentType.CBOR;
      XContent xContent0 = xContentType0.xContent();
      assertNotNull(xContent0);
      assertEquals(XContentType.CBOR, xContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string2;
      stringArray0[4] = string2;
      stringArray0[5] = string2;
      boolean boolean1 = false;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder(xContent0, stringArray0, boolean1);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertEquals(XContentType.CBOR, xContent0.type());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      String string0 = "'request' must not be null";
      String string1 = "#)Dg@pK";
      int int0 = (-1396);
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      
      boolean boolean0 = false;
      indexResponse0.setForcedRefresh(boolean0);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string0, int0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      assertEquals((-1396L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("#)Dg@pK", updateResponse0.getType());
      assertEquals("'request' must not be null", updateResponse0.getId());
      
      boolean boolean2 = true;
      String string2 = shardId0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("['request' must not be null][-1396]", string2);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(settings0, noneCircuitBreakerService0);
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(bigArrays0);
      assertNotNull(releasableBytesStreamOutput0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(0L, releasableBytesStreamOutput0.position());
      assertEquals(0, releasableBytesStreamOutput0.size());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean1 == boolean2);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      assertEquals((-1396L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("#)Dg@pK", updateResponse0.getType());
      assertEquals("'request' must not be null", updateResponse0.getId());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(83, releasableBytesStreamOutput0.size());
      assertEquals(83L, releasableBytesStreamOutput0.position());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertNull(shardId1);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      updateResponse0.writeTo(releasableBytesStreamOutput0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean1 == boolean2);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals((-1396), shardId0.getId());
      assertEquals((-1396), shardId0.id());
      assertEquals((-1396L), updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("#)Dg@pK", updateResponse0.getType());
      assertEquals("'request' must not be null", updateResponse0.getId());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(166L, releasableBytesStreamOutput0.position());
      assertEquals(166, releasableBytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNull(shardId0);
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      
      String string0 = "";
      long long0 = (-1230L);
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals((-1230L), updateResponse0.getVersion());
      
      String string1 = updateResponse0.getId();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      assertEquals("", updateResponse0.getId());
      assertEquals((-1230L), updateResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "org.joda.time.DateTimeUtils$SystemMillisProvider";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      
      String string1 = "meF[zon";
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string1, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(indexResponse0);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals((-1L), indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("meF[zon", indexResponse0.getId());
      assertEquals("meF[zon", indexResponse0.getType());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      boolean boolean1 = deleteResponse0.isFound();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertNotSame(string0, string1);
      assertSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertSame(shardId1, shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertNotNull(shardId1);
      assertEquals((-1), shardId0.getId());
      assertEquals((-1), shardId0.id());
      assertEquals((-1L), indexResponse0.getVersion());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals("meF[zon", indexResponse0.getId());
      assertEquals("meF[zon", indexResponse0.getType());
      assertEquals((-1), shardId1.id());
      assertEquals((-1), shardId1.getId());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      
      String string2 = null;
      String string3 = "org.elasticsearch.action.DocWriteResponse";
      GetAction getAction0 = GetAction.INSTANCE;
      assertNotNull(getAction0);
      assertEquals("indices:data/read/get", getAction0.name());
      
      GetResponse getResponse0 = getAction0.newResponse();
      assertNotNull(getResponse0);
      assertEquals("indices:data/read/get", getAction0.name());
      
      // Undeclared exception!
      try { 
        getResponse0.getSourceAsBytesRef();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.get.GetResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      boolean boolean0 = deleteResponse0.forcedRefresh();
      assertFalse(boolean0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      long long0 = deleteResponse0.getVersion();
      assertEquals(0L, long0);
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      assertTrue(long1 == long0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int0 = 1;
      ChannelBufferFactory channelBufferFactory0 = DirectChannelBufferFactory.getInstance(byteOrder0);
      assertNotNull(channelBufferFactory0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int0, channelBufferFactory0);
      assertNotNull(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(1, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      
      ChannelBuffer channelBuffer0 = dynamicChannelBuffer0.duplicate();
      assertNotNull(channelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(1, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.readable());
      assertEquals(1, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(1, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.readable());
      assertEquals(1, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(1, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.readable());
      assertEquals(1, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertEquals(0, channelBufferBytesReference0.length());
      assertEquals(0, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      int int0 = 3398;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(3398, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(3398, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(3398, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      assertNotNull(longBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(3398, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(424, longBuffer0.remaining());
      assertEquals(424, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.hasArray());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals("java.nio.DirectLongBufferS[pos=0 lim=424 cap=424]", longBuffer0.toString());
      assertEquals(424, longBuffer0.limit());
      assertTrue(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasRemaining());
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(3398, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      updateResponse0.readFrom(namedWriteableAwareStreamInput0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.position());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(3398, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3386, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=12 lim=3398 cap=3398]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      long long0 = updateResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      Coordinate[] coordinateArray0 = new Coordinate[9];
      Coordinate coordinate0 = new Coordinate(long0, int0);
      assertNotNull(coordinate0);
      assertEquals(3398.0, coordinate0.y, 0.01);
      assertEquals(Double.NaN, coordinate0.z, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(0.0, coordinate0.x, 0.01);
      assertEquals(2, Coordinate.Z);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      coordinateArray0[0] = coordinate0;
      PrecisionModel precisionModel0 = new PrecisionModel();
      assertNotNull(precisionModel0);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertTrue(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(16, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getScale(), 0.01);
      
      PrecisionModel precisionModel1 = new PrecisionModel(precisionModel0);
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertNotNull(precisionModel1);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertTrue(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(16, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getScale(), 0.01);
      assertEquals(16, precisionModel1.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel1.getScale(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertTrue(precisionModel1.isFloating());
      
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel1);
      assertTrue(precisionModel0.equals((Object)precisionModel1));
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertNotNull(geometryFactory0);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(0, geometryFactory0.getSRID());
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertTrue(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(16, precisionModel0.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel0.getScale(), 0.01);
      assertEquals(16, precisionModel1.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel1.getScale(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertTrue(precisionModel1.isFloating());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) coordinate0.X;
      floatArray0[1] = (float) long0;
      floatArray0[2] = (float) coordinate0.X;
      PackedCoordinateSequence.Float packedCoordinateSequence_Float0 = null;
      try {
        packedCoordinateSequence_Float0 = new PackedCoordinateSequence.Float(floatArray0, coordinate0.Z);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Packed array does not contain an integral number of coordinates
         //
         verifyException("com.vividsolutions.jts.geom.impl.PackedCoordinateSequence$Float", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "=7P!jRRw+m(1D";
      int int0 = 1;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      
      String string1 = "meF[zon";
      String string2 = "ZF~5:;M*";
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(indexResponse0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertEquals("meF[zon", indexResponse0.getType());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals(1L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      assertEquals("ZF~5:;M*", indexResponse0.getId());
      
      XContentType xContentType0 = XContentType.CBOR;
      XContent xContent0 = xContentType0.xContent();
      assertNotNull(xContent0);
      assertEquals(XContentType.CBOR, xContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      stringArray0[3] = string2;
      stringArray0[4] = string2;
      stringArray0[5] = string2;
      boolean boolean1 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder(xContent0, stringArray0, boolean1);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, xContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "=7P!jRRw+m(1D";
      int int0 = 1;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals(1L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      
      XContentType xContentType0 = XContentType.CBOR;
      XContent xContent0 = xContentType0.xContent();
      assertNotNull(xContent0);
      assertEquals(XContentType.CBOR, xContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[3] = string0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[0] = string0;
      boolean boolean1 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder(xContent0, stringArray0, boolean1);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, xContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      
      String string1 = "e5_g3LYy:<Ci[~6i.";
      boolean boolean2 = false;
      long long0 = indexResponse0.getVersion();
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean2);
      assertEquals(1L, long0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals(1L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      
      boolean boolean3 = indexResponse0.isCreated();
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals(1L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      
      // Undeclared exception!
      try { 
        toXContent_DelegatingMapParams0.paramAsBoolean(string1, boolean2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.test.rest.FakeRestRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "mult";
      String string1 = "53(7g5Fx{xZ8";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      
      String string2 = null;
      DeleteRequest deleteRequest1 = deleteRequest0.routing(string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deleteRequest1);
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      
      String string3 = "";
      DeleteRequest deleteRequest2 = deleteRequest1.parent(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(deleteRequest2);
      assertEquals("", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("", deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("mult", deleteRequest2.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.type());
      
      ShardId shardId0 = deleteRequest2.shardId();
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNull(shardId0);
      assertEquals("", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("", deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("mult", deleteRequest2.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.type());
      
      String string4 = "fQUGBB~^Og";
      long long0 = 1L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string3, string4, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(updateResponse0);
      assertEquals("", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("", deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("mult", deleteRequest2.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.type());
      assertEquals("fQUGBB~^Og", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.forcedRefresh());
      
      DeleteRequest deleteRequest3 = deleteRequest0.setShardId(shardId0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(deleteRequest3);
      assertEquals("", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("", deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("mult", deleteRequest2.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.type());
      assertEquals("53(7g5Fx{xZ8", deleteRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals("", deleteRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest3.getRefreshPolicy());
      assertEquals((-3L), deleteRequest3.version());
      assertEquals("53(7g5Fx{xZ8", deleteRequest3.id());
      assertNull(deleteRequest3.routing());
      assertEquals("mult", deleteRequest3.index());
      assertFalse(deleteRequest3.getShouldPersistResult());
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      BigArrays bigArrays0 = new BigArrays(settings0, noneCircuitBreakerService0);
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      String string5 = deleteRequest1.toString();
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("delete {[mult][53(7g5Fx{xZ8][53(7g5Fx{xZ8]}", string5);
      assertEquals("", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      
      long long1 = 326L;
      ByteArray byteArray0 = bigArrays0.newByteArray(long1);
      assertFalse(long1 == long0);
      assertNotNull(byteArray0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(326L, byteArray0.size());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ReleasablePagedBytesReference releasablePagedBytesReference0 = new ReleasablePagedBytesReference(bigArrays0, byteArray0, bigArrays0.BYTE_PAGE_SIZE);
      assertFalse(long1 == long0);
      assertNotNull(releasablePagedBytesReference0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(326L, byteArray0.size());
      assertEquals(16384, releasablePagedBytesReference0.length());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      InputStreamStreamInput inputStreamStreamInput0 = (InputStreamStreamInput)StreamInput.wrap((BytesReference) releasablePagedBytesReference0);
      assertFalse(long1 == long0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(326L, byteArray0.size());
      assertEquals(16384, releasablePagedBytesReference0.length());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      updateResponse0.readFrom(inputStreamStreamInput0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(326L, byteArray0.size());
      assertEquals("", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals(16384, releasablePagedBytesReference0.length());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("", deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("mult", deleteRequest2.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.type());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      Set<String> set0 = settings0.names();
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(long0 == long1);
      assertNotNull(shardId1);
      assertEquals("", deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("mult", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest0.id());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.type());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("", deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest1.getRefreshPolicy());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("mult", deleteRequest1.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, deleteRequest2.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("", deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.routing());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("mult", deleteRequest2.index());
      assertEquals("53(7g5Fx{xZ8", deleteRequest2.type());
      assertEquals(0, shardId1.getId());
      assertEquals(0, shardId1.id());
      assertFalse(updateResponse0.isCreated());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.forcedRefresh());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.forcedRefresh());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(mockFileInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertFalse(fileDescriptor0.valid());
      
      InputStreamStreamInput inputStreamStreamInput1 = null;
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "=7P!jRRw+m(1D";
      int int0 = 1;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      assertEquals(1L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      
      XContentType xContentType0 = XContentType.CBOR;
      XContent xContent0 = xContentType0.xContent();
      assertNotNull(xContent0);
      assertEquals(XContentType.CBOR, xContent0.type());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[3] = string0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder(xContent0, stringArray0, boolean0);
      assertEquals(6, stringArray0.length);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.CBOR, xContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Map<String, String> map0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)17;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string1 = "FT,S0'";
      boolean boolean2 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, stringArray0[0], string1, int0, boolean2);
      assertEquals(6, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertNotNull(updateResponse0);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("=7P!jRRw+m(1D", updateResponse0.getType());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("FT,S0'", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0, map0);
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertEquals(6, stringArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertNotNull(xContentBuilder1);
      assertEquals(1, shardId0.id());
      assertEquals(1, shardId0.getId());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("=7P!jRRw+m(1D", updateResponse0.getType());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("FT,S0'", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(XContentType.CBOR, xContent0.type());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byteArray0[0], (int) byte1);
      assertEquals(2, byteArray0.length);
      assertFalse(byte1 == byte0);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0}, byteArray0);
      
      InetSocketTransportAddress inetSocketTransportAddress0 = null;
      try {
        inetSocketTransportAddress0 = new InetSocketTransportAddress(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "=7P!jRRw+m(1D";
      int int0 = 1;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals(1L, indexResponse0.getVersion());
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = string0;
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      
      String string1 = indexResponse0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("IndexResponse[index==7P!jRRw+m(1D,type==7P!jRRw+m(1D,id==7P!jRRw+m(1D,version=1,created=true,shards=null]", string1);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertFalse(indexResponse0.forcedRefresh());
      assertTrue(indexResponse0.isCreated());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      assertEquals(1L, indexResponse0.getVersion());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(hashtable0, hashtable0);
      assertNotNull(fakeRestRequest0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      
      try { 
        indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = "";
      String string1 = "zWsc/wAdi%4DoKT7%";
      int int0 = 4352;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(shardId0);
      assertEquals(4352, shardId0.getId());
      assertEquals(4352, shardId0.id());
      
      String string2 = "y0=45fKW1K-@i$~'%:m";
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(updateResponse0);
      assertEquals(4352, shardId0.getId());
      assertEquals(4352, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(4352L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("y0=45fKW1K-@i$~'%:m", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
      
      String string3 = updateResponse0.getIndex();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(4352, shardId0.getId());
      assertEquals(4352, shardId0.id());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(4352L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("y0=45fKW1K-@i$~'%:m", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getType());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      
      int int0 = 3398;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3398, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3398, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = byteBufferBytesReference0.streamInput();
      assertNotNull(streamInput0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3398, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      assertNotNull(longBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3398, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(424, longBuffer0.remaining());
      assertEquals(424, longBuffer0.capacity());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertEquals(424, longBuffer0.limit());
      assertTrue(longBuffer0.isDirect());
      assertFalse(longBuffer0.hasArray());
      assertEquals("java.nio.DirectLongBufferS[pos=0 lim=424 cap=424]", longBuffer0.toString());
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertNotNull(namedWriteableAwareStreamInput0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3398, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3398, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      updateResponse0.readFrom(namedWriteableAwareStreamInput0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=12 lim=3398 cap=3398]", byteBuffer0.toString());
      assertEquals(3386, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(3398, byteBuffer0.limit());
      assertEquals(3398, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertTrue(streamInput0.markSupported());
      
      long long0 = updateResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      Coordinate[] coordinateArray0 = new Coordinate[9];
      Coordinate coordinate0 = new Coordinate(long0, int0);
      assertNotNull(coordinate0);
      assertEquals(3398.0, coordinate0.y, 0.01);
      assertEquals(Double.NaN, coordinate0.z, 0.01);
      assertEquals(Double.NaN, Coordinate.NULL_ORDINATE, 0.01);
      assertEquals(1, Coordinate.Y);
      assertEquals(0, Coordinate.X);
      assertEquals(0.0, coordinate0.x, 0.01);
      assertEquals(2, Coordinate.Z);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      coordinateArray0[0] = coordinate0;
      PrecisionModel precisionModel0 = new PrecisionModel();
      assertNotNull(precisionModel0);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertTrue(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertEquals(0.0, precisionModel0.getScale(), 0.01);
      assertEquals(16, precisionModel0.getMaximumSignificantDigits());
      
      PrecisionModel precisionModel1 = new PrecisionModel(precisionModel0);
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertNotNull(precisionModel1);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertTrue(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertEquals(0.0, precisionModel0.getScale(), 0.01);
      assertEquals(16, precisionModel0.getMaximumSignificantDigits());
      assertEquals(16, precisionModel1.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertTrue(precisionModel1.isFloating());
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getScale(), 0.01);
      
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel1);
      assertTrue(precisionModel0.equals((Object)precisionModel1));
      assertTrue(precisionModel1.equals((Object)precisionModel0));
      assertNotNull(geometryFactory0);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(9.007199254740992E15, PrecisionModel.maximumPreciseValue, 0.01);
      assertEquals(0, geometryFactory0.getSRID());
      assertTrue(precisionModel0.isFloating());
      assertEquals(0.0, precisionModel0.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel0.getOffsetY(), 0.01);
      assertEquals(0.0, precisionModel0.getScale(), 0.01);
      assertEquals(16, precisionModel0.getMaximumSignificantDigits());
      assertEquals(16, precisionModel1.getMaximumSignificantDigits());
      assertEquals(0.0, precisionModel1.getOffsetY(), 0.01);
      assertTrue(precisionModel1.isFloating());
      assertEquals(0.0, precisionModel1.getOffsetX(), 0.01);
      assertEquals(0.0, precisionModel1.getScale(), 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) coordinate0.X;
      floatArray0[1] = (float) long0;
      floatArray0[2] = (float) int0;
      PackedCoordinateSequence.Float packedCoordinateSequence_Float0 = null;
      try {
        packedCoordinateSequence_Float0 = new PackedCoordinateSequence.Float(floatArray0, coordinate0.Z);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Packed array does not contain an integral number of coordinates
         //
         verifyException("com.vividsolutions.jts.geom.impl.PackedCoordinateSequence$Float", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "=7P!jRRw+m(1D";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = 1;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      
      boolean boolean1 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotNull(indexResponse0);
      assertEquals(1, shardId0.getId());
      assertEquals(1, shardId0.id());
      assertFalse(indexResponse0.forcedRefresh());
      assertFalse(indexResponse0.isCreated());
      assertEquals(1L, indexResponse0.getVersion());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getType());
      assertEquals("=7P!jRRw+m(1D", indexResponse0.getId());
      
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertNotNull(cborXContent0);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = string0;
      XContentBuilder xContentBuilder0 = YamlXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      Map<String, String> map0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, fakeRestRequest0);
      assertNotNull(toXContent_DelegatingMapParams0);
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      
      long long0 = (-2694L);
      System.setCurrentTimeMillis(long0);
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value==7P!jRRw+m(1D)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }
}
