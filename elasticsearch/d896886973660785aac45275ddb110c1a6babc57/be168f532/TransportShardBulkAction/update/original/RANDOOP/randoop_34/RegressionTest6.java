import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.elasticsearch.transport.TransportService transportService28 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService29 = null;
        org.elasticsearch.indices.IndicesService indicesService30 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool31 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction32 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction33 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper34 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters35 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction37 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings27, transportService28, clusterService29, indicesService30, threadPool31, shardStateAction32, mappingUpdatedAction33, updateHelper34, actionFilters35, indexNameExpressionResolver36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params8 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = indexMetaData0.toXContent(xContentBuilder7, params8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(params8);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        bulkShardRequest15.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest15.consistencyLevel();
        org.elasticsearch.index.shard.ShardId shardId20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.setShardId(shardId20);
        org.elasticsearch.common.unit.TimeValue timeValue22 = bulkShardRequest21.timeout();
        org.elasticsearch.common.io.stream.StreamInput streamInput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest21.readFrom(streamInput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(timeValue22);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        bulkShardRequest1.primaryTerm((-1L));
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest6 = new org.elasticsearch.action.bulk.BulkItemRequest(100, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest6.readFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        int int25 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser27 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = indexMetaData0.fromXContent(xContentParser27, parseFieldMatcher28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        org.apache.lucene.util.Version version6 = indexMetaData4.getMinimumCompatibleVersion();
        long long7 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.Version version10 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData12.excludeFilters();
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData12.getActiveAllocationIds();
        long long17 = indexMetaData12.getCreationDate();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData12.getSettings();
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings18);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("current version [-1] is different than the one provided [100]", custom13);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder11.putAlias(builder15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        long long11 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.blocks.write");
        java.lang.String str8 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putCustom("state-", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        long long20 = indexMetaData18.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData18.getState();
        boolean boolean23 = indexMetaData18.isSameUUID("index.");
        org.elasticsearch.Version version24 = indexMetaData18.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings25 = indexMetaData18.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder17.settings(settings25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder5.settings(settings27);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest32.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException37 = bulkShardRequest32.validate();
        org.elasticsearch.common.unit.TimeValue timeValue38 = bulkShardRequest32.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest32.remoteAddress(transportAddress39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress42 = null;
        bulkShardRequest41.remoteAddress(transportAddress42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest41.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue46 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest45.timeout(timeValue46);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str49 = bulkShardRequest48.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy50 = bulkShardRequest48.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = bulkShardRequest48.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest45.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress54 = null;
        bulkShardRequest53.remoteAddress(transportAddress54);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest53.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue58 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest57.timeout(timeValue58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str61 = bulkShardRequest60.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy62 = bulkShardRequest60.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel63 = bulkShardRequest60.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest57.consistencyLevel(writeConsistencyLevel63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest45.consistencyLevel(writeConsistencyLevel63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str68 = bulkShardRequest67.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy69 = bulkShardRequest67.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel70 = bulkShardRequest67.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel70);
        boolean boolean72 = bulkShardRequest71.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params73 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress75 = null;
        bulkShardRequest74.remoteAddress(transportAddress75);
        org.elasticsearch.action.support.IndicesOptions indicesOptions77 = bulkShardRequest74.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException78 = bulkShardRequest74.validate();
        java.lang.String str79 = bulkShardRequest74.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress80 = bulkShardRequest74.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException81 = bulkShardRequest74.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple82 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params73, (java.lang.IllegalArgumentException) actionRequestValidationException81);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple83 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest71, params73);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder84 = settings27.toXContent(xContentBuilder31, params73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.blocks.write" + "'", str8, "index.blocks.write");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(actionRequestValidationException37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + refreshPolicy50 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy50.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel51 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel51.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + refreshPolicy62 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy62.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel63 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel63.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + refreshPolicy69 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy69.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel70 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel70.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(params73);
        org.junit.Assert.assertNotNull(indicesOptions77);
        org.junit.Assert.assertNotNull(actionRequestValidationException78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(transportAddress80);
        org.junit.Assert.assertNotNull(actionRequestValidationException81);
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType5 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        java.lang.String str10 = versionType5.explainConflictForWrites((long) 0, (long) 35, true);
        byte byte11 = versionType5.getValue();
        long long14 = versionType5.updateVersion((long) (-1), 35L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [0] is higher or equal to the one provided [35]" + "'", str10, "current version [0] is higher or equal to the one provided [35]");
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 1 + "'", byte11 == (byte) 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [active_allocations]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder2.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder2.mapping("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(mappingMetaData5);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        int int13 = indexMetaData8.getTotalNumberOfShards();
        int int14 = indexMetaData8.getNumberOfReplicas();
        int int15 = indexMetaData8.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData8.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest4.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        bulkShardRequest9.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest15.validate();
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest15.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest9.timeout(timeValue20);
        org.elasticsearch.common.unit.TimeValue timeValue22 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest23 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        org.elasticsearch.common.unit.TimeValue timeValue24 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest4.timeout(timeValue24);
        org.elasticsearch.index.shard.ShardId shardId26 = bulkShardRequest25.shardId();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest25.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(shardId26);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData9.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData9.getActiveAllocationIds();
        int int27 = indexMetaData9.getRoutingNumShards();
        org.elasticsearch.Version version28 = indexMetaData9.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap29 = indexMetaData9.getAliases();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData9, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.number_of_replicas");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        java.lang.Comparable<java.lang.String> strComparable4 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData5.getCustoms();
        int int11 = indexMetaData5.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        long long15 = indexMetaData12.getVersion();
        int int16 = indexMetaData12.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        org.apache.lucene.util.Version version19 = indexMetaData17.getMinimumCompatibleVersion();
        boolean boolean21 = indexMetaData17.isSameUUID("index.blocks.read");
        boolean boolean23 = indexMetaData17.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData12.diff(indexMetaData17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData12.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff30 = indexMetaData5.diff(indexMetaData12);
        boolean boolean31 = clusterBlockTuple2.equals((java.lang.Object) indexMetaDataDiff30);
        java.lang.Comparable<java.lang.String> strComparable32 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getCreationDate();
        long long35 = indexMetaData33.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = indexMetaData33.getState();
        boolean boolean38 = indexMetaData33.isSameUUID("index.");
        java.util.Set<java.lang.String> strSet40 = null; // flaky: indexMetaData33.activeAllocationIds(100);
        int int41 = indexMetaData33.getRoutingNumShards();
        org.elasticsearch.Version version42 = indexMetaData33.getCreationVersion();
        boolean boolean43 = clusterBlockTuple2.equals((java.lang.Object) indexMetaData33);
        java.lang.Comparable<java.lang.String> strComparable44 = clusterBlockTuple2.v2();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertEquals("'" + strComparable4 + "' != '" + "index.version.created" + "'", strComparable4, "index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaDataDiff30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + strComparable32 + "' != '" + "index.version.created" + "'", strComparable32, "index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + strComparable44 + "' != '" + "index.version.created" + "'", strComparable44, "index.version.created");
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str3 = bulkShardRequest2.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy4 = bulkShardRequest2.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest5 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        bulkShardRequest2.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest8.remoteAddress(transportAddress9);
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest8.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest8.validate();
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest8.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest2.timeout(timeValue13);
        org.elasticsearch.common.unit.TimeValue timeValue15 = bulkShardRequest2.timeout();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest16 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.action.ActionRequest actionRequest17 = bulkItemRequest16.request();
        org.elasticsearch.action.ActionRequest actionRequest18 = bulkItemRequest16.request();
        org.elasticsearch.tasks.TaskId taskId19 = actionRequest18.getParentTask();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + refreshPolicy4 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy4.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(actionRequest17);
        org.junit.Assert.assertNotNull(actionRequest18);
        org.junit.Assert.assertNotNull(taskId19);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.removeAlias("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.putAlias(aliasMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        long long6 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        int int4 = indexMetaData1.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData1.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData1.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData1.excludeFilters();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet10 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(100, indexMetaData1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (10) must be greater than the shard id: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        java.lang.String str11 = indexMetaData5.getIndexUUID();
        int int12 = indexMetaData5.getTotalNumberOfShards();
        boolean boolean13 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.Version version14 = indexMetaData5.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(version14);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        int int23 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version26 = indexMetaData0.getMinimumCompatibleVersion();
        int int27 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putCustom("state-", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        long long12 = indexMetaData10.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData10.getState();
        boolean boolean15 = indexMetaData10.isSameUUID("index.");
        org.elasticsearch.Version version16 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder9.settings(settings17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        boolean boolean21 = indexMetaData0.equals((java.lang.Object) settings20);
        int int22 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.putCustom("state-", custom29);
        int int31 = builder25.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long33 = indexMetaData32.getCreationDate();
        long long34 = indexMetaData32.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = indexMetaData32.getState();
        boolean boolean37 = indexMetaData32.isSameUUID("index.");
        org.elasticsearch.Version version38 = indexMetaData32.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings39 = indexMetaData32.getSettings();
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings39);
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder25.settings(settings39);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings39);
        boolean boolean44 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings39);
        boolean boolean45 = indexMetaData0.equals((java.lang.Object) settings39);
        org.elasticsearch.common.settings.Settings settings46 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(version38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(settings46);
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.EXTERNAL;
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType3 = org.elasticsearch.index.VersionType.fromString("", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        java.lang.Comparable<java.lang.String> strComparable6 = clusterBlockTuple2.v2();
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType8.validateVersionForWrites((long) (byte) 3);
        boolean boolean12 = versionType8.validateVersionForReads((long) (short) 1);
        long long15 = versionType8.updateVersion((long) (byte) 10, 1L);
        boolean boolean17 = versionType8.validateVersionForReads((long) (byte) 100);
        boolean boolean18 = clusterBlockTuple2.equals((java.lang.Object) boolean17);
        java.lang.String str19 = clusterBlockTuple2.toString();
        java.lang.Comparable<java.lang.String> strComparable20 = clusterBlockTuple2.v2();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "index.version.created" + "'", strComparable6, "index.version.created");
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str19, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "index.version.created" + "'", strComparable20, "index.version.created");
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet17);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray20 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList21 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, indexShardStateArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte24 = state23.id();
        byte byte25 = state23.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple26 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte28 = state27.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple29 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList21, state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder3.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder3.setRoutingNumShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.index("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder34.putCustom("current version [1] is different than the one provided [32]", custom36);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.putMapping(mappingMetaData38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexShardStateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock4 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock4, (java.lang.Comparable<java.lang.String>) "current version [0] is higher or equal to the one provided [97]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock7 = clusterBlockTuple6.v1();
        boolean boolean9 = clusterBlockTuple6.equals((java.lang.Object) "current version [-1] is higher than the one provided [-1]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest10.remoteAddress(transportAddress11);
        org.elasticsearch.action.support.IndicesOptions indicesOptions13 = bulkShardRequest10.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions14 = bulkShardRequest10.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest10.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest10.remoteAddress(transportAddress16);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest10.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>, org.elasticsearch.action.ActionRequestValidationException> clusterBlockTupleTuple19 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>, org.elasticsearch.action.ActionRequestValidationException>(clusterBlockTuple6, actionRequestValidationException18);
        java.lang.String str20 = clusterBlockTuple6.toString();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock4);
        org.junit.Assert.assertNotNull(clusterBlock7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(indicesOptions13);
        org.junit.Assert.assertNotNull(indicesOptions14);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]" + "'", str20, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]");
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.String str6 = shardFailure4.reason;
        java.lang.Throwable throwable7 = shardFailure4.cause;
        java.lang.String str8 = shardFailure4.indexUUID;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(throwable7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        org.elasticsearch.action.support.IndicesOptions indicesOptions8 = bulkShardRequest5.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest5.validate();
        bulkShardRequest5.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest5.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest0.setRefreshPolicy(refreshPolicy13);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest14.consistencyLevel();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(indicesOptions8);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentParser xContentParser18 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = indexMetaData0.fromXContent(xContentParser18, parseFieldMatcher19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        java.lang.String str15 = indexMetaData9.getIndexUUID();
        org.elasticsearch.Version version16 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData9);
        int int20 = indexMetaData0.getRoutingNumShards();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = indexMetaData0.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        long long4 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.Version version7 = indexMetaData1.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder8.build();
        boolean boolean11 = indexMetaData9.isSameUUID("index.blocks.metadata");
        int int12 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.includeFilters();
        int int14 = indexMetaData9.getRoutingNumShards();
        long long15 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting16 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest20.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure24 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting18, "active_allocations", (java.lang.Throwable) actionRequestValidationException22, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure26 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting16, "", (java.lang.Throwable) actionRequestValidationException22, "index.blocks.read_only");
        java.lang.Throwable throwable27 = shardFailure26.cause;
        java.lang.Class<?> wildcardClass28 = shardFailure26.getClass();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, java.lang.reflect.Type> writeableTuple29 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData9, (java.lang.reflect.Type) wildcardClass28);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap30 = indexMetaData9.getMappings();
        int int31 = indexMetaData9.getRoutingNumShards();
        org.elasticsearch.Version version32 = indexMetaData9.getUpgradedVersion();
        int int33 = indexMetaData9.getNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet35 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 3, indexMetaData9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException22);
        org.junit.Assert.assertNotNull(throwable27);
        org.junit.Assert.assertEquals(throwable27.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable27.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable27.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(writeableTuple29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock6 = clusterBlockTuple2.v1();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest7.index("index.");
        long long12 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy14 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest7.setRefreshPolicy(refreshPolicy14);
        boolean boolean16 = clusterBlockTuple2.equals((java.lang.Object) bulkShardRequest15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest17.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest17.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest17.indicesOptions();
        boolean boolean24 = bulkShardRequest17.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId25 = bulkShardRequest17.getParentTask();
        bulkShardRequest15.setParentTask(taskId25);
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy14 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy14.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(actionRequestValidationException22);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(taskId25);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        boolean boolean3 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest0.remoteAddress(transportAddress4);
        long long6 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("primary_terms", (long) (short) -1);
        org.elasticsearch.common.unit.TimeValue timeValue10 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = bulkShardRequest0.remoteAddress();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNull(transportAddress11);
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest12.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.index("index.number_of_replicas");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest24 = new org.elasticsearch.action.bulk.BulkItemRequest((-1), (org.elasticsearch.action.ActionRequest) bulkShardRequest21);
        java.lang.String str25 = bulkShardRequest21.index();
        org.elasticsearch.tasks.TaskId taskId26 = bulkShardRequest21.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = null;
        bulkShardRequest27.remoteAddress(transportAddress28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest27.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest31.timeout(timeValue32);
        bulkShardRequest33.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str37 = bulkShardRequest36.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy38 = bulkShardRequest36.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest33.setRefreshPolicy(refreshPolicy38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str42 = bulkShardRequest41.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy43 = bulkShardRequest41.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest44 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest41);
        bulkShardRequest41.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest41.timeout(timeValue47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest33.timeout(timeValue47);
        org.elasticsearch.index.shard.ShardId shardId50 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest49.setShardId(shardId50);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest52.remoteAddress(transportAddress53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest52.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue57 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest56.timeout(timeValue57);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str60 = bulkShardRequest59.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy61 = bulkShardRequest59.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel62 = bulkShardRequest59.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest56.consistencyLevel(writeConsistencyLevel62);
        org.elasticsearch.common.unit.TimeValue timeValue64 = bulkShardRequest63.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress66 = null;
        bulkShardRequest65.remoteAddress(transportAddress66);
        org.elasticsearch.action.support.IndicesOptions indicesOptions68 = bulkShardRequest65.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException69 = bulkShardRequest65.validate();
        java.lang.String str70 = bulkShardRequest65.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel71 = bulkShardRequest65.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest63.consistencyLevel(writeConsistencyLevel71);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = bulkShardRequest51.consistencyLevel(writeConsistencyLevel71);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest76 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str77 = bulkShardRequest76.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy78 = bulkShardRequest76.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest79 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest76);
        bulkShardRequest76.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress83 = null;
        bulkShardRequest82.remoteAddress(transportAddress83);
        org.elasticsearch.action.support.IndicesOptions indicesOptions85 = bulkShardRequest82.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException86 = bulkShardRequest82.validate();
        org.elasticsearch.common.unit.TimeValue timeValue87 = bulkShardRequest82.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest88 = bulkShardRequest76.timeout(timeValue87);
        org.elasticsearch.common.unit.TimeValue timeValue89 = bulkShardRequest76.timeout();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest90 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest76);
        org.elasticsearch.common.unit.TimeValue timeValue91 = bulkShardRequest76.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest92 = bulkShardRequest73.timeout(timeValue91);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest93 = bulkShardRequest21.timeout(timeValue91);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(timeValue13);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "index.number_of_replicas" + "'", str25, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(taskId26);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + refreshPolicy38 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy38.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + refreshPolicy43 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy43.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + refreshPolicy61 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy61.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel62 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel62.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(timeValue64);
        org.junit.Assert.assertNotNull(indicesOptions68);
        org.junit.Assert.assertNotNull(actionRequestValidationException69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel71 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel71.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertNotNull(bulkShardRequest73);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + refreshPolicy78 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy78.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions85);
        org.junit.Assert.assertNotNull(actionRequestValidationException86);
        org.junit.Assert.assertNotNull(timeValue87);
        org.junit.Assert.assertNotNull(bulkShardRequest88);
        org.junit.Assert.assertNotNull(timeValue89);
        org.junit.Assert.assertNotNull(timeValue91);
        org.junit.Assert.assertNotNull(bulkShardRequest92);
        org.junit.Assert.assertNotNull(bulkShardRequest93);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest2.remoteAddress(transportAddress3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest2.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple11 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException6, builder8);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure13 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.blocks.read_only", (java.lang.Throwable) actionRequestValidationException6, "index.creation_date_string");
        java.lang.Throwable throwable14 = shardFailure13.cause;
        java.lang.String str15 = shardFailure13.reason;
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(throwable14);
        org.junit.Assert.assertEquals(throwable14.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable14.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable14.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.blocks.read_only" + "'", str15, "index.blocks.read_only");
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock23 = clusterBlockTuple11.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        byte byte25 = state24.id();
        boolean boolean26 = clusterBlockTuple11.equals((java.lang.Object) state24);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(clusterBlock23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 1 + "'", byte25 == (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.setRefreshPolicy(refreshPolicy7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.common.unit.TimeValue timeValue21 = bulkShardRequest20.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest20.index("index.blocks.metadata");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest24.remoteAddress(transportAddress25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException28 = bulkShardRequest24.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.elasticsearch.action.support.IndicesOptions indicesOptions32 = bulkShardRequest29.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException33 = bulkShardRequest29.validate();
        bulkShardRequest29.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest24.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest23.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest23.index("current version [35] is different than the one provided [10]");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy42 = bulkShardRequest41.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest8.setRefreshPolicy(refreshPolicy42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray44 = bulkShardRequest43.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertNotNull(actionRequestValidationException28);
        org.junit.Assert.assertNotNull(indicesOptions32);
        org.junit.Assert.assertNotNull(actionRequestValidationException33);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertTrue("'" + refreshPolicy42 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy42.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest43);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        long long5 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple13 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException8, builder10);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure15 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.blocks.read_only", (java.lang.Throwable) actionRequestValidationException8, "index.creation_date_string");
        java.lang.Throwable throwable16 = shardFailure15.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure18 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.shared_filesystem", throwable16, "index.number_of_replicas");
        java.lang.String str19 = shardFailure18.indexUUID;
        java.lang.Throwable throwable20 = shardFailure18.cause;
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(throwable16);
        org.junit.Assert.assertEquals(throwable16.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable16.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable16.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.number_of_replicas" + "'", str19, "index.number_of_replicas");
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        int int9 = builder8.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putMapping(mappingMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean4 = versionType1.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType5 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean7 = versionType1.validateVersionForReads(0L);
        boolean boolean9 = versionType1.validateVersionForWrites(0L);
        long long12 = versionType1.updateVersion((long) 35, (long) ' ');
        long long15 = versionType1.updateVersion((long) (short) 10, 35L);
        long long18 = versionType1.updateVersion(0L, 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType19 = org.elasticsearch.index.VersionType.fromString("", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32L + "'", long12 == 32L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35L + "'", long15 == 35L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.setShardId(shardId13);
        java.lang.String str15 = bulkShardRequest11.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest11.remoteAddress(transportAddress16);
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest11.remoteAddress(transportAddress18);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.creation_date" + "'", str12, "index.creation_date");
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.creation_date" + "'", str15, "index.creation_date");
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [35] is different than the one provided [32]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [35] is different than the one provided [32]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.setRoutingNumShards((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        bulkShardRequest7.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.setRefreshPolicy(refreshPolicy12);
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest7.remoteAddress(transportAddress14);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest7.timeout();
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(timeValue18);
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean6 = versionType0.validateVersionForReads(0L);
        boolean boolean8 = versionType0.validateVersionForWrites(0L);
        long long11 = versionType0.updateVersion((long) 35, (long) ' ');
        boolean boolean14 = versionType0.isVersionConflictForReads((long) 32, (long) (byte) 0);
        long long17 = versionType0.updateVersion((long) (byte) 10, 2L);
        byte byte18 = versionType0.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 3 + "'", byte18 == (byte) 3);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int14 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.creationDate((long) (byte) 10);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.putAlias(builder17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("current version [0] is different than the one provided [1]");
        java.lang.String[] strArray25 = new java.lang.String[] { "index.priority", "current version [52] is higher or equal to the one provided [100]", "current version [-1] is higher than the one provided [52]" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder20.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds(52, (java.util.Set<java.lang.String>) strSet26);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.putAlias(builder30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = bulkShardRequest0.consistencyLevel();
        org.junit.Assert.assertNull(transportAddress1);
        org.junit.Assert.assertNull(transportAddress2);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel3 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel3.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexMetaData0.readFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        long long4 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet7 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(35, indexMetaData1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (0) must be greater than the shard id: 35");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet17);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray20 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList21 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, indexShardStateArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte24 = state23.id();
        byte byte25 = state23.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple26 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte28 = state27.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple29 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList21, state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder3.state(state27);
        int int31 = builder30.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.putAlias(aliasMetaData32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexShardStateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        boolean boolean5 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.setShardId(shardId15);
        java.lang.String str17 = bulkShardRequest11.index();
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest11.readFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "indices:data/write/bulk[s]" + "'", str17, "indices:data/write/bulk[s]");
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.removeAlias("current version [0] is different than the one provided [100]");
        int int14 = builder9.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder9.putCustom("current version [3] is higher or equal to the one provided [52]", custom16);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder8.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet27);
        long long31 = builder30.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.setRoutingNumShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder30.numberOfReplicas((int) '#');
        java.lang.String str36 = builder35.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index.creation_date" + "'", str36, "index.creation_date");
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        int int4 = builder1.numberOfShards();
        int int5 = builder1.numberOfReplicas();
        long long6 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.index("current version [0] is higher or equal to the one provided [97]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        byte byte8 = state7.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest6.remoteAddress(transportAddress13);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest6.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest16.index("index.");
        long long21 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest16.setShardId(shardId22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest24.remoteAddress(transportAddress25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException28 = bulkShardRequest24.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest24.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest16.setRefreshPolicy(refreshPolicy29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest6.setRefreshPolicy(refreshPolicy29);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest31.writeTo(streamOutput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertNotNull(actionRequestValidationException28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (byte) 10, (long) '4');
        boolean boolean5 = versionType0.validateVersionForWrites((long) (short) 1);
        boolean boolean7 = versionType0.validateVersionForWrites(10L);
        boolean boolean10 = versionType0.isVersionConflictForReads((long) (short) 10, (long) (byte) 10);
        long long13 = versionType0.updateVersion(0L, (long) 0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        boolean boolean5 = indexMetaData1.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.apache.lucene.util.Version version7 = indexMetaData1.getMinimumCompatibleVersion();
        java.lang.String str8 = indexMetaData1.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData1.getActiveAllocationIds();
        boolean boolean11 = indexMetaData1.isSameUUID("current version [0] is higher or equal to the one provided [-1]");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet13 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(10, indexMetaData1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (0) must be greater than the shard id: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        int int9 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (byte) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy5 = bulkShardRequest0.getRefreshPolicy();
        long long6 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest7.remoteAddress(transportAddress8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest7.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest7.validate();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest7.timeout();
        boolean boolean13 = bulkShardRequest7.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        bulkShardRequest14.primaryTerm((long) ' ');
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest14.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest7.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest0.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest23.remoteAddress(transportAddress24);
        org.elasticsearch.action.support.IndicesOptions indicesOptions26 = bulkShardRequest23.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest23.index("index.auto_expand_replicas");
        long long29 = bulkShardRequest28.primaryTerm();
        boolean boolean30 = bulkShardRequest28.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId31 = bulkShardRequest28.getParentTask();
        bulkShardRequest0.setParentTask(taskId31);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertTrue("'" + refreshPolicy5 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy5.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(indicesOptions26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(taskId31);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        int int7 = indexMetaData4.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData4.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet11 = indexMetaData4.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder2.putActiveAllocationIds((int) 'a', strSet11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.putCustom("state-", custom20);
        int int22 = builder16.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getCreationDate();
        long long25 = indexMetaData23.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData23.getState();
        boolean boolean28 = indexMetaData23.isSameUUID("index.");
        org.elasticsearch.Version version29 = indexMetaData23.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData23.getSettings();
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder16.settings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder14.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        org.apache.lucene.util.Version version39 = indexMetaData37.getMinimumCompatibleVersion();
        boolean boolean41 = indexMetaData37.isSameUUID("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap42 = indexMetaData37.getCustoms();
        java.lang.String str43 = indexMetaData37.getIndexUUID();
        int int44 = indexMetaData37.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder36.state(state45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.removeAlias("index.uuid");
        int int51 = builder48.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder48.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder48.removeAllAliases();
        long long54 = builder48.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder48.numberOfShards(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData62 = builder58.mapping("index.blocks.write");
        int int63 = builder58.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder58.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder67.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom71 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder67.putCustom("state-", custom71);
        int int73 = builder67.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long75 = indexMetaData74.getCreationDate();
        long long76 = indexMetaData74.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state77 = indexMetaData74.getState();
        boolean boolean79 = indexMetaData74.isSameUUID("index.");
        org.elasticsearch.Version version80 = indexMetaData74.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings81 = indexMetaData74.getSettings();
        boolean boolean82 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings81);
        boolean boolean83 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder67.settings(settings81);
        boolean boolean85 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings81);
        org.elasticsearch.common.settings.Settings settings86 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings81);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder58.settings(settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state88 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte89 = state88.id();
        byte byte90 = state88.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder58.state(state88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder56.state(state88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder46.state(state88);
        java.util.Set<java.lang.String> strSet95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder93.putActiveAllocationIds(0, strSet95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNull(version39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "_na_" + "'", str43, "_na_");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(mappingMetaData62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state77.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(version80);
        org.junit.Assert.assertNotNull(settings81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state88.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte89 + "' != '" + (byte) 0 + "'", byte89 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte90 + "' != '" + (byte) 0 + "'", byte90 == (byte) 0);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData0.getMappings();
        org.elasticsearch.Version version12 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder15.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfShards(10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.created_string", custom3);
        java.lang.String str5 = builder1.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.blocks.write" + "'", str5, "index.blocks.write");
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]", custom1);
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [35] is different than the one provided [0]", custom1);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest6 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm(35L);
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest1.shardId();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest1.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId9);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = builder14.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder17.putCustom("state-", custom21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getCreationDate();
        long long25 = indexMetaData23.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData23.getState();
        boolean boolean28 = indexMetaData23.isSameUUID("index.");
        org.elasticsearch.Version version29 = indexMetaData23.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData23.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder22.settings(settings30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder14.settings(settings30);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("current version [0] is different than the one provided [100]");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel6 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest8.index("index.");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy14 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest0.setRefreshPolicy(refreshPolicy14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest0.remoteAddress(transportAddress16);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(transportAddress2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel6 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel6.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + refreshPolicy14 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy14.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        byte byte7 = state6.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putMapping("index.number_of_replicas", "index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        org.apache.lucene.util.Version version6 = indexMetaData4.getMinimumCompatibleVersion();
        long long7 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.Version version10 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData12.excludeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData12.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [98] is different than the one provided [97]", custom1);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = bulkShardRequest14.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest19.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException23 = bulkShardRequest19.validate();
        java.lang.String str24 = bulkShardRequest19.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = bulkShardRequest26.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "indices:data/write/bulk[s]" + "'", str15, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel18 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel18.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions22);
        org.junit.Assert.assertNotNull(actionRequestValidationException23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.index.shard.ShardId shardId30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest17.setShardId(shardId30);
        org.elasticsearch.index.shard.ShardId shardId32 = bulkShardRequest31.shardId();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(shardId32);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.uuid");
        int int12 = builder9.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.putCustom("state-", custom19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getCreationDate();
        long long23 = indexMetaData21.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData21.getState();
        boolean boolean26 = indexMetaData21.isSameUUID("index.");
        org.elasticsearch.Version version27 = indexMetaData21.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder20.settings(settings28);
        org.elasticsearch.common.settings.Settings settings30 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder9.settings(settings30);
        boolean boolean32 = indexMetaData0.equals((java.lang.Object) builder9);
        int int33 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        org.apache.lucene.util.Version version36 = indexMetaData34.getMinimumCompatibleVersion();
        boolean boolean38 = indexMetaData34.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData34);
        org.apache.lucene.util.Version version40 = indexMetaData34.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet42 = null; // flaky: indexMetaData34.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long44 = indexMetaData43.getCreationDate();
        org.apache.lucene.util.Version version45 = indexMetaData43.getMinimumCompatibleVersion();
        org.elasticsearch.Version version46 = indexMetaData43.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData43.requireFilters();
        boolean boolean49 = indexMetaData43.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff50 = indexMetaData34.diff(indexMetaData43);
        java.lang.String str51 = indexMetaData34.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap52 = indexMetaData34.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long54 = indexMetaData53.getCreationDate();
        org.apache.lucene.util.Version version55 = indexMetaData53.getMinimumCompatibleVersion();
        boolean boolean57 = indexMetaData53.isSameUUID("state-");
        int int58 = indexMetaData53.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData53.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff60 = indexMetaData34.diff(indexMetaData53);
        int int61 = indexMetaData53.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap62 = indexMetaData53.getCustoms();
        boolean boolean63 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap62);
        int int64 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(version40);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNull(version45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "_na_" + "'", str51, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertNotNull(indexMetaDataDiff60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray30 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList31 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, indexShardStateArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte34 = state33.id();
        byte byte35 = state33.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple36 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte38 = state37.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple39 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList31, state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder13.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder5.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder5.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder5.removeAlias("current version [32] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.index("current version [3] is higher or equal to the one provided [-1]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexShardStateArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 0 + "'", byte35 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        long long4 = indexMetaData0.getVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        int int8 = indexMetaData0.getRoutingNumShards();
        long long9 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.timeout(timeValue27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray30 = bulkShardRequest17.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        java.lang.String str4 = versionType0.explainConflictForWrites((long) '#', 100L, true);
        java.lang.String str8 = versionType0.explainConflictForWrites((long) '4', (long) 100, false);
        java.lang.String str12 = versionType0.explainConflictForWrites((long) 0, 100L, false);
        boolean boolean14 = versionType0.validateVersionForWrites((long) 52);
        java.lang.String str17 = versionType0.explainConflictForReads((long) 0, 98L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [35] is higher or equal to the one provided [100]" + "'", str4, "current version [35] is higher or equal to the one provided [100]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [52] is higher or equal to the one provided [100]" + "'", str8, "current version [52] is higher or equal to the one provided [100]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [0] is higher or equal to the one provided [100]" + "'", str12, "current version [0] is higher or equal to the one provided [100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [0] is different than the one provided [98]" + "'", str17, "current version [0] is different than the one provided [98]");
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        java.lang.String str13 = bulkShardRequest12.index();
        bulkShardRequest12.primaryTerm((long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest12.getRefreshPolicy();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.creation_date" + "'", str13, "index.creation_date");
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        java.lang.String str4 = versionType0.explainConflictForWrites((-1L), 32L, false);
        long long7 = versionType0.updateVersion(3L, (long) (byte) 2);
        boolean boolean11 = versionType0.isVersionConflictForWrites((long) 32, 3L, false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [-1] is higher than the one provided [32]" + "'", str4, "current version [-1] is higher than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.index("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        org.apache.lucene.util.Version version10 = indexMetaData8.getMinimumCompatibleVersion();
        long long11 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.Version version14 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = builder15.build();
        boolean boolean18 = indexMetaData16.isSameUUID("index.blocks.metadata");
        int int19 = indexMetaData16.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder7.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.creationDate(35L);
        int int24 = builder21.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [35] is different than the one provided [52]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [35] is different than the one provided [52]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        org.elasticsearch.Version version9 = indexMetaData8.getCreationVersion();
        int int10 = indexMetaData8.getRoutingFactor();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData8.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest6.setRefreshPolicy("current version [52] is higher or equal to the one provided [100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [current version [52] is higher or equal to the one provided [100]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        bulkShardRequest53.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest53.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest24.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest24.index("index.data_path");
        long long64 = bulkShardRequest24.primaryTerm();
        bulkShardRequest24.setParentTask("index.creation_date", (long) (short) 1);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.version.minimum_compatible");
        // The following exception was thrown during execution in test generation
        try {
            int int10 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of source shards [1] must be a must be a multiple of [-1]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting5 = shardFailure4.routing;
        java.lang.String str6 = shardFailure4.indexUUID;
        java.lang.String str7 = shardFailure4.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = shardFailure4.routing;
        java.lang.String str9 = shardFailure4.indexUUID;
        java.lang.String str10 = shardFailure4.reason;
        java.lang.Throwable throwable11 = shardFailure4.cause;
        org.junit.Assert.assertNull(shardRouting5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(shardRouting8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(throwable11);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.setShardId(shardId15);
        java.lang.String str17 = bulkShardRequest11.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest18.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest18.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest11.setRefreshPolicy(refreshPolicy23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest11.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str27 = bulkShardRequest26.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = bulkShardRequest26.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest26.getRefreshPolicy();
        org.elasticsearch.tasks.TaskId taskId30 = bulkShardRequest26.getParentTask();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest11.index("current version [0] is different than the one provided [100]");
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "indices:data/write/bulk[s]" + "'", str17, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertNotNull(actionRequestValidationException22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(transportAddress28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId30);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (byte) -1, (long) (-1));
        boolean boolean6 = versionType0.isVersionConflictForReads((long) 35, 10L);
        boolean boolean8 = versionType0.validateVersionForWrites(2L);
        boolean boolean10 = versionType0.validateVersionForWrites(2L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        boolean boolean5 = indexMetaData1.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.apache.lucene.util.Version version7 = indexMetaData1.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData1.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.Version version13 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData10.requireFilters();
        boolean boolean16 = indexMetaData10.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData1.diff(indexMetaData10);
        java.lang.String str18 = indexMetaData1.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap19 = indexMetaData1.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getCreationDate();
        org.apache.lucene.util.Version version22 = indexMetaData20.getMinimumCompatibleVersion();
        boolean boolean24 = indexMetaData20.isSameUUID("state-");
        int int25 = indexMetaData20.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData20.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData1.diff(indexMetaData20);
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData1.getSettings();
        org.apache.lucene.util.Version version29 = indexMetaData1.getMinimumCompatibleVersion();
        int int30 = indexMetaData1.getRoutingFactor();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet32 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 2, indexMetaData1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        long long8 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder5.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder5.putCustom("", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.putMapping("current version [32] is different than the one provided [11]", "current version [0] is higher or equal to the one provided [97]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.created_string", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        org.apache.lucene.util.Version version8 = indexMetaData6.getMinimumCompatibleVersion();
        int int9 = indexMetaData6.getNumberOfShards();
        boolean boolean11 = indexMetaData6.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        java.util.Set<java.lang.String> strSet14 = indexMetaData6.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder1.putActiveAllocationIds((int) '#', strSet14);
        java.lang.String str16 = builder1.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.blocks.write" + "'", str16, "index.blocks.write");
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.equals((java.lang.Object) (-1L));
        org.elasticsearch.common.settings.Settings settings13 = indexMetaData7.getSettings();
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder4.settings(settings13);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple13 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException8, builder10);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure15 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.blocks.read_only", (java.lang.Throwable) actionRequestValidationException8, "index.creation_date_string");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure17 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.version.created_string", (java.lang.Throwable) actionRequestValidationException8, "index.version.created");
        java.lang.String str18 = shardFailure17.indexUUID;
        java.lang.String str19 = shardFailure17.indexUUID;
        java.lang.String str20 = shardFailure17.indexUUID;
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.version.created" + "'", str18, "index.version.created");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.version.created" + "'", str19, "index.version.created");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.version.created" + "'", str20, "index.version.created");
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest10.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest10.validate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest10.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest10.remoteAddress(transportAddress17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest19.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str27 = bulkShardRequest26.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest26.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest31.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str46 = bulkShardRequest45.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel48);
        boolean boolean50 = bulkShardRequest49.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest52.remoteAddress(transportAddress53);
        org.elasticsearch.action.support.IndicesOptions indicesOptions55 = bulkShardRequest52.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException56 = bulkShardRequest52.validate();
        java.lang.String str57 = bulkShardRequest52.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress58 = bulkShardRequest52.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest52.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple60 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params51, (java.lang.IllegalArgumentException) actionRequestValidationException59);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple61 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest49, params51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = indexMetaData0.toXContent(xContentBuilder9, params51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel41 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel41.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNotNull(indicesOptions55);
        org.junit.Assert.assertNotNull(actionRequestValidationException56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(transportAddress58);
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        boolean boolean10 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index13 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(index13);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest12.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.index("index.number_of_replicas");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest24 = new org.elasticsearch.action.bulk.BulkItemRequest((-1), (org.elasticsearch.action.ActionRequest) bulkShardRequest21);
        org.elasticsearch.action.ActionRequest actionRequest25 = bulkItemRequest24.request();
        org.elasticsearch.action.ActionRequest actionRequest26 = bulkItemRequest24.request();
        org.elasticsearch.action.ActionRequest actionRequest27 = bulkItemRequest24.request();
        org.elasticsearch.action.ActionRequest actionRequest28 = bulkItemRequest24.request();
        org.elasticsearch.action.ActionRequest actionRequest29 = bulkItemRequest24.request();
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(timeValue13);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(actionRequest25);
        org.junit.Assert.assertNotNull(actionRequest26);
        org.junit.Assert.assertNotNull(actionRequest27);
        org.junit.Assert.assertNotNull(actionRequest28);
        org.junit.Assert.assertNotNull(actionRequest29);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData11.getState();
        boolean boolean16 = indexMetaData11.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData11.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData11.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte27 = state26.id();
        byte byte28 = state26.id();
        byte byte29 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        long long39 = indexMetaData37.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder34.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder30.state(state40);
        byte byte43 = state40.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder19.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder8.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.index("");
        // The following exception was thrown during execution in test generation
        try {
            long long49 = builder45.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 0 + "'", byte29 == (byte) 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("current version [-1] is higher than the one provided [100]");
        // The following exception was thrown during execution in test generation
        try {
            long long14 = builder12.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean5 = versionType1.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType7 = versionType1.versionTypeForReplicationAndRecovery();
        long long10 = versionType7.updateVersion((long) (byte) 0, 0L);
        java.lang.String str13 = versionType7.explainConflictForReads((long) (byte) 2, (long) (short) 1);
        java.lang.String str16 = versionType7.explainConflictForReads(35L, (long) 10);
        java.lang.String str20 = versionType7.explainConflictForWrites(0L, 0L, true);
        byte byte21 = versionType7.getValue();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType22 = org.elasticsearch.index.VersionType.fromString("index.number_of_replicas", versionType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.number_of_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [2] is different than the one provided [1]" + "'", str13, "current version [2] is different than the one provided [1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "current version [35] is different than the one provided [10]" + "'", str16, "current version [35] is different than the one provided [10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "current version [0] is higher or equal to the one provided [0]" + "'", str20, "current version [0] is higher or equal to the one provided [0]");
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 1 + "'", byte21 == (byte) 1);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        boolean boolean16 = indexMetaData12.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.apache.lucene.util.Version version18 = indexMetaData12.getMinimumCompatibleVersion();
        java.lang.String str19 = indexMetaData12.getIndexUUID();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) str19);
        int int21 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(version18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.setRefreshPolicy(refreshPolicy7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.common.unit.TimeValue timeValue21 = bulkShardRequest20.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest20.index("index.blocks.metadata");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest24.remoteAddress(transportAddress25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException28 = bulkShardRequest24.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.elasticsearch.action.support.IndicesOptions indicesOptions32 = bulkShardRequest29.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException33 = bulkShardRequest29.validate();
        bulkShardRequest29.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest24.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest23.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest23.index("current version [35] is different than the one provided [10]");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy42 = bulkShardRequest41.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest8.setRefreshPolicy(refreshPolicy42);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput44 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest8.writeTo(streamOutput44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertNotNull(actionRequestValidationException28);
        org.junit.Assert.assertNotNull(indicesOptions32);
        org.junit.Assert.assertNotNull(actionRequestValidationException33);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertTrue("'" + refreshPolicy42 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy42.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest43);
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet17);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray20 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList21 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, indexShardStateArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte24 = state23.id();
        byte byte25 = state23.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple26 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte28 = state27.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple29 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList21, state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder3.state(state27);
        java.lang.String str31 = builder30.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.index("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putMapping("current version [1] is different than the one provided [0]", "current version [3] is higher or equal to the one provided [-1]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexShardStateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "index.creation_date" + "'", str31, "index.creation_date");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId1 = bulkShardRequest0.shardId();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        java.lang.String str4 = bulkShardRequest0.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest5.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.timeout(timeValue10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str13 = bulkShardRequest12.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy14 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest12.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.index.shard.ShardId shardId17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest9.setShardId(shardId17);
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest9.timeout(timeValue19);
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = bulkShardRequest9.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.index("index.");
        long long27 = bulkShardRequest22.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest22.setRefreshPolicy(refreshPolicy29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest9.setRefreshPolicy(refreshPolicy29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest0.setRefreshPolicy(refreshPolicy29);
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.readFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(shardId1);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + refreshPolicy14 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy14.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(transportAddress21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple16 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, strComparable15);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock17 = clusterBlockTuple16.v1();
        java.lang.String str18 = clusterBlockTuple16.toString();
        java.lang.String str19 = clusterBlockTuple16.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder21.index("");
        int int26 = builder25.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.index("current version [0] is different than the one provided [100]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = builder30.mapping("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder30.removeAlias("index.shadow_replicas");
        boolean boolean35 = clusterBlockTuple16.equals((java.lang.Object) builder34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder34.removeAlias("current version [1] is higher or equal to the one provided [52]");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder34.putAlias(aliasMetaData38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertNotNull(clusterBlock17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]" + "'", str18, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]" + "'", str19, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        int int2 = builder1.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping("current version [35] is different than the one provided [1]", "current version [0] is different than the one provided [35]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData11.getState();
        boolean boolean16 = indexMetaData11.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData11.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData11.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte27 = state26.id();
        byte byte28 = state26.id();
        byte byte29 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        long long39 = indexMetaData37.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder34.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder30.state(state40);
        byte byte43 = state40.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder19.state(state40);
        byte byte45 = state40.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder6.state(state40);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = builder46.mapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.blocks.metadata]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 0 + "'", byte29 == (byte) 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 0 + "'", byte45 == (byte) 0);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(mappingMetaData48);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest15.getRefreshPolicy();
        org.elasticsearch.index.shard.ShardId shardId17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.setShardId(shardId17);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest18.getRefreshPolicy();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest18.setRefreshPolicy("current version [3] is higher or equal to the one provided [-1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [current version [3] is higher or equal to the one provided [-1]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.numberOfReplicas((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putMapping("current version [-1] is higher than the one provided [-1]", "current version [1] is higher or equal to the one provided [-1]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        bulkShardRequest13.setParentTask("index.shared_filesystem.recover_on_any_node", (long) 10);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.uuid");
        int int7 = builder6.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        long long10 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean13 = indexMetaData8.isSameUUID("index.");
        org.elasticsearch.Version version14 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData8.getSettings();
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder6.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder20.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getCreationDate();
        long long25 = indexMetaData23.getVersion();
        int int26 = indexMetaData23.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet28 = null; // flaky: indexMetaData23.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet30 = indexMetaData23.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder21.putActiveAllocationIds((int) 'a', strSet30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder17.putActiveAllocationIds((int) (byte) 2, strSet30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder1.putActiveAllocationIds(35, strSet30);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.putAlias(aliasMetaData34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest0.remoteAddress(transportAddress4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest7.getParentTask();
        bulkShardRequest0.setParentTask(taskId11);
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy14 = bulkShardRequest0.getRefreshPolicy();
        boolean boolean15 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest19.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str27 = bulkShardRequest26.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest26.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.index.shard.ShardId shardId31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest23.setShardId(shardId31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest23.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest34.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = null;
        bulkShardRequest37.remoteAddress(transportAddress38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest37.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue42 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest41.timeout(timeValue42);
        org.elasticsearch.index.shard.ShardId shardId44 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest41.setShardId(shardId44);
        org.elasticsearch.common.unit.TimeValue timeValue46 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest45.timeout(timeValue46);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest36.timeout(timeValue46);
        org.elasticsearch.index.shard.ShardId shardId49 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest48.setShardId(shardId49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest51.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest55.timeout(timeValue56);
        bulkShardRequest57.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str61 = bulkShardRequest60.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy62 = bulkShardRequest60.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest57.setRefreshPolicy(refreshPolicy62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest50.setRefreshPolicy(refreshPolicy62);
        boolean boolean65 = bulkShardRequest50.getShouldPersistResult();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy66 = bulkShardRequest50.getRefreshPolicy();
        org.elasticsearch.tasks.TaskId taskId67 = bulkShardRequest50.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task68 = bulkShardRequest0.createTask((long) (byte) 1, "current version [0] is higher or equal to the one provided [100]", "current version [3] is higher or equal to the one provided [52]", taskId67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNull(transportAddress13);
        org.junit.Assert.assertTrue("'" + refreshPolicy14 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy14.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + refreshPolicy62 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy62.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + refreshPolicy66 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy66.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId67);
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest5.setShardId(shardId8);
        org.elasticsearch.common.unit.TimeValue timeValue10 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.timeout(timeValue10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = bulkShardRequest9.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest14.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest18.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str22 = bulkShardRequest21.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest21.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.setRefreshPolicy("");
        bulkShardRequest27.primaryTerm(10L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest9.setRefreshPolicy(refreshPolicy30);
        org.elasticsearch.common.unit.TimeValue timeValue32 = bulkShardRequest31.timeout();
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel12 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel12.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(timeValue32);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        int int7 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.setRoutingNumShards((int) (short) 0);
        long long10 = builder9.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(aliasMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        int int6 = indexMetaData0.getRoutingFactor();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version9);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        java.lang.String str4 = clusterBlockTuple2.toString();
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock6 = clusterBlockTuple2.v1();
        java.lang.Comparable<java.lang.String> strComparable7 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        long long10 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean13 = indexMetaData8.isSameUUID("index.");
        long long14 = indexMetaData8.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData8.includeFilters();
        org.elasticsearch.Version version16 = indexMetaData8.getCreationVersion();
        int int17 = indexMetaData8.getNumberOfShards();
        boolean boolean18 = clusterBlockTuple2.equals((java.lang.Object) int17);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting19 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException25 = bulkShardRequest23.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure27 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting21, "active_allocations", (java.lang.Throwable) actionRequestValidationException25, "index.creation_date");
        java.lang.String str28 = shardFailure27.reason;
        java.lang.Throwable throwable29 = shardFailure27.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure31 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting19, "index.number_of_replicas", throwable29, "current version [0] is higher or equal to the one provided [100]");
        boolean boolean32 = clusterBlockTuple2.equals((java.lang.Object) "current version [0] is higher or equal to the one provided [100]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock33 = clusterBlockTuple2.v1();
        java.lang.String str34 = clusterBlockTuple2.toString();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str4, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock6);
        org.junit.Assert.assertEquals("'" + strComparable7 + "' != '" + "index.version.created" + "'", strComparable7, "index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "active_allocations" + "'", str28, "active_allocations");
        org.junit.Assert.assertNotNull(throwable29);
        org.junit.Assert.assertEquals(throwable29.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable29.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable29.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(clusterBlock33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str34, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.reason;
        java.lang.String str6 = shardFailure4.indexUUID;
        java.lang.String str7 = shardFailure4.reason;
        java.lang.String str8 = shardFailure4.indexUUID;
        java.lang.Throwable throwable9 = shardFailure4.cause;
        java.lang.Throwable throwable10 = shardFailure4.cause;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting11 = shardFailure4.routing;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(throwable9);
        org.junit.Assert.assertNull(throwable10);
        org.junit.Assert.assertNull(shardRouting11);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.priority");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData5.mapping("index.version.minimum_compatible");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData5.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [100] is different than the one provided [12]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [100] is different than the one provided [12]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        boolean boolean6 = versionType0.validateVersionForWrites((long) (short) 0);
        long long9 = versionType0.updateVersion(1L, 100L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("");
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        int int13 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        boolean boolean20 = indexMetaData0.isSameUUID("current version [52] is higher or equal to the one provided [100]");
        org.apache.lucene.util.Version version21 = indexMetaData0.getMinimumCompatibleVersion();
        int int22 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData0.mappingOrDefault("active_allocations");
        java.lang.String str25 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentParser xContentParser26 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = indexMetaData0.fromXContent(xContentParser26, parseFieldMatcher27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.uuid", custom7);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("current version [-1] is different than the one provided [100]", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.putCustom("state-", custom19);
        int int21 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        boolean boolean27 = indexMetaData22.isSameUUID("index.");
        org.elasticsearch.Version version28 = indexMetaData22.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData22.getSettings();
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder15.settings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder13.settings(settings29);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings35);
        org.elasticsearch.common.settings.Settings settings37 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings37);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder3.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.index("current version [0] is higher or equal to the one provided [35]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        boolean boolean11 = indexMetaData7.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.apache.lucene.util.Version version13 = indexMetaData7.getMinimumCompatibleVersion();
        long long14 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version((long) 97);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.state(state19);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        boolean boolean2 = versionType0.validateVersionForWrites((long) 100);
        java.lang.String str5 = versionType0.explainConflictForReads((long) 35, (long) (short) -1);
        long long8 = versionType0.updateVersion((long) (short) 100, 2L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [35] is different than the one provided [-1]" + "'", str5, "current version [35] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [52] is different than the one provided [97]", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.uuid");
        int int7 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.state(state10);
        int int12 = builder11.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.blocks.metadata", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.removeAlias("index.uuid");
        int int22 = builder19.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder19.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.state(state25);
        int int27 = builder26.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.removeAllAliases();
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long33 = indexMetaData32.getCreationDate();
        org.apache.lucene.util.Version version34 = indexMetaData32.getMinimumCompatibleVersion();
        long long35 = indexMetaData32.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap36 = indexMetaData32.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData32.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData32.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.removeAlias("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder42.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple59 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap38, (java.lang.Cloneable) strSet56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder28.putActiveAllocationIds((int) (byte) 2, (java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder16.putActiveAllocationIds((int) (byte) 100, (java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder1.putActiveAllocationIds((int) (short) 0, (java.util.Set<java.lang.String>) strSet56);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNull(version34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest10.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest10.validate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest10.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest10.remoteAddress(transportAddress17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest19.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str27 = bulkShardRequest26.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest26.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest31.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str46 = bulkShardRequest45.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel48);
        boolean boolean50 = bulkShardRequest49.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest52.remoteAddress(transportAddress53);
        org.elasticsearch.action.support.IndicesOptions indicesOptions55 = bulkShardRequest52.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException56 = bulkShardRequest52.validate();
        java.lang.String str57 = bulkShardRequest52.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress58 = bulkShardRequest52.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest52.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple60 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params51, (java.lang.IllegalArgumentException) actionRequestValidationException59);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple61 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest49, params51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder62 = indexMetaData0.toXContent(xContentBuilder9, params51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel41 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel41.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNotNull(indicesOptions55);
        org.junit.Assert.assertNotNull(actionRequestValidationException56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(transportAddress58);
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.priority");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        long long10 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData7.excludeFilters();
        java.util.Set<java.lang.String> strSet17 = indexMetaData7.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putActiveAllocationIds(100, strSet17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.putAlias(aliasMetaData20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest0.remoteAddress(transportAddress4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest7.getParentTask();
        bulkShardRequest0.setParentTask(taskId11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.timeout(timeValue18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str21 = bulkShardRequest20.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        bulkShardRequest25.primaryTerm(0L);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.creation_date_string]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.creation_date_string]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds(35);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        long long8 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.numberOfReplicas((int) (byte) 10);
        java.lang.String str13 = builder5.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder5.putMapping("current version [1] is different than the one provided [32]", "current version [0] is different than the one provided [35]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest9.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException13 = bulkShardRequest9.validate();
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest9.index("index.blocks.write");
        org.elasticsearch.index.shard.ShardId shardId17 = bulkShardRequest16.shardId();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException24 = bulkShardRequest20.validate();
        org.elasticsearch.common.unit.TimeValue timeValue25 = bulkShardRequest20.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.timeout(timeValue25);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.setRefreshPolicy("index.version.created_string");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [index.version.created_string].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertNotNull(actionRequestValidationException13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(shardId17);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel18 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel18.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(actionRequestValidationException24);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        boolean boolean7 = clusterBlockTuple2.equals((java.lang.Object) (short) 10);
        java.lang.Comparable<java.lang.String> strComparable8 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = clusterBlockTuple2.v1();
        java.lang.String str10 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        org.apache.lucene.util.Version version13 = indexMetaData11.getMinimumCompatibleVersion();
        boolean boolean15 = indexMetaData11.isSameUUID("state-");
        org.apache.lucene.util.Version version16 = indexMetaData11.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData11.getAliases();
        boolean boolean18 = clusterBlockTuple2.equals((java.lang.Object) strImmutableOpenMap17);
        java.lang.Comparable<java.lang.String> strComparable19 = clusterBlockTuple2.v2();
        java.lang.Comparable<java.lang.String> strComparable20 = clusterBlockTuple2.v2();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + strComparable8 + "' != '" + "index.version.created" + "'", strComparable8, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str10, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "index.version.created" + "'", strComparable19, "index.version.created");
        org.junit.Assert.assertEquals("'" + strComparable20 + "' != '" + "index.version.created" + "'", strComparable20, "index.version.created");
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest10.remoteAddress(transportAddress11);
        org.elasticsearch.action.support.IndicesOptions indicesOptions13 = bulkShardRequest10.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException14 = bulkShardRequest10.validate();
        java.lang.String str15 = bulkShardRequest10.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest10.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest10.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params9, (java.lang.IllegalArgumentException) actionRequestValidationException17);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = indexMetaData0.toXContent(xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(params9);
        org.junit.Assert.assertNotNull(indicesOptions13);
        org.junit.Assert.assertNotNull(actionRequestValidationException14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData5.getActiveAllocationIds();
        boolean boolean10 = clusterBlockTuple4.equals((java.lang.Object) indexMetaData5);
        java.lang.Comparable<java.lang.String> strComparable11 = clusterBlockTuple4.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData12.getActiveAllocationIds();
        boolean boolean17 = clusterBlockTuple4.equals((java.lang.Object) strSetImmutableOpenIntMap16);
        java.lang.Class<?> wildcardClass18 = clusterBlockTuple4.getClass();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + strComparable11 + "' != '" + "indices:data/write/bulk[s]" + "'", strComparable11, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray30 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList31 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, indexShardStateArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte34 = state33.id();
        byte byte35 = state33.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple36 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte38 = state37.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple39 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList31, state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder13.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder5.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.removeAlias("index.uuid");
        int int47 = builder46.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getCreationDate();
        long long50 = indexMetaData48.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData48.getState();
        boolean boolean53 = indexMetaData48.isSameUUID("index.");
        org.elasticsearch.Version version54 = indexMetaData48.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings55 = indexMetaData48.getSettings();
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder46.settings(settings55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder60.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long64 = indexMetaData63.getCreationDate();
        long long65 = indexMetaData63.getVersion();
        int int66 = indexMetaData63.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet68 = null; // flaky: indexMetaData63.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet70 = indexMetaData63.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder61.putActiveAllocationIds((int) 'a', strSet70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder57.putActiveAllocationIds((int) (byte) 2, strSet70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder41.putActiveAllocationIds(1, strSet70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder73.setRoutingNumShards(0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexShardStateArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 0 + "'", byte35 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder12.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putAlias(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        java.lang.String str15 = indexMetaData9.getIndexUUID();
        org.elasticsearch.Version version16 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData9);
        long long20 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData9.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        int int6 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        long long10 = indexMetaData7.getVersion();
        int int11 = indexMetaData7.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        boolean boolean16 = indexMetaData12.isSameUUID("index.blocks.read");
        boolean boolean18 = indexMetaData12.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData7.diff(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData7.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData7.mappingOrDefault("");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(indexMetaDataDiff25);
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId19 = bulkShardRequest15.getParentTask();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest15.getRefreshPolicy();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress18);
        org.junit.Assert.assertNotNull(taskId19);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData5.getActiveAllocationIds();
        boolean boolean10 = clusterBlockTuple4.equals((java.lang.Object) indexMetaData5);
        java.lang.String str11 = clusterBlockTuple4.toString();
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray12 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList13 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList13, indexShardStateArray12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str16 = bulkShardRequest15.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy17 = bulkShardRequest15.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest19.indicesOptions();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>> indexShardStateListTuple21 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>>((java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList13, (org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest19);
        boolean boolean22 = bulkShardRequest19.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId23 = bulkShardRequest19.getParentTask();
        org.elasticsearch.index.shard.ShardId shardId24 = bulkShardRequest19.shardId();
        boolean boolean25 = clusterBlockTuple4.equals((java.lang.Object) shardId24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long27 = indexMetaData26.getCreationDate();
        org.apache.lucene.util.Version version28 = indexMetaData26.getMinimumCompatibleVersion();
        long long29 = indexMetaData26.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap30 = indexMetaData26.getActiveAllocationIds();
        boolean boolean32 = indexMetaData26.isSameUUID("current version [1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest33.remoteAddress(transportAddress34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest33.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest37.timeout(timeValue38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str41 = bulkShardRequest40.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy42 = bulkShardRequest40.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest37.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.index.shard.ShardId shardId45 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest37.setShardId(shardId45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest37.index("index.version.created");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy49 = bulkShardRequest48.getRefreshPolicy();
        java.lang.String str50 = bulkShardRequest48.index();
        boolean boolean51 = indexMetaData26.equals((java.lang.Object) bulkShardRequest48);
        boolean boolean52 = clusterBlockTuple4.equals((java.lang.Object) bulkShardRequest48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray53 = bulkShardRequest48.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]" + "'", str11, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
        org.junit.Assert.assertNotNull(indexShardStateArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + refreshPolicy17 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy17.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(taskId23);
        org.junit.Assert.assertNull(shardId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + refreshPolicy42 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy42.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel43 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel43.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertTrue("'" + refreshPolicy49 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy49.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "index.version.created" + "'", str50, "index.version.created");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest4.shardId();
        bulkShardRequest4.primaryTerm((long) ' ');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest9.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException13 = bulkShardRequest9.validate();
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest9.index("index.blocks.write");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.index("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.index.shard.ShardId shardId19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest18.setShardId(shardId19);
        org.elasticsearch.common.unit.TimeValue timeValue21 = bulkShardRequest18.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest4.timeout(timeValue21);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest4.consistencyLevel();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertNotNull(actionRequestValidationException13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        int int23 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.putMapping("current version [32] is higher or equal to the one provided [0]", "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest5.setShardId(shardId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest5.index("index.version.created");
        bulkShardRequest16.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.index.shard.ShardId shardId33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest25.setShardId(shardId33);
        org.elasticsearch.common.unit.TimeValue timeValue35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest25.timeout(timeValue35);
        org.elasticsearch.common.transport.TransportAddress transportAddress37 = bulkShardRequest25.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest38.index("index.");
        long long43 = bulkShardRequest38.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy45 = bulkShardRequest44.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest38.setRefreshPolicy(refreshPolicy45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest25.setRefreshPolicy(refreshPolicy45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest16.setRefreshPolicy(refreshPolicy45);
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = null;
        bulkShardRequest16.remoteAddress(transportAddress49);
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest16.remoteAddress(transportAddress51);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest53 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput54 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest53.writeTo(streamOutput54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(transportAddress37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy45 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy45.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest29.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest33.timeout(timeValue34);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest36 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest33);
        boolean boolean37 = indexMetaData0.equals((java.lang.Object) bulkShardRequest33);
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = bulkShardRequest33.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest33.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy41 = bulkShardRequest40.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest42.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException47 = bulkShardRequest42.validate();
        org.elasticsearch.common.unit.TimeValue timeValue48 = bulkShardRequest42.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = null;
        bulkShardRequest42.remoteAddress(transportAddress49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest51.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest55.timeout(timeValue56);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str59 = bulkShardRequest58.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy60 = bulkShardRequest58.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel61 = bulkShardRequest58.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest55.consistencyLevel(writeConsistencyLevel61);
        org.elasticsearch.index.shard.ShardId shardId63 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest55.setShardId(shardId63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest55.index("index.version.created");
        bulkShardRequest66.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str71 = bulkShardRequest70.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy72 = bulkShardRequest70.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel73 = bulkShardRequest70.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = bulkShardRequest66.consistencyLevel(writeConsistencyLevel73);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress76 = null;
        bulkShardRequest75.remoteAddress(transportAddress76);
        org.elasticsearch.action.support.IndicesOptions indicesOptions78 = bulkShardRequest75.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException79 = bulkShardRequest75.validate();
        org.elasticsearch.common.unit.TimeValue timeValue80 = bulkShardRequest75.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = bulkShardRequest75.index("index.blocks.write");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy83 = bulkShardRequest75.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = bulkShardRequest66.setRefreshPolicy(refreshPolicy83);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest85 = bulkShardRequest42.setRefreshPolicy(refreshPolicy83);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest86 = bulkShardRequest40.setRefreshPolicy(refreshPolicy83);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(transportAddress38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertTrue("'" + refreshPolicy41 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy41.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNull(actionRequestValidationException47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + refreshPolicy60 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy60.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel61 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel61.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + refreshPolicy72 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy72.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel73 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel73.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest74);
        org.junit.Assert.assertNotNull(indicesOptions78);
        org.junit.Assert.assertNotNull(actionRequestValidationException79);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(bulkShardRequest82);
        org.junit.Assert.assertTrue("'" + refreshPolicy83 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy83.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest84);
        org.junit.Assert.assertNotNull(bulkShardRequest85);
        org.junit.Assert.assertNotNull(bulkShardRequest86);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.setRoutingNumShards((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = builder6.mapping("index.version.upgraded");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.putMapping(mappingMetaData13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mappingMetaData12);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.String str6 = shardFailure4.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting7 = shardFailure4.routing;
        java.lang.String str8 = shardFailure4.reason;
        java.lang.Throwable throwable9 = shardFailure4.cause;
        java.lang.Throwable throwable10 = shardFailure4.cause;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(shardRouting7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(throwable9);
        org.junit.Assert.assertNull(throwable10);
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest(35, actionRequest1);
        org.elasticsearch.action.ActionRequest actionRequest3 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.action.ActionRequest actionRequest4 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(actionRequest3);
        org.junit.Assert.assertNull(actionRequest4);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        long long3 = indexMetaData1.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData1.getState();
        java.util.Set<java.lang.String> strSet6 = null; // flaky: indexMetaData1.activeAllocationIds((int) (short) 1);
        long long7 = indexMetaData1.getCreationDate();
        boolean boolean9 = indexMetaData1.isSameUUID("current version [3] is different than the one provided [-1]");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet11 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(0, indexMetaData1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        bulkShardRequest53.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest53.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest24.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest24.index("index.data_path");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress65 = null;
        bulkShardRequest64.remoteAddress(transportAddress65);
        org.elasticsearch.action.support.IndicesOptions indicesOptions67 = bulkShardRequest64.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest64.index("index.auto_expand_replicas");
        org.elasticsearch.tasks.TaskId taskId70 = bulkShardRequest69.getParentTask();
        bulkShardRequest24.setParentTask(taskId70);
        long long72 = bulkShardRequest24.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str74 = bulkShardRequest73.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy75 = bulkShardRequest73.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest76 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress77 = null;
        bulkShardRequest76.remoteAddress(transportAddress77);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest80 = bulkShardRequest76.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue81 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = bulkShardRequest80.timeout(timeValue81);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest83 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str84 = bulkShardRequest83.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy85 = bulkShardRequest83.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel86 = bulkShardRequest83.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest87 = bulkShardRequest80.consistencyLevel(writeConsistencyLevel86);
        org.elasticsearch.index.shard.ShardId shardId88 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest89 = bulkShardRequest80.setShardId(shardId88);
        org.elasticsearch.common.unit.TimeValue timeValue90 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest91 = bulkShardRequest80.timeout(timeValue90);
        long long92 = bulkShardRequest91.primaryTerm();
        org.elasticsearch.tasks.TaskId taskId93 = bulkShardRequest91.getParentTask();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel94 = bulkShardRequest91.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest95 = bulkShardRequest73.consistencyLevel(writeConsistencyLevel94);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest96 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel94);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest98 = bulkShardRequest96.index("current version [52] is higher or equal to the one provided [100]");
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(indicesOptions67);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNotNull(taskId70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L + "'", long72 == 100L);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + refreshPolicy75 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy75.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest80);
        org.junit.Assert.assertNotNull(bulkShardRequest82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + refreshPolicy85 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy85.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel86 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel86.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest87);
        org.junit.Assert.assertNotNull(bulkShardRequest89);
        org.junit.Assert.assertNotNull(bulkShardRequest91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(taskId93);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel94 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel94.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest95);
        org.junit.Assert.assertNotNull(bulkShardRequest96);
        org.junit.Assert.assertNotNull(bulkShardRequest98);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest12.remoteAddress(transportAddress13);
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest12.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException16 = bulkShardRequest12.validate();
        java.lang.String str17 = bulkShardRequest12.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = bulkShardRequest12.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest12.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple20 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params11, (java.lang.IllegalArgumentException) actionRequestValidationException19);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = settings9.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNotNull(indicesOptions15);
        org.junit.Assert.assertNotNull(actionRequestValidationException16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(transportAddress18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet11 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int12 = indexMetaData0.getRoutingFactor();
        int int13 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        long long5 = versionType0.updateVersion((long) 10, 32L);
        long long8 = versionType0.updateVersion((long) 'a', (long) 10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 11L + "'", long5 == 11L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 98L + "'", long8 == 98L);
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType5 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        java.lang.Class<?> wildcardClass7 = versionType6.getClass();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [1] is higher or equal to the one provided [52]", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest10.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest10.validate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest10.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest10.remoteAddress(transportAddress17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest19.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str27 = bulkShardRequest26.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest26.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest31.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str46 = bulkShardRequest45.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = bulkShardRequest0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNull(actionRequestValidationException9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel41 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel41.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest11.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.setRefreshPolicy("");
        bulkShardRequest17.primaryTerm(10L);
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest17.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest22.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException26 = bulkShardRequest22.validate();
        org.elasticsearch.common.unit.TimeValue timeValue27 = bulkShardRequest22.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest22.index("index.blocks.write");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest17.setRefreshPolicy(refreshPolicy30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest0.setRefreshPolicy(refreshPolicy30);
        java.lang.Class<?> wildcardClass33 = bulkShardRequest32.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNotNull(actionRequestValidationException26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.removeAllAliases();
        int int10 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.putMapping(mappingMetaData11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        java.lang.String str18 = bulkShardRequest13.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest13.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest20.index("index.number_of_replicas");
        bulkShardRequest22.primaryTerm((long) (short) -1);
        org.elasticsearch.common.io.stream.StreamInput streamInput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest22.readFrom(streamInput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        bulkShardRequest15.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest24.remoteAddress(transportAddress25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException28 = bulkShardRequest24.validate();
        org.elasticsearch.common.unit.TimeValue timeValue29 = bulkShardRequest24.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest24.index("index.blocks.write");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest24.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest15.setRefreshPolicy(refreshPolicy32);
        java.lang.String str34 = bulkShardRequest15.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy35 = bulkShardRequest15.getRefreshPolicy();
        bulkShardRequest15.primaryTerm((long) 97);
        bulkShardRequest15.primaryTerm((long) (-1));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel22 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel22.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertNotNull(actionRequestValidationException28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "index.version.created" + "'", str34, "index.version.created");
        org.junit.Assert.assertTrue("'" + refreshPolicy35 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy35.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData0.getMappings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params28 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = indexMetaData0.toXContent(xContentBuilder27, params28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(params28);
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("state-");
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(version10);
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("current version [-1] is higher than the one provided [52]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        long long8 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state9);
        int int11 = builder5.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder5.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder9.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = builder12.mapping("index.");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData14);
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.setShardId(shardId15);
        java.lang.String str17 = bulkShardRequest11.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest18.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest18.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest11.setRefreshPolicy(refreshPolicy23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest11.setShardId(shardId25);
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = bulkShardRequest11.remoteAddress();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "indices:data/write/bulk[s]" + "'", str17, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertNotNull(actionRequestValidationException22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(transportAddress27);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        boolean boolean6 = indexMetaData0.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData7.activeAllocationIds((int) (short) 1);
        java.lang.String str13 = indexMetaData7.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData0.getAliases();
        int int16 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData0.getCustoms();
        int int18 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean6 = versionType2.isVersionConflictForWrites((long) (-1), (long) (byte) 1, false);
        org.elasticsearch.index.VersionType versionType7 = versionType2.versionTypeForReplicationAndRecovery();
        java.lang.String str11 = versionType2.explainConflictForWrites(98L, (long) 'a', false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType12 = org.elasticsearch.index.VersionType.fromString("", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "current version [98] is different than the one provided [97]" + "'", str11, "current version [98] is different than the one provided [97]");
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.removeAlias("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.putCustom("current version [-1] is different than the one provided [100]", custom15);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = bulkShardRequest15.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.number_of_replicas");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 2);
        java.lang.String str4 = versionType1.explainConflictForReads((long) (byte) 10, 1L);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [10] is different than the one provided [1]" + "'", str4, "current version [10] is different than the one provided [1]");
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        int int7 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("current version [0] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData9.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData9.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters27);
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest35.remoteAddress(transportAddress36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest35.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest39.timeout(timeValue40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel45);
        bulkShardRequest46.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest50.remoteAddress(transportAddress51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest50.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue55 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.timeout(timeValue55);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str58 = bulkShardRequest57.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy59 = bulkShardRequest57.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel60 = bulkShardRequest57.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest54.consistencyLevel(writeConsistencyLevel60);
        org.elasticsearch.index.shard.ShardId shardId62 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest54.setShardId(shardId62);
        org.elasticsearch.common.unit.TimeValue timeValue64 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest54.timeout(timeValue64);
        org.elasticsearch.common.transport.TransportAddress transportAddress66 = null;
        bulkShardRequest65.remoteAddress(transportAddress66);
        org.elasticsearch.index.shard.ShardId shardId68 = bulkShardRequest65.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions69 = bulkShardRequest65.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions70 = bulkShardRequest65.indicesOptions();
        org.elasticsearch.tasks.TaskId taskId71 = bulkShardRequest65.getParentTask();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy72 = bulkShardRequest65.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = bulkShardRequest46.setRefreshPolicy(refreshPolicy72);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = bulkShardRequest34.setRefreshPolicy(refreshPolicy72);
        long long75 = bulkShardRequest34.primaryTerm();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + refreshPolicy59 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy59.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel60 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel60.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNull(shardId68);
        org.junit.Assert.assertNotNull(indicesOptions69);
        org.junit.Assert.assertNotNull(indicesOptions70);
        org.junit.Assert.assertNotNull(taskId71);
        org.junit.Assert.assertTrue("'" + refreshPolicy72 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy72.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest73);
        org.junit.Assert.assertNotNull(bulkShardRequest74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        java.lang.Class<?> wildcardClass10 = indexMetaData0.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest11.remoteAddress(transportAddress12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.timeout(timeValue16);
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.setShardId(shardId18);
        bulkShardRequest19.setParentTask("state-", (long) (byte) -1);
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.Type, org.elasticsearch.common.io.stream.Streamable> typeTuple23 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.Type) wildcardClass10, (org.elasticsearch.common.io.stream.Streamable) bulkShardRequest19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions24 = bulkShardRequest19.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.setRefreshPolicy("index.blocks.write");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [index.blocks.write].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(typeTuple23);
        org.junit.Assert.assertNotNull(indicesOptions24);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest15.validate();
        java.lang.String str20 = bulkShardRequest15.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest15.getRefreshPolicy();
        boolean boolean23 = bulkShardRequest15.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest24.remoteAddress(transportAddress25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest24.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest28.timeout(timeValue29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str32 = bulkShardRequest31.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy33 = bulkShardRequest31.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = bulkShardRequest31.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest28.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.common.unit.TimeValue timeValue36 = bulkShardRequest35.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest35.index("indices:data/write/bulk[s]");
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest38.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel42 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress44 = null;
        bulkShardRequest43.remoteAddress(transportAddress44);
        org.elasticsearch.action.support.IndicesOptions indicesOptions46 = bulkShardRequest43.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException47 = bulkShardRequest43.validate();
        java.lang.String str48 = bulkShardRequest43.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel49 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest38.consistencyLevel(writeConsistencyLevel49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel49);
        org.elasticsearch.common.xcontent.ToXContent.Params params52 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress54 = null;
        bulkShardRequest53.remoteAddress(transportAddress54);
        org.elasticsearch.action.support.IndicesOptions indicesOptions56 = bulkShardRequest53.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException57 = bulkShardRequest53.validate();
        java.lang.String str58 = bulkShardRequest53.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress59 = bulkShardRequest53.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException60 = bulkShardRequest53.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple61 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params52, (java.lang.IllegalArgumentException) actionRequestValidationException60);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest51, params52);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder14, params52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(transportAddress21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + refreshPolicy33 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy33.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel34 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel34.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(timeValue36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "indices:data/write/bulk[s]" + "'", str39, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel42 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel42.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions46);
        org.junit.Assert.assertNotNull(actionRequestValidationException47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel49 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel49.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(params52);
        org.junit.Assert.assertNotNull(indicesOptions56);
        org.junit.Assert.assertNotNull(actionRequestValidationException57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(transportAddress59);
        org.junit.Assert.assertNotNull(actionRequestValidationException60);
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.setShardId(shardId7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest4.remoteAddress(transportAddress9);
        org.elasticsearch.index.shard.ShardId shardId11 = bulkShardRequest4.shardId();
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.support.IndicesOptions indicesOptions14 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.common.io.stream.StreamInput streamInput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest13.readFrom(streamInput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(shardId11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(indicesOptions14);
        org.junit.Assert.assertNotNull(indicesOptions15);
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.Version version15 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = builder16.build();
        boolean boolean19 = indexMetaData17.isSameUUID("index.blocks.metadata");
        int int20 = indexMetaData17.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData17.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData17.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData8.diff(indexMetaData17);
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData8.activeAllocationIds(10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long27 = indexMetaData26.getCreationDate();
        org.apache.lucene.util.Version version28 = indexMetaData26.getMinimumCompatibleVersion();
        long long29 = indexMetaData26.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap30 = indexMetaData26.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData26.getInitialRecoveryFilters();
        org.elasticsearch.Version version32 = indexMetaData26.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData26.getAliases();
        int int34 = indexMetaData26.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long36 = indexMetaData35.getCreationDate();
        org.apache.lucene.util.Version version37 = indexMetaData35.getMinimumCompatibleVersion();
        long long38 = indexMetaData35.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap39 = indexMetaData35.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData35.includeFilters();
        java.lang.String str41 = indexMetaData35.getIndexUUID();
        org.elasticsearch.Version version42 = indexMetaData35.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData35.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff45 = indexMetaData26.diff(indexMetaData35);
        org.elasticsearch.common.settings.Settings settings46 = indexMetaData35.getSettings();
        boolean boolean47 = indexMetaData8.equals((java.lang.Object) settings46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap48 = indexMetaData8.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "_na_" + "'", str41, "_na_");
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertNotNull(indexMetaDataDiff45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        int int23 = indexMetaData0.getRoutingNumShards();
        long long24 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap25 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.String str6 = shardFailure4.reason;
        java.lang.Throwable throwable7 = shardFailure4.cause;
        java.lang.String str8 = shardFailure4.reason;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting9 = shardFailure4.routing;
        java.lang.Throwable throwable10 = shardFailure4.cause;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(throwable7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(shardRouting9);
        org.junit.Assert.assertNull(throwable10);
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        boolean boolean20 = indexMetaData0.isSameUUID("current version [52] is higher or equal to the one provided [100]");
        org.apache.lucene.util.Version version21 = indexMetaData0.getMinimumCompatibleVersion();
        int int22 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest24.remoteAddress(transportAddress25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException28 = bulkShardRequest24.validate();
        java.lang.String str29 = bulkShardRequest24.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest24.getRefreshPolicy();
        boolean boolean32 = bulkShardRequest24.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest33.remoteAddress(transportAddress34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest33.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest37.timeout(timeValue38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str41 = bulkShardRequest40.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy42 = bulkShardRequest40.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest37.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = bulkShardRequest44.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest44.index("indices:data/write/bulk[s]");
        java.lang.String str48 = bulkShardRequest47.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest47.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = bulkShardRequest47.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest52.remoteAddress(transportAddress53);
        org.elasticsearch.action.support.IndicesOptions indicesOptions55 = bulkShardRequest52.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException56 = bulkShardRequest52.validate();
        java.lang.String str57 = bulkShardRequest52.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel58 = bulkShardRequest52.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest47.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.common.xcontent.ToXContent.Params params61 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress63 = null;
        bulkShardRequest62.remoteAddress(transportAddress63);
        org.elasticsearch.action.support.IndicesOptions indicesOptions65 = bulkShardRequest62.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException66 = bulkShardRequest62.validate();
        java.lang.String str67 = bulkShardRequest62.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress68 = bulkShardRequest62.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException69 = bulkShardRequest62.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple70 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params61, (java.lang.IllegalArgumentException) actionRequestValidationException69);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple71 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest60, params61);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = indexMetaData0.toXContent(xContentBuilder23, params61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertNotNull(actionRequestValidationException28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(transportAddress30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + refreshPolicy42 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy42.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel43 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel43.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(timeValue45);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "indices:data/write/bulk[s]" + "'", str48, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel51 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel51.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions55);
        org.junit.Assert.assertNotNull(actionRequestValidationException56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel58 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel58.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNotNull(params61);
        org.junit.Assert.assertNotNull(indicesOptions65);
        org.junit.Assert.assertNotNull(actionRequestValidationException66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(transportAddress68);
        org.junit.Assert.assertNotNull(actionRequestValidationException69);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.readDiffFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(version9);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        bulkShardRequest10.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str14 = bulkShardRequest13.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy15 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest10.setRefreshPolicy(refreshPolicy15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest0.setRefreshPolicy(refreshPolicy15);
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest0.remoteAddress(transportAddress20);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel3 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel3.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + refreshPolicy15 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy15.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNull(transportAddress19);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        long long16 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str19 = bulkShardRequest18.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest21 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.tasks.TaskId taskId22 = bulkShardRequest18.getParentTask();
        bulkShardRequest15.setParentTask(taskId22);
        boolean boolean24 = bulkShardRequest15.getShouldPersistResult();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple4.v2();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str7 = bulkShardRequest6.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest6.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest6.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest10.indicesOptions();
        boolean boolean12 = clusterBlockTuple4.equals((java.lang.Object) bulkShardRequest10);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock13 = clusterBlockTuple4.v1();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "indices:data/write/bulk[s]" + "'", strComparable5, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(clusterBlock13);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.creation_date_string");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.shadow_replicas");
        java.lang.Comparable<java.lang.String> strComparable9 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple10 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, strComparable9);
        org.junit.Assert.assertNotNull(clusterBlock0);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray1 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.EnumSet<org.elasticsearch.index.shard.IndexShardState> indexShardStateSet3 = java.util.EnumSet.noneOf(org.elasticsearch.index.shard.IndexShardState.class);
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet3, indexShardStateArray1);
        org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, java.util.EnumSet<org.elasticsearch.index.shard.IndexShardState>> strComparableTuple5 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Comparable<java.lang.String>) "index.version.created_string", indexShardStateSet3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        org.apache.lucene.util.Version version8 = indexMetaData6.getMinimumCompatibleVersion();
        long long9 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.Version version16 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData6.diff(indexMetaData18);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData18.excludeFilters();
        org.elasticsearch.Version version21 = indexMetaData18.getCreationVersion();
        org.elasticsearch.common.collect.Tuple<java.util.Set<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.common.xcontent.ToXContent> indexShardStateSetTuple22 = org.elasticsearch.common.collect.Tuple.tuple((java.util.Set<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet3, (org.elasticsearch.common.xcontent.ToXContent) indexMetaData18);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        java.lang.String[] strArray40 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder27.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.common.xcontent.ToXContent.Params params44 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strSetTuple45 = new org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strSet41, params44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData18, xContentBuilder23, params44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexShardStateArray1);
        org.junit.Assert.assertNotNull(indexShardStateSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strComparableTuple5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(indexShardStateSetTuple22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(params44);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest6.remoteAddress(transportAddress13);
        bulkShardRequest6.setParentTask("current version [52] is higher or equal to the one provided [100]", (long) (short) 0);
        bulkShardRequest6.primaryTerm(10L);
        org.elasticsearch.tasks.TaskId taskId20 = bulkShardRequest6.getParentTask();
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest6.indicesOptions();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(taskId20);
        org.junit.Assert.assertNotNull(indicesOptions21);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.numberOfReplicas((int) (short) 100);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (byte) 10, (long) '4');
        boolean boolean5 = versionType0.validateVersionForWrites((long) (short) 1);
        byte byte6 = versionType0.getValue();
        boolean boolean9 = versionType0.isVersionConflictForReads((long) (byte) 100, (long) (short) -1);
        org.elasticsearch.index.VersionType versionType10 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean14 = versionType0.isVersionConflictForWrites((long) 0, (long) (byte) 1, true);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(versionType10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean5 = versionType1.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType6.isVersionConflictForWrites(1L, (long) (byte) 100, false);
        boolean boolean12 = versionType6.validateVersionForWrites((long) '4');
        boolean boolean16 = versionType6.isVersionConflictForWrites(0L, (long) (byte) 10, true);
        boolean boolean18 = versionType6.validateVersionForReads(1L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType19 = org.elasticsearch.index.VersionType.fromString("current version [-1] is higher than the one provided [32]", versionType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [-1] is higher than the one provided [32]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        long long7 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("current version [0] is different than the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version(100L);
        java.lang.String str12 = builder11.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.creation_date" + "'", str12, "index.creation_date");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.creation_date");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.primaryTerm((int) (short) 1, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.index("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        long long12 = indexMetaData10.getVersion();
        int int13 = indexMetaData10.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData10.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet17 = indexMetaData10.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder8.putActiveAllocationIds((-1), strSet17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = builder21.mapping("index.priority");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = builder21.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        long long30 = indexMetaData27.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap31 = indexMetaData27.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData27.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap33 = indexMetaData27.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters35 = indexMetaData27.excludeFilters();
        java.util.Set<java.lang.String> strSet37 = indexMetaData27.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder21.putActiveAllocationIds(100, strSet37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder18.putActiveAllocationIds((int) (byte) 0, strSet37);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = builder18.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [state-]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNull(discoveryNodeFilters35);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        bulkShardRequest7.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest13.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest7.timeout(timeValue18);
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest4.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.index("index.version.minimum_compatible");
        boolean boolean24 = bulkShardRequest21.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = bulkShardRequest21.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting5 = shardFailure4.routing;
        java.lang.String str6 = shardFailure4.indexUUID;
        java.lang.String str7 = shardFailure4.indexUUID;
        java.lang.String str8 = shardFailure4.reason;
        java.lang.String str9 = shardFailure4.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting10 = shardFailure4.routing;
        java.lang.String str11 = shardFailure4.indexUUID;
        org.junit.Assert.assertNull(shardRouting5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(shardRouting10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        boolean boolean5 = indexMetaData1.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.apache.lucene.util.Version version7 = indexMetaData1.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData1.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.Version version13 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData10.requireFilters();
        boolean boolean16 = indexMetaData10.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData17.activeAllocationIds((int) (short) 1);
        java.lang.String str23 = indexMetaData17.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData10.diff(indexMetaData17);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData1.diff(indexMetaData10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str28 = bulkShardRequest27.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest30 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest27);
        bulkShardRequest27.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest33.remoteAddress(transportAddress34);
        org.elasticsearch.action.support.IndicesOptions indicesOptions36 = bulkShardRequest33.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException37 = bulkShardRequest33.validate();
        org.elasticsearch.common.unit.TimeValue timeValue38 = bulkShardRequest33.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest27.timeout(timeValue38);
        org.elasticsearch.common.unit.TimeValue timeValue40 = bulkShardRequest27.timeout();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException41 = bulkShardRequest27.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getCreationDate();
        long long44 = indexMetaData42.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData42.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long47 = indexMetaData46.getCreationDate();
        org.apache.lucene.util.Version version48 = indexMetaData46.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom54 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder50.putCustom("state-", custom54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long57 = indexMetaData56.getCreationDate();
        long long58 = indexMetaData56.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state59 = indexMetaData56.getState();
        boolean boolean61 = indexMetaData56.isSameUUID("index.");
        org.elasticsearch.Version version62 = indexMetaData56.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings63 = indexMetaData56.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder55.settings(settings63);
        org.elasticsearch.common.settings.Settings settings65 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings63);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings65);
        boolean boolean67 = indexMetaData46.equals((java.lang.Object) settings66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData46);
        boolean boolean69 = indexMetaData42.equals((java.lang.Object) builder68);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Object> validationExceptionTuple70 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Object>((org.elasticsearch.common.ValidationException) actionRequestValidationException41, (java.lang.Object) indexMetaData42);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap71 = indexMetaData42.getCustoms();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData>, org.elasticsearch.common.xcontent.FromXContentBuilder<org.elasticsearch.cluster.metadata.IndexMetaData>> indexMetaDataDiffTuple72 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData>, org.elasticsearch.common.xcontent.FromXContentBuilder<org.elasticsearch.cluster.metadata.IndexMetaData>>(indexMetaDataDiff25, (org.elasticsearch.common.xcontent.FromXContentBuilder<org.elasticsearch.cluster.metadata.IndexMetaData>) indexMetaData42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet74 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (short) -1, indexMetaData42, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertNotNull(indexMetaDataDiff25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions36);
        org.junit.Assert.assertNotNull(actionRequestValidationException37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(timeValue40);
        org.junit.Assert.assertNotNull(actionRequestValidationException41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(version48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + state59 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state59.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(version62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap71);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        java.lang.String str6 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        boolean boolean11 = indexMetaData7.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData7.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData7.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock16, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean20 = clusterBlockTuple18.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.support.IndicesOptions indicesOptions24 = bulkShardRequest21.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException25 = bulkShardRequest21.validate();
        java.lang.String str26 = bulkShardRequest21.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel27 = bulkShardRequest21.consistencyLevel();
        boolean boolean28 = clusterBlockTuple18.equals((java.lang.Object) writeConsistencyLevel27);
        boolean boolean29 = indexMetaData7.equals((java.lang.Object) clusterBlockTuple18);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap31 = indexMetaData7.getAliases();
        java.lang.String str32 = indexMetaData7.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getCreationDate();
        org.apache.lucene.util.Version version35 = indexMetaData33.getMinimumCompatibleVersion();
        long long36 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap37 = indexMetaData33.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData33.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap39 = indexMetaData33.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData33.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap41 = indexMetaData33.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData7.diff(indexMetaData33);
        boolean boolean44 = clusterBlockTuple2.equals((java.lang.Object) indexMetaData33);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput45 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData33.writeTo(streamOutput45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str6, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(clusterBlock16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indicesOptions24);
        org.junit.Assert.assertNotNull(actionRequestValidationException25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel27 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel27.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.elasticsearch.transport.TransportService transportService8 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService9 = null;
        org.elasticsearch.indices.IndicesService indicesService10 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool11 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction12 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction13 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper14 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters15 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction17 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings6, transportService8, clusterService9, indicesService10, threadPool11, shardStateAction12, mappingUpdatedAction13, updateHelper14, actionFilters15, indexNameExpressionResolver16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        long long12 = indexMetaData10.getVersion();
        int int13 = indexMetaData10.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData10.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet17 = indexMetaData10.activeAllocationIds((int) (short) 0);
        org.elasticsearch.Version version18 = indexMetaData10.getCreationVersion();
        int int19 = indexMetaData10.getRoutingFactor();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData10.activeAllocationIds(10);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest1.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest1.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest1.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.index("index.blocks.write");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.index("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.index.shard.ShardId shardId11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.setShardId(shardId11);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest(32, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        org.elasticsearch.action.ActionRequest actionRequest14 = bulkItemRequest13.request();
        int int15 = bulkItemRequest13.id();
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertNotNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(actionRequest14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32 + "'", int15 == 32);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest2.remoteAddress(transportAddress3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest2.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy7 = bulkShardRequest2.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.setRefreshPolicy(refreshPolicy7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = bulkShardRequest8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(transportAddress1);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertTrue("'" + refreshPolicy7 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy7.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest8);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.index("index.blocks.write");
        boolean boolean23 = clusterBlockTuple6.equals((java.lang.Object) builder22);
        java.lang.String str24 = clusterBlockTuple6.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock25 = clusterBlockTuple6.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple27 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock25, (java.lang.Comparable<java.lang.String>) "index.data_path");
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]" + "'", str24, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        org.junit.Assert.assertNotNull(clusterBlock25);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte7 = state6.id();
        byte byte8 = state6.id();
        byte byte9 = state6.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder14.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder10.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.setRoutingNumShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.version((long) 52);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.putMapping(mappingMetaData33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.includeFilters();
        int int13 = indexMetaData8.getRoutingNumShards();
        long long14 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting15 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException21 = bulkShardRequest19.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure23 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting17, "active_allocations", (java.lang.Throwable) actionRequestValidationException21, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure25 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting15, "", (java.lang.Throwable) actionRequestValidationException21, "index.blocks.read_only");
        java.lang.Throwable throwable26 = shardFailure25.cause;
        java.lang.Class<?> wildcardClass27 = shardFailure25.getClass();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, java.lang.reflect.Type> writeableTuple28 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData8, (java.lang.reflect.Type) wildcardClass27);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData8.getMappings();
        int int30 = indexMetaData8.getRoutingNumShards();
        org.elasticsearch.Version version31 = indexMetaData8.getUpgradedVersion();
        int int32 = indexMetaData8.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData8.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException21);
        org.junit.Assert.assertNotNull(throwable26);
        org.junit.Assert.assertEquals(throwable26.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable26.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable26.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(writeableTuple28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData5.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData5.getAliases();
        long long16 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.common.settings.Settings.Builder builder18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.settings(builder18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        java.lang.String str18 = bulkShardRequest13.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest13.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel19);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest11.setRefreshPolicy("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        long long11 = builder10.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        org.apache.lucene.util.Version version16 = indexMetaData14.getMinimumCompatibleVersion();
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData14.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.removeAlias("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder24.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple41 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap20, (java.lang.Cloneable) strSet38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder10.putActiveAllocationIds((int) (byte) 2, (java.util.Set<java.lang.String>) strSet38);
        long long43 = builder42.version();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        byte byte2 = versionType0.getValue();
        long long5 = versionType0.updateVersion((long) (byte) 1, (-1L));
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 3 + "'", byte2 == (byte) 3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple13 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException8, builder10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest14.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest18.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str22 = bulkShardRequest21.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest21.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.index.shard.ShardId shardId26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest18.setShardId(shardId26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest18.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.index("_na_");
        org.elasticsearch.common.collect.Tuple<java.lang.Throwable, org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>> throwableTuple32 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Throwable) actionRequestValidationException8, (org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest29);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure34 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.data_path", (java.lang.Throwable) actionRequestValidationException8, "index.version.minimum_compatible");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure36 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [1] is higher or equal to the one provided [-1]", (java.lang.Throwable) actionRequestValidationException8, "current version [1] is higher or equal to the one provided [-1]");
        java.lang.Throwable throwable37 = shardFailure36.cause;
        java.lang.Throwable throwable38 = shardFailure36.cause;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting39 = shardFailure36.routing;
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(throwableTuple32);
        org.junit.Assert.assertNotNull(throwable37);
        org.junit.Assert.assertEquals(throwable37.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(throwable38);
        org.junit.Assert.assertEquals(throwable38.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable38.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable38.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNull(shardRouting39);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.putMapping(mappingMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray9 = bulkShardRequest6.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest0.remoteAddress(transportAddress4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest7.getParentTask();
        bulkShardRequest0.setParentTask(taskId11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.timeout(timeValue18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str21 = bulkShardRequest20.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = null;
        bulkShardRequest26.remoteAddress(transportAddress27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest26.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest30.timeout(timeValue31);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = bulkShardRequest0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        java.lang.String str11 = indexMetaData5.getIndexUUID();
        int int12 = indexMetaData5.getTotalNumberOfShards();
        boolean boolean13 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData5.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData5.getInitialRecoveryFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData5.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.creationDate(10L);
        int int10 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder1.putMapping(mappingMetaData11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        boolean boolean29 = indexMetaData0.isSameUUID("index.version.upgraded");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress33 = null;
        bulkShardRequest32.remoteAddress(transportAddress33);
        org.elasticsearch.action.support.IndicesOptions indicesOptions35 = bulkShardRequest32.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException36 = bulkShardRequest32.validate();
        java.lang.String str37 = bulkShardRequest32.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = bulkShardRequest32.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException39 = bulkShardRequest32.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple40 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params31, (java.lang.IllegalArgumentException) actionRequestValidationException39);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder30, params31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(params31);
        org.junit.Assert.assertNotNull(indicesOptions35);
        org.junit.Assert.assertNotNull(actionRequestValidationException36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(transportAddress38);
        org.junit.Assert.assertNotNull(actionRequestValidationException39);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder8.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder8.putCustom("index.version.upgraded_string", custom32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder8.numberOfShards((int) (byte) 2);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.putAlias(aliasMetaData36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.reason;
        java.lang.String str6 = shardFailure4.indexUUID;
        java.lang.Throwable throwable7 = shardFailure4.cause;
        java.lang.String str8 = shardFailure4.reason;
        java.lang.String str9 = shardFailure4.reason;
        java.lang.String str10 = shardFailure4.reason;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(throwable7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData5.mapping("index.");
        java.lang.String str16 = indexMetaData5.getIndexUUID();
        org.apache.lucene.util.Version version17 = indexMetaData5.getMinimumCompatibleVersion();
        int int18 = indexMetaData5.getNumberOfShards();
        int int19 = indexMetaData5.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData5.getCustoms();
        java.lang.Class<?> wildcardClass21 = indexMetaData5.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertNull(version17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock4 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock4, (java.lang.Comparable<java.lang.String>) "current version [0] is higher or equal to the one provided [97]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock7 = clusterBlockTuple6.v1();
        boolean boolean9 = clusterBlockTuple6.equals((java.lang.Object) "current version [-1] is higher than the one provided [-1]");
        java.lang.String str10 = clusterBlockTuple6.toString();
        org.elasticsearch.index.VersionType versionType11 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean14 = versionType11.isVersionConflictForReads((long) (byte) 10, (long) '4');
        boolean boolean16 = versionType11.validateVersionForWrites((long) (short) 1);
        boolean boolean18 = versionType11.validateVersionForWrites(10L);
        boolean boolean21 = versionType11.isVersionConflictForReads((long) (short) 10, (long) (byte) 10);
        byte byte22 = versionType11.getValue();
        boolean boolean25 = versionType11.isVersionConflictForReads((long) '#', 98L);
        boolean boolean26 = clusterBlockTuple6.equals((java.lang.Object) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAlias("index.uuid");
        java.lang.String[] strArray43 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder30.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray47 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList48 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList48, indexShardStateArray47);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state50 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte51 = state50.id();
        byte byte52 = state50.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple53 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList48, state50);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte55 = state54.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple56 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList48, state54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder30.state(state54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder57.version((long) ' ');
        boolean boolean60 = clusterBlockTuple6.equals((java.lang.Object) builder57);
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock4);
        org.junit.Assert.assertNotNull(clusterBlock7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]" + "'", str10, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]");
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 3 + "'", byte22 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexShardStateArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + state50 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state50.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) 0 + "'", byte51 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte52 + "' != '" + (byte) 0 + "'", byte52 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 0 + "'", byte55 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        long long10 = indexMetaData0.getCreationDate();
        java.lang.String str11 = indexMetaData0.getIndexUUID();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = indexMetaData0.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.index("current version [3] is different than the one provided [-1]");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.putAlias(aliasMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int14 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.version.minimum_compatible");
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("index.shared_filesystem");
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str14 = bulkShardRequest13.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy15 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest13.validate();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest13.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest13.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str30 = bulkShardRequest29.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress35 = null;
        bulkShardRequest34.remoteAddress(transportAddress35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest34.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest38.timeout(timeValue39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str42 = bulkShardRequest41.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy43 = bulkShardRequest41.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest41.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest38.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str49 = bulkShardRequest48.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy50 = bulkShardRequest48.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = bulkShardRequest48.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel51);
        boolean boolean53 = bulkShardRequest52.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = null;
        bulkShardRequest55.remoteAddress(transportAddress56);
        org.elasticsearch.action.support.IndicesOptions indicesOptions58 = bulkShardRequest55.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest55.validate();
        java.lang.String str60 = bulkShardRequest55.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest55.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException62 = bulkShardRequest55.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple63 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params54, (java.lang.IllegalArgumentException) actionRequestValidationException62);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple64 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest52, params54);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder12, params54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + refreshPolicy15 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy15.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNull(actionRequestValidationException18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + refreshPolicy43 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy43.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + refreshPolicy50 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy50.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel51 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel51.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNotNull(indicesOptions58);
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(actionRequestValidationException62);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        int int9 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        long long12 = indexMetaData0.primaryTerm(0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser14 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexMetaData0.fromXContent(xContentParser14, parseFieldMatcher15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest17.index("index.");
        long long22 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest17.setRefreshPolicy(refreshPolicy24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest4.setRefreshPolicy(refreshPolicy24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest4.index("current version [0] is different than the one provided [100]");
        org.elasticsearch.index.shard.ShardId shardId29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest28.setShardId(shardId29);
        org.elasticsearch.index.shard.ShardId shardId31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest28.setShardId(shardId31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = bulkShardRequest32.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        int int5 = indexMetaData0.getNumberOfReplicas();
        int int6 = indexMetaData0.getRoutingFactor();
        int int7 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("current version [100] is different than the one provided [12]");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.removeAlias("index.uuid");
        java.lang.String[] strArray29 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder16.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet30);
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strSetTuple34 = new org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strSet30, params33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = indexMetaData0.toXContent(xContentBuilder12, params33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(params33);
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [32] is different than the one provided [11]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        java.lang.String str18 = bulkShardRequest13.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest13.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest20.index("index.number_of_replicas");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest23.remoteAddress(transportAddress24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest23.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest27.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str31 = bulkShardRequest30.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest35.remoteAddress(transportAddress36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest35.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest39.timeout(timeValue40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.index.shard.ShardId shardId48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest47.setShardId(shardId48);
        org.elasticsearch.tasks.TaskId taskId50 = bulkShardRequest49.getParentTask();
        bulkShardRequest22.setParentTask(taskId50);
        bulkShardRequest22.setParentTask("index.uuid", 0L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy55 = bulkShardRequest22.getRefreshPolicy();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(taskId50);
        org.junit.Assert.assertTrue("'" + refreshPolicy55 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy55.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        java.lang.String str18 = bulkShardRequest13.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest13.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest20.index("index.number_of_replicas");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest23.remoteAddress(transportAddress24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest23.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest27.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str31 = bulkShardRequest30.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest35.remoteAddress(transportAddress36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest35.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest39.timeout(timeValue40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.index.shard.ShardId shardId48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest47.setShardId(shardId48);
        org.elasticsearch.tasks.TaskId taskId50 = bulkShardRequest49.getParentTask();
        bulkShardRequest22.setParentTask(taskId50);
        bulkShardRequest22.setParentTask("current version [0] is higher than the one provided [3]", (long) 10);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(taskId50);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.uuid");
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        long long12 = indexMetaData10.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData10.getState();
        boolean boolean15 = indexMetaData10.isSameUUID("index.");
        org.elasticsearch.Version version16 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData10.getSettings();
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder8.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder22.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long26 = indexMetaData25.getCreationDate();
        long long27 = indexMetaData25.getVersion();
        int int28 = indexMetaData25.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet30 = null; // flaky: indexMetaData25.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet32 = indexMetaData25.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder23.putActiveAllocationIds((int) 'a', strSet32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder19.putActiveAllocationIds((int) (byte) 2, strSet32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.putActiveAllocationIds((int) (short) 100, strSet32);
        java.lang.Class<?> wildcardClass36 = strSet32.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.index.shard.ShardId shardId3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.setShardId(shardId3);
        boolean boolean5 = bulkShardRequest0.getShouldPersistResult();
        java.lang.String str6 = bulkShardRequest0.index();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.shadow_replicas");
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest10.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest10.validate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest10.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest10.remoteAddress(transportAddress17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest19.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str27 = bulkShardRequest26.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest26.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest31.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str46 = bulkShardRequest45.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel48);
        boolean boolean50 = bulkShardRequest49.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest52.remoteAddress(transportAddress53);
        org.elasticsearch.action.support.IndicesOptions indicesOptions55 = bulkShardRequest52.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException56 = bulkShardRequest52.validate();
        java.lang.String str57 = bulkShardRequest52.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress58 = bulkShardRequest52.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest52.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple60 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params51, (java.lang.IllegalArgumentException) actionRequestValidationException59);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple61 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest49, params51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder9, params51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel41 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel41.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(params51);
        org.junit.Assert.assertNotNull(indicesOptions55);
        org.junit.Assert.assertNotNull(actionRequestValidationException56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(transportAddress58);
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest5.setShardId(shardId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest5.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest19.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.timeout(timeValue24);
        org.elasticsearch.index.shard.ShardId shardId26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest23.setShardId(shardId26);
        org.elasticsearch.common.unit.TimeValue timeValue28 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest27.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest18.timeout(timeValue28);
        org.elasticsearch.action.support.IndicesOptions indicesOptions31 = bulkShardRequest18.indicesOptions();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest32 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 3, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest32.readFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(indicesOptions31);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getCreationDate();
        org.apache.lucene.util.Version version15 = indexMetaData13.getMinimumCompatibleVersion();
        long long16 = indexMetaData13.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData13.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData13.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData13.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData13.excludeFilters();
        java.util.Set<java.lang.String> strSet23 = indexMetaData13.activeAllocationIds((int) (short) 0);
        int int24 = indexMetaData13.getNumberOfShards();
        org.elasticsearch.Version version25 = indexMetaData13.getCreationVersion();
        org.apache.lucene.util.Version version26 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData0.diff(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap28 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.tasks.TaskId taskId14 = bulkShardRequest13.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.index("index.auto_expand_replicas");
        org.elasticsearch.index.shard.ShardId shardId17 = bulkShardRequest13.shardId();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(taskId14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(shardId17);
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.creationDate((long) (byte) 1);
        org.elasticsearch.common.settings.Settings.Builder builder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder7.settings(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        bulkShardRequest0.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.cluster.block.ClusterBlock> bulkShardRequestReplicationRequestTuple12 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.cluster.block.ClusterBlock>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest0, clusterBlock9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.timeout(timeValue18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str21 = bulkShardRequest20.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest17.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = bulkShardRequest17.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str31 = bulkShardRequest30.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest30.index("index.");
        long long35 = bulkShardRequest30.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest36.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest30.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest17.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress41 = null;
        bulkShardRequest40.remoteAddress(transportAddress41);
        org.elasticsearch.action.support.IndicesOptions indicesOptions43 = bulkShardRequest40.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException44 = bulkShardRequest40.validate();
        bulkShardRequest40.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy48 = bulkShardRequest40.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress50 = null;
        bulkShardRequest49.remoteAddress(transportAddress50);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest49.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress54 = null;
        bulkShardRequest49.remoteAddress(transportAddress54);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str58 = bulkShardRequest57.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy59 = bulkShardRequest57.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest60 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest57);
        bulkShardRequest57.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress64 = null;
        bulkShardRequest63.remoteAddress(transportAddress64);
        org.elasticsearch.action.support.IndicesOptions indicesOptions66 = bulkShardRequest63.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException67 = bulkShardRequest63.validate();
        org.elasticsearch.common.unit.TimeValue timeValue68 = bulkShardRequest63.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest57.timeout(timeValue68);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest49.timeout(timeValue68);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = bulkShardRequest40.timeout(timeValue68);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest39.timeout(timeValue68);
        org.elasticsearch.tasks.TaskId taskId73 = bulkShardRequest72.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress75 = null;
        bulkShardRequest74.remoteAddress(transportAddress75);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest78 = bulkShardRequest74.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue79 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest80 = bulkShardRequest78.timeout(timeValue79);
        bulkShardRequest80.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest83 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str84 = bulkShardRequest83.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy85 = bulkShardRequest83.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest86 = bulkShardRequest80.setRefreshPolicy(refreshPolicy85);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy87 = bulkShardRequest80.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest88 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress89 = null;
        bulkShardRequest88.remoteAddress(transportAddress89);
        org.elasticsearch.action.support.IndicesOptions indicesOptions91 = bulkShardRequest88.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException92 = bulkShardRequest88.validate();
        bulkShardRequest88.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy96 = bulkShardRequest88.getRefreshPolicy();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.WriteRequest.RefreshPolicy, org.elasticsearch.action.support.WriteRequest.RefreshPolicy> refreshPolicyTuple97 = org.elasticsearch.common.collect.Tuple.tuple(refreshPolicy87, refreshPolicy96);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest98 = bulkShardRequest72.setRefreshPolicy(refreshPolicy87);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest99 = bulkShardRequest0.setRefreshPolicy(refreshPolicy87);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(transportAddress29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(indicesOptions43);
        org.junit.Assert.assertNotNull(actionRequestValidationException44);
        org.junit.Assert.assertTrue("'" + refreshPolicy48 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy48.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + refreshPolicy59 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy59.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions66);
        org.junit.Assert.assertNotNull(actionRequestValidationException67);
        org.junit.Assert.assertNotNull(timeValue68);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNotNull(bulkShardRequest71);
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertNotNull(taskId73);
        org.junit.Assert.assertNotNull(bulkShardRequest78);
        org.junit.Assert.assertNotNull(bulkShardRequest80);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + refreshPolicy85 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy85.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest86);
        org.junit.Assert.assertTrue("'" + refreshPolicy87 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy87.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions91);
        org.junit.Assert.assertNotNull(actionRequestValidationException92);
        org.junit.Assert.assertTrue("'" + refreshPolicy96 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy96.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(refreshPolicyTuple97);
        org.junit.Assert.assertNotNull(bulkShardRequest98);
        org.junit.Assert.assertNotNull(bulkShardRequest99);
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.creationDate(100L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putMapping("current version [0] is higher than the one provided [3]", "index.uuid");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.removeAllAliases();
        org.elasticsearch.common.settings.Settings.Builder builder17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.settings(builder17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest0.remoteAddress(transportAddress4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest7.getParentTask();
        bulkShardRequest0.setParentTask(taskId11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.timeout(timeValue18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str21 = bulkShardRequest20.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        boolean boolean26 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        long long4 = builder3.version();
        long long5 = builder3.version();
        org.elasticsearch.common.settings.Settings.Builder builder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.settings(builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.index("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.Version version16 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        boolean boolean20 = indexMetaData18.isSameUUID("index.blocks.metadata");
        int int21 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder9.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.state(state22);
        long long25 = builder24.version();
        int int26 = builder24.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.version(10L);
        java.lang.String str29 = builder28.index();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "primary_terms" + "'", str29, "primary_terms");
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.setRoutingNumShards((int) ' ');
        java.lang.String str11 = builder10.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.putCustom("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]", custom13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest20 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        org.elasticsearch.tasks.TaskId taskId21 = bulkShardRequest17.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest22.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException26 = bulkShardRequest22.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple31 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException26, builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder33.putCustom("state-", custom37);
        int int39 = builder33.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long41 = indexMetaData40.getCreationDate();
        long long42 = indexMetaData40.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = indexMetaData40.getState();
        boolean boolean45 = indexMetaData40.isSameUUID("index.");
        org.elasticsearch.Version version46 = indexMetaData40.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings47 = indexMetaData40.getSettings();
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        boolean boolean49 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder33.settings(settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getCreationDate();
        long long63 = indexMetaData61.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder58.state(state64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder68.removeAlias("index.uuid");
        java.lang.String[] strArray83 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder70.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder65.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder53.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder33.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.common.collect.Tuple<java.lang.Exception, java.util.HashSet<java.lang.String>> exceptionTuple90 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Exception) actionRequestValidationException26, (java.util.HashSet<java.lang.String>) strSet84);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.IndicesRequest, java.util.HashSet<java.lang.String>> indicesRequestTuple91 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.action.IndicesRequest) bulkShardRequest17, (java.util.HashSet<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder10.putActiveAllocationIds((int) (byte) 0, (java.util.Set<java.lang.String>) strSet84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder92.numberOfShards((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.creation_date" + "'", str11, "index.creation_date");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId21);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNotNull(actionRequestValidationException26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(exceptionTuple90);
        org.junit.Assert.assertNotNull(indicesRequestTuple91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("indices:data/write/bulk[s]", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder19.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder17.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.index("index.version.minimum_compatible");
        int int30 = builder29.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.removeAllAliases();
        java.lang.String str32 = builder29.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "index.version.minimum_compatible" + "'", str32, "index.version.minimum_compatible");
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("current version [52] is different than the one provided [97]");
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.index("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.Version version16 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        boolean boolean20 = indexMetaData18.isSameUUID("index.blocks.metadata");
        int int21 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder9.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.state(state22);
        long long25 = builder24.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.index("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getCreationDate();
        long long43 = indexMetaData41.getVersion();
        int int44 = indexMetaData41.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet46 = null; // flaky: indexMetaData41.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet48 = indexMetaData41.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder39.putActiveAllocationIds((-1), strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = builder52.mapping("index.priority");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = builder52.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long59 = indexMetaData58.getCreationDate();
        org.apache.lucene.util.Version version60 = indexMetaData58.getMinimumCompatibleVersion();
        long long61 = indexMetaData58.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap62 = indexMetaData58.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters63 = indexMetaData58.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap64 = indexMetaData58.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap65 = indexMetaData58.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData58.excludeFilters();
        java.util.Set<java.lang.String> strSet68 = indexMetaData58.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder52.putActiveAllocationIds(100, strSet68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder49.putActiveAllocationIds((int) (byte) 0, strSet68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder29.putActiveAllocationIds(52, strSet68);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = builder71.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: [index.version.created] is not present in the index settings for index with uuid: [null]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(mappingMetaData54);
        org.junit.Assert.assertNull(mappingMetaData56);
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertNull(version60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap62);
        org.junit.Assert.assertNull(discoveryNodeFilters63);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap64);
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        int int7 = indexMetaData4.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData4.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet11 = indexMetaData4.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder2.putActiveAllocationIds((int) 'a', strSet11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder14.primaryTerm(35, 32L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        org.apache.lucene.util.Version version6 = indexMetaData4.getMinimumCompatibleVersion();
        org.elasticsearch.Version version7 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData4.requireFilters();
        boolean boolean10 = indexMetaData4.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData11.getState();
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 1);
        java.lang.String str17 = indexMetaData11.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData4.diff(indexMetaData11);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        int int15 = indexMetaData5.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest17.index("index.");
        long long22 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest17.setRefreshPolicy(refreshPolicy24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest4.setRefreshPolicy(refreshPolicy24);
        bulkShardRequest4.primaryTerm(0L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = bulkShardRequest29.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId31 = bulkShardRequest29.getParentTask();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel32);
        org.elasticsearch.common.unit.TimeValue timeValue34 = bulkShardRequest4.timeout();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock38 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple40 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock38, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean42 = clusterBlockTuple40.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable43 = clusterBlockTuple40.v2();
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray44 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList45 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList45, indexShardStateArray44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str48 = bulkShardRequest47.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy49 = bulkShardRequest47.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions52 = bulkShardRequest51.indicesOptions();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>> indexShardStateListTuple53 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>>((java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList45, (org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest51);
        boolean boolean54 = bulkShardRequest51.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId55 = bulkShardRequest51.getParentTask();
        boolean boolean56 = clusterBlockTuple40.equals((java.lang.Object) taskId55);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task57 = bulkShardRequest4.createTask((long) (-1), "current version [32] is higher than the one provided [10]", "current version [10] is different than the one provided [3]", taskId55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(transportAddress30);
        org.junit.Assert.assertNotNull(taskId31);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(timeValue34);
        org.junit.Assert.assertNotNull(clusterBlock38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + strComparable43 + "' != '" + "index.version.created" + "'", strComparable43, "index.version.created");
        org.junit.Assert.assertNotNull(indexShardStateArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + refreshPolicy49 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy49.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(indicesOptions52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(taskId55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getCreationDate();
        long long15 = indexMetaData13.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData13.getState();
        boolean boolean18 = indexMetaData13.isSameUUID("index.");
        long long19 = indexMetaData13.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData13.includeFilters();
        org.elasticsearch.Version version21 = indexMetaData13.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData9.diff(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData13.getCustoms();
        org.elasticsearch.Version version24 = indexMetaData13.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData13.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData13);
        int int27 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        long long7 = versionType0.updateVersion((long) 0, (long) 35);
        byte byte8 = versionType0.getValue();
        boolean boolean10 = versionType0.validateVersionForReads(32L);
        byte byte11 = versionType0.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray0 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState> indexShardStateSet1 = new java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, indexShardStateArray0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getCreationDate();
        org.apache.lucene.util.Version version5 = indexMetaData3.getMinimumCompatibleVersion();
        boolean boolean7 = indexMetaData3.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData3);
        org.apache.lucene.util.Version version9 = indexMetaData3.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData3.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        org.elasticsearch.Version version15 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.requireFilters();
        boolean boolean18 = indexMetaData12.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData3.diff(indexMetaData12);
        org.elasticsearch.common.collect.Tuple<java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.common.io.stream.Writeable> indexShardStateSetTuple20 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, (org.elasticsearch.common.io.stream.Writeable) indexMetaData12);
        boolean boolean22 = indexMetaData12.isSameUUID("index.version.upgraded");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData12.getInitialRecoveryFilters();
        boolean boolean25 = indexMetaData12.isSameUUID("current version [3] is different than the one provided [-1]");
        org.junit.Assert.assertNotNull(indexShardStateArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(indexShardStateSetTuple20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = builder1.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        bulkShardRequest10.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str14 = bulkShardRequest13.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy15 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest10.setRefreshPolicy(refreshPolicy15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest0.setRefreshPolicy(refreshPolicy15);
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest0.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = bulkShardRequest19.remoteAddress();
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest19.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy25 = bulkShardRequest24.getRefreshPolicy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel3 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel3.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + refreshPolicy15 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy15.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(transportAddress21);
        org.junit.Assert.assertNotNull(indicesOptions22);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertTrue("'" + refreshPolicy25 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy25.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        boolean boolean5 = indexMetaData1.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.apache.lucene.util.Version version7 = indexMetaData1.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData1.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.Version version13 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData10.requireFilters();
        boolean boolean16 = indexMetaData10.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData17.activeAllocationIds((int) (short) 1);
        java.lang.String str23 = indexMetaData17.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData10.diff(indexMetaData17);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData1.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getCreationDate();
        org.apache.lucene.util.Version version30 = indexMetaData28.getMinimumCompatibleVersion();
        int int31 = indexMetaData28.getNumberOfShards();
        boolean boolean33 = indexMetaData28.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData28.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters35 = indexMetaData28.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings36 = indexMetaData28.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff37 = indexMetaData10.diff(indexMetaData28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet39 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(97, indexMetaData28, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (97) must be greater than the shard id: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertNotNull(indexMetaDataDiff25);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertNull(discoveryNodeFilters35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(indexMetaDataDiff37);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder12.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte31 = state30.id();
        byte byte32 = state30.id();
        byte byte33 = state30.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder29.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getCreationDate();
        long long43 = indexMetaData41.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder38.state(state44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder34.state(state44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder34.setRoutingNumShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long51 = indexMetaData50.getCreationDate();
        org.apache.lucene.util.Version version52 = indexMetaData50.getMinimumCompatibleVersion();
        long long53 = indexMetaData50.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap54 = indexMetaData50.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters55 = indexMetaData50.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap56 = indexMetaData50.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.removeAlias("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder60.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple77 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap56, (java.lang.Cloneable) strSet74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder34.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder22.putActiveAllocationIds(100, (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder13.putActiveAllocationIds(10, (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder13.putMapping(mappingMetaData81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 0 + "'", byte31 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 0 + "'", byte33 == (byte) 0);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNull(version52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap54);
        org.junit.Assert.assertNull(discoveryNodeFilters55);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean6 = versionType0.validateVersionForReads(0L);
        boolean boolean8 = versionType0.validateVersionForWrites(0L);
        long long11 = versionType0.updateVersion(35L, (long) (byte) -1);
        boolean boolean14 = versionType0.isVersionConflictForReads((long) '4', 3L);
        boolean boolean16 = versionType0.validateVersionForReads((long) (-1));
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        int int13 = indexMetaData8.getTotalNumberOfShards();
        int int14 = indexMetaData8.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData8.getCustoms();
        long long16 = indexMetaData8.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData8.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest15.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.index("current version [97] is higher than the one provided [32]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest19.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest19.indicesOptions();
        java.lang.String str24 = bulkShardRequest19.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.index.shard.ShardId shardId37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest29.setShardId(shardId37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest29.index("index.version.created");
        bulkShardRequest40.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str45 = bulkShardRequest44.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy46 = bulkShardRequest44.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel47 = bulkShardRequest44.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress50 = null;
        bulkShardRequest49.remoteAddress(transportAddress50);
        org.elasticsearch.action.support.IndicesOptions indicesOptions52 = bulkShardRequest49.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException53 = bulkShardRequest49.validate();
        org.elasticsearch.common.unit.TimeValue timeValue54 = bulkShardRequest49.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest49.index("index.blocks.write");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy57 = bulkShardRequest49.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest40.setRefreshPolicy(refreshPolicy57);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel59 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel59);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel59);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy62 = bulkShardRequest18.getRefreshPolicy();
        long long63 = bulkShardRequest18.primaryTerm();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(indicesOptions22);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + refreshPolicy46 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy46.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel47 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel47.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(indicesOptions52);
        org.junit.Assert.assertNotNull(actionRequestValidationException53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertTrue("'" + refreshPolicy57 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy57.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel59 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel59.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertTrue("'" + refreshPolicy62 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy62.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        int int11 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray10 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList11 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList11, indexShardStateArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte14 = state13.id();
        byte byte15 = state13.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple16 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList11, state13);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte18 = state17.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple19 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList11, state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder8.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder8.removeAlias("current version [-1] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.numberOfReplicas((int) (byte) 2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(indexShardStateArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 0 + "'", byte18 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.index("current version [-1] is higher than the one provided [100]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.index("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray12 = bulkShardRequest9.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest1.shardId();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest1.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertNull(shardId8);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [35] is different than the one provided [32]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        int int8 = indexMetaData0.getNumberOfReplicas();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("index.number_of_replicas");
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData0.activeAllocationIds((int) '4');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.index.shard.ShardId shardId3 = bulkShardRequest0.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("current version [1] is higher or equal to the one provided [-1]");
        org.junit.Assert.assertNull(shardId3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards(0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping("current version [32] is different than the one provided [11]", "current version [1] is different than the one provided [0]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap0 = org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.junit.Assert.assertNull(strMap0);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest12.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.index("index.number_of_replicas");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest24 = new org.elasticsearch.action.bulk.BulkItemRequest((-1), (org.elasticsearch.action.ActionRequest) bulkShardRequest21);
        org.elasticsearch.action.ActionRequest actionRequest25 = bulkItemRequest24.request();
        org.elasticsearch.action.ActionRequest actionRequest26 = bulkItemRequest24.request();
        org.elasticsearch.action.ActionRequest actionRequest27 = bulkItemRequest24.request();
        org.elasticsearch.action.ActionRequest actionRequest28 = bulkItemRequest24.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest24.writeTo(streamOutput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(timeValue13);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(actionRequest25);
        org.junit.Assert.assertNotNull(actionRequest26);
        org.junit.Assert.assertNotNull(actionRequest27);
        org.junit.Assert.assertNotNull(actionRequest28);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest4.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.index("index.blocks.metadata");
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest4.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest12.remoteAddress(transportAddress13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest12.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.timeout(timeValue17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.index.shard.ShardId shardId24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest16.setShardId(shardId24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest16.timeout(timeValue26);
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = bulkShardRequest16.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str30 = bulkShardRequest29.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest29.index("index.");
        long long34 = bulkShardRequest29.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy36 = bulkShardRequest35.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest29.setRefreshPolicy(refreshPolicy36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest16.setRefreshPolicy(refreshPolicy36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = null;
        bulkShardRequest39.remoteAddress(transportAddress40);
        org.elasticsearch.action.support.IndicesOptions indicesOptions42 = bulkShardRequest39.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException43 = bulkShardRequest39.validate();
        bulkShardRequest39.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest39.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = null;
        bulkShardRequest48.remoteAddress(transportAddress49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest48.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest48.remoteAddress(transportAddress53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest59 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest56);
        bulkShardRequest56.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress63 = null;
        bulkShardRequest62.remoteAddress(transportAddress63);
        org.elasticsearch.action.support.IndicesOptions indicesOptions65 = bulkShardRequest62.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException66 = bulkShardRequest62.validate();
        org.elasticsearch.common.unit.TimeValue timeValue67 = bulkShardRequest62.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest56.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest48.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest39.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = bulkShardRequest38.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest4.timeout(timeValue67);
        boolean boolean73 = bulkShardRequest4.getShouldPersistResult();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel22 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel22.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(transportAddress28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy36 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy36.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(indicesOptions42);
        org.junit.Assert.assertNotNull(actionRequestValidationException43);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions65);
        org.junit.Assert.assertNotNull(actionRequestValidationException66);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNotNull(bulkShardRequest71);
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        int int7 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.setRoutingNumShards((int) (short) 0);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray10 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList11 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList11, indexShardStateArray10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte14 = state13.id();
        byte byte15 = state13.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple16 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList11, state13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder9.state(state13);
        java.lang.String str18 = builder17.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexShardStateArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.creation_date" + "'", str18, "index.creation_date");
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("Tuple [v1=8,index write (api), blocks WRITE, v2=current version [0] is different than the one provided [1]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [Tuple [v1=8,index write (api), blocks WRITE, v2=current version [0] is different than the one provided [1]]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        org.apache.lucene.util.Version version13 = indexMetaData11.getMinimumCompatibleVersion();
        long long14 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData11.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.Version version17 = indexMetaData11.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = builder18.build();
        boolean boolean21 = indexMetaData19.isSameUUID("index.blocks.metadata");
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData19.includeFilters();
        int int24 = indexMetaData19.getRoutingNumShards();
        long long25 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting26 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest30.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure34 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting28, "active_allocations", (java.lang.Throwable) actionRequestValidationException32, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure36 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting26, "", (java.lang.Throwable) actionRequestValidationException32, "index.blocks.read_only");
        java.lang.Throwable throwable37 = shardFailure36.cause;
        java.lang.Class<?> wildcardClass38 = shardFailure36.getClass();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, java.lang.reflect.Type> writeableTuple39 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData19, (java.lang.reflect.Type) wildcardClass38);
        boolean boolean40 = indexMetaData0.equals((java.lang.Object) indexMetaData19);
        java.util.Set<java.lang.String> strSet42 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertNotNull(throwable37);
        org.junit.Assert.assertEquals(throwable37.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(writeableTuple39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strSet42);
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 3);
        boolean boolean6 = versionType1.isVersionConflictForReads(52L, 10L);
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) (short) 0, (long) (byte) 3, false);
        boolean boolean14 = versionType1.isVersionConflictForWrites((long) (short) 100, (long) (byte) 0, true);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.putCustom("state-", custom19);
        int int21 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        boolean boolean27 = indexMetaData22.isSameUUID("index.");
        org.elasticsearch.Version version28 = indexMetaData22.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData22.getSettings();
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder15.settings(settings29);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder13.settings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = builder38.build();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder38.putMapping(mappingMetaData40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest10.remoteAddress(transportAddress11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest10.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest14.timeout(timeValue15);
        bulkShardRequest16.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest16.setRefreshPolicy(refreshPolicy21);
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest16.remoteAddress(transportAddress23);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel27 = bulkShardRequest0.consistencyLevel();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNull(actionRequestValidationException9);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel27 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel27.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.version((long) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version((long) 1);
        int int8 = builder7.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("state-");
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.readDiffFrom(streamInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(version4);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [10] is higher or equal to the one provided [0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [10] is higher or equal to the one provided [0]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest11.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest8.setShardId(shardId16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest8.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str30 = bulkShardRequest29.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel32);
        org.elasticsearch.index.shard.ShardId shardId34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest26.setShardId(shardId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str38 = bulkShardRequest37.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy39 = bulkShardRequest37.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest40 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest37.getParentTask();
        bulkShardRequest35.setParentTask(taskId41);
        bulkShardRequest19.setParentTask(taskId41);
        boolean boolean44 = indexMetaData0.equals((java.lang.Object) taskId41);
        long long45 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version46 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version47 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + refreshPolicy39 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy39.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(version46);
        org.junit.Assert.assertNotNull(version47);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        bulkShardRequest53.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest53.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest24.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest24.index("index.data_path");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress65 = null;
        bulkShardRequest64.remoteAddress(transportAddress65);
        org.elasticsearch.action.support.IndicesOptions indicesOptions67 = bulkShardRequest64.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest64.index("index.auto_expand_replicas");
        org.elasticsearch.tasks.TaskId taskId70 = bulkShardRequest69.getParentTask();
        bulkShardRequest24.setParentTask(taskId70);
        long long72 = bulkShardRequest24.primaryTerm();
        org.elasticsearch.common.io.stream.StreamInput streamInput73 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest24.readFrom(streamInput73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(indicesOptions67);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNotNull(taskId70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L + "'", long72 == 100L);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.removeAlias("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.putAlias(builder13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        long long5 = versionType1.updateVersion((long) (-1), (long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean9 = versionType6.isVersionConflictForReads((long) 0, 98L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 35L + "'", long5 == 35L);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        java.lang.String str11 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.numberOfShards(100);
        int int8 = builder7.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = bulkShardRequest13.remoteAddress();
        boolean boolean15 = bulkShardRequest13.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = bulkShardRequest13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNull(transportAddress14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        java.lang.Class<?> wildcardClass10 = indexMetaData0.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest11.remoteAddress(transportAddress12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.timeout(timeValue16);
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.setShardId(shardId18);
        bulkShardRequest19.setParentTask("state-", (long) (byte) -1);
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.Type, org.elasticsearch.common.io.stream.Streamable> typeTuple23 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.Type) wildcardClass10, (org.elasticsearch.common.io.stream.Streamable) bulkShardRequest19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions24 = bulkShardRequest19.indicesOptions();
        org.elasticsearch.common.io.stream.StreamInput streamInput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest19.readFrom(streamInput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(typeTuple23);
        org.junit.Assert.assertNotNull(indicesOptions24);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        int int8 = indexMetaData0.getNumberOfReplicas();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("index.number_of_replicas");
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNull(version13);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        int int9 = indexMetaData0.getNumberOfReplicas();
        java.lang.Object obj10 = null;
        boolean boolean11 = indexMetaData0.equals(obj10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.uuid");
        java.lang.String[] strArray30 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder17.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet31);
        org.elasticsearch.common.xcontent.ToXContent.Params params34 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strSetTuple35 = new org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strSet31, params34);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = indexMetaData0.toXContent(xContentBuilder13, params34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(params34);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        org.apache.lucene.util.Version version10 = indexMetaData8.getMinimumCompatibleVersion();
        long long11 = indexMetaData8.getVersion();
        int int12 = indexMetaData8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getCreationDate();
        org.apache.lucene.util.Version version15 = indexMetaData13.getMinimumCompatibleVersion();
        boolean boolean17 = indexMetaData13.isSameUUID("index.blocks.read");
        boolean boolean19 = indexMetaData13.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData8.diff(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long31 = indexMetaData30.getCreationDate();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData30.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder27.state(state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder25.state(state33);
        boolean boolean36 = indexMetaData0.equals((java.lang.Object) builder25);
        boolean boolean38 = indexMetaData0.isSameUUID("current version [10] is higher or equal to the one provided [0]");
        org.elasticsearch.common.io.stream.StreamInput streamInput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexMetaData0.readFrom(streamInput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest8.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting6, "active_allocations", (java.lang.Throwable) actionRequestValidationException10, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure14 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "", (java.lang.Throwable) actionRequestValidationException10, "index.blocks.read_only");
        java.lang.Throwable throwable15 = shardFailure14.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure17 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "indices:data/write/bulk[s]", throwable15, "index.auto_expand_replicas");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure19 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [0] is different than the one provided [1]", throwable15, "index.version.created_string");
        java.lang.String str20 = shardFailure19.indexUUID;
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertNotNull(throwable15);
        org.junit.Assert.assertEquals(throwable15.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable15.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable15.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.version.created_string" + "'", str20, "index.version.created_string");
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        byte byte4 = versionType0.getValue();
        boolean boolean6 = versionType0.validateVersionForReads(3L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 3 + "'", byte4 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap12 = indexMetaData0.getCustoms();
        long long13 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        bulkShardRequest7.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.setRefreshPolicy(refreshPolicy12);
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest7.remoteAddress(transportAddress14);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest7.validate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = bulkShardRequest7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(actionRequestValidationException18);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version(0L);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        int int12 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.Version version13 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = indexMetaData0.toXContent(xContentBuilder14, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(params15);
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas(0);
        int int12 = builder11.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getCreationDate();
        org.apache.lucene.util.Version version15 = indexMetaData13.getMinimumCompatibleVersion();
        boolean boolean17 = indexMetaData13.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData13);
        org.apache.lucene.util.Version version19 = indexMetaData13.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData13.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        org.apache.lucene.util.Version version24 = indexMetaData22.getMinimumCompatibleVersion();
        org.elasticsearch.Version version25 = indexMetaData22.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData22.requireFilters();
        boolean boolean28 = indexMetaData22.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff29 = indexMetaData13.diff(indexMetaData22);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap30 = indexMetaData13.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData13.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData13.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData13.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder11.state(state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder36.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getCreationDate();
        long long43 = indexMetaData41.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder40.state(state44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder11.state(state44);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        int int7 = indexMetaData0.getNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        boolean boolean4 = versionType1.isVersionConflictForReads((long) (byte) -1, (long) (-1));
        boolean boolean7 = versionType1.isVersionConflictForReads((long) 35, 10L);
        java.lang.String str10 = versionType1.explainConflictForReads(32L, (long) (byte) 3);
        boolean boolean12 = versionType1.validateVersionForWrites(1L);
        java.lang.String str15 = versionType1.explainConflictForReads((long) (short) 10, (long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType16 = org.elasticsearch.index.VersionType.fromString("current version [1] is different than the one provided [32]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [1] is different than the one provided [32]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [32] is different than the one provided [3]" + "'", str10, "current version [32] is different than the one provided [3]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [10] is different than the one provided [100]" + "'", str15, "current version [10] is different than the one provided [100]");
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        int int4 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder1.mapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.putAlias(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        boolean boolean10 = indexMetaData0.isSameUUID("hi!");
        org.elasticsearch.index.VersionType versionType11 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType12 = versionType11.versionTypeForReplicationAndRecovery();
        boolean boolean14 = versionType12.validateVersionForWrites((long) (byte) 3);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) versionType12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        org.apache.lucene.util.Version version19 = indexMetaData17.getMinimumCompatibleVersion();
        boolean boolean21 = indexMetaData17.isSameUUID("index.blocks.read");
        boolean boolean23 = indexMetaData17.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str24 = indexMetaData17.getIndexUUID();
        org.elasticsearch.Version version25 = indexMetaData17.getUpgradedVersion();
        int int26 = indexMetaData17.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        org.elasticsearch.index.Index index28 = indexMetaData17.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getCreationDate();
        org.apache.lucene.util.Version version31 = indexMetaData29.getMinimumCompatibleVersion();
        long long32 = indexMetaData29.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap33 = indexMetaData29.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData29.getInitialRecoveryFilters();
        org.elasticsearch.Version version35 = indexMetaData29.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = builder36.build();
        boolean boolean39 = indexMetaData37.isSameUUID("index.blocks.metadata");
        int int40 = indexMetaData37.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData37.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap42 = indexMetaData37.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData37.requireFilters();
        org.elasticsearch.common.settings.Settings settings44 = indexMetaData37.getSettings();
        boolean boolean45 = indexMetaData17.equals((java.lang.Object) indexMetaData37);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData0.diff(indexMetaData17);
        org.elasticsearch.Version version48 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput49 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_na_" + "'", str24, "_na_");
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(index28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(version31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
        org.junit.Assert.assertNotNull(version48);
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest22.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException26 = bulkShardRequest22.validate();
        java.lang.String str27 = bulkShardRequest22.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = bulkShardRequest22.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest22.getRefreshPolicy();
        boolean boolean30 = bulkShardRequest22.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest31.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.common.unit.TimeValue timeValue43 = bulkShardRequest42.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest42.index("indices:data/write/bulk[s]");
        java.lang.String str46 = bulkShardRequest45.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest45.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel49 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest50.remoteAddress(transportAddress51);
        org.elasticsearch.action.support.IndicesOptions indicesOptions53 = bulkShardRequest50.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException54 = bulkShardRequest50.validate();
        java.lang.String str55 = bulkShardRequest50.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel56 = bulkShardRequest50.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest45.consistencyLevel(writeConsistencyLevel56);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest22.consistencyLevel(writeConsistencyLevel56);
        org.elasticsearch.common.xcontent.ToXContent.Params params59 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = null;
        bulkShardRequest60.remoteAddress(transportAddress61);
        org.elasticsearch.action.support.IndicesOptions indicesOptions63 = bulkShardRequest60.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException64 = bulkShardRequest60.validate();
        java.lang.String str65 = bulkShardRequest60.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress66 = bulkShardRequest60.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException67 = bulkShardRequest60.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple68 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params59, (java.lang.IllegalArgumentException) actionRequestValidationException67);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple69 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest58, params59);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder70 = settings20.toXContent(xContentBuilder21, params59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNotNull(actionRequestValidationException26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(transportAddress28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel41 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel41.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNull(timeValue43);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "indices:data/write/bulk[s]" + "'", str46, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel49 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel49.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions53);
        org.junit.Assert.assertNotNull(actionRequestValidationException54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel56 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel56.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNotNull(params59);
        org.junit.Assert.assertNotNull(indicesOptions63);
        org.junit.Assert.assertNotNull(actionRequestValidationException64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(transportAddress66);
        org.junit.Assert.assertNotNull(actionRequestValidationException67);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.index("state-");
        org.elasticsearch.tasks.TaskId taskId18 = null;
        bulkShardRequest14.setParentTask(taskId18);
        boolean boolean20 = bulkShardRequest14.getShouldPersistResult();
        bulkShardRequest14.setParentTask("index.priority", 0L);
        java.lang.String str24 = bulkShardRequest14.index();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "indices:data/write/bulk[s]" + "'", str15, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "state-" + "'", str24, "state-");
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putCustom("", custom18);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.primaryTerm((int) (byte) 1, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        org.apache.lucene.util.Version version13 = indexMetaData11.getMinimumCompatibleVersion();
        boolean boolean15 = indexMetaData11.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.apache.lucene.util.Version version17 = indexMetaData11.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getCreationDate();
        org.apache.lucene.util.Version version22 = indexMetaData20.getMinimumCompatibleVersion();
        org.elasticsearch.Version version23 = indexMetaData20.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData20.requireFilters();
        boolean boolean26 = indexMetaData20.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData27.getState();
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData27.activeAllocationIds((int) (short) 1);
        java.lang.String str33 = indexMetaData27.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData20.diff(indexMetaData27);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData11.diff(indexMetaData20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData20.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap37 = indexMetaData20.getMappings();
        boolean boolean38 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap37);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest42.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException47 = bulkShardRequest42.validate();
        org.elasticsearch.common.unit.TimeValue timeValue48 = bulkShardRequest42.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = null;
        bulkShardRequest42.remoteAddress(transportAddress49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest51.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest55.timeout(timeValue56);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str59 = bulkShardRequest58.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy60 = bulkShardRequest58.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel61 = bulkShardRequest58.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest55.consistencyLevel(writeConsistencyLevel61);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress64 = null;
        bulkShardRequest63.remoteAddress(transportAddress64);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest63.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue68 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest67.timeout(timeValue68);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str71 = bulkShardRequest70.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy72 = bulkShardRequest70.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel73 = bulkShardRequest70.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = bulkShardRequest67.consistencyLevel(writeConsistencyLevel73);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = bulkShardRequest55.consistencyLevel(writeConsistencyLevel73);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest76 = bulkShardRequest42.consistencyLevel(writeConsistencyLevel73);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest77 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str78 = bulkShardRequest77.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy79 = bulkShardRequest77.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel80 = bulkShardRequest77.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest81 = bulkShardRequest42.consistencyLevel(writeConsistencyLevel80);
        boolean boolean82 = bulkShardRequest81.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params83 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress85 = null;
        bulkShardRequest84.remoteAddress(transportAddress85);
        org.elasticsearch.action.support.IndicesOptions indicesOptions87 = bulkShardRequest84.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException88 = bulkShardRequest84.validate();
        java.lang.String str89 = bulkShardRequest84.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress90 = bulkShardRequest84.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException91 = bulkShardRequest84.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple92 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params83, (java.lang.IllegalArgumentException) actionRequestValidationException91);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple93 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest81, params83);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder94 = indexMetaData0.toXContent(xContentBuilder41, params83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(version17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_na_" + "'", str33, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNull(actionRequestValidationException47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + refreshPolicy60 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy60.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel61 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel61.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(bulkShardRequest67);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + refreshPolicy72 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy72.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel73 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel73.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest74);
        org.junit.Assert.assertNotNull(bulkShardRequest75);
        org.junit.Assert.assertNotNull(bulkShardRequest76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + refreshPolicy79 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy79.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel80 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel80.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(params83);
        org.junit.Assert.assertNotNull(indicesOptions87);
        org.junit.Assert.assertNotNull(actionRequestValidationException88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(transportAddress90);
        org.junit.Assert.assertNotNull(actionRequestValidationException91);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        boolean boolean6 = indexMetaData0.isSameUUID("current version [97] is higher than the one provided [32]");
        boolean boolean8 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest11.remoteAddress(transportAddress12);
        org.elasticsearch.action.support.IndicesOptions indicesOptions14 = bulkShardRequest11.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest11.validate();
        java.lang.String str16 = bulkShardRequest11.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest11.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest11.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple19 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params10, (java.lang.IllegalArgumentException) actionRequestValidationException18);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = indexMetaData0.toXContent(xContentBuilder9, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNotNull(indicesOptions14);
        org.junit.Assert.assertNotNull(actionRequestValidationException15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        int int13 = indexMetaData0.getTotalNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.index("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        org.apache.lucene.util.Version version10 = indexMetaData8.getMinimumCompatibleVersion();
        long long11 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.Version version14 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = builder15.build();
        boolean boolean18 = indexMetaData16.isSameUUID("index.blocks.metadata");
        int int19 = indexMetaData16.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder7.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.creationDate(35L);
        int int24 = builder23.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.numberOfReplicas((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder23.putMapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.priority]", "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.priority]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [-1] is higher than the one provided [52]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.blocks.metadata");
        int int4 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest6.index("current version [0] is different than the one provided [100]");
        bulkShardRequest6.primaryTerm((long) (-1));
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = null;
        bulkShardRequest27.remoteAddress(transportAddress28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest27.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest31.timeout(timeValue32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str35 = bulkShardRequest34.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy36 = bulkShardRequest34.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel37 = bulkShardRequest34.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest31.consistencyLevel(writeConsistencyLevel37);
        org.elasticsearch.index.shard.ShardId shardId39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest31.setShardId(shardId39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest31.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest42.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress46 = null;
        bulkShardRequest45.remoteAddress(transportAddress46);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest45.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue50 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest49.timeout(timeValue50);
        org.elasticsearch.index.shard.ShardId shardId52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest49.setShardId(shardId52);
        org.elasticsearch.common.unit.TimeValue timeValue54 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest53.timeout(timeValue54);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest44.timeout(timeValue54);
        org.elasticsearch.index.shard.ShardId shardId57 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest56.setShardId(shardId57);
        org.elasticsearch.common.transport.TransportAddress transportAddress59 = null;
        bulkShardRequest58.remoteAddress(transportAddress59);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest58.index("index.number_of_shards");
        org.elasticsearch.tasks.TaskId taskId63 = bulkShardRequest62.getParentTask();
        bulkShardRequest6.setParentTask(taskId63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest70 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest69);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str72 = bulkShardRequest71.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy73 = bulkShardRequest71.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = bulkShardRequest71.index("index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest77 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str78 = bulkShardRequest77.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy79 = bulkShardRequest77.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest80 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest77);
        org.elasticsearch.tasks.TaskId taskId81 = bulkShardRequest77.getParentTask();
        bulkShardRequest71.setParentTask(taskId81);
        bulkShardRequest69.setParentTask(taskId81);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task84 = bulkShardRequest6.createTask((long) (short) 100, "current version [0] is different than the one provided [52]", "current version [32] is higher or equal to the one provided [0]", taskId81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + refreshPolicy36 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy36.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel37 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel37.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(taskId63);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + refreshPolicy73 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy73.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + refreshPolicy79 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy79.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId81);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData8.includeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest16.remoteAddress(transportAddress17);
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException20 = bulkShardRequest16.validate();
        java.lang.String str21 = bulkShardRequest16.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = bulkShardRequest16.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest16.getRefreshPolicy();
        boolean boolean24 = bulkShardRequest16.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.index("indices:data/write/bulk[s]");
        java.lang.String str40 = bulkShardRequest39.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest39.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = bulkShardRequest39.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress45 = null;
        bulkShardRequest44.remoteAddress(transportAddress45);
        org.elasticsearch.action.support.IndicesOptions indicesOptions47 = bulkShardRequest44.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException48 = bulkShardRequest44.validate();
        java.lang.String str49 = bulkShardRequest44.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel50 = bulkShardRequest44.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel50);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel50);
        org.elasticsearch.common.xcontent.ToXContent.Params params53 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress55 = null;
        bulkShardRequest54.remoteAddress(transportAddress55);
        org.elasticsearch.action.support.IndicesOptions indicesOptions57 = bulkShardRequest54.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException58 = bulkShardRequest54.validate();
        java.lang.String str59 = bulkShardRequest54.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress60 = bulkShardRequest54.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException61 = bulkShardRequest54.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params53, (java.lang.IllegalArgumentException) actionRequestValidationException61);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple63 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest52, params53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = indexMetaData8.toXContent(xContentBuilder15, params53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(actionRequestValidationException20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(transportAddress22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "indices:data/write/bulk[s]" + "'", str40, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel43 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel43.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions47);
        org.junit.Assert.assertNotNull(actionRequestValidationException48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel50 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel50.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(params53);
        org.junit.Assert.assertNotNull(indicesOptions57);
        org.junit.Assert.assertNotNull(actionRequestValidationException58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(transportAddress60);
        org.junit.Assert.assertNotNull(actionRequestValidationException61);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version(52L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) (byte) 3);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.numberOfShards(0);
        java.lang.String str11 = builder10.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder8.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.putAlias(aliasMetaData32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.setShardId(shardId10);
        boolean boolean12 = bulkShardRequest11.getShouldPersistResult();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest11.remoteAddress(transportAddress13);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.timeout("current version [-1] is different than the one provided [100]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [-1] is different than the one provided [100]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.setShardId(shardId10);
        boolean boolean12 = bulkShardRequest11.getShouldPersistResult();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest11.remoteAddress(transportAddress13);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest11.validate();
        java.lang.String str16 = bulkShardRequest11.index();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest4.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest4.remoteAddress(transportAddress7);
        boolean boolean9 = bulkShardRequest4.getShouldPersistResult();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData0.getActiveAllocationIds();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = indexMetaData0.primaryTerm(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest6 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm(35L);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest1.validate();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest1.timeout("index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [index.version.created]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(actionRequestValidationException9);
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        long long7 = versionType0.updateVersion((long) (short) 10, (long) (byte) -1);
        boolean boolean11 = versionType0.isVersionConflictForWrites(2L, 0L, true);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 11L + "'", long7 == 11L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [10] is different than the one provided [1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [10] is different than the one provided [1]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (short) 10);
        int int6 = builder5.numberOfShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.state(state15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder18.putCustom("state-", custom22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getCreationDate();
        long long26 = indexMetaData24.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData24.getState();
        boolean boolean29 = indexMetaData24.isSameUUID("index.");
        org.elasticsearch.Version version30 = indexMetaData24.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings31 = indexMetaData24.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder23.settings(settings31);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings31);
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.settings(settings31);
        org.elasticsearch.transport.TransportService transportService36 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService37 = null;
        org.elasticsearch.indices.IndicesService indicesService38 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool39 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction40 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction41 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper42 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters43 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction45 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings31, transportService36, clusterService37, indicesService38, threadPool39, shardStateAction40, mappingUpdatedAction41, updateHelper42, actionFilters43, indexNameExpressionResolver44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        long long10 = indexMetaData0.getCreationDate();
        java.lang.String str11 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.readDiffFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [-1] is different than the one provided [100]", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray30 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList31 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, indexShardStateArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte34 = state33.id();
        byte byte35 = state33.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple36 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte38 = state37.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple39 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList31, state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder13.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder5.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder5.version((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder5.removeAlias("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.creationDate(2L);
        int int48 = builder45.numberOfReplicas();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress50 = null;
        bulkShardRequest49.remoteAddress(transportAddress50);
        org.elasticsearch.action.support.IndicesOptions indicesOptions52 = bulkShardRequest49.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException53 = bulkShardRequest49.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder55.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple58 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException53, builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder60.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder63.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder63.index("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long70 = indexMetaData69.getCreationDate();
        long long71 = indexMetaData69.getVersion();
        int int72 = indexMetaData69.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet74 = null; // flaky: indexMetaData69.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet76 = indexMetaData69.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder67.putActiveAllocationIds((-1), strSet76);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long79 = indexMetaData78.getCreationDate();
        long long80 = indexMetaData78.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData78.getState();
        boolean boolean83 = indexMetaData78.isSameUUID("index.");
        org.elasticsearch.Version version84 = indexMetaData78.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings85 = indexMetaData78.getSettings();
        boolean boolean86 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings85);
        boolean boolean87 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder67.settings(settings85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder55.settings(settings85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder45.settings(settings85);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexShardStateArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 0 + "'", byte35 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(indicesOptions52);
        org.junit.Assert.assertNotNull(actionRequestValidationException53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(strSet74);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(version84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [0] is higher or equal to the one provided [-1]");
        java.lang.Class<?> wildcardClass2 = builder1.getClass();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock3 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple5 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock3, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple7 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock3, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock8 = clusterBlockTuple7.v1();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_REQUIRE_GROUP_SETTING;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting10 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting12 = null;
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray14 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList15 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList15, indexShardStateArray14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest17.remoteAddress(transportAddress18);
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest17.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException21 = bulkShardRequest17.validate();
        org.elasticsearch.common.collect.Tuple<java.util.List<org.elasticsearch.index.shard.IndexShardState>, java.lang.IllegalArgumentException> indexShardStateListTuple22 = org.elasticsearch.common.collect.Tuple.tuple((java.util.List<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList15, (java.lang.IllegalArgumentException) actionRequestValidationException21);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure24 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting12, "", (java.lang.Throwable) actionRequestValidationException21, "current version [10] is different than the one provided [100]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure26 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting10, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]]", (java.lang.Throwable) actionRequestValidationException21, "current version [-1] is higher than the one provided [-1]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, java.lang.IllegalArgumentException> settingsSettingTuple27 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, java.lang.IllegalArgumentException>(settingsSetting9, (java.lang.IllegalArgumentException) actionRequestValidationException21);
        boolean boolean28 = clusterBlockTuple7.equals((java.lang.Object) settingsSetting9);
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.AnnotatedElement, org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>> annotatedElementTuple29 = new org.elasticsearch.common.collect.Tuple<java.lang.reflect.AnnotatedElement, org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>>((java.lang.reflect.AnnotatedElement) wildcardClass2, settingsSetting9);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(clusterBlock3);
        org.junit.Assert.assertNotNull(clusterBlock8);
        org.junit.Assert.assertNotNull(settingsSetting9);
        org.junit.Assert.assertNotNull(indexShardStateArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertNotNull(actionRequestValidationException21);
        org.junit.Assert.assertNotNull(indexShardStateListTuple22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        bulkShardRequest11.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel15);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.setRefreshPolicy("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.creation_date_string]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.creation_date_string]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte7 = state6.id();
        byte byte8 = state6.id();
        byte byte9 = state6.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder14.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder10.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.setRoutingNumShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfReplicas((int) (short) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = builder30.mapping("current version [-1] is higher than the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder30.numberOfShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder30.creationDate((long) (short) 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.shadow_replicas");
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest18.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest18.validate();
        java.lang.String str23 = bulkShardRequest18.index();
        org.elasticsearch.index.shard.ShardId shardId24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.setShardId(shardId24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = bulkShardRequest25.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest15.timeout(timeValue26);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.support.IndicesOptions indicesOptions30 = bulkShardRequest27.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str32 = bulkShardRequest31.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy33 = bulkShardRequest31.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions36 = bulkShardRequest35.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest41 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest38);
        bulkShardRequest38.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress45 = null;
        bulkShardRequest44.remoteAddress(transportAddress45);
        org.elasticsearch.action.support.IndicesOptions indicesOptions47 = bulkShardRequest44.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException48 = bulkShardRequest44.validate();
        org.elasticsearch.common.unit.TimeValue timeValue49 = bulkShardRequest44.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest38.timeout(timeValue49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = bulkShardRequest38.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest35.timeout(timeValue51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest52.index("index.version.minimum_compatible");
        boolean boolean55 = bulkShardRequest52.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest56.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException61 = bulkShardRequest56.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions62 = bulkShardRequest56.indicesOptions();
        boolean boolean63 = bulkShardRequest56.getShouldPersistResult();
        org.elasticsearch.index.shard.ShardId shardId64 = bulkShardRequest56.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str67 = bulkShardRequest66.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy68 = bulkShardRequest66.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest69 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest66);
        org.elasticsearch.tasks.TaskId taskId70 = bulkShardRequest66.getParentTask();
        bulkShardRequest56.setParentTask(taskId70);
        bulkShardRequest52.setParentTask(taskId70);
        bulkShardRequest27.setParentTask(taskId70);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertNotNull(actionRequestValidationException22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertNotNull(indicesOptions30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + refreshPolicy33 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy33.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(indicesOptions36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions47);
        org.junit.Assert.assertNotNull(actionRequestValidationException48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(timeValue51);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(actionRequestValidationException61);
        org.junit.Assert.assertNotNull(indicesOptions62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(shardId64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + refreshPolicy68 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy68.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId70);
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_WRITE_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [0] is different than the one provided [1]");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        org.apache.lucene.util.Version version6 = indexMetaData4.getMinimumCompatibleVersion();
        long long7 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.Version version10 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        boolean boolean14 = indexMetaData12.isSameUUID("index.blocks.metadata");
        int int15 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.includeFilters();
        int int17 = indexMetaData12.getRoutingNumShards();
        boolean boolean18 = clusterBlockTuple2.equals((java.lang.Object) int17);
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "current version [0] is different than the one provided [1]" + "'", strComparable3, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("current version [1] is higher or equal to the one provided [-1]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException24 = bulkShardRequest20.validate();
        java.lang.String str25 = bulkShardRequest20.index();
        org.elasticsearch.index.shard.ShardId shardId26 = bulkShardRequest20.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel28 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel28);
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = bulkShardRequest29.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest29.setShardId(shardId31);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(actionRequestValidationException24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(shardId26);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel28 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel28.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNull(transportAddress30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.primaryTerm((int) (short) -1, 3L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        java.lang.String str15 = indexMetaData9.getIndexUUID();
        int int16 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        boolean boolean19 = indexMetaData9.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData9.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder8.state(state20);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.putAlias(builder22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData9.requireFilters();
        int int26 = indexMetaData9.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap27 = indexMetaData9.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getCreationDate();
        org.apache.lucene.util.Version version30 = indexMetaData28.getMinimumCompatibleVersion();
        boolean boolean32 = indexMetaData28.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap33 = indexMetaData28.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData28.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData28.mappingOrDefault("primary_terms");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData28.getCustoms();
        java.util.Set<java.lang.String> strSet39 = null; // flaky: indexMetaData28.activeAllocationIds(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData28);
        boolean boolean41 = indexMetaData9.equals((java.lang.Object) builder40);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.putAlias(aliasMetaData42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.putCustom("state-", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        long long16 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        boolean boolean19 = indexMetaData14.isSameUUID("index.");
        org.elasticsearch.Version version20 = indexMetaData14.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder13.settings(settings21);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder6.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.primaryTerm((int) '4', (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        int int9 = indexMetaData0.getRoutingNumShards();
        long long10 = indexMetaData0.getCreationDate();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) (byte) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.putAlias(builder10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        long long11 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate(3L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.numberOfReplicas((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder10.primaryTerm(1, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest5.setShardId(shardId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest5.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.index("_na_");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest19 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput20 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest19.writeTo(streamOutput20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest6.remoteAddress(transportAddress7);
        org.elasticsearch.action.support.IndicesOptions indicesOptions9 = bulkShardRequest6.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest6.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple15 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException10, builder12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest16.remoteAddress(transportAddress17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest16.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest20.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str24 = bulkShardRequest23.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy25 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = bulkShardRequest23.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest20.consistencyLevel(writeConsistencyLevel26);
        org.elasticsearch.index.shard.ShardId shardId28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest20.setShardId(shardId28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest20.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest31.index("_na_");
        org.elasticsearch.common.collect.Tuple<java.lang.Throwable, org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>> throwableTuple34 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Throwable) actionRequestValidationException10, (org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest31);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure36 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "index.data_path", (java.lang.Throwable) actionRequestValidationException10, "index.version.minimum_compatible");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure38 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [-1] is higher than the one provided [52]", (java.lang.Throwable) actionRequestValidationException10, "_na_");
        java.lang.Throwable throwable39 = shardFailure38.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure41 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [-1] is higher than the one provided [32]", throwable39, "index.version.created_string");
        org.junit.Assert.assertNotNull(indicesOptions9);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + refreshPolicy25 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy25.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel26 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel26.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(throwableTuple34);
        org.junit.Assert.assertNotNull(throwable39);
        org.junit.Assert.assertEquals(throwable39.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable39.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable39.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        bulkShardRequest53.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest53.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest24.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest24.index("index.data_path");
        org.elasticsearch.index.shard.ShardId shardId64 = bulkShardRequest63.shardId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray65 = bulkShardRequest63.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(shardId64);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created_string");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = builder1.primaryTerm(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("index.blocks.metadata");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest15.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException24 = bulkShardRequest20.validate();
        bulkShardRequest20.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest15.setRefreshPolicy(refreshPolicy28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest14.setRefreshPolicy(refreshPolicy28);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest30.remoteAddress(transportAddress32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = bulkShardRequest30.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(actionRequestValidationException24);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        bulkShardRequest1.primaryTerm((-1L));
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest6 = new org.elasticsearch.action.bulk.BulkItemRequest(100, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.ActionRequest actionRequest7 = bulkItemRequest6.request();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest6.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(actionRequest7);
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 1);
        int int4 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder3.mapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]]");
        int int7 = builder3.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        boolean boolean10 = indexMetaData0.isSameUUID("primary_terms");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = indexMetaData0.toXContent(xContentBuilder12, params13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType5 = versionType4.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        long long9 = versionType6.updateVersion((long) (short) 100, (long) 35);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType6.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [1] is different than the one provided [32]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.index("state-");
        boolean boolean18 = bulkShardRequest17.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest17.setRefreshPolicy("current version [35] is different than the one provided [32]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [current version [35] is different than the one provided [32]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "indices:data/write/bulk[s]" + "'", str15, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        int int9 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        java.lang.String str15 = indexMetaData9.getIndexUUID();
        int int16 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        boolean boolean19 = indexMetaData9.isSameUUID("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData9.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder8.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder8.putCustom("index.number_of_shards", custom23);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = builder24.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.uuid", custom7);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("current version [-1] is different than the one provided [100]", custom12);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = builder13.numberOfShards();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.setParentTask("hi!", (long) (short) 100);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest0.remoteAddress();
        long long5 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str7 = bulkShardRequest6.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest6.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest6.index("index.");
        long long11 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.setRefreshPolicy(refreshPolicy13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest0.setRefreshPolicy(refreshPolicy13);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest0.setShardId(shardId16);
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest17.timeout();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest17.consistencyLevel();
        org.elasticsearch.common.io.stream.StreamInput streamInput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest17.readFrom(streamInput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        boolean boolean6 = indexMetaData0.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("index.number_of_shards");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = builder12.primaryTerm((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.Object obj5 = null;
        boolean boolean6 = indexMetaData0.equals(obj5);
        int int7 = indexMetaData0.getRoutingFactor();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser9 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.fromXContent(xContentParser9, parseFieldMatcher10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(version8);
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.version((long) 32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest15.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = bulkShardRequest15.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(indicesOptions20);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = builder6.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        bulkShardRequest11.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest22.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.index.shard.ShardId shardId27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest19.setShardId(shardId27);
        org.elasticsearch.common.unit.TimeValue timeValue29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest19.timeout(timeValue29);
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = null;
        bulkShardRequest30.remoteAddress(transportAddress31);
        org.elasticsearch.index.shard.ShardId shardId33 = bulkShardRequest30.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions34 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions35 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.tasks.TaskId taskId36 = bulkShardRequest30.getParentTask();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest11.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest11.index("index.blocks.read");
        org.elasticsearch.common.transport.TransportAddress transportAddress41 = null;
        bulkShardRequest11.remoteAddress(transportAddress41);
        org.elasticsearch.index.shard.ShardId shardId43 = bulkShardRequest11.shardId();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(shardId33);
        org.junit.Assert.assertNotNull(indicesOptions34);
        org.junit.Assert.assertNotNull(indicesOptions35);
        org.junit.Assert.assertNotNull(taskId36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNull(shardId43);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("active_allocations");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = builder12.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify positive number of shards for index [index.creation_date]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        long long4 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData1.getInitialRecoveryFilters();
        org.elasticsearch.Version version7 = indexMetaData1.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder8.build();
        boolean boolean11 = indexMetaData9.isSameUUID("index.blocks.metadata");
        int int12 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.includeFilters();
        int int14 = indexMetaData9.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.putCustom("state-", custom20);
        int int22 = builder16.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getCreationDate();
        long long25 = indexMetaData23.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData23.getState();
        boolean boolean28 = indexMetaData23.isSameUUID("index.");
        org.elasticsearch.Version version29 = indexMetaData23.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData23.getSettings();
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder16.settings(settings30);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings34);
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        boolean boolean37 = indexMetaData9.equals((java.lang.Object) settings36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet39 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) 'a', indexMetaData9, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (10) must be greater than the shard id: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.version.created_string", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) 52);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue17 = bulkShardRequest4.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.common.io.stream.StreamInput streamInput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest4.readFrom(streamInput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertNull(timeValue17);
        org.junit.Assert.assertNull(transportAddress18);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        int int9 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.readDiffFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.uuid", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder9.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.transport.TransportService transportService18 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService19 = null;
        org.elasticsearch.indices.IndicesService indicesService20 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool21 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction22 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction23 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper24 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters25 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction27 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings14, transportService18, clusterService19, indicesService20, threadPool21, shardStateAction22, mappingUpdatedAction23, updateHelper24, actionFilters25, indexNameExpressionResolver26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType5 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str8 = versionType5.explainConflictForReads((long) (byte) 10, (long) 97);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [10] is different than the one provided [97]" + "'", str8, "current version [10] is different than the one provided [97]");
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff6 = indexMetaData0.readDiffFrom(streamInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(index4);
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str5 = versionType0.explainConflictForWrites((long) 'a', 32L, true);
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType6.isVersionConflictForWrites((long) ' ', (long) (byte) 3, true);
        byte byte11 = versionType6.getValue();
        java.lang.String str14 = versionType6.explainConflictForReads((long) 'a', 10L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [97] is higher than the one provided [32]" + "'", str5, "current version [97] is higher than the one provided [32]");
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 2 + "'", byte11 == (byte) 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [97] is different than the one provided [10]" + "'", str14, "current version [97] is different than the one provided [10]");
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        int int6 = indexMetaData0.getRoutingFactor();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        int int9 = indexMetaData0.getNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = indexMetaData0.primaryTerm((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.setRoutingNumShards((int) ' ');
        java.lang.String str11 = builder10.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.putCustom("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]", custom13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest20 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        org.elasticsearch.tasks.TaskId taskId21 = bulkShardRequest17.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest22.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException26 = bulkShardRequest22.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple31 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException26, builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder33.putCustom("state-", custom37);
        int int39 = builder33.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long41 = indexMetaData40.getCreationDate();
        long long42 = indexMetaData40.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = indexMetaData40.getState();
        boolean boolean45 = indexMetaData40.isSameUUID("index.");
        org.elasticsearch.Version version46 = indexMetaData40.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings47 = indexMetaData40.getSettings();
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        boolean boolean49 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder33.settings(settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getCreationDate();
        long long63 = indexMetaData61.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder58.state(state64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder68.removeAlias("index.uuid");
        java.lang.String[] strArray83 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder70.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder65.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder53.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder33.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.common.collect.Tuple<java.lang.Exception, java.util.HashSet<java.lang.String>> exceptionTuple90 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Exception) actionRequestValidationException26, (java.util.HashSet<java.lang.String>) strSet84);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.IndicesRequest, java.util.HashSet<java.lang.String>> indicesRequestTuple91 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.action.IndicesRequest) bulkShardRequest17, (java.util.HashSet<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder10.putActiveAllocationIds((int) (byte) 0, (java.util.Set<java.lang.String>) strSet84);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder10.putMapping("index.version.created_string", "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.creation_date" + "'", str11, "index.creation_date");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId21);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNotNull(actionRequestValidationException26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(exceptionTuple90);
        org.junit.Assert.assertNotNull(indicesRequestTuple91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.blocks.write");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.blocks.write]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        boolean boolean8 = versionType0.isVersionConflictForWrites((long) ' ', (long) (byte) 0, true);
        boolean boolean12 = versionType0.isVersionConflictForWrites(52L, (long) 97, true);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', actionRequest1);
        org.elasticsearch.action.ActionRequest actionRequest3 = null; // flaky: bulkItemRequest2.request();
        int int4 = 0; // flaky: bulkItemRequest2.id();
        int int5 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(actionRequest3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder22.index("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getCreationDate();
        long long30 = indexMetaData28.getVersion();
        int int31 = indexMetaData28.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet33 = null; // flaky: indexMetaData28.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet35 = indexMetaData28.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder26.putActiveAllocationIds((-1), strSet35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder6.putActiveAllocationIds((int) (byte) -1, strSet35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder40.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder46.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte50 = state49.id();
        byte byte51 = state49.id();
        byte byte52 = state49.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder48.state(state49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder53.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder57.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long61 = indexMetaData60.getCreationDate();
        long long62 = indexMetaData60.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData60.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder57.state(state63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder53.state(state63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder53.setRoutingNumShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long70 = indexMetaData69.getCreationDate();
        org.apache.lucene.util.Version version71 = indexMetaData69.getMinimumCompatibleVersion();
        long long72 = indexMetaData69.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap73 = indexMetaData69.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters74 = indexMetaData69.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap75 = indexMetaData69.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder77.removeAlias("index.uuid");
        java.lang.String[] strArray92 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet93 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet93, strArray92);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder79.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet93);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple96 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap75, (java.lang.Cloneable) strSet93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder97 = builder53.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = builder41.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet93);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder99 = builder37.putActiveAllocationIds(100, (java.util.Set<java.lang.String>) strSet93);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 0 + "'", byte50 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte51 + "' != '" + (byte) 0 + "'", byte51 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte52 + "' != '" + (byte) 0 + "'", byte52 == (byte) 0);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNull(version71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap73);
        org.junit.Assert.assertNull(discoveryNodeFilters74);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest7.remoteAddress(transportAddress8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest7.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest7.validate();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest1.timeout(timeValue12);
        org.elasticsearch.action.support.IndicesOptions indicesOptions14 = bulkShardRequest13.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.setRefreshPolicy("indices:data/write/bulk[s]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [indices:data/write/bulk[s]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(indicesOptions14);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.blocks.write]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest13.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest13.index("current version [-1] is higher than the one provided [100]");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest19.consistencyLevel();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte7 = state6.id();
        byte byte8 = state6.id();
        byte byte9 = state6.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder14.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder10.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.setRoutingNumShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.index("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.version((long) 52);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData34 = builder32.mapping("index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(mappingMetaData34);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap0 = org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getCreationDate();
        long long5 = indexMetaData3.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData3.getState();
        boolean boolean8 = indexMetaData3.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData3.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData3.includeFilters();
        org.elasticsearch.common.collect.Tuple<java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom>, org.elasticsearch.cluster.metadata.IndexMetaData> strMapTuple11 = org.elasticsearch.common.collect.Tuple.tuple(strMap0, indexMetaData3);
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.common.collect.Tuple<java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom>, java.lang.Comparable<java.lang.String>> strMapTuple15 = new org.elasticsearch.common.collect.Tuple<java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom>, java.lang.Comparable<java.lang.String>>(strMap0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.junit.Assert.assertNull(strMap0);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strMapTuple11);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        java.lang.Class<?> wildcardClass10 = indexMetaData0.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest11.remoteAddress(transportAddress12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.timeout(timeValue16);
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.setShardId(shardId18);
        bulkShardRequest19.setParentTask("state-", (long) (byte) -1);
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.Type, org.elasticsearch.common.io.stream.Streamable> typeTuple23 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.Type) wildcardClass10, (org.elasticsearch.common.io.stream.Streamable) bulkShardRequest19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions24 = bulkShardRequest19.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray25 = bulkShardRequest19.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(typeTuple23);
        org.junit.Assert.assertNotNull(indicesOptions24);
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel6 = bulkShardRequest0.consistencyLevel();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.setRefreshPolicy("current version [0] is higher than the one provided [3]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [current version [0] is higher than the one provided [3]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel6 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel6.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putCustom("state-", custom16);
        int int18 = builder12.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        long long21 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        boolean boolean24 = indexMetaData19.isSameUUID("index.");
        org.elasticsearch.Version version25 = indexMetaData19.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData19.getSettings();
        boolean boolean27 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder12.settings(settings26);
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder8.settings(settings26);
        org.elasticsearch.transport.TransportService transportService32 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService33 = null;
        org.elasticsearch.indices.IndicesService indicesService34 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool35 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction36 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction37 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper38 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters39 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction41 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings26, transportService32, clusterService33, indicesService34, threadPool35, shardStateAction36, mappingUpdatedAction37, updateHelper38, actionFilters39, indexNameExpressionResolver40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData0.getSettings();
        int int16 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest0.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest11 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        bulkShardRequest8.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest14.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest8.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest0.timeout(timeValue19);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest0.timeout("indices:data/write/bulk[s]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [indices:data/write/bulk[s]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        boolean boolean5 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.index("current version [2] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder11.removeAllAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        boolean boolean20 = indexMetaData0.isSameUUID("current version [52] is higher or equal to the one provided [100]");
        org.apache.lucene.util.Version version21 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.String str22 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap23 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamInput streamInput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData0.readDiffFrom(streamInput24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap23);
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        bulkShardRequest0.setParentTask("index.data_path", (long) 0);
        bulkShardRequest0.setParentTask("current version [0] is higher or equal to the one provided [0]", (long) '#');
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.readDiffFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.creationDate((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest11.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest8.setShardId(shardId16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest8.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str30 = bulkShardRequest29.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel32);
        org.elasticsearch.index.shard.ShardId shardId34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest26.setShardId(shardId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str38 = bulkShardRequest37.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy39 = bulkShardRequest37.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest40 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest37.getParentTask();
        bulkShardRequest35.setParentTask(taskId41);
        bulkShardRequest19.setParentTask(taskId41);
        boolean boolean44 = indexMetaData0.equals((java.lang.Object) taskId41);
        long long45 = indexMetaData0.getCreationDate();
        int int46 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData0.mapping("index.blocks.metadata");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + refreshPolicy39 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy39.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(mappingMetaData48);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        boolean boolean47 = bulkShardRequest24.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = bulkShardRequest24.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.creationDate(3L);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest9.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = bulkShardRequest9.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(indicesOptions10);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(index8);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest6.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest6.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.timeout(timeValue11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str14 = bulkShardRequest13.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy15 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest13.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel16);
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest10.setShardId(shardId18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest10.index("index.version.created");
        bulkShardRequest21.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str26 = bulkShardRequest25.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy27 = bulkShardRequest25.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel28 = bulkShardRequest25.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest21.consistencyLevel(writeConsistencyLevel28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = null;
        bulkShardRequest30.remoteAddress(transportAddress31);
        org.elasticsearch.action.support.IndicesOptions indicesOptions33 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException34 = bulkShardRequest30.validate();
        org.elasticsearch.common.unit.TimeValue timeValue35 = bulkShardRequest30.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest30.index("index.blocks.write");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy38 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest21.setRefreshPolicy(refreshPolicy38);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel40 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel40);
        org.elasticsearch.index.shard.ShardId shardId42 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest0.setShardId(shardId42);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput44 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.writeTo(streamOutput44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + refreshPolicy15 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy15.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + refreshPolicy27 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy27.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel28 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel28.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(indicesOptions33);
        org.junit.Assert.assertNotNull(actionRequestValidationException34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertTrue("'" + refreshPolicy38 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy38.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel40 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel40.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index3 = indexMetaData0.getIndex();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(index3);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = bulkShardRequest11.remoteAddress();
        bulkShardRequest11.primaryTerm(0L);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = bulkShardRequest11.consistencyLevel();
        boolean boolean19 = bulkShardRequest11.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest11.timeout("index.version.upgraded");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [index.version.upgraded]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(transportAddress15);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel18 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel18.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest13.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest9.timeout(timeValue19);
        boolean boolean21 = indexMetaData0.equals((java.lang.Object) timeValue19);
        int int22 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest0.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        bulkShardRequest9.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest15.validate();
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest15.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest9.timeout(timeValue20);
        org.elasticsearch.common.unit.TimeValue timeValue22 = bulkShardRequest9.timeout();
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray24 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.EnumSet<org.elasticsearch.index.shard.IndexShardState> indexShardStateSet26 = java.util.EnumSet.noneOf(org.elasticsearch.index.shard.IndexShardState.class);
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet26, indexShardStateArray24);
        org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, java.util.EnumSet<org.elasticsearch.index.shard.IndexShardState>> strComparableTuple28 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Comparable<java.lang.String>) "index.version.created_string", indexShardStateSet26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getCreationDate();
        org.apache.lucene.util.Version version31 = indexMetaData29.getMinimumCompatibleVersion();
        long long32 = indexMetaData29.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getCreationDate();
        org.apache.lucene.util.Version version35 = indexMetaData33.getMinimumCompatibleVersion();
        long long36 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap37 = indexMetaData33.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData33.getInitialRecoveryFilters();
        org.elasticsearch.Version version39 = indexMetaData33.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = builder40.build();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff42 = indexMetaData29.diff(indexMetaData41);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData41.excludeFilters();
        org.elasticsearch.Version version44 = indexMetaData41.getCreationVersion();
        org.elasticsearch.common.collect.Tuple<java.util.Set<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.common.xcontent.ToXContent> indexShardStateSetTuple45 = org.elasticsearch.common.collect.Tuple.tuple((java.util.Set<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet26, (org.elasticsearch.common.xcontent.ToXContent) indexMetaData41);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.unit.TimeValue, java.util.EnumSet<org.elasticsearch.index.shard.IndexShardState>> timeValueTuple46 = org.elasticsearch.common.collect.Tuple.tuple(timeValue22, indexShardStateSet26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest0.timeout(timeValue22);
        long long48 = bulkShardRequest47.primaryTerm();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(indexShardStateArray24);
        org.junit.Assert.assertNotNull(indexShardStateSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strComparableTuple28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(version31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexMetaDataDiff42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(indexShardStateSetTuple45);
        org.junit.Assert.assertNotNull(timeValueTuple46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType3 = versionType2.versionTypeForReplicationAndRecovery();
        boolean boolean5 = versionType3.validateVersionForReads((long) (byte) 10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType3.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertNotNull(versionType3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType5 = versionType4.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        long long9 = versionType6.updateVersion((long) (short) 100, (long) 35);
        boolean boolean11 = versionType6.validateVersionForWrites((long) 3);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [1] is higher or equal to the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(0);
        int int4 = builder3.numberOfShards();
        int int5 = builder3.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData9.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        int int30 = indexMetaData27.getNumberOfShards();
        boolean boolean32 = indexMetaData27.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData27.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData27.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings35 = indexMetaData27.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff36 = indexMetaData9.diff(indexMetaData27);
        int int37 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.Version version38 = indexMetaData9.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaDataDiff36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(version38);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version15 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(version15);
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.version((long) '4');
        int int13 = builder12.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder12.mapping("current version [10] is different than the one provided [3]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        boolean boolean5 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.util.Set<java.lang.String> strSet8 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest4.shardId();
        java.lang.String str8 = bulkShardRequest4.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.index("index.auto_expand_replicas");
        long long11 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest10.validate();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest10.timeout("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.creation_date_string]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.creation_date_string]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.creation_date" + "'", str8, "index.creation_date");
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(actionRequestValidationException12);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder6.putAlias(builder12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte7 = state6.id();
        byte byte8 = state6.id();
        byte byte9 = state6.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder14.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder10.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.setRoutingNumShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = builder24.mapping("current version [-1] is higher or equal to the one provided [1]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(mappingMetaData30);
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("hi!", custom1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.version((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.putCustom("current version [35] is different than the one provided [1]", custom21);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        boolean boolean5 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        long long8 = indexMetaData0.getCreationDate();
        int int9 = indexMetaData0.getRoutingNumShards();
        long long10 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray30 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList31 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, indexShardStateArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte34 = state33.id();
        byte byte35 = state33.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple36 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte38 = state37.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple39 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList31, state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder13.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder5.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getCreationDate();
        long long44 = indexMetaData42.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData42.getState();
        boolean boolean47 = indexMetaData42.isSameUUID("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData42.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder41.state(state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder52.removeAlias("current version [0] is different than the one provided [1]");
        java.lang.String[] strArray59 = new java.lang.String[] { "index.priority", "current version [52] is higher or equal to the one provided [100]", "current version [-1] is higher than the one provided [52]" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder54.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder65.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long69 = indexMetaData68.getCreationDate();
        long long70 = indexMetaData68.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state71 = indexMetaData68.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder65.state(state71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder75.removeAlias("index.uuid");
        java.lang.String[] strArray90 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet91 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet91, strArray90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder77.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder72.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder62.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder96 = builder49.putActiveAllocationIds((int) ' ', (java.util.Set<java.lang.String>) strSet91);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder98 = builder49.setRoutingNumShards((int) (byte) 10);
        int int99 = builder98.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexShardStateArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 0 + "'", byte35 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state71.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("current version [-1] is higher than the one provided [52]", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.removeAlias("primary_terms");
        org.elasticsearch.common.settings.Settings.Builder builder11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.settings(builder11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple16 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "current version [97] is higher than the one provided [32]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple20 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple22 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        java.lang.String str23 = clusterBlockTuple22.toString();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest24.remoteAddress(transportAddress25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest24.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest28.timeout(timeValue29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str32 = bulkShardRequest31.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy33 = bulkShardRequest31.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = bulkShardRequest31.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest28.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.index.shard.ShardId shardId36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest28.setShardId(shardId36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest28.timeout(timeValue38);
        long long40 = bulkShardRequest39.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest45 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest42);
        org.elasticsearch.tasks.TaskId taskId46 = bulkShardRequest42.getParentTask();
        bulkShardRequest39.setParentTask(taskId46);
        boolean boolean48 = clusterBlockTuple22.equals((java.lang.Object) bulkShardRequest39);
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]]" + "'", str23, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]]");
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + refreshPolicy33 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy33.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel34 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel34.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', actionRequest1);
        int int3 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.action.ActionRequest actionRequest4 = null; // flaky: bulkItemRequest2.request();
        int int5 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.action.ActionRequest actionRequest6 = null; // flaky: bulkItemRequest2.request();
        int int7 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.action.ActionRequest actionRequest8 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertNull(actionRequest4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNull(actionRequest6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNull(actionRequest8);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        long long5 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest8.remoteAddress(transportAddress9);
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest8.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest8.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest0.setRefreshPolicy(refreshPolicy13);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy15 = bulkShardRequest14.getRefreshPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = bulkShardRequest14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + refreshPolicy15 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy15.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        int int23 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version26 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        boolean boolean31 = indexMetaData27.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap32 = indexMetaData27.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData27.excludeFilters();
        int int34 = indexMetaData27.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData27.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff36 = indexMetaData0.diff(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap32);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(indexMetaDataDiff36);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy1 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException2 = bulkShardRequest0.validate();
        org.elasticsearch.index.shard.ShardId shardId3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.setShardId(shardId3);
        org.elasticsearch.index.shard.ShardId shardId5 = bulkShardRequest0.shardId();
        java.lang.String str6 = bulkShardRequest0.index();
        org.junit.Assert.assertTrue("'" + refreshPolicy1 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy1.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException2);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(shardId5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        bulkShardRequest13.primaryTerm(10L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = bulkShardRequest13.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest19.setParentTask("hi!", (long) (short) 100);
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = bulkShardRequest19.remoteAddress();
        long long24 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str26 = bulkShardRequest25.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy27 = bulkShardRequest25.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.");
        long long30 = bulkShardRequest25.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest31.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest25.setRefreshPolicy(refreshPolicy32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest19.setRefreshPolicy(refreshPolicy32);
        org.elasticsearch.index.shard.ShardId shardId35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest19.setShardId(shardId35);
        java.lang.String str37 = bulkShardRequest36.index();
        org.elasticsearch.common.unit.TimeValue timeValue38 = bulkShardRequest36.timeout();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel39 = bulkShardRequest36.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel39);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNull(transportAddress18);
        org.junit.Assert.assertNull(transportAddress23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + refreshPolicy27 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy27.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(timeValue38);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel39 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel39.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest40);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.setShardId(shardId10);
        boolean boolean12 = bulkShardRequest11.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException13 = bulkShardRequest11.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest17.remoteAddress(transportAddress18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest17.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.timeout(timeValue22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str25 = bulkShardRequest24.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy26 = bulkShardRequest24.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel27 = bulkShardRequest24.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest21.consistencyLevel(writeConsistencyLevel27);
        org.elasticsearch.index.shard.ShardId shardId29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest21.setShardId(shardId29);
        org.elasticsearch.common.unit.TimeValue timeValue31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest21.timeout(timeValue31);
        org.elasticsearch.common.transport.TransportAddress transportAddress33 = null;
        bulkShardRequest32.remoteAddress(transportAddress33);
        org.elasticsearch.index.shard.ShardId shardId35 = bulkShardRequest32.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions36 = bulkShardRequest32.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions37 = bulkShardRequest32.indicesOptions();
        org.elasticsearch.tasks.TaskId taskId38 = bulkShardRequest32.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task39 = bulkShardRequest11.createTask(12L, "", "index.number_of_replicas", taskId38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException13);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + refreshPolicy26 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy26.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel27 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel27.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNull(shardId35);
        org.junit.Assert.assertNotNull(indicesOptions36);
        org.junit.Assert.assertNotNull(indicesOptions37);
        org.junit.Assert.assertNotNull(taskId38);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        java.lang.Comparable<java.lang.String> strComparable6 = clusterBlockTuple2.v2();
        java.lang.String str7 = clusterBlockTuple2.toString();
        java.lang.Object obj8 = null;
        boolean boolean9 = clusterBlockTuple2.equals(obj8);
        java.lang.String str10 = clusterBlockTuple2.toString();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "index.version.created" + "'", strComparable6, "index.version.created");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str7, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str10, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting25 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting27 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting29 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest33.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException35 = bulkShardRequest33.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure37 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting31, "active_allocations", (java.lang.Throwable) actionRequestValidationException35, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure39 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting29, "indices:data/write/bulk[s]", (java.lang.Throwable) actionRequestValidationException35, "_na_");
        java.lang.Throwable throwable40 = shardFailure39.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure42 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting27, "", throwable40, "current version [35] is different than the one provided [-1]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure44 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting25, "index.creation_date", throwable40, "index.shared_filesystem.recover_on_any_node");
        boolean boolean45 = indexMetaData9.equals((java.lang.Object) shardFailure44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long47 = indexMetaData46.getCreationDate();
        org.apache.lucene.util.Version version48 = indexMetaData46.getMinimumCompatibleVersion();
        boolean boolean50 = indexMetaData46.isSameUUID("index.blocks.read");
        boolean boolean52 = indexMetaData46.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str53 = indexMetaData46.getIndexUUID();
        int int54 = indexMetaData46.getRoutingNumShards();
        int int55 = indexMetaData46.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff56 = indexMetaData9.diff(indexMetaData46);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput57 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData9.writeTo(streamOutput57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException35);
        org.junit.Assert.assertNotNull(throwable40);
        org.junit.Assert.assertEquals(throwable40.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable40.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable40.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(version48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "_na_" + "'", str53, "_na_");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff56);
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        int int7 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        long long10 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean13 = indexMetaData8.isSameUUID("index.");
        org.elasticsearch.Version version14 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData8.getSettings();
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.settings(settings15);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("index.version.created_string");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.version.created_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest7.remoteAddress(transportAddress8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest7.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest7.validate();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest1.timeout(timeValue12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest1.timeout();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest1.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getCreationDate();
        org.apache.lucene.util.Version version22 = indexMetaData20.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder24.putCustom("state-", custom28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long31 = indexMetaData30.getCreationDate();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData30.getState();
        boolean boolean35 = indexMetaData30.isSameUUID("index.");
        org.elasticsearch.Version version36 = indexMetaData30.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData30.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder29.settings(settings37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        boolean boolean41 = indexMetaData20.equals((java.lang.Object) settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        boolean boolean43 = indexMetaData16.equals((java.lang.Object) builder42);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Object> validationExceptionTuple44 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Object>((org.elasticsearch.common.ValidationException) actionRequestValidationException15, (java.lang.Object) indexMetaData16);
        org.elasticsearch.Version version45 = indexMetaData16.getCreationVersion();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(version45);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData8.requireFilters();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData8.getSettings();
        org.elasticsearch.transport.TransportService transportService16 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService17 = null;
        org.elasticsearch.indices.IndicesService indicesService18 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool19 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction20 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction21 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper22 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters23 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction25 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings15, transportService16, clusterService17, indicesService18, threadPool19, shardStateAction20, mappingUpdatedAction21, updateHelper22, actionFilters23, indexNameExpressionResolver24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(settings15);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        long long3 = indexMetaData1.getVersion();
        int int4 = indexMetaData1.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet6 = null; // flaky: indexMetaData1.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet8 = indexMetaData1.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData1.excludeFilters();
        int int10 = indexMetaData1.getNumberOfShards();
        long long11 = indexMetaData1.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData1.excludeFilters();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet14 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards((int) (byte) 100, indexMetaData1, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (52) must be greater than the shard id: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.requireFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser4 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = indexMetaData0.fromXContent(xContentParser4, parseFieldMatcher5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder9.state(state15);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.putAlias(builder17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.creation_date" + "'", str7, "index.creation_date");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData0.mappingOrDefault("hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(mappingMetaData14);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        java.lang.String str6 = versionType1.explainConflictForWrites((long) 'a', 32L, true);
        org.elasticsearch.index.VersionType versionType7 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean11 = versionType7.isVersionConflictForWrites((long) ' ', (long) (byte) 3, true);
        java.lang.String str14 = versionType7.explainConflictForReads(52L, (long) 97);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType15 = org.elasticsearch.index.VersionType.fromString("_na_", versionType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [_na_]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [97] is higher than the one provided [32]" + "'", str6, "current version [97] is higher than the one provided [32]");
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [52] is different than the one provided [97]" + "'", str14, "current version [52] is different than the one provided [97]");
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        int int13 = indexMetaData8.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest8.remoteAddress(transportAddress9);
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest8.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest8.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple17 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException12, builder14);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure19 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting6, "primary_terms", (java.lang.Throwable) actionRequestValidationException12, "index.shared_filesystem");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure21 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "_na_", (java.lang.Throwable) actionRequestValidationException12, "index.uuid");
        java.lang.Throwable throwable22 = shardFailure21.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure24 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [32] is different than the one provided [11]", throwable22, "");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure26 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [52] is different than the one provided [97]", throwable22, "current version [0] is higher or equal to the one provided [0]");
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(throwable22);
        org.junit.Assert.assertEquals(throwable22.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable22.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable22.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        bulkShardRequest53.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest53.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest24.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest24.index("index.data_path");
        org.elasticsearch.index.shard.ShardId shardId64 = bulkShardRequest63.shardId();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException65 = bulkShardRequest63.validate();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest63.timeout("index.data_path");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [index.data_path]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(shardId64);
        org.junit.Assert.assertNull(actionRequestValidationException65);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.creation_date_string");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock7 = clusterBlockTuple6.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock8 = clusterBlockTuple6.v1();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException14 = bulkShardRequest9.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest9.indicesOptions();
        boolean boolean16 = bulkShardRequest9.getShouldPersistResult();
        org.elasticsearch.index.shard.ShardId shardId17 = bulkShardRequest9.shardId();
        boolean boolean18 = clusterBlockTuple6.equals((java.lang.Object) shardId17);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock19 = clusterBlockTuple6.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock20 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple22 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock20, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple24 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock20, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long26 = indexMetaData25.getCreationDate();
        org.apache.lucene.util.Version version27 = indexMetaData25.getMinimumCompatibleVersion();
        long long28 = indexMetaData25.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap29 = indexMetaData25.getActiveAllocationIds();
        boolean boolean30 = clusterBlockTuple24.equals((java.lang.Object) indexMetaData25);
        java.lang.String str31 = clusterBlockTuple24.toString();
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray32 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList33 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList33, indexShardStateArray32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str36 = bulkShardRequest35.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest35.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest35.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions40 = bulkShardRequest39.indicesOptions();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>> indexShardStateListTuple41 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>>((java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList33, (org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest39);
        boolean boolean42 = bulkShardRequest39.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId43 = bulkShardRequest39.getParentTask();
        org.elasticsearch.index.shard.ShardId shardId44 = bulkShardRequest39.shardId();
        boolean boolean45 = clusterBlockTuple24.equals((java.lang.Object) shardId44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long47 = indexMetaData46.getCreationDate();
        org.apache.lucene.util.Version version48 = indexMetaData46.getMinimumCompatibleVersion();
        long long49 = indexMetaData46.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap50 = indexMetaData46.getActiveAllocationIds();
        boolean boolean52 = indexMetaData46.isSameUUID("current version [1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress54 = null;
        bulkShardRequest53.remoteAddress(transportAddress54);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest53.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue58 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest57.timeout(timeValue58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str61 = bulkShardRequest60.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy62 = bulkShardRequest60.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel63 = bulkShardRequest60.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest57.consistencyLevel(writeConsistencyLevel63);
        org.elasticsearch.index.shard.ShardId shardId65 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest57.setShardId(shardId65);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest57.index("index.version.created");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy69 = bulkShardRequest68.getRefreshPolicy();
        java.lang.String str70 = bulkShardRequest68.index();
        boolean boolean71 = indexMetaData46.equals((java.lang.Object) bulkShardRequest68);
        boolean boolean72 = clusterBlockTuple24.equals((java.lang.Object) bulkShardRequest68);
        boolean boolean73 = clusterBlockTuple6.equals((java.lang.Object) clusterBlockTuple24);
        java.lang.Comparable<java.lang.String> strComparable74 = clusterBlockTuple6.v2();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(clusterBlock7);
        org.junit.Assert.assertNotNull(clusterBlock8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNull(actionRequestValidationException14);
        org.junit.Assert.assertNotNull(indicesOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(shardId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(clusterBlock19);
        org.junit.Assert.assertNotNull(clusterBlock20);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNull(version27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]" + "'", str31, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
        org.junit.Assert.assertNotNull(indexShardStateArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(indicesOptions40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(taskId43);
        org.junit.Assert.assertNull(shardId44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(version48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + refreshPolicy62 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy62.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel63 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel63.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertTrue("'" + refreshPolicy69 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy69.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "index.version.created" + "'", str70, "index.version.created");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + strComparable74 + "' != '" + "index.creation_date_string" + "'", strComparable74, "index.creation_date_string");
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        long long5 = versionType1.updateVersion((long) (-1), (long) '#');
        boolean boolean8 = versionType1.isVersionConflictForReads(100L, (long) (byte) 3);
        boolean boolean10 = versionType1.validateVersionForWrites((long) 0);
        org.elasticsearch.index.VersionType versionType11 = versionType1.versionTypeForReplicationAndRecovery();
        long long14 = versionType1.updateVersion((-1L), (long) (short) 0);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 35L + "'", long5 == 35L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        java.lang.String str6 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock7 = clusterBlockTuple2.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock8 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple10 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock8, (java.lang.Comparable<java.lang.String>) "current version [0] is higher or equal to the one provided [100]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock11 = clusterBlockTuple10.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock12 = clusterBlockTuple10.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock13 = clusterBlockTuple10.v1();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str6, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(clusterBlock7);
        org.junit.Assert.assertNotNull(clusterBlock8);
        org.junit.Assert.assertNotNull(clusterBlock11);
        org.junit.Assert.assertNotNull(clusterBlock12);
        org.junit.Assert.assertNotNull(clusterBlock13);
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest4.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.index("index.blocks.metadata");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = bulkShardRequest4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest2.remoteAddress(transportAddress3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest2.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy7 = bulkShardRequest2.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.setRefreshPolicy(refreshPolicy7);
        java.lang.String str9 = bulkShardRequest0.index();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = bulkShardRequest0.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(transportAddress1);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertTrue("'" + refreshPolicy7 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy7.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest35.remoteAddress(transportAddress36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest35.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest39.timeout(timeValue40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel45);
        bulkShardRequest46.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest50.remoteAddress(transportAddress51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest50.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue55 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.timeout(timeValue55);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str58 = bulkShardRequest57.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy59 = bulkShardRequest57.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel60 = bulkShardRequest57.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest54.consistencyLevel(writeConsistencyLevel60);
        org.elasticsearch.index.shard.ShardId shardId62 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest54.setShardId(shardId62);
        org.elasticsearch.common.unit.TimeValue timeValue64 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest54.timeout(timeValue64);
        org.elasticsearch.common.transport.TransportAddress transportAddress66 = null;
        bulkShardRequest65.remoteAddress(transportAddress66);
        org.elasticsearch.index.shard.ShardId shardId68 = bulkShardRequest65.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions69 = bulkShardRequest65.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions70 = bulkShardRequest65.indicesOptions();
        org.elasticsearch.tasks.TaskId taskId71 = bulkShardRequest65.getParentTask();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy72 = bulkShardRequest65.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = bulkShardRequest46.setRefreshPolicy(refreshPolicy72);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = bulkShardRequest34.setRefreshPolicy(refreshPolicy72);
        org.elasticsearch.common.transport.TransportAddress transportAddress75 = bulkShardRequest74.remoteAddress();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + refreshPolicy59 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy59.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel60 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel60.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNull(shardId68);
        org.junit.Assert.assertNotNull(indicesOptions69);
        org.junit.Assert.assertNotNull(indicesOptions70);
        org.junit.Assert.assertNotNull(taskId71);
        org.junit.Assert.assertTrue("'" + refreshPolicy72 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy72.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest73);
        org.junit.Assert.assertNotNull(bulkShardRequest74);
        org.junit.Assert.assertNull(transportAddress75);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        int int6 = builder1.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        org.apache.lucene.util.Version version13 = indexMetaData11.getMinimumCompatibleVersion();
        boolean boolean15 = indexMetaData11.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.apache.lucene.util.Version version17 = indexMetaData11.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData11.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getCreationDate();
        org.apache.lucene.util.Version version22 = indexMetaData20.getMinimumCompatibleVersion();
        org.elasticsearch.Version version23 = indexMetaData20.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData20.requireFilters();
        boolean boolean26 = indexMetaData20.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData27.getState();
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData27.activeAllocationIds((int) (short) 1);
        java.lang.String str33 = indexMetaData27.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData20.diff(indexMetaData27);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData11.diff(indexMetaData20);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData20.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap37 = indexMetaData20.getMappings();
        boolean boolean38 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap37);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.common.io.stream.StreamInput streamInput41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff42 = indexMetaData0.readDiffFrom(streamInput41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(version17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_na_" + "'", str33, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(mappingMetaData40);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest0.index("index.priority");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest0.setRefreshPolicy("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        bulkShardRequest11.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest22.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = bulkShardRequest26.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = null;
        bulkShardRequest28.remoteAddress(transportAddress29);
        org.elasticsearch.action.support.IndicesOptions indicesOptions31 = bulkShardRequest28.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest28.validate();
        java.lang.String str33 = bulkShardRequest28.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.index("index.number_of_replicas");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest38.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue43 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest42.timeout(timeValue43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str46 = bulkShardRequest45.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest42.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest50.remoteAddress(transportAddress51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest50.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue55 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.timeout(timeValue55);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str58 = bulkShardRequest57.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy59 = bulkShardRequest57.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel60 = bulkShardRequest57.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest54.consistencyLevel(writeConsistencyLevel60);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest42.consistencyLevel(writeConsistencyLevel60);
        org.elasticsearch.index.shard.ShardId shardId63 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest62.setShardId(shardId63);
        org.elasticsearch.tasks.TaskId taskId65 = bulkShardRequest64.getParentTask();
        bulkShardRequest37.setParentTask(taskId65);
        bulkShardRequest11.setParentTask(taskId65);
        org.elasticsearch.common.transport.TransportAddress transportAddress68 = bulkShardRequest11.remoteAddress();
        bulkShardRequest11.primaryTerm(12L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(timeValue27);
        org.junit.Assert.assertNotNull(indicesOptions31);
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel34 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel34.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + refreshPolicy59 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy59.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel60 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel60.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(taskId65);
        org.junit.Assert.assertNull(transportAddress68);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        bulkShardRequest7.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.setRefreshPolicy(refreshPolicy12);
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest7.remoteAddress(transportAddress14);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        int int18 = bulkItemRequest17.id();
        org.elasticsearch.common.io.stream.StreamInput streamInput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest17.readFrom(streamInput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        int int8 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = builder10.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        int int9 = indexMetaData0.getNumberOfReplicas();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        org.apache.lucene.util.Version version10 = indexMetaData8.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putCustom("state-", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        long long20 = indexMetaData18.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData18.getState();
        boolean boolean23 = indexMetaData18.isSameUUID("index.");
        org.elasticsearch.Version version24 = indexMetaData18.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings25 = indexMetaData18.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder17.settings(settings25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        boolean boolean29 = indexMetaData8.equals((java.lang.Object) settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.removeAlias("index.uuid");
        int int36 = builder33.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder33.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.state(state39);
        int int41 = builder40.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder40.creationDate((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder40.setRoutingNumShards((int) '4');
        boolean boolean47 = indexMetaData0.equals((java.lang.Object) builder40);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("state-");
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        long long12 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.index("current version [10] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.putAlias(builder16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putCustom("state-", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        long long12 = indexMetaData10.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData10.getState();
        boolean boolean15 = indexMetaData10.isSameUUID("index.");
        org.elasticsearch.Version version16 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder9.settings(settings17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        boolean boolean21 = indexMetaData0.equals((java.lang.Object) settings20);
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData0.activeAllocationIds(35);
        int int24 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(mappingMetaData11);
    }
}
