import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test06001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06001");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        int int8 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData0.getSettings();
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        java.lang.Class<?> wildcardClass13 = settings10.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test06002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06002");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest0.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("index.blocks.write");
        bulkShardRequest7.primaryTerm(0L);
        long long10 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest7.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest7.remoteAddress();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertNull(transportAddress12);
    }

    @Test
    public void test06003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06003");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        bulkShardRequest7.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest13.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest7.timeout(timeValue18);
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest4.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.index("index.version.minimum_compatible");
        boolean boolean24 = bulkShardRequest21.getShouldPersistResult();
        bulkShardRequest21.primaryTerm((long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = null;
        bulkShardRequest28.remoteAddress(transportAddress29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest28.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest32.timeout(timeValue33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str36 = bulkShardRequest35.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest35.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = bulkShardRequest35.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel38);
        org.elasticsearch.index.shard.ShardId shardId40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest32.setShardId(shardId40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str44 = bulkShardRequest43.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy45 = bulkShardRequest43.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest46 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest43);
        org.elasticsearch.tasks.TaskId taskId47 = bulkShardRequest43.getParentTask();
        bulkShardRequest41.setParentTask(taskId47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest41.index("indices:data/write/bulk[s]");
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = bulkShardRequest41.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest41.setShardId(shardId52);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest54 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = null;
        bulkShardRequest55.remoteAddress(transportAddress56);
        org.elasticsearch.action.support.IndicesOptions indicesOptions58 = bulkShardRequest55.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest55.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = null;
        bulkShardRequest60.remoteAddress(transportAddress61);
        org.elasticsearch.action.support.IndicesOptions indicesOptions63 = bulkShardRequest60.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException64 = bulkShardRequest60.validate();
        bulkShardRequest60.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy68 = bulkShardRequest60.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest55.setRefreshPolicy(refreshPolicy68);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest53.setRefreshPolicy(refreshPolicy68);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = bulkShardRequest21.setRefreshPolicy(refreshPolicy68);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy72 = bulkShardRequest21.getRefreshPolicy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel38 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel38.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + refreshPolicy45 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy45.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId47);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNull(transportAddress51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(indicesOptions58);
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
        org.junit.Assert.assertNotNull(indicesOptions63);
        org.junit.Assert.assertNotNull(actionRequestValidationException64);
        org.junit.Assert.assertTrue("'" + refreshPolicy68 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy68.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNotNull(bulkShardRequest71);
        org.junit.Assert.assertTrue("'" + refreshPolicy72 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy72.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test06004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06004");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest15.setShardId(shardId21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = bulkShardRequest22.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
    }

    @Test
    public void test06005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06005");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder6.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.blocks.metadata]");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putMapping("current version [1] is higher or equal to the one provided [-1]", "current version [2] is different than the one provided [97]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06006");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest0.timeout();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest0.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        bulkShardRequest15.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str19 = bulkShardRequest18.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.setRefreshPolicy(refreshPolicy20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest0.setRefreshPolicy(refreshPolicy20);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(shardId8);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
    }

    @Test
    public void test06007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06007");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest15.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.timeout("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(indicesOptions19);
    }

    @Test
    public void test06008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06008");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (-1));
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.putAlias(aliasMetaData10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06009");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest17.index("index.");
        long long22 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest17.setRefreshPolicy(refreshPolicy24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest4.setRefreshPolicy(refreshPolicy24);
        bulkShardRequest4.primaryTerm(0L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = bulkShardRequest29.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId31 = bulkShardRequest29.getParentTask();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel32);
        org.elasticsearch.common.unit.TimeValue timeValue34 = bulkShardRequest4.timeout();
        java.lang.String str35 = bulkShardRequest4.index();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = bulkShardRequest4.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(transportAddress30);
        org.junit.Assert.assertNotNull(taskId31);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(timeValue34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "index.creation_date" + "'", str35, "index.creation_date");
    }

    @Test
    public void test06010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06010");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        long long12 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test06011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06011");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        int int9 = indexMetaData0.getRoutingNumShards();
        int int10 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test06012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06012");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test06013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06013");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version11 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(version11);
    }

    @Test
    public void test06014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06014");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest1.validate();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest1.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest1.remoteAddress(transportAddress8);
        boolean boolean10 = bulkShardRequest1.getShouldPersistResult();
        long long11 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest12.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test06015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06015");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAllAliases();
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.putMapping(mappingMetaData11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test06016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06016");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 3);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test06017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06017");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        long long4 = indexMetaData1.getVersion();
        int int5 = indexMetaData1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        org.apache.lucene.util.Version version8 = indexMetaData6.getMinimumCompatibleVersion();
        boolean boolean10 = indexMetaData6.isSameUUID("index.blocks.read");
        boolean boolean12 = indexMetaData6.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData1.diff(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData1.mappingOrDefault("index.creation_date_string");
        java.lang.String str17 = indexMetaData1.getIndexUUID();
        int int18 = indexMetaData1.getRoutingFactor();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<org.elasticsearch.index.shard.ShardId> shardIdSet20 = org.elasticsearch.cluster.metadata.IndexMetaData.selectShrinkShards(0, indexMetaData1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards (-1) must be greater than the shard id: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test06018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06018");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.index("current version [-1] is higher than the one provided [100]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.index("index.version.created");
        boolean boolean12 = bulkShardRequest9.getShouldPersistResult();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06019");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        bulkShardRequest15.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str28 = bulkShardRequest27.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest30 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest27);
        bulkShardRequest27.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue33 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest27.timeout(timeValue33);
        java.lang.String str35 = bulkShardRequest34.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy36 = bulkShardRequest34.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest25.setRefreshPolicy(refreshPolicy36);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting38 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy43 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException44 = bulkShardRequest42.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure46 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting40, "active_allocations", (java.lang.Throwable) actionRequestValidationException44, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure48 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting38, "", (java.lang.Throwable) actionRequestValidationException44, "index.blocks.read_only");
        java.lang.Throwable throwable49 = shardFailure48.cause;
        java.lang.Class<?> wildcardClass50 = shardFailure48.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.support.IndicesOptions indicesOptions54 = bulkShardRequest51.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException55 = bulkShardRequest51.validate();
        java.lang.String str56 = bulkShardRequest51.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress57 = bulkShardRequest51.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest51.getRefreshPolicy();
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationTuple59 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.GenericDeclaration) wildcardClass50, (java.io.Serializable) refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest37.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel61 = bulkShardRequest60.consistencyLevel();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException62 = bulkShardRequest60.validate();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel22 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel22.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + refreshPolicy36 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy36.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertTrue("'" + refreshPolicy43 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy43.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException44);
        org.junit.Assert.assertNotNull(throwable49);
        org.junit.Assert.assertEquals(throwable49.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable49.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable49.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(indicesOptions54);
        org.junit.Assert.assertNotNull(actionRequestValidationException55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(transportAddress57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(genericDeclarationTuple59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel61 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel61.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(actionRequestValidationException62);
    }

    @Test
    public void test06020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06020");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.uuid", custom7);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("current version [-1] is different than the one provided [100]", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.putCustom("state-", custom19);
        int int21 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        boolean boolean27 = indexMetaData22.isSameUUID("index.");
        org.elasticsearch.Version version28 = indexMetaData22.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData22.getSettings();
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder15.settings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder13.settings(settings29);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings35);
        boolean boolean37 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings35);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06021");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock4 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock4, (java.lang.Comparable<java.lang.String>) "current version [0] is higher or equal to the one provided [97]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock7 = clusterBlockTuple6.v1();
        boolean boolean9 = clusterBlockTuple6.equals((java.lang.Object) "current version [-1] is higher than the one provided [-1]");
        java.lang.String str10 = clusterBlockTuple6.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock11 = clusterBlockTuple6.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple13 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock11, (java.lang.Comparable<java.lang.String>) "current version [52] is higher than the one provided [97]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple13.v1();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock4);
        org.junit.Assert.assertNotNull(clusterBlock7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]" + "'", str10, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]");
        org.junit.Assert.assertNotNull(clusterBlock11);
        org.junit.Assert.assertNotNull(clusterBlock14);
    }

    @Test
    public void test06022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06022");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder12.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte31 = state30.id();
        byte byte32 = state30.id();
        byte byte33 = state30.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder29.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getCreationDate();
        long long43 = indexMetaData41.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder38.state(state44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder34.state(state44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder34.setRoutingNumShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long51 = indexMetaData50.getCreationDate();
        org.apache.lucene.util.Version version52 = indexMetaData50.getMinimumCompatibleVersion();
        long long53 = indexMetaData50.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap54 = indexMetaData50.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters55 = indexMetaData50.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap56 = indexMetaData50.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.removeAlias("index.uuid");
        java.lang.String[] strArray73 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder60.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple77 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap56, (java.lang.Cloneable) strSet74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder34.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder22.putActiveAllocationIds(100, (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder13.putActiveAllocationIds(10, (java.util.Set<java.lang.String>) strSet74);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder80.putAlias(aliasMetaData81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte31 + "' != '" + (byte) 0 + "'", byte31 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte33 + "' != '" + (byte) 0 + "'", byte33 == (byte) 0);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNull(version52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap54);
        org.junit.Assert.assertNull(discoveryNodeFilters55);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test06023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06023");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest8.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException13 = bulkShardRequest8.validate();
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest8.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest8.remoteAddress(transportAddress15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest17.remoteAddress(transportAddress18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest17.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.timeout(timeValue22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str25 = bulkShardRequest24.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy26 = bulkShardRequest24.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel27 = bulkShardRequest24.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest21.consistencyLevel(writeConsistencyLevel27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest29.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest33.timeout(timeValue34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str37 = bulkShardRequest36.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy38 = bulkShardRequest36.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel39 = bulkShardRequest36.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest33.consistencyLevel(writeConsistencyLevel39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest21.consistencyLevel(writeConsistencyLevel39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str44 = bulkShardRequest43.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy45 = bulkShardRequest43.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel46 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel46);
        boolean boolean48 = bulkShardRequest47.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params49 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest50.remoteAddress(transportAddress51);
        org.elasticsearch.action.support.IndicesOptions indicesOptions53 = bulkShardRequest50.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException54 = bulkShardRequest50.validate();
        java.lang.String str55 = bulkShardRequest50.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = bulkShardRequest50.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException57 = bulkShardRequest50.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple58 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params49, (java.lang.IllegalArgumentException) actionRequestValidationException57);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple59 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest47, params49);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder7, params49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(actionRequestValidationException13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + refreshPolicy26 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy26.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel27 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel27.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + refreshPolicy38 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy38.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel39 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel39.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + refreshPolicy45 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy45.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel46 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel46.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(params49);
        org.junit.Assert.assertNotNull(indicesOptions53);
        org.junit.Assert.assertNotNull(actionRequestValidationException54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(transportAddress56);
        org.junit.Assert.assertNotNull(actionRequestValidationException57);
    }

    @Test
    public void test06024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06024");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        boolean boolean5 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = indexMetaData0.getRoutingFactor();
        boolean boolean9 = indexMetaData0.isSameUUID("current version [32] is higher or equal to the one provided [0]");
        long long10 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test06025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06025");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("current version [0] is different than the one provided [1]");
        java.lang.String[] strArray8 = new java.lang.String[] { "index.priority", "current version [52] is higher or equal to the one provided [100]", "current version [-1] is higher than the one provided [52]" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder3.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder3.state(state13);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = builder3.mapping("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.numberOfShards(97);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.putCustom("current version [1] is different than the one provided [32]", custom20);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.putMapping(mappingMetaData22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06026");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder8.removeAllAliases();
        int int10 = builder8.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.removeAlias("index.data_path");
        boolean boolean13 = indexMetaData0.equals((java.lang.Object) builder12);
        java.util.Set<java.lang.String> strSet15 = indexMetaData0.activeAllocationIds(0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest17.remoteAddress(transportAddress18);
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest17.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException21 = bulkShardRequest17.validate();
        java.lang.String str22 = bulkShardRequest17.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = bulkShardRequest17.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest17.getRefreshPolicy();
        boolean boolean25 = bulkShardRequest17.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = null;
        bulkShardRequest26.remoteAddress(transportAddress27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest26.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest30.timeout(timeValue31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str34 = bulkShardRequest33.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy35 = bulkShardRequest33.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel36 = bulkShardRequest33.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest30.consistencyLevel(writeConsistencyLevel36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = bulkShardRequest37.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest37.index("indices:data/write/bulk[s]");
        java.lang.String str41 = bulkShardRequest40.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest40.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress46 = null;
        bulkShardRequest45.remoteAddress(transportAddress46);
        org.elasticsearch.action.support.IndicesOptions indicesOptions48 = bulkShardRequest45.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException49 = bulkShardRequest45.validate();
        java.lang.String str50 = bulkShardRequest45.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.common.xcontent.ToXContent.Params params54 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = null;
        bulkShardRequest55.remoteAddress(transportAddress56);
        org.elasticsearch.action.support.IndicesOptions indicesOptions58 = bulkShardRequest55.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest55.validate();
        java.lang.String str60 = bulkShardRequest55.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest55.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException62 = bulkShardRequest55.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple63 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params54, (java.lang.IllegalArgumentException) actionRequestValidationException62);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple64 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest53, params54);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder65 = indexMetaData0.toXContent(xContentBuilder16, params54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertNotNull(actionRequestValidationException21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(transportAddress23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + refreshPolicy35 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy35.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel36 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel36.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(timeValue38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "indices:data/write/bulk[s]" + "'", str41, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions48);
        org.junit.Assert.assertNotNull(actionRequestValidationException49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel51 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel51.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(params54);
        org.junit.Assert.assertNotNull(indicesOptions58);
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(actionRequestValidationException62);
    }

    @Test
    public void test06027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06027");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest8.shardId();
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.setShardId(shardId10);
        java.lang.String str12 = bulkShardRequest8.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.timeout(timeValue18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str21 = bulkShardRequest20.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest17.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = bulkShardRequest17.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str31 = bulkShardRequest30.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest30.index("index.");
        long long35 = bulkShardRequest30.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest36.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest30.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest17.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest8.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest8.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task42 = bulkShardRequest4.createTask(10L, "current version [32] is different than the one provided [100]", "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]", taskId41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(shardId9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(transportAddress29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(taskId41);
    }

    @Test
    public void test06028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06028");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (byte) 3, 10L);
        boolean boolean6 = versionType0.isVersionConflictForReads((long) (byte) 2, (long) 35);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06029");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int10 = builder9.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test06030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06030");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        boolean boolean1 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = bulkShardRequest0.consistencyLevel();
        boolean boolean3 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        bulkShardRequest10.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str14 = bulkShardRequest13.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy15 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest10.setRefreshPolicy(refreshPolicy15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str19 = bulkShardRequest18.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest21 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        bulkShardRequest18.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest10.timeout(timeValue24);
        boolean boolean27 = bulkShardRequest26.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId28 = bulkShardRequest26.getParentTask();
        bulkShardRequest0.setParentTask(taskId28);
        org.elasticsearch.action.support.IndicesOptions indicesOptions30 = bulkShardRequest0.indicesOptions();
        bulkShardRequest0.primaryTerm(97L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel2 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel2.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + refreshPolicy15 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy15.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(taskId28);
        org.junit.Assert.assertNotNull(indicesOptions30);
    }

    @Test
    public void test06031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06031");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest14.remoteAddress(transportAddress18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str22 = bulkShardRequest21.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest21.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest24 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest21);
        org.elasticsearch.tasks.TaskId taskId25 = bulkShardRequest21.getParentTask();
        bulkShardRequest14.setParentTask(taskId25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = null;
        bulkShardRequest27.remoteAddress(transportAddress28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest27.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest31.timeout(timeValue32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str35 = bulkShardRequest34.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy36 = bulkShardRequest34.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel37 = bulkShardRequest34.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest31.consistencyLevel(writeConsistencyLevel37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress41 = null;
        bulkShardRequest40.remoteAddress(transportAddress41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest40.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue45 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest44.timeout(timeValue45);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel47 = bulkShardRequest44.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel47);
        java.lang.String str50 = bulkShardRequest13.index();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId25);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + refreshPolicy36 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy36.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel37 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel37.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel47 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel47.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "index.creation_date" + "'", str50, "index.creation_date");
    }

    @Test
    public void test06032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06032");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean9 = indexMetaData4.isSameUUID("index.");
        long long10 = indexMetaData4.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData4.includeFilters();
        org.elasticsearch.Version version12 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData4.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData4.mappingOrDefault("current version [1] is higher or equal to the one provided [-1]");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("index.uuid");
        java.lang.String[] strArray35 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder22.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet36);
        org.elasticsearch.common.xcontent.ToXContent.Params params39 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strSetTuple40 = new org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strSet36, params39);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData4, xContentBuilder18, params39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(params39);
    }

    @Test
    public void test06033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06033");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap15 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData0.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest19.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException23 = bulkShardRequest19.validate();
        java.lang.String str24 = bulkShardRequest19.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = bulkShardRequest19.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException26 = bulkShardRequest19.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple27 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params18, (java.lang.IllegalArgumentException) actionRequestValidationException26);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = indexMetaData0.toXContent(xContentBuilder17, params18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(params18);
        org.junit.Assert.assertNotNull(indicesOptions22);
        org.junit.Assert.assertNotNull(actionRequestValidationException23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(transportAddress25);
        org.junit.Assert.assertNotNull(actionRequestValidationException26);
    }

    @Test
    public void test06034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06034");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder8.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet27);
        int int31 = builder8.numberOfReplicas();
        long long32 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        org.apache.lucene.util.Version version36 = indexMetaData34.getMinimumCompatibleVersion();
        long long37 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData34.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap40 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData34.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData34.excludeFilters();
        java.util.Set<java.lang.String> strSet44 = indexMetaData34.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder8.putActiveAllocationIds((int) ' ', strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getCreationDate();
        org.apache.lucene.util.Version version50 = indexMetaData48.getMinimumCompatibleVersion();
        long long51 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap52 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData48.includeFilters();
        java.lang.String str54 = indexMetaData48.getIndexUUID();
        int int55 = indexMetaData48.getRoutingFactor();
        java.util.Set<java.lang.String> strSet57 = null; // flaky: indexMetaData48.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version58 = indexMetaData48.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state59 = indexMetaData48.getState();
        byte byte60 = state59.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder47.state(state59);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder47.putMapping(mappingMetaData62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNull(version50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap52);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "_na_" + "'", str54, "_na_");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(version58);
        org.junit.Assert.assertTrue("'" + state59 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state59.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte60 + "' != '" + (byte) 0 + "'", byte60 == (byte) 0);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test06035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06035");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple13 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException8, builder10);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure15 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.blocks.read_only", (java.lang.Throwable) actionRequestValidationException8, "index.creation_date_string");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure17 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.version.created_string", (java.lang.Throwable) actionRequestValidationException8, "index.version.created");
        java.lang.String str18 = shardFailure17.indexUUID;
        java.lang.Throwable throwable19 = shardFailure17.cause;
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.version.created" + "'", str18, "index.version.created");
        org.junit.Assert.assertNotNull(throwable19);
        org.junit.Assert.assertEquals(throwable19.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable19.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable19.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test06036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06036");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str5 = versionType0.explainConflictForWrites((long) 'a', 32L, true);
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str10 = versionType0.explainConflictForWrites((long) (-1), (long) 100, false);
        boolean boolean14 = versionType0.isVersionConflictForWrites((long) (byte) 0, (long) 0, false);
        byte byte15 = versionType0.getValue();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [97] is higher than the one provided [32]" + "'", str5, "current version [97] is higher than the one provided [32]");
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [-1] is higher than the one provided [100]" + "'", str10, "current version [-1] is higher than the one provided [100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 2 + "'", byte15 == (byte) 2);
    }

    @Test
    public void test06037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06037");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean5 = versionType1.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType7 = versionType6.versionTypeForReplicationAndRecovery();
        boolean boolean9 = versionType7.validateVersionForReads(1L);
        org.elasticsearch.index.VersionType versionType10 = versionType7.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType11 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean13 = versionType11.validateVersionForReads((long) 2);
        byte byte14 = versionType11.getValue();
        boolean boolean16 = versionType11.validateVersionForWrites(12L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType17 = org.elasticsearch.index.VersionType.fromString("current version [-1] is different than the one provided [100]", versionType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [-1] is different than the one provided [100]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(versionType10);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 1 + "'", byte14 == (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06038");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        long long3 = versionType0.updateVersion((long) (short) 100, (long) (byte) 10);
        long long6 = versionType0.updateVersion((long) '#', (long) ' ');
        boolean boolean10 = versionType0.isVersionConflictForWrites((long) (byte) 3, (long) 10, false);
        boolean boolean12 = versionType0.validateVersionForReads(0L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06039");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [1] is higher or equal to the one provided [2]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [1] is higher or equal to the one provided [2]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06040");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        java.lang.String str15 = indexMetaData9.getIndexUUID();
        org.elasticsearch.Version version16 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getCreationDate();
        org.apache.lucene.util.Version version22 = indexMetaData20.getMinimumCompatibleVersion();
        long long23 = indexMetaData20.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap24 = indexMetaData20.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData20.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData20.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData20.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData20.excludeFilters();
        java.util.Set<java.lang.String> strSet30 = indexMetaData20.activeAllocationIds((int) (short) 0);
        int int31 = indexMetaData20.getNumberOfShards();
        long long32 = indexMetaData20.getVersion();
        org.apache.lucene.util.Version version33 = indexMetaData20.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData20.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData20.mapping("current version [52] is higher or equal to the one provided [100]");
        java.lang.String str37 = indexMetaData20.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff38 = indexMetaData0.diff(indexMetaData20);
        org.elasticsearch.Version version39 = indexMetaData20.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData20.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNull(version33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "_na_" + "'", str37, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff38);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
    }

    @Test
    public void test06041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06041");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.numberOfShards(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.removeAlias("current version [32] is different than the one provided [11]");
        long long20 = builder17.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test06042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06042");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.removeAlias("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getCreationDate();
        org.apache.lucene.util.Version version17 = indexMetaData15.getMinimumCompatibleVersion();
        long long18 = indexMetaData15.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData15.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData15.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = indexMetaData15.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("index.uuid");
        java.lang.String[] strArray38 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder25.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple42 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap21, (java.lang.Cloneable) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder9.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom45 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder9.putCustom("indices:data/write/bulk[s]", custom45);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(version17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test06043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06043");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest0.shardId();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest0.timeout("");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNull(actionRequestValidationException9);
        org.junit.Assert.assertNull(shardId10);
    }

    @Test
    public void test06044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06044");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        long long4 = indexMetaData1.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData1.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData1.includeFilters();
        java.lang.String str7 = indexMetaData1.getIndexUUID();
        int int8 = indexMetaData1.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        boolean boolean11 = indexMetaData1.isSameUUID("hi!");
        org.elasticsearch.index.VersionType versionType12 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType13 = versionType12.versionTypeForReplicationAndRecovery();
        boolean boolean15 = versionType13.validateVersionForWrites((long) (byte) 3);
        boolean boolean16 = indexMetaData1.equals((java.lang.Object) versionType13);
        boolean boolean18 = versionType13.validateVersionForWrites((long) (short) -1);
        boolean boolean20 = versionType13.validateVersionForWrites((long) (short) 10);
        boolean boolean23 = versionType13.isVersionConflictForReads((long) (short) -1, 2L);
        boolean boolean25 = versionType13.validateVersionForWrites(97L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType26 = org.elasticsearch.index.VersionType.fromString("index.creation_date_string", versionType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.creation_date_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertNotNull(versionType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06045");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.putCustom("current version [32] is higher or equal to the one provided [0]", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        long long10 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean13 = indexMetaData8.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData8.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte24 = state23.id();
        byte byte25 = state23.id();
        byte byte26 = state23.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder22.state(state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData34.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder31.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder27.state(state37);
        byte byte40 = state37.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder16.state(state37);
        byte byte42 = state37.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder1.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.setRoutingNumShards((int) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 0 + "'", byte40 == (byte) 0);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 0 + "'", byte42 == (byte) 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test06046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06046");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData5.getActiveAllocationIds();
        boolean boolean10 = clusterBlockTuple4.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData5.getAliases();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
    }

    @Test
    public void test06047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06047");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.shadow_replicas");
        int int8 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.VersionType versionType9 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType10 = versionType9.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType11 = versionType10.versionTypeForReplicationAndRecovery();
        long long14 = versionType10.updateVersion((long) (-1), (long) '#');
        org.elasticsearch.index.VersionType versionType15 = versionType10.versionTypeForReplicationAndRecovery();
        boolean boolean19 = versionType15.isVersionConflictForWrites((long) ' ', 3L, true);
        long long22 = versionType15.updateVersion((long) 10, (long) 35);
        boolean boolean23 = indexMetaData0.equals((java.lang.Object) long22);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(versionType9);
        org.junit.Assert.assertNotNull(versionType10);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertNotNull(versionType15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06048");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple4.v2();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str7 = bulkShardRequest6.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest6.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest6.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest10.indicesOptions();
        boolean boolean12 = clusterBlockTuple4.equals((java.lang.Object) bulkShardRequest10);
        java.lang.String str13 = clusterBlockTuple4.toString();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "indices:data/write/bulk[s]" + "'", strComparable5, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]" + "'", str13, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
    }

    @Test
    public void test06049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06049");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.putCustom("state-", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        long long16 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        boolean boolean19 = indexMetaData14.isSameUUID("index.");
        org.elasticsearch.Version version20 = indexMetaData14.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder13.settings(settings21);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder6.settings(settings24);
        org.elasticsearch.common.settings.Settings settings26 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings26);
        org.elasticsearch.transport.TransportService transportService28 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService29 = null;
        org.elasticsearch.indices.IndicesService indicesService30 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool31 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction32 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction33 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper34 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters35 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction37 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings27, transportService28, clusterService29, indicesService30, threadPool31, shardStateAction32, mappingUpdatedAction33, updateHelper34, actionFilters35, indexNameExpressionResolver36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test06050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06050");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData5.mapping("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData5.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData5.mappingOrDefault("state-");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData18);
    }

    @Test
    public void test06051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06051");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType5 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType0.isVersionConflictForWrites(0L, (long) 'a', false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06052");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData0.isSameUUID("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test06053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06053");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        long long7 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfShards(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder11.mapping("index.blocks.write");
        int int16 = builder11.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.putCustom("state-", custom24);
        int int26 = builder20.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData27.getState();
        boolean boolean32 = indexMetaData27.isSameUUID("index.");
        org.elasticsearch.Version version33 = indexMetaData27.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData27.getSettings();
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder20.settings(settings34);
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder11.settings(settings39);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte42 = state41.id();
        byte byte43 = state41.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder11.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder9.state(state41);
        int int46 = builder45.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 0 + "'", byte42 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
    }

    @Test
    public void test06054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06054");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData9.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        int int30 = indexMetaData27.getNumberOfShards();
        boolean boolean32 = indexMetaData27.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData27.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData27.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings35 = indexMetaData27.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff36 = indexMetaData9.diff(indexMetaData27);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.removeAlias("index.uuid");
        java.lang.String[] strArray54 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder41.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.common.xcontent.ToXContent.Params params58 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strSetTuple59 = new org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strSet55, params58);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = indexMetaData9.toXContent(xContentBuilder37, params58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(indexMetaDataDiff36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(params58);
    }

    @Test
    public void test06055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06055");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.timeout(timeValue7);
        org.elasticsearch.tasks.TaskId taskId9 = bulkShardRequest8.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest12.remoteAddress(transportAddress13);
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest12.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest12.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest22 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest19);
        org.elasticsearch.tasks.TaskId taskId23 = bulkShardRequest19.getParentTask();
        bulkShardRequest12.setParentTask(taskId23);
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = bulkShardRequest12.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue26 = bulkShardRequest12.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest11.timeout(timeValue26);
        org.elasticsearch.index.shard.ShardId shardId28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest27.setShardId(shardId28);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(taskId9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(indicesOptions15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId23);
        org.junit.Assert.assertNull(transportAddress25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
    }

    @Test
    public void test06056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06056");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.index("index.shared_filesystem");
        int int8 = builder7.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test06057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06057");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, actionRequest1);
        int int3 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test06058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06058");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        bulkShardRequest13.primaryTerm(10L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest13.getRefreshPolicy();
        boolean boolean17 = bulkShardRequest13.getShouldPersistResult();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        org.apache.lucene.util.Version version20 = indexMetaData18.getMinimumCompatibleVersion();
        boolean boolean22 = indexMetaData18.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        org.apache.lucene.util.Version version24 = indexMetaData18.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet26 = null; // flaky: indexMetaData18.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        org.elasticsearch.Version version30 = indexMetaData27.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData27.requireFilters();
        boolean boolean33 = indexMetaData27.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData18.diff(indexMetaData27);
        java.lang.String str35 = indexMetaData18.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData18.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        org.apache.lucene.util.Version version39 = indexMetaData37.getMinimumCompatibleVersion();
        boolean boolean41 = indexMetaData37.isSameUUID("state-");
        int int42 = indexMetaData37.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData37.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff44 = indexMetaData18.diff(indexMetaData37);
        org.elasticsearch.common.settings.Settings settings45 = indexMetaData18.getSettings();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest54 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest51);
        boolean boolean55 = indexMetaData18.equals((java.lang.Object) bulkShardRequest51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest56.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException61 = bulkShardRequest56.validate();
        org.elasticsearch.common.unit.TimeValue timeValue62 = bulkShardRequest56.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest51.timeout(timeValue62);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel64 = bulkShardRequest63.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel64);
        org.elasticsearch.action.support.IndicesOptions indicesOptions66 = bulkShardRequest65.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId67 = bulkShardRequest65.shardId();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_na_" + "'", str35, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNull(version39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(indexMetaDataDiff44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(actionRequestValidationException61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel64 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel64.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNotNull(indicesOptions66);
        org.junit.Assert.assertNull(shardId67);
    }

    @Test
    public void test06059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06059");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.blocks.metadata]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.blocks.metadata]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06060");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        boolean boolean6 = indexMetaData0.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        int int8 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("current version [-1] is higher than the one provided [32]");
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData0.activeAllocationIds((int) '4');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
    }

    @Test
    public void test06061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06061");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple13 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException8, builder10);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure15 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.blocks.read_only", (java.lang.Throwable) actionRequestValidationException8, "index.creation_date_string");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure17 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.version.created_string", (java.lang.Throwable) actionRequestValidationException8, "index.version.created");
        java.lang.String str18 = shardFailure17.indexUUID;
        java.lang.String str19 = shardFailure17.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting20 = shardFailure17.routing;
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.version.created" + "'", str18, "index.version.created");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.version.created" + "'", str19, "index.version.created");
        org.junit.Assert.assertNull(shardRouting20);
    }

    @Test
    public void test06062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06062");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest15.indicesOptions();
        boolean boolean21 = bulkShardRequest15.getShouldPersistResult();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06063");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder9.mapping("current version [-1] is different than the one provided [100]");
        int int12 = builder9.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.numberOfReplicas((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version(3L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        org.apache.lucene.util.Version version19 = indexMetaData17.getMinimumCompatibleVersion();
        long long20 = indexMetaData17.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = indexMetaData17.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData17.getInitialRecoveryFilters();
        org.elasticsearch.Version version23 = indexMetaData17.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData17.getAliases();
        int int25 = indexMetaData17.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long27 = indexMetaData26.getCreationDate();
        org.apache.lucene.util.Version version28 = indexMetaData26.getMinimumCompatibleVersion();
        long long29 = indexMetaData26.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap30 = indexMetaData26.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData26.includeFilters();
        java.lang.String str32 = indexMetaData26.getIndexUUID();
        org.elasticsearch.Version version33 = indexMetaData26.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData26.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff36 = indexMetaData17.diff(indexMetaData26);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData26.getSettings();
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder14.settings(settings40);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(indexMetaDataDiff36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test06064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06064");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest2.remoteAddress(transportAddress3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest2.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple11 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException6, builder8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest12.remoteAddress(transportAddress13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest12.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.timeout(timeValue17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.index.shard.ShardId shardId24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest16.setShardId(shardId24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest16.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest27.index("_na_");
        org.elasticsearch.common.collect.Tuple<java.lang.Throwable, org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>> throwableTuple30 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Throwable) actionRequestValidationException6, (org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest27);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure32 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.creation_date", (java.lang.Throwable) actionRequestValidationException6, "current version [-1] is different than the one provided [100]");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting33 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting35 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting37 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting39 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting41 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting43 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy46 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException47 = bulkShardRequest45.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure49 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting43, "active_allocations", (java.lang.Throwable) actionRequestValidationException47, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure51 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting41, "indices:data/write/bulk[s]", (java.lang.Throwable) actionRequestValidationException47, "_na_");
        java.lang.Throwable throwable52 = shardFailure51.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure54 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting39, "", throwable52, "current version [35] is different than the one provided [-1]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure56 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting37, "index.creation_date", throwable52, "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure58 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting35, "current version [0] is higher or equal to the one provided [0]", throwable52, "current version [35] is different than the one provided [10]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure60 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting33, "current version [0] is different than the one provided [100]", throwable52, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]");
        java.lang.Throwable throwable61 = shardFailure60.cause;
        org.elasticsearch.common.collect.Tuple<java.lang.Exception, java.io.Serializable> exceptionTuple62 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Exception) actionRequestValidationException6, (java.io.Serializable) throwable61);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel22 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel22.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(throwableTuple30);
        org.junit.Assert.assertTrue("'" + refreshPolicy46 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy46.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException47);
        org.junit.Assert.assertNotNull(throwable52);
        org.junit.Assert.assertEquals(throwable52.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable52.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable52.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(throwable61);
        org.junit.Assert.assertEquals(throwable61.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable61.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable61.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(exceptionTuple62);
    }

    @Test
    public void test06065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06065");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.tasks.TaskId taskId4 = bulkShardRequest0.getParentTask();
        org.elasticsearch.common.io.stream.StreamInput streamInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.readFrom(streamInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(taskId4);
    }

    @Test
    public void test06066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06066");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest9.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest9.remoteAddress(transportAddress11);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test06067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06067");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.creationDate((long) (short) 10);
        org.elasticsearch.common.settings.Settings.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.settings(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test06068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06068");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        long long11 = builder10.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        org.apache.lucene.util.Version version16 = indexMetaData14.getMinimumCompatibleVersion();
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData14.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.removeAlias("index.uuid");
        java.lang.String[] strArray37 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder24.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple41 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap20, (java.lang.Cloneable) strSet38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder10.putActiveAllocationIds((int) (byte) 2, (java.util.Set<java.lang.String>) strSet38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.numberOfReplicas((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test06069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06069");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest7.remoteAddress(transportAddress8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest7.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest7.validate();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest1.timeout(timeValue12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest1.timeout();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest1.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long21 = indexMetaData20.getCreationDate();
        org.apache.lucene.util.Version version22 = indexMetaData20.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder24.putCustom("state-", custom28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long31 = indexMetaData30.getCreationDate();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData30.getState();
        boolean boolean35 = indexMetaData30.isSameUUID("index.");
        org.elasticsearch.Version version36 = indexMetaData30.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData30.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder29.settings(settings37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings39);
        boolean boolean41 = indexMetaData20.equals((java.lang.Object) settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData20);
        boolean boolean43 = indexMetaData16.equals((java.lang.Object) builder42);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Object> validationExceptionTuple44 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Object>((org.elasticsearch.common.ValidationException) actionRequestValidationException15, (java.lang.Object) indexMetaData16);
        java.util.Set<java.lang.String> strSet46 = null; // flaky: indexMetaData16.activeAllocationIds(35);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strSet46);
    }

    @Test
    public void test06070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06070");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        java.lang.String str4 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock5 = clusterBlockTuple2.v1();
        java.lang.Comparable<java.lang.String> strComparable6 = clusterBlockTuple2.v2();
        java.lang.String str7 = clusterBlockTuple2.toString();
        java.lang.String str8 = clusterBlockTuple2.toString();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str4, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(clusterBlock5);
        org.junit.Assert.assertEquals("'" + strComparable6 + "' != '" + "index.version.created" + "'", strComparable6, "index.version.created");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str7, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str8, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
    }

    @Test
    public void test06071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06071");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str5 = versionType0.explainConflictForWrites((long) 'a', 32L, true);
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str10 = versionType0.explainConflictForWrites((long) (-1), (long) 100, false);
        org.elasticsearch.index.VersionType versionType11 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean15 = versionType11.isVersionConflictForWrites((long) 2, (long) 3, false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [97] is higher than the one provided [32]" + "'", str5, "current version [97] is higher than the one provided [32]");
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [-1] is higher than the one provided [100]" + "'", str10, "current version [-1] is higher than the one provided [100]");
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06072");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.timeout(timeValue7);
        org.elasticsearch.tasks.TaskId taskId9 = bulkShardRequest8.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest10.remoteAddress(transportAddress11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest10.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest14.timeout(timeValue15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str18 = bulkShardRequest17.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest17.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.setRefreshPolicy("");
        bulkShardRequest23.primaryTerm(10L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy26 = bulkShardRequest23.getRefreshPolicy();
        boolean boolean27 = bulkShardRequest23.getShouldPersistResult();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest8.setRefreshPolicy(refreshPolicy28);
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(taskId9);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + refreshPolicy26 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy26.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertNotNull(bulkShardRequest29);
    }

    @Test
    public void test06073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06073");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        int int7 = indexMetaData4.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData4.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet11 = indexMetaData4.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder2.putActiveAllocationIds((int) 'a', strSet11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder2.version((long) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = builder2.mapping("current version [1] is higher or equal to the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder2.numberOfReplicas(97);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.removeAlias("index.uuid");
        java.lang.String[] strArray47 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder34.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray51 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList52 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList52, indexShardStateArray51);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte55 = state54.id();
        byte byte56 = state54.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple57 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList52, state54);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state58 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte59 = state58.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple60 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList52, state58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder34.state(state58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder26.state(state58);
        long long63 = builder26.version();
        long long64 = builder26.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long67 = indexMetaData66.getCreationDate();
        long long68 = indexMetaData66.getVersion();
        int int69 = indexMetaData66.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet71 = null; // flaky: indexMetaData66.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet73 = indexMetaData66.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder26.putActiveAllocationIds((int) (byte) 0, strSet73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder19.putActiveAllocationIds((int) (byte) 10, strSet73);
        org.elasticsearch.common.settings.Settings.Builder builder76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder75.settings(builder76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(indexShardStateArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte55 + "' != '" + (byte) 0 + "'", byte55 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple57);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state58.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) 0 + "'", byte59 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test06074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06074");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        int int25 = indexMetaData0.getNumberOfReplicas();
        java.lang.String str26 = indexMetaData0.getIndexUUID();
        int int27 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap28 = indexMetaData0.getAliases();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_na_" + "'", str26, "_na_");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
    }

    @Test
    public void test06075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06075");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.index.shard.ShardId shardId30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.setShardId(shardId30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        boolean boolean33 = bulkShardRequest32.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress35 = null;
        bulkShardRequest34.remoteAddress(transportAddress35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest34.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest38.timeout(timeValue39);
        bulkShardRequest40.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress44 = null;
        bulkShardRequest43.remoteAddress(transportAddress44);
        org.elasticsearch.action.support.IndicesOptions indicesOptions46 = bulkShardRequest43.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException47 = bulkShardRequest43.validate();
        org.elasticsearch.common.unit.TimeValue timeValue48 = bulkShardRequest43.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest43.index("index.blocks.write");
        org.elasticsearch.index.shard.ShardId shardId51 = bulkShardRequest50.shardId();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel52 = bulkShardRequest50.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.action.support.IndicesOptions indicesOptions56 = bulkShardRequest29.indicesOptions();
        org.elasticsearch.common.unit.TimeValue timeValue57 = bulkShardRequest29.timeout();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(indicesOptions46);
        org.junit.Assert.assertNotNull(actionRequestValidationException47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNull(shardId51);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel52 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel52.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(indicesOptions56);
        org.junit.Assert.assertNotNull(timeValue57);
    }

    @Test
    public void test06076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06076");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.Version version15 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = builder16.build();
        boolean boolean19 = indexMetaData17.isSameUUID("index.blocks.metadata");
        int int20 = indexMetaData17.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData17.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData17.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData17.requireFilters();
        org.apache.lucene.util.Version version24 = indexMetaData17.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData0.diff(indexMetaData17);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNotNull(indexMetaDataDiff25);
    }

    @Test
    public void test06077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06077");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [0] is different than the one provided [52]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test06078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06078");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.Object obj5 = null;
        boolean boolean6 = indexMetaData0.equals(obj5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putMapping("current version [-1] is higher than the one provided [32]", "current version [97] is different than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06079");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("current version [-1] is higher than the one provided [52]");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        int int7 = indexMetaData0.getRoutingNumShards();
        boolean boolean9 = indexMetaData0.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test06080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06080");
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray0 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState> indexShardStateSet1 = new java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, indexShardStateArray0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getCreationDate();
        org.apache.lucene.util.Version version5 = indexMetaData3.getMinimumCompatibleVersion();
        boolean boolean7 = indexMetaData3.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData3);
        org.apache.lucene.util.Version version9 = indexMetaData3.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData3.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        org.elasticsearch.Version version15 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.requireFilters();
        boolean boolean18 = indexMetaData12.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData3.diff(indexMetaData12);
        org.elasticsearch.common.collect.Tuple<java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.common.io.stream.Writeable> indexShardStateSetTuple20 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, (org.elasticsearch.common.io.stream.Writeable) indexMetaData12);
        boolean boolean22 = indexMetaData12.isSameUUID("index.version.upgraded");
        int int23 = indexMetaData12.getRoutingFactor();
        long long24 = indexMetaData12.getVersion();
        org.junit.Assert.assertNotNull(indexShardStateArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(indexShardStateSetTuple20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test06081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06081");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getCreationDate();
        org.apache.lucene.util.Version version17 = indexMetaData15.getMinimumCompatibleVersion();
        boolean boolean19 = indexMetaData15.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData15);
        org.apache.lucene.util.Version version21 = indexMetaData15.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet23 = null; // flaky: indexMetaData15.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long25 = indexMetaData24.getCreationDate();
        org.apache.lucene.util.Version version26 = indexMetaData24.getMinimumCompatibleVersion();
        org.elasticsearch.Version version27 = indexMetaData24.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData24.requireFilters();
        boolean boolean30 = indexMetaData24.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData15.diff(indexMetaData24);
        java.lang.String str32 = indexMetaData15.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData15.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        org.apache.lucene.util.Version version36 = indexMetaData34.getMinimumCompatibleVersion();
        boolean boolean38 = indexMetaData34.isSameUUID("state-");
        int int39 = indexMetaData34.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData34.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData15.diff(indexMetaData34);
        boolean boolean42 = clusterBlockTuple6.equals((java.lang.Object) indexMetaData34);
        long long43 = indexMetaData34.getCreationDate();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(version17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    }

    @Test
    public void test06082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06082");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        java.lang.String str4 = clusterBlockTuple2.toString();
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock6 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock6, (java.lang.Comparable<java.lang.String>) "index.priority");
        java.lang.String str9 = clusterBlockTuple8.toString();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str4, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.priority]" + "'", str9, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.priority]");
    }

    @Test
    public void test06083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06083");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest0.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest0.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setRefreshPolicy("current version [-1] is higher or equal to the one provided [100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [current version [-1] is higher or equal to the one provided [100]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(indicesOptions7);
    }

    @Test
    public void test06084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06084");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple16 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("current version [0] is different than the one provided [1]");
        boolean boolean21 = clusterBlockTuple16.equals((java.lang.Object) builder18);
        java.lang.String str22 = clusterBlockTuple16.toString();
        java.lang.Comparable<java.lang.String> strComparable23 = clusterBlockTuple16.v2();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]" + "'", str22, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]");
        org.junit.Assert.assertEquals("'" + strComparable23 + "' != '" + "current version [52] is higher or equal to the one provided [100]" + "'", strComparable23, "current version [52] is higher or equal to the one provided [100]");
    }

    @Test
    public void test06085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06085");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate(3L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.index("");
        int int19 = builder18.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder18.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder28.putCustom("state-", custom32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData34.getState();
        boolean boolean39 = indexMetaData34.isSameUUID("index.");
        org.elasticsearch.Version version40 = indexMetaData34.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings41 = indexMetaData34.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder33.settings(settings41);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings41);
        org.elasticsearch.common.settings.Settings settings44 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        boolean boolean46 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings41);
        boolean boolean47 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder18.settings(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder12.settings(settings41);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings41);
        boolean boolean51 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings50);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test06086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        boolean boolean6 = indexMetaData0.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData7.activeAllocationIds((int) (short) 1);
        java.lang.String str13 = indexMetaData7.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData0.getAliases();
        int int16 = indexMetaData0.getTotalNumberOfShards();
        int int17 = indexMetaData0.getNumberOfShards();
        long long18 = indexMetaData0.getVersion();
        java.util.Set<java.lang.String> strSet20 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap21 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
    }

    @Test
    public void test06087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.elasticsearch.common.settings.Settings settings10 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str13 = bulkShardRequest12.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy14 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest12.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest12.validate();
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest12.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest12.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest33.remoteAddress(transportAddress34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest33.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest37.timeout(timeValue38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str41 = bulkShardRequest40.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy42 = bulkShardRequest40.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest37.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str48 = bulkShardRequest47.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy49 = bulkShardRequest47.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel50 = bulkShardRequest47.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel50);
        boolean boolean52 = bulkShardRequest51.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params53 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress55 = null;
        bulkShardRequest54.remoteAddress(transportAddress55);
        org.elasticsearch.action.support.IndicesOptions indicesOptions57 = bulkShardRequest54.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException58 = bulkShardRequest54.validate();
        java.lang.String str59 = bulkShardRequest54.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress60 = bulkShardRequest54.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException61 = bulkShardRequest54.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params53, (java.lang.IllegalArgumentException) actionRequestValidationException61);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple63 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest51, params53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = settings7.toXContent(xContentBuilder11, params53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + refreshPolicy14 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy14.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + refreshPolicy42 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy42.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel43 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel43.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + refreshPolicy49 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy49.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel50 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel50.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(params53);
        org.junit.Assert.assertNotNull(indicesOptions57);
        org.junit.Assert.assertNotNull(actionRequestValidationException58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(transportAddress60);
        org.junit.Assert.assertNotNull(actionRequestValidationException61);
    }

    @Test
    public void test06088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06088");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        int int7 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("current version [1] is different than the one provided [35]", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfReplicas(52);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06089");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.setRoutingNumShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.numberOfReplicas(3);
        org.elasticsearch.common.settings.Settings.Builder builder10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.settings(builder10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06090");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.removeAlias("index.creation_date_string");
        org.elasticsearch.common.settings.Settings.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.settings(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06091");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.version((long) (short) 0);
        org.elasticsearch.common.settings.Settings.Builder builder11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.settings(builder11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06092");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.index.shard.ShardId shardId30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.setShardId(shardId30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        boolean boolean33 = bulkShardRequest32.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress35 = null;
        bulkShardRequest34.remoteAddress(transportAddress35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest34.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest38.timeout(timeValue39);
        bulkShardRequest40.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress44 = null;
        bulkShardRequest43.remoteAddress(transportAddress44);
        org.elasticsearch.action.support.IndicesOptions indicesOptions46 = bulkShardRequest43.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException47 = bulkShardRequest43.validate();
        org.elasticsearch.common.unit.TimeValue timeValue48 = bulkShardRequest43.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest43.index("index.blocks.write");
        org.elasticsearch.index.shard.ShardId shardId51 = bulkShardRequest50.shardId();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel52 = bulkShardRequest50.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.common.unit.TimeValue timeValue56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest29.timeout(timeValue56);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(indicesOptions46);
        org.junit.Assert.assertNotNull(actionRequestValidationException47);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNull(shardId51);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel52 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel52.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
    }

    @Test
    public void test06093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06093");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.index.shard.ShardId shardId30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest17.setShardId(shardId30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray32 = bulkShardRequest17.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
    }

    @Test
    public void test06094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06094");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("current version [-1] is different than the one provided [100]");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.creationDate(32L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06095");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        int int8 = indexMetaData0.getNumberOfReplicas();
        int int9 = indexMetaData0.getNumberOfShards();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        long long13 = indexMetaData11.getVersion();
        int int14 = indexMetaData11.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet16 = null; // flaky: indexMetaData11.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet18 = indexMetaData11.activeAllocationIds((int) (short) 0);
        org.elasticsearch.Version version19 = indexMetaData11.getCreationVersion();
        long long20 = indexMetaData11.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData11.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData0.diff(indexMetaData11);
        int int23 = indexMetaData11.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData11.getState();
        int int25 = indexMetaData11.getTotalNumberOfShards();
        org.elasticsearch.index.Index index26 = indexMetaData11.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(index26);
    }

    @Test
    public void test06096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06096");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId1 = bulkShardRequest0.shardId();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest11.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest8.setShardId(shardId16);
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest8.timeout(timeValue18);
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest19.remoteAddress(transportAddress20);
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = bulkShardRequest19.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId23 = bulkShardRequest19.getParentTask();
        org.elasticsearch.index.shard.ShardId shardId24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest19.setShardId(shardId24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest19.index("");
        org.elasticsearch.tasks.TaskId taskId28 = bulkShardRequest19.getParentTask();
        bulkShardRequest0.setParentTask(taskId28);
        org.junit.Assert.assertNull(shardId1);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(transportAddress22);
        org.junit.Assert.assertNotNull(taskId23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(taskId28);
    }

    @Test
    public void test06097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06097");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.setShardId(shardId15);
        java.lang.String str17 = bulkShardRequest11.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest18.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest18.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest11.setRefreshPolicy(refreshPolicy23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest11.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest11.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = null;
        bulkShardRequest28.remoteAddress(transportAddress29);
        org.elasticsearch.action.support.IndicesOptions indicesOptions31 = bulkShardRequest28.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest28.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str36 = bulkShardRequest35.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest35.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest38 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest35);
        org.elasticsearch.tasks.TaskId taskId39 = bulkShardRequest35.getParentTask();
        bulkShardRequest28.setParentTask(taskId39);
        bulkShardRequest11.setParentTask(taskId39);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "indices:data/write/bulk[s]" + "'", str17, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertNotNull(actionRequestValidationException22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNotNull(indicesOptions31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId39);
    }

    @Test
    public void test06098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06098");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putMapping(mappingMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
    }

    @Test
    public void test06099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06099");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long36 = indexMetaData35.getCreationDate();
        long long37 = indexMetaData35.getVersion();
        long long38 = indexMetaData35.getVersion();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = null;
        bulkShardRequest39.remoteAddress(transportAddress40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest39.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue44 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest43.timeout(timeValue44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str47 = bulkShardRequest46.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy48 = bulkShardRequest46.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel49 = bulkShardRequest46.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest43.consistencyLevel(writeConsistencyLevel49);
        org.elasticsearch.index.shard.ShardId shardId51 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest43.setShardId(shardId51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest43.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress58 = null;
        bulkShardRequest57.remoteAddress(transportAddress58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest57.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue62 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest61.timeout(timeValue62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str65 = bulkShardRequest64.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy66 = bulkShardRequest64.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel67 = bulkShardRequest64.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest61.consistencyLevel(writeConsistencyLevel67);
        org.elasticsearch.index.shard.ShardId shardId69 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest61.setShardId(shardId69);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str73 = bulkShardRequest72.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy74 = bulkShardRequest72.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest75 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest72);
        org.elasticsearch.tasks.TaskId taskId76 = bulkShardRequest72.getParentTask();
        bulkShardRequest70.setParentTask(taskId76);
        bulkShardRequest54.setParentTask(taskId76);
        boolean boolean79 = indexMetaData35.equals((java.lang.Object) taskId76);
        bulkShardRequest34.setParentTask(taskId76);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = bulkShardRequest34.index("current version [32] is higher or equal to the one provided [0]");
        org.elasticsearch.common.transport.TransportAddress transportAddress83 = null;
        bulkShardRequest34.remoteAddress(transportAddress83);
        bulkShardRequest34.primaryTerm(0L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy87 = bulkShardRequest34.getRefreshPolicy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + refreshPolicy48 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy48.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel49 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel49.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + refreshPolicy66 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy66.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel67 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel67.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + refreshPolicy74 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy74.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest82);
        org.junit.Assert.assertTrue("'" + refreshPolicy87 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy87.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test06100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06100");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.putCustom("state-", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        long long16 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        boolean boolean19 = indexMetaData14.isSameUUID("index.");
        org.elasticsearch.Version version20 = indexMetaData14.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder13.settings(settings21);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder6.settings(settings24);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        org.elasticsearch.transport.TransportService transportService29 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService30 = null;
        org.elasticsearch.indices.IndicesService indicesService31 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool32 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction33 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction34 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper35 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters36 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction38 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings27, transportService29, clusterService30, indicesService31, threadPool32, shardStateAction33, mappingUpdatedAction34, updateHelper35, actionFilters36, indexNameExpressionResolver37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
    }

    @Test
    public void test06101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06101");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        byte byte4 = state3.id();
        byte byte5 = state3.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.state(state3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.setRoutingNumShards((int) '#');
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 0 + "'", byte5 == (byte) 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test06102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06102");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        java.lang.String str5 = versionType1.explainConflictForWrites((long) (short) -1, (long) (byte) 100, false);
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        java.lang.String str10 = versionType1.explainConflictForWrites(35L, (long) 0, false);
        java.lang.String str13 = versionType1.explainConflictForReads((long) 52, 10L);
        org.elasticsearch.index.VersionType versionType14 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [-1] is different than the one provided [100]" + "'", str5, "current version [-1] is different than the one provided [100]");
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [35] is different than the one provided [0]" + "'", str10, "current version [35] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [52] is different than the one provided [10]" + "'", str13, "current version [52] is different than the one provided [10]");
        org.junit.Assert.assertNotNull(versionType14);
    }

    @Test
    public void test06103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06103");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) -1);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test06104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06104");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("state-");
        int int8 = indexMetaData5.getRoutingNumShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentParser xContentParser11 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexMetaData0.fromXContent(xContentParser11, parseFieldMatcher12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test06105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06105");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of source shards [1] must be a must be a multiple of [-1]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
    }

    @Test
    public void test06106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06106");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.creationDate((long) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = builder14.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06107");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putMapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]", "index.shared_filesystem.recover_on_any_node");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06108");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test06109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06109");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean5 = versionType1.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType7 = versionType6.versionTypeForReplicationAndRecovery();
        boolean boolean9 = versionType7.validateVersionForReads(1L);
        boolean boolean11 = versionType7.validateVersionForReads((long) (byte) 100);
        boolean boolean14 = versionType7.isVersionConflictForReads((long) (byte) 3, (long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType15 = org.elasticsearch.index.VersionType.fromString("current version [1] is higher or equal to the one provided [52]", versionType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [1] is higher or equal to the one provided [52]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06110");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean6 = versionType0.validateVersionForReads(0L);
        boolean boolean8 = versionType0.validateVersionForWrites(0L);
        long long11 = versionType0.updateVersion(35L, (long) (byte) -1);
        byte byte12 = versionType0.getValue();
        long long15 = versionType0.updateVersion((long) ' ', (long) 0);
        boolean boolean19 = versionType0.isVersionConflictForWrites(2L, 0L, true);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 3 + "'", byte12 == (byte) 3);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06111");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long2 = indexMetaData1.getCreationDate();
        org.apache.lucene.util.Version version3 = indexMetaData1.getMinimumCompatibleVersion();
        boolean boolean5 = indexMetaData1.isSameUUID("index.blocks.read");
        boolean boolean7 = indexMetaData1.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str8 = indexMetaData1.getIndexUUID();
        org.elasticsearch.Version version9 = indexMetaData1.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData1.getMappings();
        java.lang.Class<?> wildcardClass11 = indexMetaData1.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest12.remoteAddress(transportAddress13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest12.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.timeout(timeValue17);
        org.elasticsearch.index.shard.ShardId shardId19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest16.setShardId(shardId19);
        bulkShardRequest20.setParentTask("state-", (long) (byte) -1);
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.Type, org.elasticsearch.common.io.stream.Streamable> typeTuple24 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.Type) wildcardClass11, (org.elasticsearch.common.io.stream.Streamable) bulkShardRequest20);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str27 = bulkShardRequest26.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest26.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest26.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest26.validate();
        org.elasticsearch.common.unit.TimeValue timeValue32 = bulkShardRequest26.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress33 = null;
        bulkShardRequest26.remoteAddress(transportAddress33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest35.remoteAddress(transportAddress36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest35.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest39.timeout(timeValue40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str55 = bulkShardRequest54.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy56 = bulkShardRequest54.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel57 = bulkShardRequest54.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest51.consistencyLevel(writeConsistencyLevel57);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel57);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel57);
        org.elasticsearch.index.shard.ShardId shardId61 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest60.setShardId(shardId61);
        org.elasticsearch.common.unit.TimeValue timeValue63 = bulkShardRequest62.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest20.timeout(timeValue63);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel65 = bulkShardRequest64.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest66 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest64);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput67 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest66.writeTo(streamOutput67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(typeTuple24);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(actionRequestValidationException31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + refreshPolicy56 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy56.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel57 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel57.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel65 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel65.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test06112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06112");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        long long7 = indexMetaData5.getVersion();
        int int8 = indexMetaData5.getNumberOfReplicas();
        long long9 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData5.getState();
        int int12 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData5.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06113");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean5 = versionType1.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType7 = versionType6.versionTypeForReplicationAndRecovery();
        boolean boolean11 = versionType6.isVersionConflictForWrites((long) (byte) 10, (long) (byte) 10, false);
        boolean boolean13 = versionType6.validateVersionForWrites((long) (byte) 3);
        java.lang.String str16 = versionType6.explainConflictForReads(0L, (long) 32);
        boolean boolean20 = versionType6.isVersionConflictForWrites((long) (short) 100, 0L, false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType21 = org.elasticsearch.index.VersionType.fromString("indices:data/write/bulk[s]", versionType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [indices:data/write/bulk[s]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "current version [0] is different than the one provided [32]" + "'", str16, "current version [0] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test06114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06114");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        bulkShardRequest7.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest13.validate();
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest13.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest7.timeout(timeValue18);
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest4.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest21.index("index.version.minimum_compatible");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str25 = bulkShardRequest24.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy26 = bulkShardRequest24.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest24.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException29 = bulkShardRequest24.validate();
        org.elasticsearch.tasks.TaskId taskId30 = bulkShardRequest24.getParentTask();
        bulkShardRequest23.setParentTask(taskId30);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest23.getRefreshPolicy();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + refreshPolicy26 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy26.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(actionRequestValidationException29);
        org.junit.Assert.assertNotNull(taskId30);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test06115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06115");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData0.getAliases();
        java.lang.String str25 = indexMetaData0.getIndexUUID();
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int28 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
    }

    @Test
    public void test06116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06116");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.blocks.write");
        java.lang.String str8 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) (short) 10);
        java.lang.String str11 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder5.removeAlias("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder5.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder5.removeAlias("current version [10] is different than the one provided [0]");
        java.lang.Class<?> wildcardClass18 = builder17.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.blocks.write" + "'", str8, "index.blocks.write");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.blocks.write" + "'", str11, "index.blocks.write");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test06117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06117");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str4 = bulkShardRequest3.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy5 = bulkShardRequest3.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest6 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest3);
        bulkShardRequest3.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest9.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException13 = bulkShardRequest9.validate();
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest3.timeout(timeValue14);
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest3.timeout();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest3.validate();
        org.elasticsearch.common.collect.Tuple<java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>, org.elasticsearch.action.ActionRequestValidationException> stateEnumTuple18 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>) state1, actionRequestValidationException17);
        java.lang.Class<?> wildcardClass19 = actionRequestValidationException17.getClass();
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + refreshPolicy5 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy5.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertNotNull(actionRequestValidationException13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(stateEnumTuple18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test06118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06118");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        int int8 = indexMetaData0.getNumberOfReplicas();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        long long12 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData0.mapping("current version [0] is higher or equal to the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder16.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        long long21 = indexMetaData19.getVersion();
        int int22 = indexMetaData19.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData19.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet26 = indexMetaData19.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder17.putActiveAllocationIds((int) 'a', strSet26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom35 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.putCustom("state-", custom35);
        int int37 = builder31.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long39 = indexMetaData38.getCreationDate();
        long long40 = indexMetaData38.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData38.getState();
        boolean boolean43 = indexMetaData38.isSameUUID("index.");
        org.elasticsearch.Version version44 = indexMetaData38.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings45 = indexMetaData38.getSettings();
        boolean boolean46 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings45);
        boolean boolean47 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder31.settings(settings45);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings45);
        boolean boolean50 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder29.settings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long53 = indexMetaData52.getCreationDate();
        org.apache.lucene.util.Version version54 = indexMetaData52.getMinimumCompatibleVersion();
        boolean boolean56 = indexMetaData52.isSameUUID("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData52.getCustoms();
        java.lang.String str58 = indexMetaData52.getIndexUUID();
        int int59 = indexMetaData52.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state60 = indexMetaData52.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder51.state(state60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder51.numberOfShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder63.setRoutingNumShards((int) (short) 1);
        boolean boolean66 = indexMetaData0.equals((java.lang.Object) builder65);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNull(version54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "_na_" + "'", str58, "_na_");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + state60 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state60.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06119");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.requireFilters();
        org.elasticsearch.index.VersionType versionType12 = org.elasticsearch.index.VersionType.EXTERNAL;
        boolean boolean15 = versionType12.isVersionConflictForReads((long) (short) -1, 10L);
        boolean boolean16 = indexMetaData0.equals((java.lang.Object) boolean15);
        int int17 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test06120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06120");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
    }

    @Test
    public void test06121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06121");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getTotalNumberOfShards();
        int int7 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test06122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06122");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.timeout(timeValue7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest8.remoteAddress();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest14.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.index("index.blocks.write");
        bulkShardRequest21.primaryTerm(0L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest21.getRefreshPolicy();
        org.elasticsearch.tasks.TaskId taskId25 = bulkShardRequest21.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task26 = bulkShardRequest8.createTask(12L, "index.shared_filesystem", "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]", taskId25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId25);
    }

    @Test
    public void test06123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06123");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAlias("current version [10] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "active_allocations" + "'", str2, "active_allocations");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test06124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06124");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData0.mapping("index.version.upgraded");
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
    }

    @Test
    public void test06125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06125");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        boolean boolean1 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest2.remoteAddress(transportAddress3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest2.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest6.timeout(timeValue7);
        bulkShardRequest8.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest11.remoteAddress(transportAddress12);
        org.elasticsearch.action.support.IndicesOptions indicesOptions14 = bulkShardRequest11.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest11.validate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest11.index("index.blocks.write");
        org.elasticsearch.index.shard.ShardId shardId19 = bulkShardRequest18.shardId();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest18.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = bulkShardRequest22.remoteAddress();
        org.elasticsearch.action.support.IndicesOptions indicesOptions26 = bulkShardRequest22.indicesOptions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(indicesOptions14);
        org.junit.Assert.assertNotNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(shardId19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNull(transportAddress25);
        org.junit.Assert.assertNotNull(indicesOptions26);
    }

    @Test
    public void test06126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06126");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.version(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder9.mapping("index.data_path");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder9.putMapping(mappingMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test06127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06127");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (byte) 10, (long) '4');
        byte byte4 = versionType0.getValue();
        boolean boolean7 = versionType0.isVersionConflictForReads((long) '4', 0L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 3 + "'", byte4 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06128");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.creationDate((long) (short) 100);
        java.lang.String str11 = builder10.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.version(1L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.primaryTerm((int) (byte) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.creation_date" + "'", str11, "index.creation_date");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06129");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("current version [1] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.setRoutingNumShards((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = builder11.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06130");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        int int10 = indexMetaData7.getRoutingFactor();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData7);
        int int12 = indexMetaData7.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("_na_", custom16);
        boolean boolean18 = indexMetaData7.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.removeAlias("current version [-1] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder17.putAlias(builder21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06131");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings14);
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings14);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings14);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings14);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06132");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test06133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06133");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        int int7 = indexMetaData4.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData4.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet11 = indexMetaData4.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder2.putActiveAllocationIds((int) 'a', strSet11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putMapping("", "current version [-1] is higher than the one provided [32]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06134");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        int int10 = indexMetaData7.getRoutingFactor();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData7);
        java.lang.String str12 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentParser xContentParser13 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = indexMetaData0.fromXContent(xContentParser13, parseFieldMatcher14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
    }

    @Test
    public void test06135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        long long10 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean13 = indexMetaData8.isSameUUID("index.");
        org.elasticsearch.Version version14 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData8.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
    }

    @Test
    public void test06136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getCreationDate();
        long long15 = indexMetaData13.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData13.getState();
        boolean boolean18 = indexMetaData13.isSameUUID("index.");
        long long19 = indexMetaData13.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData13.includeFilters();
        org.elasticsearch.Version version21 = indexMetaData13.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData9.diff(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData13.getCustoms();
        org.elasticsearch.Version version24 = indexMetaData13.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData13.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData13);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData13.mapping("current version [52] is different than the one provided [52]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNull(mappingMetaData28);
    }

    @Test
    public void test06137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06137");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.Class<?> wildcardClass8 = builder7.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test06138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06138");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("");
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.Version version14 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version15 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNull(version15);
    }

    @Test
    public void test06139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06139");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        int int5 = builder1.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test06140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06140");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest12.remoteAddress(transportAddress13);
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest12.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException16 = bulkShardRequest12.validate();
        java.lang.String str17 = bulkShardRequest12.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = bulkShardRequest12.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest12.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple20 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params11, (java.lang.IllegalArgumentException) actionRequestValidationException19);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = settings9.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNotNull(indicesOptions15);
        org.junit.Assert.assertNotNull(actionRequestValidationException16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(transportAddress18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
    }

    @Test
    public void test06141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06141");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet6 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 2);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(strSet6);
    }

    @Test
    public void test06142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06142");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest3 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str5 = bulkShardRequest4.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy6 = bulkShardRequest4.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str11 = bulkShardRequest10.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy12 = bulkShardRequest10.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest10);
        org.elasticsearch.tasks.TaskId taskId14 = bulkShardRequest10.getParentTask();
        bulkShardRequest4.setParentTask(taskId14);
        bulkShardRequest2.setParentTask(taskId14);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest17.writeTo(streamOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + refreshPolicy6 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy6.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + refreshPolicy12 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy12.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId14);
    }

    @Test
    public void test06143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06143");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        int int5 = indexMetaData0.getNumberOfReplicas();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("current version [-1] is different than the one provided [100]");
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData0.getMappings();
        int int11 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test06144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06144");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.setRoutingNumShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping(mappingMetaData5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test06145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06145");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.data_path");
        long long2 = builder1.version();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("current version [97] is higher or equal to the one provided [32]", custom5);
        org.elasticsearch.common.settings.Settings.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.settings(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06146");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        org.apache.lucene.util.Version version10 = indexMetaData8.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putCustom("state-", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        long long20 = indexMetaData18.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData18.getState();
        boolean boolean23 = indexMetaData18.isSameUUID("index.");
        org.elasticsearch.Version version24 = indexMetaData18.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings25 = indexMetaData18.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder17.settings(settings25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        boolean boolean29 = indexMetaData8.equals((java.lang.Object) settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.Version version32 = indexMetaData8.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexMetaData8.readFrom(streamInput33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertNotNull(version32);
    }

    @Test
    public void test06147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int7 = indexMetaData0.getTotalNumberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test06148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06148");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        bulkShardRequest53.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest53.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest24.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest24.index("index.data_path");
        org.elasticsearch.action.support.IndicesOptions indicesOptions64 = bulkShardRequest63.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress65 = null;
        bulkShardRequest63.remoteAddress(transportAddress65);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(transportAddress61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(indicesOptions64);
    }

    @Test
    public void test06149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06149");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings5);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06150");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        org.elasticsearch.action.support.IndicesOptions indicesOptions8 = bulkShardRequest5.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest5.validate();
        bulkShardRequest5.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest5.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest0.setRefreshPolicy(refreshPolicy13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = bulkShardRequest0.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(indicesOptions8);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
    }

    @Test
    public void test06151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06151");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.putCustom("state-", custom14);
        int int16 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        boolean boolean22 = indexMetaData17.isSameUUID("index.");
        org.elasticsearch.Version version23 = indexMetaData17.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings24 = indexMetaData17.getSettings();
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder10.settings(settings24);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder1.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.numberOfReplicas(35);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.putAlias(builder33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test06152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06152");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest1.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest1.validate();
        java.lang.String str6 = bulkShardRequest1.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest1.getRefreshPolicy();
        boolean boolean9 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.ActionRequest actionRequest11 = bulkItemRequest10.request();
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertNotNull(actionRequestValidationException5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(actionRequest11);
    }

    @Test
    public void test06153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06153");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest1.remoteAddress(transportAddress3);
        long long5 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest1.readFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test06154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06154");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        bulkShardRequest13.primaryTerm(10L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.tasks.TaskId taskId18 = bulkShardRequest17.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = bulkShardRequest17.remoteAddress();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(taskId18);
        org.junit.Assert.assertNull(transportAddress19);
    }

    @Test
    public void test06155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06155");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        long long7 = indexMetaData5.getVersion();
        int int8 = indexMetaData5.getNumberOfReplicas();
        long long9 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData5.requireFilters();
        int int12 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData5.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
    }

    @Test
    public void test06156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06156");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = builder13.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
    }

    @Test
    public void test06157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData5.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest16.remoteAddress(transportAddress17);
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException20 = bulkShardRequest16.validate();
        java.lang.String str21 = bulkShardRequest16.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = bulkShardRequest16.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest16.getRefreshPolicy();
        boolean boolean24 = bulkShardRequest16.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.index("indices:data/write/bulk[s]");
        java.lang.String str40 = bulkShardRequest39.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest39.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = bulkShardRequest39.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress45 = null;
        bulkShardRequest44.remoteAddress(transportAddress45);
        org.elasticsearch.action.support.IndicesOptions indicesOptions47 = bulkShardRequest44.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException48 = bulkShardRequest44.validate();
        java.lang.String str49 = bulkShardRequest44.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel50 = bulkShardRequest44.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel50);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel50);
        org.elasticsearch.common.xcontent.ToXContent.Params params53 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress55 = null;
        bulkShardRequest54.remoteAddress(transportAddress55);
        org.elasticsearch.action.support.IndicesOptions indicesOptions57 = bulkShardRequest54.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException58 = bulkShardRequest54.validate();
        java.lang.String str59 = bulkShardRequest54.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress60 = bulkShardRequest54.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException61 = bulkShardRequest54.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params53, (java.lang.IllegalArgumentException) actionRequestValidationException61);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple63 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest52, params53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder64 = indexMetaData5.toXContent(xContentBuilder15, params53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(actionRequestValidationException20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(transportAddress22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "indices:data/write/bulk[s]" + "'", str40, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel43 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel43.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions47);
        org.junit.Assert.assertNotNull(actionRequestValidationException48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel50 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel50.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(params53);
        org.junit.Assert.assertNotNull(indicesOptions57);
        org.junit.Assert.assertNotNull(actionRequestValidationException58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(transportAddress60);
        org.junit.Assert.assertNotNull(actionRequestValidationException61);
    }

    @Test
    public void test06158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06158");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        int int7 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        long long10 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean13 = indexMetaData8.isSameUUID("index.");
        org.elasticsearch.Version version14 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData8.getSettings();
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.settings(settings15);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = settings15.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test06159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06159");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest5.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.timeout(timeValue10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str13 = bulkShardRequest12.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy14 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest12.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.common.unit.TimeValue timeValue17 = bulkShardRequest16.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.index("index.blocks.metadata");
        boolean boolean20 = clusterBlockTuple2.equals((java.lang.Object) "index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long22 = indexMetaData21.getCreationDate();
        org.apache.lucene.util.Version version23 = indexMetaData21.getMinimumCompatibleVersion();
        boolean boolean25 = indexMetaData21.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.apache.lucene.util.Version version27 = indexMetaData21.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet29 = null; // flaky: indexMetaData21.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long31 = indexMetaData30.getCreationDate();
        org.apache.lucene.util.Version version32 = indexMetaData30.getMinimumCompatibleVersion();
        org.elasticsearch.Version version33 = indexMetaData30.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData30.requireFilters();
        boolean boolean36 = indexMetaData30.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff37 = indexMetaData21.diff(indexMetaData30);
        java.lang.String str38 = indexMetaData21.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap39 = indexMetaData21.getAliases();
        boolean boolean41 = indexMetaData21.isSameUUID("current version [52] is higher or equal to the one provided [100]");
        org.apache.lucene.util.Version version42 = indexMetaData21.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData21.excludeFilters();
        boolean boolean44 = clusterBlockTuple2.equals((java.lang.Object) indexMetaData21);
        long long45 = indexMetaData21.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData21.getCustoms();
        java.lang.String str47 = indexMetaData21.getIndexUUID();
        boolean boolean49 = indexMetaData21.isSameUUID("current version [0] is higher or equal to the one provided [100]");
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + refreshPolicy14 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy14.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(timeValue17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(version23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(version27);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNull(version32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_na_" + "'", str38, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(version42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "_na_" + "'", str47, "_na_");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test06160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06160");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str3 = bulkShardRequest2.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy4 = bulkShardRequest2.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest5 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        bulkShardRequest2.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest8.remoteAddress(transportAddress9);
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest8.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest8.validate();
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest8.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest2.timeout(timeValue13);
        org.elasticsearch.common.unit.TimeValue timeValue15 = bulkShardRequest2.timeout();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest16 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.action.ActionRequest actionRequest17 = bulkItemRequest16.request();
        org.elasticsearch.action.ActionRequest actionRequest18 = bulkItemRequest16.request();
        org.elasticsearch.action.ActionRequest actionRequest19 = bulkItemRequest16.request();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = bulkItemRequest16.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + refreshPolicy4 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy4.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(actionRequest17);
        org.junit.Assert.assertNotNull(actionRequest18);
        org.junit.Assert.assertNotNull(actionRequest19);
    }

    @Test
    public void test06161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06161");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str36 = bulkShardRequest35.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest35.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = bulkShardRequest35.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel38);
        boolean boolean40 = bulkShardRequest39.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params41 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress43 = null;
        bulkShardRequest42.remoteAddress(transportAddress43);
        org.elasticsearch.action.support.IndicesOptions indicesOptions45 = bulkShardRequest42.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException46 = bulkShardRequest42.validate();
        java.lang.String str47 = bulkShardRequest42.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = bulkShardRequest42.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException49 = bulkShardRequest42.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple50 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params41, (java.lang.IllegalArgumentException) actionRequestValidationException49);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple51 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest39, params41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = bulkShardRequest39.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel38 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel38.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(params41);
        org.junit.Assert.assertNotNull(indicesOptions45);
        org.junit.Assert.assertNotNull(actionRequestValidationException46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(transportAddress48);
        org.junit.Assert.assertNotNull(actionRequestValidationException49);
    }

    @Test
    public void test06162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06162");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest1.validate();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest1.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest1.remoteAddress(transportAddress8);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest1.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest11.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException16 = bulkShardRequest11.validate();
        org.elasticsearch.common.unit.TimeValue timeValue17 = bulkShardRequest11.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest11.remoteAddress(transportAddress18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest20.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest24.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str28 = bulkShardRequest27.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest27.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress33 = null;
        bulkShardRequest32.remoteAddress(transportAddress33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest32.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest36.timeout(timeValue37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str40 = bulkShardRequest39.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy41 = bulkShardRequest39.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel42 = bulkShardRequest39.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress47 = null;
        bulkShardRequest46.remoteAddress(transportAddress47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest46.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue51 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest50.timeout(timeValue51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str54 = bulkShardRequest53.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy55 = bulkShardRequest53.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel56 = bulkShardRequest53.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest50.consistencyLevel(writeConsistencyLevel56);
        bulkShardRequest57.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress62 = null;
        bulkShardRequest61.remoteAddress(transportAddress62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest61.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue66 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest65.timeout(timeValue66);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str69 = bulkShardRequest68.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy70 = bulkShardRequest68.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel71 = bulkShardRequest68.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest65.consistencyLevel(writeConsistencyLevel71);
        org.elasticsearch.index.shard.ShardId shardId73 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = bulkShardRequest65.setShardId(shardId73);
        org.elasticsearch.common.unit.TimeValue timeValue75 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest76 = bulkShardRequest65.timeout(timeValue75);
        org.elasticsearch.common.transport.TransportAddress transportAddress77 = null;
        bulkShardRequest76.remoteAddress(transportAddress77);
        org.elasticsearch.index.shard.ShardId shardId79 = bulkShardRequest76.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions80 = bulkShardRequest76.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions81 = bulkShardRequest76.indicesOptions();
        org.elasticsearch.tasks.TaskId taskId82 = bulkShardRequest76.getParentTask();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy83 = bulkShardRequest76.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = bulkShardRequest57.setRefreshPolicy(refreshPolicy83);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest85 = bulkShardRequest45.setRefreshPolicy(refreshPolicy83);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest86 = bulkShardRequest1.setRefreshPolicy(refreshPolicy83);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest87 = new org.elasticsearch.action.bulk.BulkItemRequest(100, (org.elasticsearch.action.ActionRequest) bulkShardRequest86);
        org.elasticsearch.action.ActionRequest actionRequest88 = bulkItemRequest87.request();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNull(actionRequestValidationException10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(actionRequestValidationException16);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + refreshPolicy41 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy41.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel42 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel42.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + refreshPolicy55 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy55.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel56 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel56.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNotNull(bulkShardRequest67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + refreshPolicy70 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy70.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel71 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel71.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertNotNull(bulkShardRequest74);
        org.junit.Assert.assertNotNull(bulkShardRequest76);
        org.junit.Assert.assertNull(shardId79);
        org.junit.Assert.assertNotNull(indicesOptions80);
        org.junit.Assert.assertNotNull(indicesOptions81);
        org.junit.Assert.assertNotNull(taskId82);
        org.junit.Assert.assertTrue("'" + refreshPolicy83 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy83.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest84);
        org.junit.Assert.assertNotNull(bulkShardRequest85);
        org.junit.Assert.assertNotNull(bulkShardRequest86);
        org.junit.Assert.assertNotNull(actionRequest88);
    }

    @Test
    public void test06163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06163");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest15.getRefreshPolicy();
        org.elasticsearch.index.shard.ShardId shardId17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.setShardId(shardId17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray19 = bulkShardRequest18.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest18);
    }

    @Test
    public void test06164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06164");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version28 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int30 = builder29.numberOfShards();
        int int31 = builder29.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test06165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06165");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        int int9 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.priority]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test06166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06166");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray30 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList31 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, indexShardStateArray30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte34 = state33.id();
        byte byte35 = state33.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple36 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList31, state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte38 = state37.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple39 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList31, state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder13.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder5.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long43 = indexMetaData42.getCreationDate();
        long long44 = indexMetaData42.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData42.getState();
        boolean boolean47 = indexMetaData42.isSameUUID("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData42.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder41.state(state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom51 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder41.putCustom("current version [0] is higher or equal to the one provided [100]", custom51);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder41.putMapping(mappingMetaData53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexShardStateArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 0 + "'", byte35 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple36);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test06167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06167");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.String str6 = shardFailure4.reason;
        java.lang.String str7 = shardFailure4.reason;
        java.lang.String str8 = shardFailure4.reason;
        java.lang.String str9 = shardFailure4.reason;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting10 = shardFailure4.routing;
        java.lang.String str11 = shardFailure4.reason;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(shardRouting10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06168");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest(1, actionRequest1);
        int int3 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.action.ActionRequest actionRequest4 = null; // flaky: bulkItemRequest2.request();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = bulkItemRequest2.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(actionRequest4);
    }

    @Test
    public void test06169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06169");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest4.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        bulkShardRequest9.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest15.validate();
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest15.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest9.timeout(timeValue20);
        org.elasticsearch.common.unit.TimeValue timeValue22 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest23 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        org.elasticsearch.common.unit.TimeValue timeValue24 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest4.timeout(timeValue24);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy26 = bulkShardRequest4.getRefreshPolicy();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = bulkShardRequest4.remoteAddress();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertTrue("'" + refreshPolicy26 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy26.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNull(transportAddress27);
    }

    @Test
    public void test06170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06170");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        long long8 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder5.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder17.putCustom("state-", custom21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getCreationDate();
        long long25 = indexMetaData23.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData23.getState();
        boolean boolean28 = indexMetaData23.isSameUUID("index.");
        org.elasticsearch.Version version29 = indexMetaData23.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData23.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder22.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder22.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder38.index("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long45 = indexMetaData44.getCreationDate();
        long long46 = indexMetaData44.getVersion();
        int int47 = indexMetaData44.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet49 = null; // flaky: indexMetaData44.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet51 = indexMetaData44.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder42.putActiveAllocationIds((-1), strSet51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder22.putActiveAllocationIds((int) (byte) -1, strSet51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder14.putActiveAllocationIds((int) (byte) 3, strSet51);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test06171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06171");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putCustom("current version [97] is higher than the one provided [32]", custom4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.setRoutingNumShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = builder7.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06172");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.EXTERNAL;
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType3 = versionType1.versionTypeForReplicationAndRecovery();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType4 = org.elasticsearch.index.VersionType.fromString("index.creation_date", versionType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.creation_date]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertNotNull(versionType3);
    }

    @Test
    public void test06173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06173");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test06174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06174");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest0.shardId();
        long long7 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.tasks.TaskId taskId8 = bulkShardRequest0.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray9 = bulkShardRequest0.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(taskId8);
    }

    @Test
    public void test06175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06175");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.putCustom("state-", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        long long16 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        boolean boolean19 = indexMetaData14.isSameUUID("index.");
        org.elasticsearch.Version version20 = indexMetaData14.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData14.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder13.settings(settings21);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder6.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder25.index("current version [0] is higher or equal to the one provided [0]");
        java.lang.Class<?> wildcardClass30 = builder29.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(version20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test06176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06176");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        org.apache.lucene.util.Version version10 = indexMetaData8.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putCustom("state-", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        long long20 = indexMetaData18.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData18.getState();
        boolean boolean23 = indexMetaData18.isSameUUID("index.");
        org.elasticsearch.Version version24 = indexMetaData18.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings25 = indexMetaData18.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder17.settings(settings25);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings25);
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        boolean boolean29 = indexMetaData8.equals((java.lang.Object) settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.common.xcontent.XContentParser xContentParser32 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = indexMetaData8.fromXContent(xContentParser32, parseFieldMatcher33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
    }

    @Test
    public void test06177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06177");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = bulkShardRequest13.remoteAddress();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = bulkShardRequest13.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest16.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str24 = bulkShardRequest23.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy25 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest26 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest23);
        bulkShardRequest23.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.elasticsearch.action.support.IndicesOptions indicesOptions32 = bulkShardRequest29.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException33 = bulkShardRequest29.validate();
        org.elasticsearch.common.unit.TimeValue timeValue34 = bulkShardRequest29.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest23.timeout(timeValue34);
        org.elasticsearch.common.unit.TimeValue timeValue36 = bulkShardRequest23.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest20.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest37.index("index.version.minimum_compatible");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str41 = bulkShardRequest40.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy42 = bulkShardRequest40.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress45 = null;
        bulkShardRequest44.remoteAddress(transportAddress45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest44.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue49 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest48.timeout(timeValue49);
        bulkShardRequest50.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str54 = bulkShardRequest53.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy55 = bulkShardRequest53.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest50.setRefreshPolicy(refreshPolicy55);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest40.setRefreshPolicy(refreshPolicy55);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str59 = bulkShardRequest58.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy60 = bulkShardRequest58.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest58.index("index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str65 = bulkShardRequest64.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy66 = bulkShardRequest64.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest67 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest64);
        org.elasticsearch.tasks.TaskId taskId68 = bulkShardRequest64.getParentTask();
        bulkShardRequest58.setParentTask(taskId68);
        bulkShardRequest57.setParentTask(taskId68);
        bulkShardRequest37.setParentTask(taskId68);
        bulkShardRequest13.setParentTask(taskId68);
        bulkShardRequest11.setParentTask(taskId68);
        org.elasticsearch.index.shard.ShardId shardId74 = bulkShardRequest11.shardId();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.creation_date" + "'", str12, "index.creation_date");
        org.junit.Assert.assertNull(transportAddress14);
        org.junit.Assert.assertNull(transportAddress15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + refreshPolicy25 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy25.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions32);
        org.junit.Assert.assertNotNull(actionRequestValidationException33);
        org.junit.Assert.assertNotNull(timeValue34);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + refreshPolicy42 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy42.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel43 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel43.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + refreshPolicy55 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy55.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + refreshPolicy60 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy60.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + refreshPolicy66 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy66.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId68);
        org.junit.Assert.assertNull(shardId74);
    }

    @Test
    public void test06178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06178");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.index("current version [0] is different than the one provided [98]");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest9);
    }

    @Test
    public void test06179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06179");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest4.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.index("index.blocks.metadata");
        boolean boolean11 = bulkShardRequest4.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray12 = bulkShardRequest4.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06180");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.shadow_replicas");
        bulkShardRequest15.primaryTerm((-1L));
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.index.shard.ShardId shardId19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest15.setShardId(shardId19);
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException23 = bulkShardRequest15.validate();
        bulkShardRequest15.primaryTerm(11L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(transportAddress21);
        org.junit.Assert.assertNotNull(indicesOptions22);
        org.junit.Assert.assertNull(actionRequestValidationException23);
    }

    @Test
    public void test06181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06181");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean6 = versionType0.validateVersionForReads(0L);
        boolean boolean8 = versionType0.validateVersionForWrites(0L);
        long long11 = versionType0.updateVersion(35L, (long) (byte) -1);
        byte byte12 = versionType0.getValue();
        org.elasticsearch.index.VersionType versionType13 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean15 = versionType0.validateVersionForWrites((long) '#');
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 3 + "'", byte12 == (byte) 3);
        org.junit.Assert.assertNotNull(versionType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06182");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.String str6 = shardFailure4.reason;
        java.lang.String str7 = shardFailure4.reason;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = shardFailure4.routing;
        java.lang.String str9 = shardFailure4.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting10 = shardFailure4.routing;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(shardRouting8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(shardRouting10);
    }

    @Test
    public void test06183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06183");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        boolean boolean5 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNull(index7);
    }

    @Test
    public void test06184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06184");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test06185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06185");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest0.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("index.blocks.write");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest7.index("current version [52] is higher or equal to the one provided [100]");
        boolean boolean10 = bulkShardRequest9.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest9.indicesOptions();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indicesOptions11);
    }

    @Test
    public void test06186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06186");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder3.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        long long7 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        boolean boolean10 = indexMetaData5.isSameUUID("index.");
        org.elasticsearch.Version version11 = indexMetaData5.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData5.getSettings();
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder3.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = builder14.build();
        int int16 = builder14.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test06187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06187");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        bulkShardRequest15.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str28 = bulkShardRequest27.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest30 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest27);
        bulkShardRequest27.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue33 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest27.timeout(timeValue33);
        java.lang.String str35 = bulkShardRequest34.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy36 = bulkShardRequest34.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest25.setRefreshPolicy(refreshPolicy36);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting38 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy43 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException44 = bulkShardRequest42.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure46 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting40, "active_allocations", (java.lang.Throwable) actionRequestValidationException44, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure48 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting38, "", (java.lang.Throwable) actionRequestValidationException44, "index.blocks.read_only");
        java.lang.Throwable throwable49 = shardFailure48.cause;
        java.lang.Class<?> wildcardClass50 = shardFailure48.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.support.IndicesOptions indicesOptions54 = bulkShardRequest51.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException55 = bulkShardRequest51.validate();
        java.lang.String str56 = bulkShardRequest51.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress57 = bulkShardRequest51.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest51.getRefreshPolicy();
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationTuple59 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.GenericDeclaration) wildcardClass50, (java.io.Serializable) refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest37.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.index.shard.ShardId shardId61 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest60.setShardId(shardId61);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest62.index("");
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel22 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel22.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + refreshPolicy36 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy36.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertTrue("'" + refreshPolicy43 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy43.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException44);
        org.junit.Assert.assertNotNull(throwable49);
        org.junit.Assert.assertEquals(throwable49.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable49.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable49.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(indicesOptions54);
        org.junit.Assert.assertNotNull(actionRequestValidationException55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(transportAddress57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(genericDeclarationTuple59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
    }

    @Test
    public void test06188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("current version [0] is higher or equal to the one provided [100]", custom12);
        long long14 = builder10.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test06190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06190");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        int int9 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData0.getAliases();
        long long12 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.excludeFilters();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = indexMetaData0.primaryTerm((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test06191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06191");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.index("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.Version version16 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        boolean boolean20 = indexMetaData18.isSameUUID("index.blocks.metadata");
        int int21 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder9.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.numberOfReplicas((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.numberOfShards(97);
        org.elasticsearch.common.settings.Settings.Builder builder29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.settings(builder29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test06192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06192");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean5 = versionType0.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean8 = versionType0.isVersionConflictForReads((long) (short) 10, (long) ' ');
        boolean boolean10 = versionType0.validateVersionForReads((long) '4');
        org.elasticsearch.index.VersionType versionType11 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean13 = versionType0.validateVersionForWrites((long) (short) 1);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06193");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        long long7 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.removeAlias("current version [0] is different than the one provided [100]");
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putAlias(builder11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test06194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06194");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test06195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06195");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.priority");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        long long10 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData7.excludeFilters();
        java.util.Set<java.lang.String> strSet17 = indexMetaData7.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putActiveAllocationIds(100, strSet17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        long long21 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData19.activeAllocationIds((int) (short) 1);
        java.lang.String str25 = indexMetaData19.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder1.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder27.setRoutingNumShards((-1));
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test06196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06196");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("");
        java.util.Set<java.lang.String> strSet12 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test06197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06197");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        boolean boolean11 = indexMetaData7.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.apache.lucene.util.Version version13 = indexMetaData7.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData7.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        org.apache.lucene.util.Version version18 = indexMetaData16.getMinimumCompatibleVersion();
        org.elasticsearch.Version version19 = indexMetaData16.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData16.requireFilters();
        boolean boolean22 = indexMetaData16.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData7.diff(indexMetaData16);
        java.lang.String str24 = indexMetaData7.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap25 = indexMetaData7.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long27 = indexMetaData26.getCreationDate();
        org.apache.lucene.util.Version version28 = indexMetaData26.getMinimumCompatibleVersion();
        boolean boolean30 = indexMetaData26.isSameUUID("state-");
        int int31 = indexMetaData26.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters32 = indexMetaData26.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData7.diff(indexMetaData26);
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData7.getSettings();
        boolean boolean36 = indexMetaData7.isSameUUID("index.version.upgraded");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff37 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData0.mapping("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData0.mapping("current version [0] is different than the one provided [52]");
        org.elasticsearch.Version version42 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state43 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(version18);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "_na_" + "'", str24, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters32);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(version42);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state43.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test06198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06198");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        bulkShardRequest10.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str14 = bulkShardRequest13.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy15 = bulkShardRequest13.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest10.setRefreshPolicy(refreshPolicy15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest0.setRefreshPolicy(refreshPolicy15);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest17.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest19.index("index.");
        long long24 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy26 = bulkShardRequest25.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest19.setRefreshPolicy(refreshPolicy26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest17.setRefreshPolicy(refreshPolicy26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getCreationDate();
        long long35 = indexMetaData33.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = indexMetaData33.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder30.state(state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.removeAlias("index.uuid");
        java.lang.String[] strArray55 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder42.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder37.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet56);
        int int60 = builder37.numberOfReplicas();
        long long61 = builder37.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long64 = indexMetaData63.getCreationDate();
        org.apache.lucene.util.Version version65 = indexMetaData63.getMinimumCompatibleVersion();
        long long66 = indexMetaData63.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap67 = indexMetaData63.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters68 = indexMetaData63.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap69 = indexMetaData63.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData63.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters71 = indexMetaData63.excludeFilters();
        java.util.Set<java.lang.String> strSet73 = indexMetaData63.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder37.putActiveAllocationIds((int) ' ', strSet73);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder74.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long78 = indexMetaData77.getCreationDate();
        org.apache.lucene.util.Version version79 = indexMetaData77.getMinimumCompatibleVersion();
        long long80 = indexMetaData77.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap81 = indexMetaData77.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters82 = indexMetaData77.includeFilters();
        java.lang.String str83 = indexMetaData77.getIndexUUID();
        int int84 = indexMetaData77.getRoutingFactor();
        java.util.Set<java.lang.String> strSet86 = null; // flaky: indexMetaData77.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version87 = indexMetaData77.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state88 = indexMetaData77.getState();
        byte byte89 = state88.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder76.state(state88);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.WriteRequest.RefreshPolicy, java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>> refreshPolicyTuple91 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.WriteRequest.RefreshPolicy, java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>>(refreshPolicy26, (java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>) state88);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel3 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel3.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + refreshPolicy15 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy15.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy26 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy26.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNull(version65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap67);
        org.junit.Assert.assertNull(discoveryNodeFilters68);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNull(discoveryNodeFilters71);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertNull(version79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap81);
        org.junit.Assert.assertNull(discoveryNodeFilters82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "_na_" + "'", str83, "_na_");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNull(strSet86);
        org.junit.Assert.assertNotNull(version87);
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state88.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte89 + "' != '" + (byte) 0 + "'", byte89 == (byte) 0);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test06199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06199");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        long long12 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData8.getCustoms();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest14.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest18.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str22 = bulkShardRequest21.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest21.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.index.shard.ShardId shardId26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest18.setShardId(shardId26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str30 = bulkShardRequest29.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest32 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest29);
        org.elasticsearch.tasks.TaskId taskId33 = bulkShardRequest29.getParentTask();
        bulkShardRequest27.setParentTask(taskId33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest27.index("indices:data/write/bulk[s]");
        org.elasticsearch.common.transport.TransportAddress transportAddress37 = bulkShardRequest27.remoteAddress();
        boolean boolean38 = indexMetaData8.equals((java.lang.Object) transportAddress37);
        org.elasticsearch.Version version39 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData8.excludeFilters();
        org.elasticsearch.index.Index index41 = indexMetaData8.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long44 = indexMetaData43.getCreationDate();
        org.apache.lucene.util.Version version45 = indexMetaData43.getMinimumCompatibleVersion();
        boolean boolean47 = indexMetaData43.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        long long49 = indexMetaData43.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long51 = indexMetaData50.getCreationDate();
        org.apache.lucene.util.Version version52 = indexMetaData50.getMinimumCompatibleVersion();
        int int53 = indexMetaData50.getRoutingFactor();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff54 = indexMetaData43.diff(indexMetaData50);
        org.elasticsearch.index.Index index55 = indexMetaData50.getMergeSourceIndex();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff56 = indexMetaData8.diff(indexMetaData50);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId33);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(transportAddress37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(version39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNull(index41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNull(version45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNull(version52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff54);
        org.junit.Assert.assertNull(index55);
        org.junit.Assert.assertNotNull(indexMetaDataDiff56);
    }

    @Test
    public void test06200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test06201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06201");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.Class<?> wildcardClass2 = versionType1.getClass();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock3 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple5 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock3, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.Type, org.elasticsearch.common.xcontent.ToXContent> typeTuple6 = new org.elasticsearch.common.collect.Tuple<java.lang.reflect.Type, org.elasticsearch.common.xcontent.ToXContent>((java.lang.reflect.Type) wildcardClass2, (org.elasticsearch.common.xcontent.ToXContent) clusterBlock3);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock3, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        java.lang.String str9 = clusterBlockTuple8.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock10 = clusterBlockTuple8.v1();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(clusterBlock3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.number_of_replicas]" + "'", str9, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.number_of_replicas]");
        org.junit.Assert.assertNotNull(clusterBlock10);
    }

    @Test
    public void test06202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06202");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.setParentTask("hi!", (long) (short) 100);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest0.remoteAddress();
        long long5 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str7 = bulkShardRequest6.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest6.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest6.index("index.");
        long long11 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.setRefreshPolicy(refreshPolicy13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest0.setRefreshPolicy(refreshPolicy13);
        long long16 = bulkShardRequest15.primaryTerm();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.timeout("current version [1] is different than the one provided [32]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [1] is different than the one provided [32]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test06203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06203");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.blocks.metadata", custom12);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.putAlias(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06204");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mapping("current version [-1] is higher or equal to the one provided [1]");
        boolean boolean27 = indexMetaData0.isSameUUID("current version [52] is different than the one provided [2]");
        org.apache.lucene.util.Version version28 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(version28);
    }

    @Test
    public void test06205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06205");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder19.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder17.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.index("index.version.minimum_compatible");
        int int30 = builder29.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.index("index.");
        long long34 = builder33.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder33.index("current version [100] is different than the one provided [12]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test06206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06206");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        long long9 = indexMetaData0.getCreationDate();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params14 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest15.validate();
        java.lang.String str20 = bulkShardRequest15.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest15.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple23 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params14, (java.lang.IllegalArgumentException) actionRequestValidationException22);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = indexMetaData0.toXContent(xContentBuilder13, params14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(params14);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(transportAddress21);
        org.junit.Assert.assertNotNull(actionRequestValidationException22);
    }

    @Test
    public void test06207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: the number of target shards must be less that the number of source shards");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06208");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        boolean boolean13 = indexMetaData9.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        long long15 = indexMetaData9.getCreationDate();
        org.elasticsearch.Version version16 = indexMetaData9.getCreationVersion();
        int int17 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData9.mappingOrDefault("current version [2] is different than the one provided [1]");
        int int20 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        org.apache.lucene.util.Version version24 = indexMetaData22.getMinimumCompatibleVersion();
        boolean boolean26 = indexMetaData22.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.apache.lucene.util.Version version28 = indexMetaData22.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet30 = null; // flaky: indexMetaData22.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getCreationDate();
        org.apache.lucene.util.Version version33 = indexMetaData31.getMinimumCompatibleVersion();
        org.elasticsearch.Version version34 = indexMetaData31.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters35 = indexMetaData31.requireFilters();
        boolean boolean37 = indexMetaData31.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff38 = indexMetaData22.diff(indexMetaData31);
        java.lang.String str39 = indexMetaData22.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap40 = indexMetaData22.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long42 = indexMetaData41.getCreationDate();
        org.apache.lucene.util.Version version43 = indexMetaData41.getMinimumCompatibleVersion();
        boolean boolean45 = indexMetaData41.isSameUUID("state-");
        int int46 = indexMetaData41.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData41.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff48 = indexMetaData22.diff(indexMetaData41);
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData22.getSettings();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest51.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest55.timeout(timeValue56);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest58 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest55);
        boolean boolean59 = indexMetaData22.equals((java.lang.Object) bulkShardRequest55);
        org.elasticsearch.common.transport.TransportAddress transportAddress60 = bulkShardRequest55.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest55.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy63 = bulkShardRequest62.getRefreshPolicy();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData>, org.elasticsearch.action.support.WriteRequest.RefreshPolicy> indexMetaDataDiffTuple64 = org.elasticsearch.common.collect.Tuple.tuple(indexMetaDataDiff21, refreshPolicy63);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNull(version33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNull(discoveryNodeFilters35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "_na_" + "'", str39, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNull(version43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNotNull(indexMetaDataDiff48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(transportAddress60);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertTrue("'" + refreshPolicy63 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy63.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indexMetaDataDiffTuple64);
    }

    @Test
    public void test06209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06209");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        org.apache.lucene.util.Version version6 = indexMetaData4.getMinimumCompatibleVersion();
        long long7 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.Version version10 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData12.getSettings();
        boolean boolean16 = indexMetaData12.isSameUUID("index.version.created_string");
        long long17 = indexMetaData12.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test06210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06210");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.index.shard.ShardId shardId30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.setShardId(shardId30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress33 = null;
        bulkShardRequest32.remoteAddress(transportAddress33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest32.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest36.timeout(timeValue37);
        bulkShardRequest38.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str42 = bulkShardRequest41.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy43 = bulkShardRequest41.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest38.setRefreshPolicy(refreshPolicy43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest31.setRefreshPolicy(refreshPolicy43);
        boolean boolean46 = bulkShardRequest31.getShouldPersistResult();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest31.getRefreshPolicy();
        org.elasticsearch.tasks.TaskId taskId48 = bulkShardRequest31.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = bulkShardRequest31.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + refreshPolicy43 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy43.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId48);
    }

    @Test
    public void test06211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06211");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str4 = versionType1.explainConflictForReads((long) 'a', (long) (short) -1);
        boolean boolean7 = versionType1.isVersionConflictForReads(11L, (-1L));
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [97] is different than the one provided [-1]" + "'", str4, "current version [97] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test06212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test06213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06213");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData0.getState();
        org.elasticsearch.common.xcontent.XContentParser xContentParser9 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.fromXContent(xContentParser9, parseFieldMatcher10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test06214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06214");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version28 = indexMetaData0.getMinimumCompatibleVersion();
        int int29 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder32 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder34 = indexMetaData0.toXContent(xContentBuilder32, params33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
    }

    @Test
    public void test06215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06215");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06216");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.setShardId(shardId15);
        java.lang.String str17 = bulkShardRequest11.index();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = bulkShardRequest11.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "indices:data/write/bulk[s]" + "'", str17, "indices:data/write/bulk[s]");
    }

    @Test
    public void test06217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06217");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        java.lang.String[] strArray16 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet17);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray20 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList21 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, indexShardStateArray20);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte24 = state23.id();
        byte byte25 = state23.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple26 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList21, state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte28 = state27.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple29 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList21, state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder3.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder3.setRoutingNumShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        long long39 = indexMetaData37.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder34.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder3.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom48 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder44.putCustom("state-", custom48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long51 = indexMetaData50.getCreationDate();
        long long52 = indexMetaData50.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = indexMetaData50.getState();
        boolean boolean55 = indexMetaData50.isSameUUID("index.");
        org.elasticsearch.Version version56 = indexMetaData50.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings57 = indexMetaData50.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder49.settings(settings57);
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings57);
        boolean boolean60 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        boolean boolean62 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings57);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings57);
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder42.settings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder65.numberOfShards((-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexShardStateArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(version56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test06218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06218");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long36 = indexMetaData35.getCreationDate();
        long long37 = indexMetaData35.getVersion();
        long long38 = indexMetaData35.getVersion();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = null;
        bulkShardRequest39.remoteAddress(transportAddress40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest39.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue44 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest43.timeout(timeValue44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str47 = bulkShardRequest46.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy48 = bulkShardRequest46.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel49 = bulkShardRequest46.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest43.consistencyLevel(writeConsistencyLevel49);
        org.elasticsearch.index.shard.ShardId shardId51 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest43.setShardId(shardId51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest43.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress58 = null;
        bulkShardRequest57.remoteAddress(transportAddress58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest57.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue62 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest61.timeout(timeValue62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str65 = bulkShardRequest64.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy66 = bulkShardRequest64.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel67 = bulkShardRequest64.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest61.consistencyLevel(writeConsistencyLevel67);
        org.elasticsearch.index.shard.ShardId shardId69 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest61.setShardId(shardId69);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str73 = bulkShardRequest72.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy74 = bulkShardRequest72.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest75 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest72);
        org.elasticsearch.tasks.TaskId taskId76 = bulkShardRequest72.getParentTask();
        bulkShardRequest70.setParentTask(taskId76);
        bulkShardRequest54.setParentTask(taskId76);
        boolean boolean79 = indexMetaData35.equals((java.lang.Object) taskId76);
        bulkShardRequest34.setParentTask(taskId76);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = bulkShardRequest34.index("current version [32] is higher or equal to the one provided [0]");
        org.elasticsearch.common.transport.TransportAddress transportAddress83 = null;
        bulkShardRequest34.remoteAddress(transportAddress83);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest86 = bulkShardRequest34.setRefreshPolicy("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + refreshPolicy48 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy48.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel49 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel49.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + refreshPolicy66 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy66.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel67 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel67.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + refreshPolicy74 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy74.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest82);
    }

    @Test
    public void test06219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06219");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean5 = versionType0.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean9 = versionType0.isVersionConflictForWrites(0L, 100L, true);
        byte byte10 = versionType0.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
    }

    @Test
    public void test06220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06220");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str3 = bulkShardRequest2.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy4 = bulkShardRequest2.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest5 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        bulkShardRequest2.primaryTerm((long) '4');
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest2.setShardId(shardId8);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest9);
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest10.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + refreshPolicy4 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy4.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest9);
    }

    @Test
    public void test06221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06221");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        bulkShardRequest0.primaryTerm(11L);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest0.validate();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple13 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        java.lang.Comparable<java.lang.String> strComparable14 = clusterBlockTuple13.v2();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str16 = bulkShardRequest15.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy17 = bulkShardRequest15.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest19.indicesOptions();
        boolean boolean21 = clusterBlockTuple13.equals((java.lang.Object) bulkShardRequest19);
        org.elasticsearch.index.shard.ShardId shardId22 = bulkShardRequest19.shardId();
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest19.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.index.shard.ShardId shardId32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest29.setShardId(shardId32);
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest29.remoteAddress(transportAddress34);
        org.elasticsearch.index.shard.ShardId shardId36 = bulkShardRequest29.shardId();
        org.elasticsearch.index.shard.ShardId shardId37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest29.setShardId(shardId37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = null;
        bulkShardRequest39.remoteAddress(transportAddress40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest39.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue44 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest43.timeout(timeValue44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str47 = bulkShardRequest46.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy48 = bulkShardRequest46.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel49 = bulkShardRequest46.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest43.consistencyLevel(writeConsistencyLevel49);
        org.elasticsearch.common.unit.TimeValue timeValue51 = bulkShardRequest50.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest50.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId54 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest50.setShardId(shardId54);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        boolean boolean57 = bulkShardRequest56.getShouldPersistResult();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel58 = bulkShardRequest56.consistencyLevel();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest56.validate();
        org.elasticsearch.common.transport.TransportAddress transportAddress60 = bulkShardRequest56.remoteAddress();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel61 = bulkShardRequest56.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest50.consistencyLevel(writeConsistencyLevel61);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest38.consistencyLevel(writeConsistencyLevel61);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel61);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel61);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertEquals("'" + strComparable14 + "' != '" + "indices:data/write/bulk[s]" + "'", strComparable14, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + refreshPolicy17 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy17.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(shardId22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(shardId36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + refreshPolicy48 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy48.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel49 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel49.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNull(timeValue51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel58 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel58.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
        org.junit.Assert.assertNull(transportAddress60);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel61 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel61.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
    }

    @Test
    public void test06222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06222");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        byte byte4 = versionType0.getValue();
        byte byte5 = versionType0.getValue();
        boolean boolean8 = versionType0.isVersionConflictForReads(32L, 0L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 3 + "'", byte4 == (byte) 3);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 3 + "'", byte5 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.version((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            long long21 = builder19.primaryTerm((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test06224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06224");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str50 = bulkShardRequest49.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy51 = bulkShardRequest49.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest52 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest49);
        bulkShardRequest49.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = null;
        bulkShardRequest55.remoteAddress(transportAddress56);
        org.elasticsearch.action.support.IndicesOptions indicesOptions58 = bulkShardRequest55.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException59 = bulkShardRequest55.validate();
        org.elasticsearch.common.unit.TimeValue timeValue60 = bulkShardRequest55.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest49.timeout(timeValue60);
        org.elasticsearch.common.unit.TimeValue timeValue62 = bulkShardRequest49.timeout();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest63 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest49);
        org.elasticsearch.common.unit.TimeValue timeValue64 = bulkShardRequest49.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest46.timeout(timeValue64);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress67 = null;
        bulkShardRequest66.remoteAddress(transportAddress67);
        org.elasticsearch.action.support.IndicesOptions indicesOptions69 = bulkShardRequest66.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress70 = null;
        bulkShardRequest66.remoteAddress(transportAddress70);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str74 = bulkShardRequest73.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy75 = bulkShardRequest73.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest76 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest73);
        org.elasticsearch.tasks.TaskId taskId77 = bulkShardRequest73.getParentTask();
        bulkShardRequest66.setParentTask(taskId77);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest79 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress80 = null;
        bulkShardRequest79.remoteAddress(transportAddress80);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest83 = bulkShardRequest79.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue84 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest85 = bulkShardRequest83.timeout(timeValue84);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest86 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str87 = bulkShardRequest86.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy88 = bulkShardRequest86.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel89 = bulkShardRequest86.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest90 = bulkShardRequest83.consistencyLevel(writeConsistencyLevel89);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest91 = bulkShardRequest66.consistencyLevel(writeConsistencyLevel89);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest92 = bulkShardRequest46.consistencyLevel(writeConsistencyLevel89);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest94 = bulkShardRequest92.index("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray95 = bulkShardRequest94.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + refreshPolicy51 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy51.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions58);
        org.junit.Assert.assertNotNull(actionRequestValidationException59);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(timeValue64);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNotNull(indicesOptions69);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + refreshPolicy75 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy75.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId77);
        org.junit.Assert.assertNotNull(bulkShardRequest83);
        org.junit.Assert.assertNotNull(bulkShardRequest85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + refreshPolicy88 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy88.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel89 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel89.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest90);
        org.junit.Assert.assertNotNull(bulkShardRequest91);
        org.junit.Assert.assertNotNull(bulkShardRequest92);
        org.junit.Assert.assertNotNull(bulkShardRequest94);
    }

    @Test
    public void test06225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06225");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str5 = versionType0.explainConflictForWrites((long) 'a', 32L, true);
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType6.isVersionConflictForWrites((long) ' ', (long) (byte) 3, true);
        boolean boolean13 = versionType6.isVersionConflictForReads(1L, (long) '4');
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [97] is higher than the one provided [32]" + "'", str5, "current version [97] is higher than the one provided [32]");
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06226");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock3 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple5 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock3, (java.lang.Comparable<java.lang.String>) "current version [-1] is higher than the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [52] is different than the one provided [97]");
        boolean boolean8 = clusterBlockTuple5.equals((java.lang.Object) builder7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        boolean boolean13 = indexMetaData9.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData9.getActiveAllocationIds();
        boolean boolean16 = indexMetaData9.isSameUUID("");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData9.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData9.getMappings();
        boolean boolean19 = clusterBlockTuple5.equals((java.lang.Object) strImmutableOpenMap18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str21 = bulkShardRequest20.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest20.index("index.");
        long long25 = bulkShardRequest20.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest20.setShardId(shardId26);
        org.elasticsearch.index.shard.ShardId shardId28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest20.setShardId(shardId28);
        org.elasticsearch.tasks.TaskId taskId30 = bulkShardRequest20.getParentTask();
        boolean boolean31 = clusterBlockTuple5.equals((java.lang.Object) taskId30);
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(clusterBlock3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(taskId30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06227");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfShards(35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.creationDate((long) 97);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version28 = indexMetaData0.getMinimumCompatibleVersion();
        int int29 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getCreationDate();
        org.apache.lucene.util.Version version33 = indexMetaData31.getMinimumCompatibleVersion();
        boolean boolean35 = indexMetaData31.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap36 = indexMetaData31.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData31.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData31.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock40 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple42 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock40, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean44 = clusterBlockTuple42.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress46 = null;
        bulkShardRequest45.remoteAddress(transportAddress46);
        org.elasticsearch.action.support.IndicesOptions indicesOptions48 = bulkShardRequest45.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException49 = bulkShardRequest45.validate();
        java.lang.String str50 = bulkShardRequest45.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = bulkShardRequest45.consistencyLevel();
        boolean boolean52 = clusterBlockTuple42.equals((java.lang.Object) writeConsistencyLevel51);
        boolean boolean53 = indexMetaData31.equals((java.lang.Object) clusterBlockTuple42);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters54 = indexMetaData31.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap55 = indexMetaData31.getAliases();
        java.lang.String str56 = indexMetaData31.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long58 = indexMetaData57.getCreationDate();
        org.apache.lucene.util.Version version59 = indexMetaData57.getMinimumCompatibleVersion();
        long long60 = indexMetaData57.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap61 = indexMetaData57.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters62 = indexMetaData57.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap63 = indexMetaData57.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData57.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap65 = indexMetaData57.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData57);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff67 = indexMetaData31.diff(indexMetaData57);
        int int68 = indexMetaData57.getTotalNumberOfShards();
        boolean boolean69 = indexMetaData0.equals((java.lang.Object) indexMetaData57);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNull(version33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(clusterBlock40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(indicesOptions48);
        org.junit.Assert.assertNotNull(actionRequestValidationException49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel51 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel51.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters54);
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "_na_" + "'", str56, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNull(version59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap61);
        org.junit.Assert.assertNull(discoveryNodeFilters62);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap63);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test06229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06229");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06230");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.setShardId(shardId15);
        java.lang.String str17 = bulkShardRequest11.index();
        boolean boolean18 = bulkShardRequest11.getShouldPersistResult();
        bulkShardRequest11.primaryTerm(98L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "indices:data/write/bulk[s]" + "'", str17, "indices:data/write/bulk[s]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06231");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder22.index("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getCreationDate();
        long long30 = indexMetaData28.getVersion();
        int int31 = indexMetaData28.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet33 = null; // flaky: indexMetaData28.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet35 = indexMetaData28.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder26.putActiveAllocationIds((-1), strSet35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder6.putActiveAllocationIds((int) (byte) -1, strSet35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.numberOfReplicas((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.removeAlias("index.uuid");
        int int44 = builder41.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder41.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder41.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder48.putCustom("state-", custom52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long55 = indexMetaData54.getCreationDate();
        long long56 = indexMetaData54.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = indexMetaData54.getState();
        boolean boolean59 = indexMetaData54.isSameUUID("index.");
        org.elasticsearch.Version version60 = indexMetaData54.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings61 = indexMetaData54.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder53.settings(settings61);
        boolean boolean63 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings61);
        org.elasticsearch.common.settings.Settings settings64 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder46.settings(settings64);
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings64);
        org.elasticsearch.common.settings.Settings settings67 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder39.settings(settings67);
        boolean boolean69 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings67);
        org.elasticsearch.transport.TransportService transportService70 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService71 = null;
        org.elasticsearch.indices.IndicesService indicesService72 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool73 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction74 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction75 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper76 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters77 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction79 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings67, transportService70, clusterService71, indicesService72, threadPool73, shardStateAction74, mappingUpdatedAction75, updateHelper76, actionFilters77, indexNameExpressionResolver78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(settings67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData0.getAliases();
        java.lang.String str25 = indexMetaData0.getIndexUUID();
        int int26 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long28 = indexMetaData0.getVersion();
        int int29 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap30 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "_na_" + "'", str25, "_na_");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
    }

    @Test
    public void test06233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06233");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putAlias(aliasMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(version5);
    }

    @Test
    public void test06234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06234");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.includeFilters();
        java.lang.String str11 = indexMetaData5.getIndexUUID();
        int int12 = indexMetaData5.getTotalNumberOfShards();
        boolean boolean13 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        int int14 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder17.putCustom("state-", custom21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getCreationDate();
        long long25 = indexMetaData23.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData23.getState();
        boolean boolean28 = indexMetaData23.isSameUUID("index.");
        org.elasticsearch.Version version29 = indexMetaData23.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData23.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder22.settings(settings30);
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings30);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        boolean boolean34 = indexMetaData0.equals((java.lang.Object) settings30);
        int int35 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.io.stream.StreamInput streamInput36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = indexMetaData0.readFrom(streamInput36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test06235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06235");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
    }

    @Test
    public void test06236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        long long12 = indexMetaData0.getVersion();
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version15 = indexMetaData0.getMinimumCompatibleVersion();
        long long16 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
    }

    @Test
    public void test06237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06237");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        int int9 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test06238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06238");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("current version [52] is different than the one provided [2]");
        java.lang.String str20 = bulkShardRequest15.index();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "current version [52] is different than the one provided [2]" + "'", str20, "current version [52] is different than the one provided [2]");
    }

    @Test
    public void test06239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06239");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean5 = versionType0.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean8 = versionType0.isVersionConflictForReads((long) (short) 10, (long) ' ');
        org.elasticsearch.index.VersionType versionType9 = versionType0.versionTypeForReplicationAndRecovery();
        byte byte10 = versionType0.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(versionType9);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 3 + "'", byte10 == (byte) 3);
    }

    @Test
    public void test06240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06240");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str12 = bulkShardRequest11.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest11.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest8.setShardId(shardId16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest8.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str30 = bulkShardRequest29.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel32);
        org.elasticsearch.index.shard.ShardId shardId34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest26.setShardId(shardId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str38 = bulkShardRequest37.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy39 = bulkShardRequest37.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest40 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest37.getParentTask();
        bulkShardRequest35.setParentTask(taskId41);
        bulkShardRequest19.setParentTask(taskId41);
        boolean boolean44 = indexMetaData0.equals((java.lang.Object) taskId41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress50 = null;
        bulkShardRequest49.remoteAddress(transportAddress50);
        org.elasticsearch.action.support.IndicesOptions indicesOptions52 = bulkShardRequest49.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException53 = bulkShardRequest49.validate();
        java.lang.String str54 = bulkShardRequest49.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress55 = bulkShardRequest49.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy56 = bulkShardRequest49.getRefreshPolicy();
        boolean boolean57 = bulkShardRequest49.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress59 = null;
        bulkShardRequest58.remoteAddress(transportAddress59);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest58.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue63 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest62.timeout(timeValue63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str66 = bulkShardRequest65.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy67 = bulkShardRequest65.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel68 = bulkShardRequest65.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest62.consistencyLevel(writeConsistencyLevel68);
        org.elasticsearch.common.unit.TimeValue timeValue70 = bulkShardRequest69.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest69.index("indices:data/write/bulk[s]");
        java.lang.String str73 = bulkShardRequest72.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = bulkShardRequest72.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel76 = bulkShardRequest72.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest77 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress78 = null;
        bulkShardRequest77.remoteAddress(transportAddress78);
        org.elasticsearch.action.support.IndicesOptions indicesOptions80 = bulkShardRequest77.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException81 = bulkShardRequest77.validate();
        java.lang.String str82 = bulkShardRequest77.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel83 = bulkShardRequest77.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = bulkShardRequest72.consistencyLevel(writeConsistencyLevel83);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest85 = bulkShardRequest49.consistencyLevel(writeConsistencyLevel83);
        org.elasticsearch.common.xcontent.ToXContent.Params params86 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest87 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress88 = null;
        bulkShardRequest87.remoteAddress(transportAddress88);
        org.elasticsearch.action.support.IndicesOptions indicesOptions90 = bulkShardRequest87.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException91 = bulkShardRequest87.validate();
        java.lang.String str92 = bulkShardRequest87.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress93 = bulkShardRequest87.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException94 = bulkShardRequest87.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple95 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params86, (java.lang.IllegalArgumentException) actionRequestValidationException94);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple96 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest85, params86);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder97 = indexMetaData0.toXContent(xContentBuilder48, params86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + refreshPolicy39 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy39.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indicesOptions52);
        org.junit.Assert.assertNotNull(actionRequestValidationException53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(transportAddress55);
        org.junit.Assert.assertTrue("'" + refreshPolicy56 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy56.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + refreshPolicy67 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy67.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel68 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel68.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNull(timeValue70);
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "indices:data/write/bulk[s]" + "'", str73, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest75);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel76 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel76.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions80);
        org.junit.Assert.assertNotNull(actionRequestValidationException81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel83 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel83.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest84);
        org.junit.Assert.assertNotNull(bulkShardRequest85);
        org.junit.Assert.assertNotNull(params86);
        org.junit.Assert.assertNotNull(indicesOptions90);
        org.junit.Assert.assertNotNull(actionRequestValidationException91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(transportAddress93);
        org.junit.Assert.assertNotNull(actionRequestValidationException94);
    }

    @Test
    public void test06241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06241");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("current version [3] is different than the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.version((long) (-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder16.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder16.putCustom("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]", custom24);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test06242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        int int7 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        long long10 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean13 = indexMetaData8.isSameUUID("index.");
        org.elasticsearch.Version version14 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData8.getSettings();
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.numberOfShards(97);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.putMapping(mappingMetaData23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test06243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06243");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy5 = bulkShardRequest0.getRefreshPolicy();
        long long6 = bulkShardRequest0.primaryTerm();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = bulkShardRequest0.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertTrue("'" + refreshPolicy5 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy5.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test06244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06244");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        int int5 = indexMetaData0.getNumberOfReplicas();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test06245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06245");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean9 = indexMetaData4.isSameUUID("index.");
        long long10 = indexMetaData4.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData4.includeFilters();
        org.elasticsearch.Version version12 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData4.getCustoms();
        org.elasticsearch.Version version15 = indexMetaData4.getCreationVersion();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData4.activeAllocationIds((int) '4');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(strSet17);
    }

    @Test
    public void test06246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06246");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        int int2 = builder1.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.uuid]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test06247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06247");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.settings(settings15);
        boolean boolean17 = indexMetaData0.equals((java.lang.Object) settings15);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException24 = bulkShardRequest20.validate();
        java.lang.String str25 = bulkShardRequest20.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = bulkShardRequest20.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException27 = bulkShardRequest20.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple28 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params19, (java.lang.IllegalArgumentException) actionRequestValidationException27);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = indexMetaData0.toXContent(xContentBuilder18, params19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(params19);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(actionRequestValidationException24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(transportAddress26);
        org.junit.Assert.assertNotNull(actionRequestValidationException27);
    }

    @Test
    public void test06248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06248");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 2);
        boolean boolean4 = versionType2.validateVersionForWrites((long) 0);
        long long7 = versionType2.updateVersion((long) 35, (long) 100);
        java.lang.String str11 = versionType2.explainConflictForWrites((long) (byte) -1, (long) (byte) -1, true);
        byte byte12 = versionType2.getValue();
        boolean boolean14 = versionType2.validateVersionForReads(3L);
        boolean boolean16 = versionType2.validateVersionForReads((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType17 = org.elasticsearch.index.VersionType.fromString("current version [35] is higher or equal to the one provided [100]", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [35] is higher or equal to the one provided [100]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "current version [-1] is higher than the one provided [-1]" + "'", str11, "current version [-1] is higher than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 2 + "'", byte12 == (byte) 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06249");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest1.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest1.remoteAddress(transportAddress5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest11 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.tasks.TaskId taskId12 = bulkShardRequest8.getParentTask();
        bulkShardRequest1.setParentTask(taskId12);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest14 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        int int15 = bulkItemRequest14.id();
        int int16 = bulkItemRequest14.id();
        org.elasticsearch.action.ActionRequest actionRequest17 = bulkItemRequest14.request();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = bulkItemRequest14.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(actionRequest17);
    }

    @Test
    public void test06250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06250");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple13 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException8, builder10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest14.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest18.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str22 = bulkShardRequest21.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest21.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.index.shard.ShardId shardId26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest18.setShardId(shardId26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest18.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.index("_na_");
        org.elasticsearch.common.collect.Tuple<java.lang.Throwable, org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>> throwableTuple32 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Throwable) actionRequestValidationException8, (org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest29);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure34 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.data_path", (java.lang.Throwable) actionRequestValidationException8, "index.version.minimum_compatible");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure36 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [-1] is higher than the one provided [52]", (java.lang.Throwable) actionRequestValidationException8, "_na_");
        java.lang.Throwable throwable37 = shardFailure36.cause;
        java.lang.String str38 = shardFailure36.indexUUID;
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(throwableTuple32);
        org.junit.Assert.assertNotNull(throwable37);
        org.junit.Assert.assertEquals(throwable37.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_na_" + "'", str38, "_na_");
    }

    @Test
    public void test06251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06251");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean5 = versionType1.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType7 = versionType1.versionTypeForReplicationAndRecovery();
        java.lang.String str11 = versionType7.explainConflictForWrites(3L, 52L, false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType12 = org.elasticsearch.index.VersionType.fromString("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]", versionType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [52] is higher or equal to the one provided [100]]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "current version [3] is higher or equal to the one provided [52]" + "'", str11, "current version [3] is higher or equal to the one provided [52]");
    }

    @Test
    public void test06252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06252");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        int int10 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test06253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        org.apache.lucene.util.Version version13 = indexMetaData11.getMinimumCompatibleVersion();
        long long14 = indexMetaData11.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData11.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.Version version17 = indexMetaData11.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = builder18.build();
        boolean boolean21 = indexMetaData19.isSameUUID("index.blocks.metadata");
        int int22 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData19.includeFilters();
        int int24 = indexMetaData19.getRoutingNumShards();
        long long25 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting26 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest30.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure34 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting28, "active_allocations", (java.lang.Throwable) actionRequestValidationException32, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure36 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting26, "", (java.lang.Throwable) actionRequestValidationException32, "index.blocks.read_only");
        java.lang.Throwable throwable37 = shardFailure36.cause;
        java.lang.Class<?> wildcardClass38 = shardFailure36.getClass();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, java.lang.reflect.Type> writeableTuple39 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData19, (java.lang.reflect.Type) wildcardClass38);
        boolean boolean40 = indexMetaData0.equals((java.lang.Object) indexMetaData19);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(version17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertNotNull(throwable37);
        org.junit.Assert.assertEquals(throwable37.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable37.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(writeableTuple39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
    }

    @Test
    public void test06254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06254");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple16 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, strComparable15);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock17 = clusterBlockTuple16.v1();
        java.lang.String str18 = clusterBlockTuple16.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.putCustom("state-", custom24);
        int int26 = builder20.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData27.getState();
        boolean boolean32 = indexMetaData27.isSameUUID("index.");
        org.elasticsearch.Version version33 = indexMetaData27.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData27.getSettings();
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder20.settings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        boolean boolean42 = clusterBlockTuple16.equals((java.lang.Object) boolean41);
        java.lang.Comparable<java.lang.String> strComparable43 = clusterBlockTuple16.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock44 = clusterBlockTuple16.v1();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertNotNull(clusterBlock17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]" + "'", str18, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strComparable43);
        org.junit.Assert.assertNotNull(clusterBlock44);
    }

    @Test
    public void test06255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06255");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.index("current version [0] is different than the one provided [52]");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putMapping("", "current version [2] is different than the one provided [97]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.creation_date" + "'", str7, "index.creation_date");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06256");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder3.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        long long7 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        boolean boolean10 = indexMetaData5.isSameUUID("index.");
        org.elasticsearch.Version version11 = indexMetaData5.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData5.getSettings();
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder3.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfReplicas((int) (short) 1);
        int int19 = builder16.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.index("current version [10] is different than the one provided [97]");
        // The following exception was thrown during execution in test generation
        try {
            long long23 = builder16.primaryTerm(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06257");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getCreationDate();
        long long15 = indexMetaData13.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData13.getState();
        boolean boolean18 = indexMetaData13.isSameUUID("index.");
        long long19 = indexMetaData13.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData13.includeFilters();
        org.elasticsearch.Version version21 = indexMetaData13.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData9.diff(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData13.getCustoms();
        org.elasticsearch.Version version24 = indexMetaData13.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData13.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData13);
        int int27 = indexMetaData13.getNumberOfReplicas();
        org.elasticsearch.index.Index index28 = indexMetaData13.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(index28);
    }

    @Test
    public void test06258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06258");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = builder16.mapping("current version [10] is higher or equal to the one provided [32]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(mappingMetaData18);
    }

    @Test
    public void test06259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06259");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [0] is different than the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("hi!", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.index("current version [10] is different than the one provided [97]");
        int int7 = builder4.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test06260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06260");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.creationDate((long) 100);
        int int8 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        org.elasticsearch.Version version15 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData9.getMappings();
        java.lang.String str17 = indexMetaData9.getIndexUUID();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData9.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.removeAlias("state-");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06261");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.setShardId(shardId4);
        bulkShardRequest0.setParentTask("index.creation_date_string", (long) (short) 100);
        org.elasticsearch.tasks.TaskId taskId9 = bulkShardRequest0.getParentTask();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(taskId9);
    }

    @Test
    public void test06262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = builder14.build();
        java.lang.String str16 = builder14.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.putMapping(mappingMetaData17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06263");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.includeFilters();
        int int13 = indexMetaData8.getRoutingNumShards();
        long long14 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting15 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException21 = bulkShardRequest19.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure23 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting17, "active_allocations", (java.lang.Throwable) actionRequestValidationException21, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure25 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting15, "", (java.lang.Throwable) actionRequestValidationException21, "index.blocks.read_only");
        java.lang.Throwable throwable26 = shardFailure25.cause;
        java.lang.Class<?> wildcardClass27 = shardFailure25.getClass();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, java.lang.reflect.Type> writeableTuple28 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData8, (java.lang.reflect.Type) wildcardClass27);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData8.getMappings();
        int int30 = indexMetaData8.getRoutingNumShards();
        int int31 = indexMetaData8.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException21);
        org.junit.Assert.assertNotNull(throwable26);
        org.junit.Assert.assertEquals(throwable26.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable26.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable26.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(writeableTuple28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test06264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06264");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [97] is different than the one provided [100]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06265");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test06266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06266");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData8.getMappings();
        java.lang.String str14 = indexMetaData8.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
    }

    @Test
    public void test06267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06267");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        int int17 = builder16.numberOfShards();
        long long18 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        org.apache.lucene.util.Version version24 = indexMetaData22.getMinimumCompatibleVersion();
        long long25 = indexMetaData22.getVersion();
        int int26 = indexMetaData22.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        boolean boolean31 = indexMetaData27.isSameUUID("index.blocks.read");
        boolean boolean33 = indexMetaData27.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData22.diff(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.removeAlias("current version [0] is different than the one provided [1]");
        java.lang.String[] strArray47 = new java.lang.String[] { "index.priority", "current version [52] is higher or equal to the one provided [100]", "current version [-1] is higher than the one provided [52]" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder42.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder35.putActiveAllocationIds(52, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder16.putActiveAllocationIds((int) (short) 1, (java.util.Set<java.lang.String>) strSet48);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test06268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06268");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.action.support.IndicesOptions indicesOptions14 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.setShardId(shardId15);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(indicesOptions14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
    }

    @Test
    public void test06269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06269");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        int int7 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.setRoutingNumShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        boolean boolean14 = indexMetaData10.isSameUUID("state-");
        int int15 = indexMetaData10.getNumberOfReplicas();
        int int16 = indexMetaData10.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.settings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version((long) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.index("current version [35] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder18.putAlias(builder25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test06270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06270");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData11.getState();
        boolean boolean16 = indexMetaData11.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData11.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData11.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte27 = state26.id();
        byte byte28 = state26.id();
        byte byte29 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        long long39 = indexMetaData37.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder34.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder30.state(state40);
        byte byte43 = state40.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder19.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder8.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.numberOfReplicas(0);
        int int48 = builder47.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 0 + "'", byte29 == (byte) 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test06271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06271");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        long long12 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData0.getActiveAllocationIds();
        long long14 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.putCustom("state-", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        boolean boolean27 = indexMetaData22.isSameUUID("index.");
        org.elasticsearch.Version version28 = indexMetaData22.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData22.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder21.settings(settings29);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings33);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) settings33);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
    }

    @Test
    public void test06272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06272");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("index.blocks.read_only");
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test06273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06273");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.index("current version [-1] is higher than the one provided [100]");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.timeout("");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest9);
    }

    @Test
    public void test06274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06274");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', actionRequest1);
        int int3 = 0; // flaky: bulkItemRequest2.id();
        int int4 = 0; // flaky: bulkItemRequest2.id();
        int int5 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.action.ActionRequest actionRequest6 = null; // flaky: bulkItemRequest2.request();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = bulkItemRequest2.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertNull(actionRequest6);
    }

    @Test
    public void test06275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06275");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings18);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.transport.TransportService transportService21 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService22 = null;
        org.elasticsearch.indices.IndicesService indicesService23 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool24 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction25 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction26 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper27 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters28 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction30 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings18, transportService21, clusterService22, indicesService23, threadPool24, shardStateAction25, mappingUpdatedAction26, updateHelper27, actionFilters28, indexNameExpressionResolver29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(settings20);
    }

    @Test
    public void test06276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        int int8 = indexMetaData0.getNumberOfReplicas();
        int int9 = indexMetaData0.getNumberOfShards();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest12.remoteAddress(transportAddress13);
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest12.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException16 = bulkShardRequest12.validate();
        java.lang.String str17 = bulkShardRequest12.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = bulkShardRequest12.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest12.getRefreshPolicy();
        boolean boolean20 = bulkShardRequest12.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.common.unit.TimeValue timeValue33 = bulkShardRequest32.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest32.index("indices:data/write/bulk[s]");
        java.lang.String str36 = bulkShardRequest35.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest35.index("state-");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel39 = bulkShardRequest35.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress41 = null;
        bulkShardRequest40.remoteAddress(transportAddress41);
        org.elasticsearch.action.support.IndicesOptions indicesOptions43 = bulkShardRequest40.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException44 = bulkShardRequest40.validate();
        java.lang.String str45 = bulkShardRequest40.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel46 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel46);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel46);
        org.elasticsearch.common.xcontent.ToXContent.Params params49 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest50.remoteAddress(transportAddress51);
        org.elasticsearch.action.support.IndicesOptions indicesOptions53 = bulkShardRequest50.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException54 = bulkShardRequest50.validate();
        java.lang.String str55 = bulkShardRequest50.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = bulkShardRequest50.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException57 = bulkShardRequest50.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple58 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params49, (java.lang.IllegalArgumentException) actionRequestValidationException57);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params> bulkShardRequestReplicationRequestTuple59 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest48, params49);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = indexMetaData0.toXContent(xContentBuilder11, params49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertNotNull(indicesOptions15);
        org.junit.Assert.assertNotNull(actionRequestValidationException16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(transportAddress18);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNull(timeValue33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "indices:data/write/bulk[s]" + "'", str36, "indices:data/write/bulk[s]");
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel39 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel39.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions43);
        org.junit.Assert.assertNotNull(actionRequestValidationException44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel46 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel46.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(params49);
        org.junit.Assert.assertNotNull(indicesOptions53);
        org.junit.Assert.assertNotNull(actionRequestValidationException54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(transportAddress56);
        org.junit.Assert.assertNotNull(actionRequestValidationException57);
    }

    @Test
    public void test06277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06277");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test06278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06278");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest12.setRefreshPolicy("");
        bulkShardRequest14.primaryTerm(10L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy17 = bulkShardRequest14.getRefreshPolicy();
        long long18 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy19 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest20.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest24.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str28 = bulkShardRequest27.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest27.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.common.unit.TimeValue timeValue32 = bulkShardRequest31.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest33.remoteAddress(transportAddress34);
        org.elasticsearch.action.support.IndicesOptions indicesOptions36 = bulkShardRequest33.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException37 = bulkShardRequest33.validate();
        java.lang.String str38 = bulkShardRequest33.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel39 = bulkShardRequest33.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest31.consistencyLevel(writeConsistencyLevel39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel39);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest42 = new org.elasticsearch.action.bulk.BulkItemRequest(1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        int int43 = bulkItemRequest42.id();
        org.elasticsearch.common.io.stream.StreamInput streamInput44 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest42.readFrom(streamInput44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + refreshPolicy17 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy17.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + refreshPolicy19 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy19.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(timeValue32);
        org.junit.Assert.assertNotNull(indicesOptions36);
        org.junit.Assert.assertNotNull(actionRequestValidationException37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel39 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel39.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test06279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06279");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest0.timeout();
        boolean boolean6 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest7.remoteAddress(transportAddress8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest7.indicesOptions();
        bulkShardRequest7.primaryTerm((long) ' ');
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest0.timeout(timeValue13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest19 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        bulkShardRequest16.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest22.remoteAddress(transportAddress23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest22.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException26 = bulkShardRequest22.validate();
        org.elasticsearch.common.unit.TimeValue timeValue27 = bulkShardRequest22.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest16.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str30 = bulkShardRequest29.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy31 = bulkShardRequest29.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest33.remoteAddress(transportAddress34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest33.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest37.timeout(timeValue38);
        bulkShardRequest39.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest39.setRefreshPolicy(refreshPolicy44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest29.setRefreshPolicy(refreshPolicy44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest16.setRefreshPolicy(refreshPolicy44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = null;
        bulkShardRequest48.remoteAddress(transportAddress49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest48.index("index.creation_date");
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest48.remoteAddress(transportAddress53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest59 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest56);
        bulkShardRequest56.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress63 = null;
        bulkShardRequest62.remoteAddress(transportAddress63);
        org.elasticsearch.action.support.IndicesOptions indicesOptions65 = bulkShardRequest62.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException66 = bulkShardRequest62.validate();
        org.elasticsearch.common.unit.TimeValue timeValue67 = bulkShardRequest62.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest56.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest48.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest16.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = bulkShardRequest0.timeout(timeValue67);
        org.elasticsearch.common.unit.TimeValue timeValue72 = bulkShardRequest0.timeout();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNotNull(actionRequestValidationException26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + refreshPolicy31 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy31.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions65);
        org.junit.Assert.assertNotNull(actionRequestValidationException66);
        org.junit.Assert.assertNotNull(timeValue67);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNotNull(bulkShardRequest71);
        org.junit.Assert.assertNotNull(timeValue72);
    }

    @Test
    public void test06280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06280");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        int int7 = indexMetaData4.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData4.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet11 = indexMetaData4.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder2.putActiveAllocationIds((int) 'a', strSet11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder2.version((long) (byte) 2);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06281");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        java.lang.String str4 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock5 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple7 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock5, (java.lang.Comparable<java.lang.String>) "index.priority");
        java.lang.String str8 = clusterBlockTuple7.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = clusterBlockTuple7.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.index("");
        int int16 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        long long21 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder15.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.putCustom("state-", custom29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getCreationDate();
        long long33 = indexMetaData31.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = indexMetaData31.getState();
        boolean boolean36 = indexMetaData31.isSameUUID("index.");
        org.elasticsearch.Version version37 = indexMetaData31.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings38 = indexMetaData31.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder30.settings(settings38);
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        boolean boolean44 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder15.settings(settings38);
        boolean boolean46 = clusterBlockTuple7.equals((java.lang.Object) builder15);
        java.lang.Comparable<java.lang.String> strComparable47 = clusterBlockTuple7.v2();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str4, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(clusterBlock5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.priority]" + "'", str8, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.priority]");
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + strComparable47 + "' != '" + "index.priority" + "'", strComparable47, "index.priority");
    }

    @Test
    public void test06282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06282");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test06283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06283");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test06284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06284");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy7 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest0.validate();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest14.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest18.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str22 = bulkShardRequest21.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy23 = bulkShardRequest21.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = bulkShardRequest25.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest25.index("index.blocks.metadata");
        boolean boolean29 = clusterBlockTuple11.equals((java.lang.Object) "index.blocks.metadata");
        java.lang.String str30 = clusterBlockTuple11.toString();
        java.lang.String str31 = clusterBlockTuple11.toString();
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>> runtimeExceptionTuple32 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.RuntimeException) actionRequestValidationException8, clusterBlockTuple11);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertTrue("'" + refreshPolicy7 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy7.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + refreshPolicy23 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy23.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(timeValue26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str30, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str31, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(runtimeExceptionTuple32);
    }

    @Test
    public void test06285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06285");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str4 = versionType1.explainConflictForReads((long) 'a', (long) (short) -1);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [97] is different than the one provided [-1]" + "'", str4, "current version [97] is different than the one provided [-1]");
    }

    @Test
    public void test06286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06286");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.creationDate(3L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte21 = state20.id();
        byte byte22 = state20.id();
        byte byte23 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder19.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getCreationDate();
        long long33 = indexMetaData31.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = indexMetaData31.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder28.state(state34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder24.state(state34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder24.setRoutingNumShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long41 = indexMetaData40.getCreationDate();
        org.apache.lucene.util.Version version42 = indexMetaData40.getMinimumCompatibleVersion();
        long long43 = indexMetaData40.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap44 = indexMetaData40.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters45 = indexMetaData40.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap46 = indexMetaData40.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.removeAlias("index.uuid");
        java.lang.String[] strArray63 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder50.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple67 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap46, (java.lang.Cloneable) strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder24.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder12.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder69.setRoutingNumShards(52);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder69.removeAlias("index.");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder73.putAlias(aliasMetaData74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte21 + "' != '" + (byte) 0 + "'", byte21 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(version42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap44);
        org.junit.Assert.assertNull(discoveryNodeFilters45);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test06287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06287");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("current version [-1] is different than the one provided [100]");
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test06288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06288");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.uuid", custom7);
        org.elasticsearch.common.settings.Settings settings9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.settings(settings9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.putCustom("current version [52] is different than the one provided [97]", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.setRoutingNumShards(1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06289");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.index("");
        int int16 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        long long21 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder15.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.putCustom("state-", custom29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getCreationDate();
        long long33 = indexMetaData31.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = indexMetaData31.getState();
        boolean boolean36 = indexMetaData31.isSameUUID("index.");
        org.elasticsearch.Version version37 = indexMetaData31.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings38 = indexMetaData31.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder30.settings(settings38);
        boolean boolean40 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        org.elasticsearch.common.settings.Settings settings41 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings38);
        boolean boolean44 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder15.settings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder9.settings(settings38);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test06290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06290");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        boolean boolean11 = indexMetaData7.isSameUUID("state-");
        int int12 = indexMetaData7.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData7.includeFilters();
        long long14 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
    }

    @Test
    public void test06291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06291");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("index.version.upgraded_string");
        int int11 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test06292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06292");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.priority");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        long long10 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData7.excludeFilters();
        java.util.Set<java.lang.String> strSet17 = indexMetaData7.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder1.putActiveAllocationIds(100, strSet17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.version((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.numberOfShards(100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder19.primaryTerm(0, (long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData27.getState();
        java.util.Set<java.lang.String> strSet32 = null; // flaky: indexMetaData27.activeAllocationIds((int) (short) 1);
        java.util.Set<java.lang.String> strSet34 = null; // flaky: indexMetaData27.activeAllocationIds(1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData27.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long37 = indexMetaData36.getCreationDate();
        long long38 = indexMetaData36.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData36.getState();
        java.util.Set<java.lang.String> strSet41 = null; // flaky: indexMetaData36.activeAllocationIds((int) (short) 1);
        int int42 = indexMetaData36.getRoutingNumShards();
        long long43 = indexMetaData36.getVersion();
        org.elasticsearch.Version version44 = indexMetaData36.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap45 = indexMetaData36.getActiveAllocationIds();
        org.elasticsearch.Version version46 = indexMetaData36.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData36.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff48 = indexMetaData27.diff(indexMetaData36);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData27.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder26.state(state49);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNotNull(indexMetaDataDiff48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test06293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06293");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str9 = builder8.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder8.mapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test06294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06294");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        java.lang.String str7 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.index("current version [0] is different than the one provided [52]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData10.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData10.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.putCustom("", custom21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long24 = indexMetaData23.getCreationDate();
        org.apache.lucene.util.Version version25 = indexMetaData23.getMinimumCompatibleVersion();
        long long26 = indexMetaData23.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap27 = indexMetaData23.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData23.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap29 = indexMetaData23.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap30 = indexMetaData23.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData23.excludeFilters();
        int int32 = indexMetaData23.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData23.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder19.state(state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder1.state(state33);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = builder35.mapping("current version [100] is different than the one provided [10]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.creation_date" + "'", str7, "index.creation_date");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap29);
        org.junit.Assert.assertNotNull(strImmutableOpenMap30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(mappingMetaData37);
    }

    @Test
    public void test06295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06295");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.putCustom("current version [32] is higher or equal to the one provided [0]", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        boolean boolean14 = indexMetaData10.isSameUUID("state-");
        int int15 = indexMetaData10.getNumberOfReplicas();
        int int16 = indexMetaData10.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData10.includeFilters();
        int int19 = indexMetaData10.getRoutingFactor();
        boolean boolean21 = indexMetaData10.isSameUUID("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder9.state(state22);
        org.elasticsearch.common.settings.Settings.Builder builder24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.settings(builder24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06296");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("current version [-1] is higher than the one provided [52]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder14.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet28);
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strSetTuple32 = new org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strSet28, params31);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = indexMetaData0.toXContent(xContentBuilder10, params31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(params31);
    }

    @Test
    public void test06297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06297");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.version((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.setRoutingNumShards((int) ' ');
        java.lang.String str11 = builder10.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.putCustom("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.setRoutingNumShards((int) (byte) 3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putCustom("state-", custom18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.removeAlias("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder16.index("index.uuid");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.creation_date" + "'", str11, "index.creation_date");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06298");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        int int4 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test06299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06299");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.setRoutingNumShards((int) (byte) 1);
        int int8 = builder7.getRoutingNumShards();
        int int9 = builder7.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test06300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06300");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple16 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "current version [97] is higher than the one provided [32]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple20 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple22 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple24 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, (java.lang.Comparable<java.lang.String>) "index.blocks.metadata");
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
    }

    @Test
    public void test06301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test06302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06302");
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray0 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState> indexShardStateSet1 = new java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, indexShardStateArray0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getCreationDate();
        org.apache.lucene.util.Version version5 = indexMetaData3.getMinimumCompatibleVersion();
        boolean boolean7 = indexMetaData3.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData3);
        org.apache.lucene.util.Version version9 = indexMetaData3.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData3.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        org.elasticsearch.Version version15 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.requireFilters();
        boolean boolean18 = indexMetaData12.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData3.diff(indexMetaData12);
        org.elasticsearch.common.collect.Tuple<java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.common.io.stream.Writeable> indexShardStateSetTuple20 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, (org.elasticsearch.common.io.stream.Writeable) indexMetaData12);
        org.elasticsearch.Version version21 = indexMetaData12.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexShardStateArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(indexShardStateSetTuple20);
        org.junit.Assert.assertNotNull(version21);
    }

    @Test
    public void test06303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06303");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest0.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("index.blocks.write");
        bulkShardRequest7.primaryTerm(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray10 = bulkShardRequest7.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
    }

    @Test
    public void test06304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.includeFilters();
        int int13 = indexMetaData8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        boolean boolean16 = indexMetaData8.isSameUUID("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]");
        boolean boolean18 = indexMetaData8.isSameUUID("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06305");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.version((long) '4');
        java.lang.String str12 = builder9.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.setRoutingNumShards((int) (byte) 2);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.putMapping(mappingMetaData15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.number_of_shards" + "'", str12, "index.number_of_shards");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06306");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock4 = clusterBlockTuple2.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock5 = clusterBlockTuple2.v1();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock4);
        org.junit.Assert.assertNotNull(clusterBlock5);
    }

    @Test
    public void test06307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06307");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        long long5 = versionType1.updateVersion((long) (-1), (long) '#');
        byte byte6 = versionType1.getValue();
        boolean boolean8 = versionType1.validateVersionForReads((long) (byte) -1);
        boolean boolean11 = versionType1.isVersionConflictForReads((long) (short) -1, (long) (byte) 0);
        boolean boolean15 = versionType1.isVersionConflictForWrites((long) 100, (long) (short) 0, false);
        boolean boolean17 = versionType1.validateVersionForWrites((long) (byte) 0);
        boolean boolean19 = versionType1.validateVersionForReads((long) 100);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 35L + "'", long5 == 35L);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 3 + "'", byte6 == (byte) 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06308");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest15.getRefreshPolicy();
        java.lang.String str17 = bulkShardRequest15.index();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = bulkShardRequest15.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.version.created" + "'", str17, "index.version.created");
    }

    @Test
    public void test06309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06309");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        long long18 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest15.setShardId(shardId19);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
    }

    @Test
    public void test06310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06310");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest5.shardId();
        java.lang.String str9 = bulkShardRequest5.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest5.index("index.auto_expand_replicas");
        long long12 = bulkShardRequest11.primaryTerm();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(shardId8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index.creation_date" + "'", str9, "index.creation_date");
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test06311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06311");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfShards((-1));
        org.elasticsearch.common.settings.Settings.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.settings(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06312");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        java.lang.Comparable<java.lang.String> strComparable15 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple16 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock14, strComparable15);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock17 = clusterBlockTuple16.v1();
        java.lang.String str18 = clusterBlockTuple16.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.putCustom("state-", custom24);
        int int26 = builder20.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        long long29 = indexMetaData27.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData27.getState();
        boolean boolean32 = indexMetaData27.isSameUUID("index.");
        org.elasticsearch.Version version33 = indexMetaData27.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData27.getSettings();
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        boolean boolean36 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder20.settings(settings34);
        org.elasticsearch.common.settings.Settings settings38 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        org.elasticsearch.common.settings.Settings settings40 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings38);
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings38);
        boolean boolean42 = clusterBlockTuple16.equals((java.lang.Object) boolean41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress44 = null;
        bulkShardRequest43.remoteAddress(transportAddress44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest43.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest47.timeout(timeValue48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str51 = bulkShardRequest50.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy52 = bulkShardRequest50.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel53 = bulkShardRequest50.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest47.consistencyLevel(writeConsistencyLevel53);
        org.elasticsearch.index.shard.ShardId shardId55 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest47.setShardId(shardId55);
        org.elasticsearch.common.unit.TimeValue timeValue57 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest47.timeout(timeValue57);
        org.elasticsearch.common.transport.TransportAddress transportAddress59 = null;
        bulkShardRequest58.remoteAddress(transportAddress59);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest58.index("current version [1] is higher or equal to the one provided [-1]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress64 = null;
        bulkShardRequest63.remoteAddress(transportAddress64);
        org.elasticsearch.action.support.IndicesOptions indicesOptions66 = bulkShardRequest63.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException67 = bulkShardRequest63.validate();
        java.lang.String str68 = bulkShardRequest63.index();
        org.elasticsearch.index.shard.ShardId shardId69 = bulkShardRequest63.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions70 = bulkShardRequest63.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel71 = bulkShardRequest63.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest58.consistencyLevel(writeConsistencyLevel71);
        boolean boolean73 = clusterBlockTuple16.equals((java.lang.Object) bulkShardRequest72);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock74 = clusterBlockTuple16.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple76 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock74, (java.lang.Comparable<java.lang.String>) "current version [-1] is higher than the one provided [52]");
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertNotNull(clusterBlock17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]" + "'", str18, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + refreshPolicy52 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy52.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel53 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel53.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(indicesOptions66);
        org.junit.Assert.assertNotNull(actionRequestValidationException67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(shardId69);
        org.junit.Assert.assertNotNull(indicesOptions70);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel71 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel71.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(clusterBlock74);
    }

    @Test
    public void test06313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06313");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.");
        long long6 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.setShardId(shardId7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
    }

    @Test
    public void test06314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06314");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.shadow_replicas");
        bulkShardRequest15.primaryTerm((-1L));
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.index.shard.ShardId shardId19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest15.setShardId(shardId19);
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException23 = bulkShardRequest15.validate();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = bulkShardRequest15.remoteAddress();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(transportAddress21);
        org.junit.Assert.assertNotNull(indicesOptions22);
        org.junit.Assert.assertNull(actionRequestValidationException23);
        org.junit.Assert.assertNull(transportAddress24);
    }

    @Test
    public void test06315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06315");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.creationDate((long) (short) 0);
        int int10 = builder9.numberOfReplicas();
        java.lang.String str11 = builder9.index();
        int int12 = builder9.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.uuid" + "'", str11, "index.uuid");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test06316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06316");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test06317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06317");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings14);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings14);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings19);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06318");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        bulkShardRequest1.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest7.remoteAddress(transportAddress8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest7.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest7.validate();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest1.timeout(timeValue12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest1.timeout();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest1.validate();
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest1.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str19 = bulkShardRequest18.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest21 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        bulkShardRequest18.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue24 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.timeout(timeValue24);
        org.elasticsearch.tasks.TaskId taskId26 = bulkShardRequest25.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = null;
        bulkShardRequest27.remoteAddress(transportAddress28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest27.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest31.timeout(timeValue32);
        bulkShardRequest33.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str37 = bulkShardRequest36.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy38 = bulkShardRequest36.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest33.setRefreshPolicy(refreshPolicy38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str42 = bulkShardRequest41.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy43 = bulkShardRequest41.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest44 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest41);
        bulkShardRequest41.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue47 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest41.timeout(timeValue47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest33.timeout(timeValue47);
        org.elasticsearch.index.shard.ShardId shardId50 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest49.setShardId(shardId50);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = null;
        bulkShardRequest52.remoteAddress(transportAddress53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest52.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue57 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest56.timeout(timeValue57);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str60 = bulkShardRequest59.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy61 = bulkShardRequest59.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel62 = bulkShardRequest59.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest56.consistencyLevel(writeConsistencyLevel62);
        org.elasticsearch.common.unit.TimeValue timeValue64 = bulkShardRequest63.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress66 = null;
        bulkShardRequest65.remoteAddress(transportAddress66);
        org.elasticsearch.action.support.IndicesOptions indicesOptions68 = bulkShardRequest65.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException69 = bulkShardRequest65.validate();
        java.lang.String str70 = bulkShardRequest65.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel71 = bulkShardRequest65.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest63.consistencyLevel(writeConsistencyLevel71);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = bulkShardRequest51.consistencyLevel(writeConsistencyLevel71);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel71);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel71);
        bulkShardRequest75.primaryTerm(2L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(actionRequestValidationException15);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(taskId26);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + refreshPolicy38 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy38.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + refreshPolicy43 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy43.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + refreshPolicy61 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy61.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel62 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel62.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(timeValue64);
        org.junit.Assert.assertNotNull(indicesOptions68);
        org.junit.Assert.assertNotNull(actionRequestValidationException69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel71 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel71.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertNotNull(bulkShardRequest73);
        org.junit.Assert.assertNotNull(bulkShardRequest74);
        org.junit.Assert.assertNotNull(bulkShardRequest75);
    }

    @Test
    public void test06319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06319");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [10] is higher or equal to the one provided [32]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [10] is higher or equal to the one provided [32]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06320");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, actionRequest1);
        org.elasticsearch.action.ActionRequest actionRequest3 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.common.io.stream.StreamInput streamInput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.readFrom(streamInput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(actionRequest3);
    }

    @Test
    public void test06321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06321");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.setShardId(shardId4);
        bulkShardRequest0.setParentTask("index.creation_date_string", (long) (short) 100);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest0.getRefreshPolicy();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
    }

    @Test
    public void test06322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        long long3 = indexMetaData0.getCreationDate();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(strSet5);
    }

    @Test
    public void test06323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06323");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("Tuple [v1=8,index write (api), blocks WRITE, v2=current version [0] is different than the one provided [1]]");
        int int2 = builder1.getRoutingNumShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test06324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        java.lang.String[] strArray27 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder14.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet28);
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strSetTuple32 = new org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strSet28, params31);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder33 = indexMetaData0.toXContent(xContentBuilder10, params31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(params31);
    }

    @Test
    public void test06325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06325");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [10] is different than the one provided [97]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [10] is different than the one provided [97]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06326");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        int int23 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long26 = indexMetaData25.getCreationDate();
        org.apache.lucene.util.Version version27 = indexMetaData25.getMinimumCompatibleVersion();
        long long28 = indexMetaData25.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap29 = indexMetaData25.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData25.getInitialRecoveryFilters();
        org.elasticsearch.Version version31 = indexMetaData25.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap32 = indexMetaData25.getAliases();
        int int33 = indexMetaData25.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        org.apache.lucene.util.Version version36 = indexMetaData34.getMinimumCompatibleVersion();
        long long37 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData34.includeFilters();
        java.lang.String str40 = indexMetaData34.getIndexUUID();
        org.elasticsearch.Version version41 = indexMetaData34.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData34.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff44 = indexMetaData25.diff(indexMetaData34);
        org.elasticsearch.common.settings.Settings settings45 = indexMetaData34.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap46 = indexMetaData34.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData0.diff(indexMetaData34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getCreationDate();
        org.apache.lucene.util.Version version50 = indexMetaData48.getMinimumCompatibleVersion();
        long long51 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap52 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData48.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap54 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.index.Index index55 = indexMetaData48.getMergeSourceIndex();
        int int56 = indexMetaData48.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData58 = indexMetaData48.mapping("index.version.created_string");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff59 = indexMetaData34.diff(indexMetaData48);
        java.lang.String str60 = indexMetaData48.getIndexUUID();
        org.elasticsearch.common.io.stream.StreamInput streamInput61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff62 = indexMetaData48.readDiffFrom(streamInput61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNull(version27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "_na_" + "'", str40, "_na_");
        org.junit.Assert.assertNotNull(version41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertNotNull(indexMetaDataDiff44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNull(version50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap52);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap54);
        org.junit.Assert.assertNull(index55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(mappingMetaData58);
        org.junit.Assert.assertNotNull(indexMetaDataDiff59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "_na_" + "'", str60, "_na_");
    }

    @Test
    public void test06327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06327");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        long long14 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
    }

    @Test
    public void test06328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06328");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        int int13 = indexMetaData8.getRoutingFactor();
        org.elasticsearch.common.xcontent.XContentParser xContentParser14 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexMetaData8.fromXContent(xContentParser14, parseFieldMatcher15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test06329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06329");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [3] is different than the one provided [-1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [3] is different than the one provided [-1]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06330");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.creation_date");
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        long long10 = indexMetaData0.getCreationDate();
        int int11 = indexMetaData0.getNumberOfReplicas();
        boolean boolean13 = indexMetaData0.isSameUUID("current version [52] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06331");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        org.elasticsearch.index.Index index9 = indexMetaData8.getMergeSourceIndex();
        int int10 = indexMetaData8.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData8.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test06332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06332");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock9, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean13 = clusterBlockTuple11.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest14.remoteAddress(transportAddress15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest14.validate();
        java.lang.String str19 = bulkShardRequest14.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        boolean boolean21 = clusterBlockTuple11.equals((java.lang.Object) writeConsistencyLevel20);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) clusterBlockTuple11);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock23 = clusterBlockTuple11.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple25 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock23, (java.lang.Comparable<java.lang.String>) "");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple27 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock23, (java.lang.Comparable<java.lang.String>) "current version [1] is different than the one provided [32]");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock28 = clusterBlockTuple27.v1();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(clusterBlock23);
        org.junit.Assert.assertNotNull(clusterBlock28);
    }

    @Test
    public void test06333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06333");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        long long9 = indexMetaData0.primaryTerm((int) (short) 0);
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test06334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06334");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test06335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06335");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str36 = bulkShardRequest35.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest35.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = bulkShardRequest35.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel38);
        org.elasticsearch.action.support.IndicesOptions indicesOptions40 = bulkShardRequest0.indicesOptions();
        long long41 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue42 = bulkShardRequest0.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str44 = bulkShardRequest43.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress45 = bulkShardRequest43.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy46 = bulkShardRequest43.getRefreshPolicy();
        org.elasticsearch.tasks.TaskId taskId47 = bulkShardRequest43.getParentTask();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy50 = bulkShardRequest49.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.support.IndicesOptions indicesOptions54 = bulkShardRequest51.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException55 = bulkShardRequest51.validate();
        java.lang.String str56 = bulkShardRequest51.index();
        org.elasticsearch.index.shard.ShardId shardId57 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest51.setShardId(shardId57);
        org.elasticsearch.index.shard.ShardId shardId59 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest51.setShardId(shardId59);
        org.elasticsearch.action.support.IndicesOptions indicesOptions61 = bulkShardRequest60.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId62 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest60.setShardId(shardId62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str66 = bulkShardRequest65.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy67 = bulkShardRequest65.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest68 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest65);
        bulkShardRequest65.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress72 = null;
        bulkShardRequest71.remoteAddress(transportAddress72);
        org.elasticsearch.action.support.IndicesOptions indicesOptions74 = bulkShardRequest71.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException75 = bulkShardRequest71.validate();
        org.elasticsearch.common.unit.TimeValue timeValue76 = bulkShardRequest71.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest77 = bulkShardRequest65.timeout(timeValue76);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest78 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str79 = bulkShardRequest78.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy80 = bulkShardRequest78.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel81 = bulkShardRequest78.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress83 = null;
        bulkShardRequest82.remoteAddress(transportAddress83);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest86 = bulkShardRequest82.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue87 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest88 = bulkShardRequest86.timeout(timeValue87);
        bulkShardRequest88.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest91 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str92 = bulkShardRequest91.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy93 = bulkShardRequest91.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest94 = bulkShardRequest88.setRefreshPolicy(refreshPolicy93);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest95 = bulkShardRequest78.setRefreshPolicy(refreshPolicy93);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest96 = bulkShardRequest65.setRefreshPolicy(refreshPolicy93);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest97 = bulkShardRequest63.setRefreshPolicy(refreshPolicy93);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest98 = bulkShardRequest49.setRefreshPolicy(refreshPolicy93);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel38 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel38.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(indicesOptions40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(transportAddress45);
        org.junit.Assert.assertTrue("'" + refreshPolicy46 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy46.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId47);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertTrue("'" + refreshPolicy50 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy50.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions54);
        org.junit.Assert.assertNotNull(actionRequestValidationException55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNotNull(indicesOptions61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + refreshPolicy67 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy67.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions74);
        org.junit.Assert.assertNotNull(actionRequestValidationException75);
        org.junit.Assert.assertNotNull(timeValue76);
        org.junit.Assert.assertNotNull(bulkShardRequest77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + refreshPolicy80 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy80.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel81 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel81.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest86);
        org.junit.Assert.assertNotNull(bulkShardRequest88);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + refreshPolicy93 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy93.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest94);
        org.junit.Assert.assertNotNull(bulkShardRequest95);
        org.junit.Assert.assertNotNull(bulkShardRequest96);
        org.junit.Assert.assertNotNull(bulkShardRequest97);
        org.junit.Assert.assertNotNull(bulkShardRequest98);
    }

    @Test
    public void test06336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06336");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest1.remoteAddress(transportAddress3);
        long long5 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId7 = bulkShardRequest1.getParentTask();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertNotNull(taskId7);
    }

    @Test
    public void test06337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test06338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06338");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder1.mapping("index.blocks.write");
        int int6 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.putCustom("state-", custom14);
        int int16 = builder10.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        boolean boolean22 = indexMetaData17.isSameUUID("index.");
        org.elasticsearch.Version version23 = indexMetaData17.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings24 = indexMetaData17.getSettings();
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder10.settings(settings24);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder1.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder1.numberOfReplicas((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.version((long) 1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test06339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06339");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        java.lang.String str6 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        boolean boolean11 = indexMetaData7.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData7.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData7.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock16, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean20 = clusterBlockTuple18.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.support.IndicesOptions indicesOptions24 = bulkShardRequest21.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException25 = bulkShardRequest21.validate();
        java.lang.String str26 = bulkShardRequest21.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel27 = bulkShardRequest21.consistencyLevel();
        boolean boolean28 = clusterBlockTuple18.equals((java.lang.Object) writeConsistencyLevel27);
        boolean boolean29 = indexMetaData7.equals((java.lang.Object) clusterBlockTuple18);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap31 = indexMetaData7.getAliases();
        java.lang.String str32 = indexMetaData7.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getCreationDate();
        org.apache.lucene.util.Version version35 = indexMetaData33.getMinimumCompatibleVersion();
        long long36 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap37 = indexMetaData33.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData33.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap39 = indexMetaData33.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData33.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap41 = indexMetaData33.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData7.diff(indexMetaData33);
        boolean boolean44 = clusterBlockTuple2.equals((java.lang.Object) indexMetaData33);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData33.mapping("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData33.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData33.mapping("");
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str6, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(clusterBlock16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indicesOptions24);
        org.junit.Assert.assertNotNull(actionRequestValidationException25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel27 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel27.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNull(mappingMetaData49);
    }

    @Test
    public void test06340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06340");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test06341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06341");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock4 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock4, (java.lang.Comparable<java.lang.String>) "current version [0] is higher or equal to the one provided [97]");
        java.lang.Comparable<java.lang.String> strComparable7 = clusterBlockTuple6.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock8 = clusterBlockTuple6.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock9 = clusterBlockTuple6.v1();
        java.lang.String str10 = clusterBlockTuple6.toString();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock4);
        org.junit.Assert.assertEquals("'" + strComparable7 + "' != '" + "current version [0] is higher or equal to the one provided [97]" + "'", strComparable7, "current version [0] is higher or equal to the one provided [97]");
        org.junit.Assert.assertNotNull(clusterBlock8);
        org.junit.Assert.assertNotNull(clusterBlock9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]" + "'", str10, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [97]]");
    }

    @Test
    public void test06342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.shadow_replicas");
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("current version [1] is higher than the one provided [11]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test06343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06343");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        int int3 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAlias("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.removeAllAliases();
        int int7 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test06344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06344");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', actionRequest1);
        int int3 = 0; // flaky: bulkItemRequest2.id();
        int int4 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.action.ActionRequest actionRequest5 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.action.ActionRequest actionRequest6 = null; // flaky: bulkItemRequest2.request();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNull(actionRequest5);
        org.junit.Assert.assertNull(actionRequest6);
    }

    @Test
    public void test06345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06345");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.elasticsearch.cluster.metadata.IndexMetaData.getRoutingFactor(indexMetaData0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06346");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest6.remoteAddress(transportAddress7);
        org.elasticsearch.action.support.IndicesOptions indicesOptions9 = bulkShardRequest6.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest6.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple15 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException10, builder12);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure17 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "primary_terms", (java.lang.Throwable) actionRequestValidationException10, "index.shared_filesystem");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure19 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "_na_", (java.lang.Throwable) actionRequestValidationException10, "index.uuid");
        java.lang.Throwable throwable20 = shardFailure19.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure22 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [32] is different than the one provided [11]", throwable20, "");
        java.lang.String str23 = shardFailure22.indexUUID;
        java.lang.Throwable throwable24 = shardFailure22.cause;
        org.junit.Assert.assertNotNull(indicesOptions9);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(throwable24);
        org.junit.Assert.assertEquals(throwable24.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable24.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable24.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test06347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06347");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy5 = bulkShardRequest4.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest4.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure8 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.shared_filesystem.recover_on_any_node", (java.lang.Throwable) actionRequestValidationException6, "state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte16 = state15.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.state(state15);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>> validationExceptionTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>>((org.elasticsearch.common.ValidationException) actionRequestValidationException6, (java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>) state15);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure20 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [10] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException6, "active_allocations");
        java.lang.Throwable throwable21 = shardFailure20.cause;
        org.junit.Assert.assertTrue("'" + refreshPolicy5 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy5.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(throwable21);
        org.junit.Assert.assertEquals(throwable21.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable21.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable21.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test06348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06348");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [-1] is higher or equal to the one provided [3]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [-1] is higher or equal to the one provided [3]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06349");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        long long11 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData9.getState();
        boolean boolean14 = indexMetaData9.isSameUUID("index.");
        long long15 = indexMetaData9.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        int int17 = indexMetaData9.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test06350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06350");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str5 = versionType0.explainConflictForWrites((long) 'a', 32L, true);
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType6.isVersionConflictForWrites((long) ' ', (long) (byte) 3, true);
        boolean boolean12 = versionType6.validateVersionForReads((long) (byte) 1);
        java.lang.String str15 = versionType6.explainConflictForReads(32L, (long) 'a');
        byte byte16 = versionType6.getValue();
        boolean boolean19 = versionType6.isVersionConflictForReads(35L, (long) 97);
        boolean boolean21 = versionType6.validateVersionForWrites(10L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [97] is higher than the one provided [32]" + "'", str5, "current version [97] is higher than the one provided [32]");
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [32] is different than the one provided [97]" + "'", str15, "current version [32] is different than the one provided [97]");
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 2 + "'", byte16 == (byte) 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test06351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06351");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest0.shardId();
        java.lang.String str7 = bulkShardRequest0.index();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = bulkShardRequest0.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test06352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06352");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.index.shard.ShardId shardId16 = bulkShardRequest4.shardId();
        boolean boolean17 = bulkShardRequest4.getShouldPersistResult();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06353");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest5.setShardId(shardId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest22.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.index.shard.ShardId shardId27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest19.setShardId(shardId27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str31 = bulkShardRequest30.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest33 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest30);
        org.elasticsearch.tasks.TaskId taskId34 = bulkShardRequest30.getParentTask();
        bulkShardRequest28.setParentTask(taskId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress37 = null;
        bulkShardRequest36.remoteAddress(transportAddress37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest36.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest40.timeout(timeValue41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str44 = bulkShardRequest43.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy45 = bulkShardRequest43.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel46 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel46);
        org.elasticsearch.index.shard.ShardId shardId48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest40.setShardId(shardId48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest40.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress55 = null;
        bulkShardRequest54.remoteAddress(transportAddress55);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest54.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue59 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest58.timeout(timeValue59);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str62 = bulkShardRequest61.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy63 = bulkShardRequest61.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel64 = bulkShardRequest61.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest58.consistencyLevel(writeConsistencyLevel64);
        org.elasticsearch.index.shard.ShardId shardId66 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest58.setShardId(shardId66);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str70 = bulkShardRequest69.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy71 = bulkShardRequest69.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest72 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest69);
        org.elasticsearch.tasks.TaskId taskId73 = bulkShardRequest69.getParentTask();
        bulkShardRequest67.setParentTask(taskId73);
        bulkShardRequest51.setParentTask(taskId73);
        bulkShardRequest28.setParentTask(taskId73);
        bulkShardRequest14.setParentTask(taskId73);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest78 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        int int79 = bulkItemRequest78.id();
        org.elasticsearch.common.io.stream.StreamInput streamInput80 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest78.readFrom(streamInput80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId34);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + refreshPolicy45 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy45.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel46 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel46.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + refreshPolicy63 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy63.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel64 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel64.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNotNull(bulkShardRequest67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + refreshPolicy71 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy71.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId73);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test06354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06354");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards((int) (byte) 100);
        int int6 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.numberOfReplicas(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.version(32L);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06355");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.index("current version [0] is higher or equal to the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.putCustom("state-", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long16 = indexMetaData15.getCreationDate();
        long long17 = indexMetaData15.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData15.getState();
        boolean boolean20 = indexMetaData15.isSameUUID("index.");
        org.elasticsearch.Version version21 = indexMetaData15.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData15.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder14.settings(settings22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder7.settings(settings22);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        boolean boolean29 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings22);
        org.elasticsearch.transport.TransportService transportService30 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService31 = null;
        org.elasticsearch.indices.IndicesService indicesService32 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool33 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction34 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction35 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper36 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters37 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction39 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings22, transportService30, clusterService31, indicesService32, threadPool33, shardStateAction34, mappingUpdatedAction35, updateHelper36, actionFilters37, indexNameExpressionResolver38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06356");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        org.elasticsearch.Version version3 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(index4);
    }

    @Test
    public void test06357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06357");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy5 = bulkShardRequest4.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest4.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure8 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "active_allocations", (java.lang.Throwable) actionRequestValidationException6, "index.creation_date");
        java.lang.String str9 = shardFailure8.reason;
        java.lang.Throwable throwable10 = shardFailure8.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.number_of_replicas", throwable10, "current version [0] is higher or equal to the one provided [100]");
        java.lang.String str13 = shardFailure12.indexUUID;
        org.junit.Assert.assertTrue("'" + refreshPolicy5 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy5.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "active_allocations" + "'", str9, "active_allocations");
        org.junit.Assert.assertNotNull(throwable10);
        org.junit.Assert.assertEquals(throwable10.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable10.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable10.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [0] is higher or equal to the one provided [100]" + "'", str13, "current version [0] is higher or equal to the one provided [100]");
    }

    @Test
    public void test06358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        long long8 = indexMetaData0.primaryTerm(0);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings13 = indexMetaData0.getSettings();
        int int14 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(settings12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test06359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        int int13 = indexMetaData8.getTotalNumberOfShards();
        int int14 = indexMetaData8.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData8.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        int int19 = indexMetaData16.getNumberOfReplicas();
        long long20 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData16.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.metadata.IndexMetaData, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexMetaDataTuple22 = org.elasticsearch.common.collect.Tuple.tuple(indexMetaData8, state21);
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData8.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData8.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData8.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataTuple22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
    }

    @Test
    public void test06360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06360");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters2);
    }

    @Test
    public void test06361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06361");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version8 = indexMetaData0.getUpgradedVersion();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
    }

    @Test
    public void test06362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06362");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("current version [32] is different than the one provided [3]");
        int int13 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
    }

    @Test
    public void test06363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06363");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        bulkShardRequest13.primaryTerm(10L);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest13.getRefreshPolicy();
        boolean boolean17 = bulkShardRequest13.getShouldPersistResult();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        org.apache.lucene.util.Version version20 = indexMetaData18.getMinimumCompatibleVersion();
        boolean boolean22 = indexMetaData18.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        org.apache.lucene.util.Version version24 = indexMetaData18.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet26 = null; // flaky: indexMetaData18.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        org.elasticsearch.Version version30 = indexMetaData27.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData27.requireFilters();
        boolean boolean33 = indexMetaData27.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData18.diff(indexMetaData27);
        java.lang.String str35 = indexMetaData18.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap36 = indexMetaData18.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        org.apache.lucene.util.Version version39 = indexMetaData37.getMinimumCompatibleVersion();
        boolean boolean41 = indexMetaData37.isSameUUID("state-");
        int int42 = indexMetaData37.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData37.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff44 = indexMetaData18.diff(indexMetaData37);
        org.elasticsearch.common.settings.Settings settings45 = indexMetaData18.getSettings();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest54 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest51);
        boolean boolean55 = indexMetaData18.equals((java.lang.Object) bulkShardRequest51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str57 = bulkShardRequest56.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest56.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest56.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException61 = bulkShardRequest56.validate();
        org.elasticsearch.common.unit.TimeValue timeValue62 = bulkShardRequest56.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest51.timeout(timeValue62);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel64 = bulkShardRequest63.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel64);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel66 = bulkShardRequest13.consistencyLevel();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "_na_" + "'", str35, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNull(version39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(indexMetaDataDiff44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertNull(actionRequestValidationException61);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel64 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel64.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel66 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel66.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test06364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06364");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str7 = bulkShardRequest6.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest6.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest6.getParentTask();
        bulkShardRequest0.setParentTask(taskId10);
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions13 = bulkShardRequest0.indicesOptions();
        bulkShardRequest0.primaryTerm((long) ' ');
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest0.remoteAddress(transportAddress16);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId10);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertNotNull(indicesOptions13);
    }

    @Test
    public void test06365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06365");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.requireFilters();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test06366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06366");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("state-");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        boolean boolean6 = indexMetaData0.isSameUUID("current version [32] is different than the one provided [97]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test06367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06367");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = indexMetaData0.primaryTerm((int) (byte) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test06368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.putCustom("state-", custom8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        long long12 = indexMetaData10.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData10.getState();
        boolean boolean15 = indexMetaData10.isSameUUID("index.");
        org.elasticsearch.Version version16 = indexMetaData10.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder9.settings(settings17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        boolean boolean21 = indexMetaData0.equals((java.lang.Object) settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings23);
    }

    @Test
    public void test06369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06369");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06370");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        int int9 = indexMetaData0.getNumberOfReplicas();
        java.lang.Object obj10 = null;
        boolean boolean11 = indexMetaData0.equals(obj10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.excludeFilters();
        long long13 = indexMetaData0.getCreationDate();
        int int14 = indexMetaData0.getRoutingFactor();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test06371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06371");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        int int5 = indexMetaData0.getNumberOfReplicas();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        int int9 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        long long16 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        boolean boolean19 = indexMetaData14.isSameUUID("index.");
        long long20 = indexMetaData14.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData14.includeFilters();
        org.elasticsearch.Version version22 = indexMetaData14.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData10.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData0.diff(indexMetaData10);
        long long26 = indexMetaData10.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(indexMetaDataDiff25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test06372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("current version [-1] is higher than the one provided [52]");
        int int6 = indexMetaData0.getTotalNumberOfShards();
        int int7 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        org.apache.lucene.util.Version version10 = indexMetaData8.getMinimumCompatibleVersion();
        long long11 = indexMetaData8.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.Version version14 = indexMetaData8.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData8.getAliases();
        int int16 = indexMetaData8.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        org.apache.lucene.util.Version version19 = indexMetaData17.getMinimumCompatibleVersion();
        long long20 = indexMetaData17.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = indexMetaData17.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData17.includeFilters();
        java.lang.String str23 = indexMetaData17.getIndexUUID();
        org.elasticsearch.Version version24 = indexMetaData17.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData17.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData8.diff(indexMetaData17);
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData17.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData17.mapping("active_allocations");
        long long32 = indexMetaData17.primaryTerm(0);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData0.diff(indexMetaData17);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = indexMetaData17.primaryTerm((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
    }

    @Test
    public void test06373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        boolean boolean9 = indexMetaData0.isSameUUID("current version [1] is higher or equal to the one provided [-1]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test06374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06374");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData5.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = indexMetaData5.readFrom(streamInput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
    }

    @Test
    public void test06375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06375");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("current version [10] is different than the one provided [100]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test06376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06376");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest0.remoteAddress(transportAddress4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest7.getParentTask();
        bulkShardRequest0.setParentTask(taskId11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.timeout(timeValue18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str21 = bulkShardRequest20.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy22 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = null;
        bulkShardRequest26.remoteAddress(transportAddress27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest26.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest30.timeout(timeValue31);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest35.remoteAddress(transportAddress36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest35.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest39.timeout(timeValue40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str43 = bulkShardRequest42.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest46.setRefreshPolicy("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest46.index("index.shadow_replicas");
        bulkShardRequest50.primaryTerm((-1L));
        org.elasticsearch.index.shard.ShardId shardId53 = bulkShardRequest50.shardId();
        org.elasticsearch.index.shard.ShardId shardId54 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest50.setShardId(shardId54);
        org.elasticsearch.tasks.TaskId taskId56 = bulkShardRequest50.getParentTask();
        bulkShardRequest34.setParentTask(taskId56);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest34.timeout("current version [97] is higher or equal to the one provided [32]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [97] is higher or equal to the one provided [32]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + refreshPolicy22 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy22.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNull(shardId53);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(taskId56);
    }

    @Test
    public void test06377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06377");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        java.lang.Comparable<java.lang.String> strComparable3 = clusterBlockTuple2.v2();
        java.lang.Comparable<java.lang.String> strComparable4 = clusterBlockTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.uuid");
        int int9 = builder6.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.setRoutingNumShards((int) (byte) 10);
        boolean boolean13 = clusterBlockTuple2.equals((java.lang.Object) builder6);
        int int14 = builder6.numberOfReplicas();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertEquals("'" + strComparable3 + "' != '" + "index.version.created" + "'", strComparable3, "index.version.created");
        org.junit.Assert.assertEquals("'" + strComparable4 + "' != '" + "index.version.created" + "'", strComparable4, "index.version.created");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test06378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06378");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy7 = bulkShardRequest6.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest6.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure10 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "active_allocations", (java.lang.Throwable) actionRequestValidationException8, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "indices:data/write/bulk[s]", (java.lang.Throwable) actionRequestValidationException8, "_na_");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure14 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.blocks.write", (java.lang.Throwable) actionRequestValidationException8, "index.shared_filesystem");
        java.lang.Throwable throwable15 = shardFailure14.cause;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting16 = shardFailure14.routing;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting17 = shardFailure14.routing;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting18 = shardFailure14.routing;
        org.junit.Assert.assertTrue("'" + refreshPolicy7 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy7.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(throwable15);
        org.junit.Assert.assertEquals(throwable15.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable15.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable15.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNull(shardRouting16);
        org.junit.Assert.assertNull(shardRouting17);
        org.junit.Assert.assertNull(shardRouting18);
    }

    @Test
    public void test06379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06379");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        boolean boolean9 = indexMetaData0.isSameUUID("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test06380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06380");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        java.lang.String str4 = versionType0.explainConflictForWrites(1L, (long) (short) -1, false);
        boolean boolean6 = versionType0.validateVersionForReads(0L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [1] is higher or equal to the one provided [-1]" + "'", str4, "current version [1] is higher or equal to the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test06381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06381");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNotNull(version10);
    }

    @Test
    public void test06382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06382");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        int int13 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
    }

    @Test
    public void test06383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06383");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        bulkShardRequest11.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest22.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.index.shard.ShardId shardId27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest19.setShardId(shardId27);
        org.elasticsearch.common.unit.TimeValue timeValue29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest19.timeout(timeValue29);
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = null;
        bulkShardRequest30.remoteAddress(transportAddress31);
        org.elasticsearch.index.shard.ShardId shardId33 = bulkShardRequest30.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions34 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions35 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.tasks.TaskId taskId36 = bulkShardRequest30.getParentTask();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest11.setRefreshPolicy(refreshPolicy37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest11.index("index.blocks.read");
        java.lang.Class<?> wildcardClass41 = bulkShardRequest40.getClass();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(shardId33);
        org.junit.Assert.assertNotNull(indicesOptions34);
        org.junit.Assert.assertNotNull(indicesOptions35);
        org.junit.Assert.assertNotNull(taskId36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test06384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06384");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.setRoutingNumShards((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.primaryTerm((int) (byte) 2, (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06385");
        java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strMap0 = org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.customPrototypes = strMap0;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder6.mapping("index.blocks.write");
        int int11 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder6.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder17.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte36 = state35.id();
        byte byte37 = state35.id();
        byte byte38 = state35.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder34.state(state35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long47 = indexMetaData46.getCreationDate();
        long long48 = indexMetaData46.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData46.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder43.state(state49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder39.state(state49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder39.setRoutingNumShards((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long56 = indexMetaData55.getCreationDate();
        org.apache.lucene.util.Version version57 = indexMetaData55.getMinimumCompatibleVersion();
        long long58 = indexMetaData55.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap59 = indexMetaData55.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters60 = indexMetaData55.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap61 = indexMetaData55.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder63.removeAlias("index.uuid");
        java.lang.String[] strArray78 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder65.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, java.lang.Cloneable> strSetImmutableOpenIntMapTuple82 = org.elasticsearch.common.collect.Tuple.tuple(strSetImmutableOpenIntMap61, (java.lang.Cloneable) strSet79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder39.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder27.putActiveAllocationIds(100, (java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder18.putActiveAllocationIds(10, (java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.common.collect.Tuple<java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom>, java.lang.Cloneable> strMapTuple86 = new org.elasticsearch.common.collect.Tuple<java.util.Map<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom>, java.lang.Cloneable>(strMap0, (java.lang.Cloneable) strSet79);
// flaky:         org.junit.Assert.assertNull(strMap0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte36 + "' != '" + (byte) 0 + "'", byte36 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 0 + "'", byte37 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNull(version57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap59);
        org.junit.Assert.assertNull(discoveryNodeFilters60);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMapTuple82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test06386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06386");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.version((long) '#');
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06387");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet10 = indexMetaData0.activeAllocationIds((int) (short) 0);
        int int11 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap15 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData17.activeAllocationIds((int) (short) 1);
        int int23 = indexMetaData17.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData17.mapping("index.data_path");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData17);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData17.mappingOrDefault("current version [100] is higher than the one provided [3]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getCreationDate();
        org.apache.lucene.util.Version version31 = indexMetaData29.getMinimumCompatibleVersion();
        boolean boolean33 = indexMetaData29.isSameUUID("state-");
        int int34 = indexMetaData29.getNumberOfReplicas();
        int int35 = indexMetaData29.getRoutingFactor();
        long long36 = indexMetaData29.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff37 = indexMetaData17.diff(indexMetaData29);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(version31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff37);
    }

    @Test
    public void test06388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06388");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setRefreshPolicy("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.shadow_replicas");
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest18.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException22 = bulkShardRequest18.validate();
        java.lang.String str23 = bulkShardRequest18.index();
        org.elasticsearch.index.shard.ShardId shardId24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest18.setShardId(shardId24);
        org.elasticsearch.common.unit.TimeValue timeValue26 = bulkShardRequest25.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest15.timeout(timeValue26);
        long long28 = bulkShardRequest15.primaryTerm();
        long long29 = bulkShardRequest15.primaryTerm();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest15.timeout("current version [10] is different than the one provided [100]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [10] is different than the one provided [100]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertNotNull(actionRequestValidationException22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test06389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06389");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "", throwable2, "hi!");
        java.lang.String str5 = shardFailure4.reason;
        java.lang.String str6 = shardFailure4.indexUUID;
        java.lang.Throwable throwable7 = shardFailure4.cause;
        java.lang.String str8 = shardFailure4.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting9 = shardFailure4.routing;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(throwable7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(shardRouting9);
    }

    @Test
    public void test06390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06390");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [52] is different than the one provided [1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [52] is different than the one provided [1]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06391");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.numberOfShards((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test06392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06392");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.uuid");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping(mappingMetaData4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test06393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06393");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        boolean boolean12 = indexMetaData7.isSameUUID("index.");
        org.elasticsearch.Version version13 = indexMetaData7.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData7.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder6.settings(settings14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putCustom("", custom18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder16.removeAllAliases();
        int int21 = builder20.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test06394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06394");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.uuid", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.setRoutingNumShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("current version [32] is different than the one provided [97]");
        java.lang.String str13 = builder10.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder10.putMapping("state-", "index.number_of_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [32] is different than the one provided [97]" + "'", str13, "current version [32] is different than the one provided [97]");
    }

    @Test
    public void test06395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06395");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        java.lang.String str6 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock7 = clusterBlockTuple2.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock8 = clusterBlockTuple2.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple10 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock8, (java.lang.Comparable<java.lang.String>) "current version [0] is higher or equal to the one provided [100]");
        java.lang.String str11 = clusterBlockTuple10.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock12 = clusterBlockTuple10.v1();
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str6, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(clusterBlock7);
        org.junit.Assert.assertNotNull(clusterBlock8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]" + "'", str11, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [0] is higher or equal to the one provided [100]]");
        org.junit.Assert.assertNotNull(clusterBlock12);
    }

    @Test
    public void test06396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mapping("");
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap13 = indexMetaData0.getAliases();
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.readDiffFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
    }

    @Test
    public void test06397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06397");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        bulkShardRequest0.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest0.index("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest10);
    }

    @Test
    public void test06398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06398");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.setRefreshPolicy(refreshPolicy4);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
    }

    @Test
    public void test06399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06399");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest15.setShardId(shardId21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest15.index("active_allocations");
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = bulkShardRequest24.remoteAddress();
        long long26 = bulkShardRequest24.primaryTerm();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest24.setRefreshPolicy("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown value for refresh: [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=null]].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNull(transportAddress25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test06400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06400");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest15.getRefreshPolicy();
        long long17 = bulkShardRequest15.primaryTerm();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = bulkShardRequest15.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test06401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06401");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getCreationDate();
        long long16 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("index.uuid");
        java.lang.String[] strArray36 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder23.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder18.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet37);
        int int41 = builder18.numberOfReplicas();
        long long42 = builder18.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long45 = indexMetaData44.getCreationDate();
        org.apache.lucene.util.Version version46 = indexMetaData44.getMinimumCompatibleVersion();
        long long47 = indexMetaData44.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap48 = indexMetaData44.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData44.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap50 = indexMetaData44.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData44.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData44.excludeFilters();
        java.util.Set<java.lang.String> strSet54 = indexMetaData44.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder18.putActiveAllocationIds((int) ' ', strSet54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder6.putActiveAllocationIds((int) (byte) 1, strSet54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom59 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder6.putCustom("current version [3] is higher or equal to the one provided [-1]", custom59);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder6.putAlias(aliasMetaData61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(version46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test06402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06402");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("primary_terms");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test06403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06403");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData8.requireFilters();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData8.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData8.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
    }

    @Test
    public void test06404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06404");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        int int10 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexMetaData0.readFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test06405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06405");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [0] is higher or equal to the one provided [97]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [0] is higher or equal to the one provided [97]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06406");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        int int3 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        long long7 = indexMetaData5.getVersion();
        int int8 = indexMetaData5.getNumberOfReplicas();
        long long9 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData5.getState();
        int int12 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData5.getInitialRecoveryFilters();
        int int14 = indexMetaData5.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test06407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06407");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("");
        int int6 = builder5.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.settings(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putCustom("index.uuid", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder12.setRoutingNumShards((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.index("current version [32] is different than the one provided [97]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.setRoutingNumShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getCreationDate();
        long long30 = indexMetaData28.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData28.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder25.state(state31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder23.state(state31);
        byte byte34 = state31.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder5.state(state31);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = builder35.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test06408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06408");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest29.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest33.timeout(timeValue34);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest36 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest33);
        boolean boolean37 = indexMetaData0.equals((java.lang.Object) bulkShardRequest33);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
    }

    @Test
    public void test06409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06409");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        long long4 = versionType0.updateVersion((long) (byte) 1, (long) 0);
        boolean boolean6 = versionType0.validateVersionForReads((long) (short) -1);
        byte byte7 = versionType0.getValue();
        java.lang.String str10 = versionType0.explainConflictForReads(100L, (long) '#');
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 2 + "'", byte7 == (byte) 2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [100] is different than the one provided [35]" + "'", str10, "current version [100] is different than the one provided [35]");
    }

    @Test
    public void test06410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06410");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        int int8 = indexMetaData0.getTotalNumberOfShards();
        boolean boolean10 = indexMetaData0.isSameUUID("current version [52] is higher or equal to the one provided [100]");
        long long11 = indexMetaData0.getVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.readDiffFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test06411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06411");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder6.mapping("");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder6.putAlias(builder11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test06412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06412");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        java.lang.String str5 = versionType1.explainConflictForWrites((long) (short) -1, (long) (byte) 100, false);
        boolean boolean7 = versionType1.validateVersionForReads((long) (byte) 1);
        java.lang.String str10 = versionType1.explainConflictForReads((long) 1, (long) 35);
        byte byte11 = versionType1.getValue();
        org.elasticsearch.index.VersionType versionType12 = versionType1.versionTypeForReplicationAndRecovery();
        java.lang.String str15 = versionType1.explainConflictForReads((long) 2, (long) (byte) 0);
        java.lang.String str19 = versionType1.explainConflictForWrites((long) 3, (long) (byte) 0, false);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [-1] is different than the one provided [100]" + "'", str5, "current version [-1] is different than the one provided [100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [1] is different than the one provided [35]" + "'", str10, "current version [1] is different than the one provided [35]");
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [2] is different than the one provided [0]" + "'", str15, "current version [2] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "current version [3] is different than the one provided [0]" + "'", str19, "current version [3] is different than the one provided [0]");
    }

    @Test
    public void test06413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06413");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str5 = versionType0.explainConflictForWrites((long) 'a', 32L, true);
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType6.isVersionConflictForWrites((long) ' ', (long) (byte) 3, true);
        byte byte11 = versionType6.getValue();
        java.lang.String str14 = versionType6.explainConflictForReads(52L, (long) 52);
        long long17 = versionType6.updateVersion((long) (byte) 1, (long) (short) -1);
        boolean boolean21 = versionType6.isVersionConflictForWrites(0L, (-1L), false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [97] is higher than the one provided [32]" + "'", str5, "current version [97] is higher than the one provided [32]");
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 2 + "'", byte11 == (byte) 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [52] is different than the one provided [52]" + "'", str14, "current version [52] is different than the one provided [52]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test06414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06414");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = builder8.mapping("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long12 = indexMetaData11.getCreationDate();
        long long13 = indexMetaData11.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData11.getState();
        boolean boolean16 = indexMetaData11.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData11.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData11.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte27 = state26.id();
        byte byte28 = state26.id();
        byte byte29 = state26.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long38 = indexMetaData37.getCreationDate();
        long long39 = indexMetaData37.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder34.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder30.state(state40);
        byte byte43 = state40.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder19.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder8.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.numberOfReplicas(0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder47.putMapping("current version [1] is higher or equal to the one provided [35]", "current version [0] is different than the one provided [100]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte28 + "' != '" + (byte) 0 + "'", byte28 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 0 + "'", byte29 == (byte) 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test06415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06415");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean5 = versionType1.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType6 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType7 = versionType6.versionTypeForReplicationAndRecovery();
        boolean boolean9 = versionType7.validateVersionForReads(1L);
        org.elasticsearch.index.VersionType versionType10 = versionType7.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType11 = versionType7.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType12 = versionType11.versionTypeForReplicationAndRecovery();
        boolean boolean15 = versionType11.isVersionConflictForReads((long) (byte) -1, (long) 52);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType16 = org.elasticsearch.index.VersionType.fromString("current version [0] is higher or equal to the one provided [97]", versionType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [0] is higher or equal to the one provided [97]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(versionType10);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06416");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("state-");
        int int8 = indexMetaData5.getRoutingNumShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        int int13 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test06417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.equals((java.lang.Object) (-1L));
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest7.remoteAddress(transportAddress8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest7.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = bulkShardRequest14.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.index.shard.ShardId shardId19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest11.setShardId(shardId19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest25 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest22);
        org.elasticsearch.tasks.TaskId taskId26 = bulkShardRequest22.getParentTask();
        bulkShardRequest20.setParentTask(taskId26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest20.index("indices:data/write/bulk[s]");
        boolean boolean30 = indexMetaData0.equals((java.lang.Object) bulkShardRequest20);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        int int33 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = indexMetaData0.readFrom(streamInput34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel17 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel17.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId26);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test06418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06418");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putCustom("state-", custom5);
        int int7 = builder1.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.version((-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder1.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.putAlias(aliasMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06419");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.numberOfReplicas(0);
        int int10 = builder9.getRoutingNumShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test06420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        java.lang.String str15 = indexMetaData9.getIndexUUID();
        org.elasticsearch.Version version16 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData9.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData9.mapping("active_allocations");
        long long24 = indexMetaData9.primaryTerm(0);
        int int25 = indexMetaData9.getRoutingNumShards();
        int int26 = indexMetaData9.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test06421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06421");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.timeout(timeValue14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest15.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest15.setShardId(shardId21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest15.index("active_allocations");
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = null;
        bulkShardRequest26.remoteAddress(transportAddress27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest26.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest30.timeout(timeValue31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str34 = bulkShardRequest33.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy35 = bulkShardRequest33.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel36 = bulkShardRequest33.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest30.consistencyLevel(writeConsistencyLevel36);
        org.elasticsearch.common.unit.TimeValue timeValue38 = bulkShardRequest37.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest37.index("indices:data/write/bulk[s]");
        org.elasticsearch.index.shard.ShardId shardId41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest37.setShardId(shardId41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        boolean boolean44 = bulkShardRequest43.getShouldPersistResult();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException46 = bulkShardRequest43.validate();
        org.elasticsearch.common.transport.TransportAddress transportAddress47 = bulkShardRequest43.remoteAddress();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest37.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest50.consistencyLevel(writeConsistencyLevel51);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNull(transportAddress25);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + refreshPolicy35 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy35.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel36 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel36.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(timeValue38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequestValidationException46);
        org.junit.Assert.assertNull(transportAddress47);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
    }

    @Test
    public void test06422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06422");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.blocks.read");
        boolean boolean6 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        long long8 = indexMetaData0.primaryTerm(0);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("");
        java.lang.String str12 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
    }

    @Test
    public void test06423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06423");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        boolean boolean16 = indexMetaData12.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.apache.lucene.util.Version version18 = indexMetaData12.getMinimumCompatibleVersion();
        java.lang.String str19 = indexMetaData12.getIndexUUID();
        boolean boolean20 = indexMetaData0.equals((java.lang.Object) str19);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException27 = bulkShardRequest22.validate();
        org.elasticsearch.common.unit.TimeValue timeValue28 = bulkShardRequest22.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = null;
        bulkShardRequest22.remoteAddress(transportAddress29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest31.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str39 = bulkShardRequest38.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy40 = bulkShardRequest38.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress44 = null;
        bulkShardRequest43.remoteAddress(transportAddress44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest43.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest47.timeout(timeValue48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str51 = bulkShardRequest50.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy52 = bulkShardRequest50.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel53 = bulkShardRequest50.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest47.consistencyLevel(writeConsistencyLevel53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest22.consistencyLevel(writeConsistencyLevel53);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str58 = bulkShardRequest57.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy59 = bulkShardRequest57.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel60 = bulkShardRequest57.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest22.consistencyLevel(writeConsistencyLevel60);
        boolean boolean62 = bulkShardRequest61.getShouldPersistResult();
        org.elasticsearch.common.xcontent.ToXContent.Params params63 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress65 = null;
        bulkShardRequest64.remoteAddress(transportAddress65);
        org.elasticsearch.action.support.IndicesOptions indicesOptions67 = bulkShardRequest64.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException68 = bulkShardRequest64.validate();
        java.lang.String str69 = bulkShardRequest64.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress70 = bulkShardRequest64.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException71 = bulkShardRequest64.validate();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException> paramsTuple72 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.IllegalArgumentException>(params63, (java.lang.IllegalArgumentException) actionRequestValidationException71);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params> transportRequestTuple73 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, org.elasticsearch.common.xcontent.ToXContent.Params>((org.elasticsearch.transport.TransportRequest) bulkShardRequest61, params63);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder21, params63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(version18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "_na_" + "'", str19, "_na_");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(actionRequestValidationException27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + refreshPolicy40 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy40.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel41 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel41.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + refreshPolicy52 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy52.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel53 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel53.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + refreshPolicy59 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy59.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel60 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel60.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(params63);
        org.junit.Assert.assertNotNull(indicesOptions67);
        org.junit.Assert.assertNotNull(actionRequestValidationException68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(transportAddress70);
        org.junit.Assert.assertNotNull(actionRequestValidationException71);
    }

    @Test
    public void test06424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap18 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        boolean boolean23 = indexMetaData19.isSameUUID("state-");
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest29.remoteAddress(transportAddress30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest29.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest33.timeout(timeValue34);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest36 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest33);
        boolean boolean37 = indexMetaData0.equals((java.lang.Object) bulkShardRequest33);
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = bulkShardRequest33.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest33.index("current version [0] is higher or equal to the one provided [35]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest33.index("");
        bulkShardRequest42.primaryTerm(32L);
        long long45 = bulkShardRequest42.primaryTerm();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(transportAddress38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
    }

    @Test
    public void test06425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06425");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest1.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest1.indicesOptions();
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest1.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest11 = new org.elasticsearch.action.bulk.BulkItemRequest((int) 'a', (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        long long12 = bulkShardRequest1.primaryTerm();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertNull(actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test06426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06426");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        org.apache.lucene.util.Version version6 = indexMetaData4.getMinimumCompatibleVersion();
        long long7 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.Version version10 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData12.excludeFilters();
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.Version version16 = indexMetaData12.getCreationVersion();
        long long17 = indexMetaData12.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        org.apache.lucene.util.Version version21 = indexMetaData19.getMinimumCompatibleVersion();
        long long22 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap23 = indexMetaData19.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData19.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData19.includeFilters();
        long long26 = indexMetaData19.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap27 = indexMetaData19.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        boolean boolean29 = indexMetaData12.equals((java.lang.Object) builder28);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06427");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest9.indicesOptions();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest9.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(indicesOptions10);
    }

    @Test
    public void test06428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06428");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType5 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str8 = versionType5.explainConflictForReads(32L, 11L);
        boolean boolean10 = versionType5.validateVersionForWrites((long) 52);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [32] is different than the one provided [11]" + "'", str8, "current version [32] is different than the one provided [11]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06429");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str15 = bulkShardRequest14.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy16 = bulkShardRequest14.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        bulkShardRequest14.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue20 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest6.timeout(timeValue20);
        org.elasticsearch.index.shard.ShardId shardId23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.setShardId(shardId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest25.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest25.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str33 = bulkShardRequest32.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy34 = bulkShardRequest32.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest32.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions41 = bulkShardRequest38.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest38.validate();
        java.lang.String str43 = bulkShardRequest38.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest24.index("state-");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException49 = bulkShardRequest24.validate();
        org.elasticsearch.common.transport.TransportAddress transportAddress50 = null;
        bulkShardRequest24.remoteAddress(transportAddress50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long53 = indexMetaData52.getCreationDate();
        org.apache.lucene.util.Version version54 = indexMetaData52.getMinimumCompatibleVersion();
        boolean boolean56 = indexMetaData52.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap57 = indexMetaData52.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters58 = indexMetaData52.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters59 = indexMetaData52.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state60 = indexMetaData52.getState();
        byte byte61 = state60.id();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>> transportRequestTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportRequest, java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>>((org.elasticsearch.transport.TransportRequest) bulkShardRequest24, (java.lang.Enum<org.elasticsearch.cluster.metadata.IndexMetaData.State>) state60);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + refreshPolicy16 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy16.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + refreshPolicy34 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy34.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(timeValue37);
        org.junit.Assert.assertNotNull(indicesOptions41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNull(actionRequestValidationException49);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNull(version54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap57);
        org.junit.Assert.assertNull(discoveryNodeFilters58);
        org.junit.Assert.assertNull(discoveryNodeFilters59);
        org.junit.Assert.assertTrue("'" + state60 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state60.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte61 + "' != '" + (byte) 0 + "'", byte61 == (byte) 0);
    }

    @Test
    public void test06430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06430");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte7 = state6.id();
        byte byte8 = state6.id();
        byte byte9 = state6.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.state(state6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getCreationDate();
        long long19 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder14.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder10.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.setRoutingNumShards((int) (short) -1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder24.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder24.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long30 = indexMetaData29.getCreationDate();
        org.apache.lucene.util.Version version31 = indexMetaData29.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder33.putCustom("state-", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long40 = indexMetaData39.getCreationDate();
        long long41 = indexMetaData39.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state42 = indexMetaData39.getState();
        boolean boolean44 = indexMetaData39.isSameUUID("index.");
        org.elasticsearch.Version version45 = indexMetaData39.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings46 = indexMetaData39.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder38.settings(settings46);
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings46);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        boolean boolean50 = indexMetaData29.equals((java.lang.Object) settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder24.settings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = builder24.build();
        long long53 = indexMetaData52.getVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser54 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = indexMetaData52.fromXContent(xContentParser54, parseFieldMatcher55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(version31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state42.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
    }

    @Test
    public void test06431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06431");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest0.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions9 = bulkShardRequest0.indicesOptions();
        bulkShardRequest0.primaryTerm(10L);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(indicesOptions9);
    }

    @Test
    public void test06432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06432");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable5 = clusterBlockTuple2.v2();
        java.lang.String str6 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        org.apache.lucene.util.Version version9 = indexMetaData7.getMinimumCompatibleVersion();
        boolean boolean11 = indexMetaData7.isSameUUID("index.blocks.read");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData7.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData7.mappingOrDefault("primary_terms");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock16, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean20 = clusterBlockTuple18.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.support.IndicesOptions indicesOptions24 = bulkShardRequest21.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException25 = bulkShardRequest21.validate();
        java.lang.String str26 = bulkShardRequest21.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel27 = bulkShardRequest21.consistencyLevel();
        boolean boolean28 = clusterBlockTuple18.equals((java.lang.Object) writeConsistencyLevel27);
        boolean boolean29 = indexMetaData7.equals((java.lang.Object) clusterBlockTuple18);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap31 = indexMetaData7.getAliases();
        java.lang.String str32 = indexMetaData7.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getCreationDate();
        org.apache.lucene.util.Version version35 = indexMetaData33.getMinimumCompatibleVersion();
        long long36 = indexMetaData33.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap37 = indexMetaData33.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData33.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap39 = indexMetaData33.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData33.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap41 = indexMetaData33.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData33);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData7.diff(indexMetaData33);
        boolean boolean44 = clusterBlockTuple2.equals((java.lang.Object) indexMetaData33);
        boolean boolean46 = indexMetaData33.isSameUUID("current version [32] is different than the one provided [100]");
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + strComparable5 + "' != '" + "index.version.created" + "'", strComparable5, "index.version.created");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str6, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(clusterBlock16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(indicesOptions24);
        org.junit.Assert.assertNotNull(actionRequestValidationException25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel27 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel27.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test06433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06433");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        long long11 = indexMetaData0.getCreationDate();
        java.lang.String str12 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData0.mapping("index.version.upgraded");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNull(mappingMetaData14);
    }

    @Test
    public void test06434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06434");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy3 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest6 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest1.shardId();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest1.getRefreshPolicy();
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest1.shardId();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + refreshPolicy3 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy3.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNull(shardId9);
    }

    @Test
    public void test06435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06435");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        org.elasticsearch.common.xcontent.XContentParser xContentParser11 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexMetaData8.fromXContent(xContentParser11, parseFieldMatcher12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06436");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.");
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(100);
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.creation_date");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mapping("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData0.mappingOrDefault("index.blocks.read");
        boolean boolean17 = indexMetaData0.isSameUUID("current version [10] is different than the one provided [100]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06437");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.version.minimum_compatible");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.version.minimum_compatible]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06438");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long36 = indexMetaData35.getCreationDate();
        long long37 = indexMetaData35.getVersion();
        long long38 = indexMetaData35.getVersion();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = null;
        bulkShardRequest39.remoteAddress(transportAddress40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest39.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue44 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest43.timeout(timeValue44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str47 = bulkShardRequest46.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy48 = bulkShardRequest46.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel49 = bulkShardRequest46.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest43.consistencyLevel(writeConsistencyLevel49);
        org.elasticsearch.index.shard.ShardId shardId51 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest43.setShardId(shardId51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest43.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress58 = null;
        bulkShardRequest57.remoteAddress(transportAddress58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest57.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue62 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest61.timeout(timeValue62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str65 = bulkShardRequest64.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy66 = bulkShardRequest64.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel67 = bulkShardRequest64.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest61.consistencyLevel(writeConsistencyLevel67);
        org.elasticsearch.index.shard.ShardId shardId69 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest61.setShardId(shardId69);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str73 = bulkShardRequest72.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy74 = bulkShardRequest72.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest75 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest72);
        org.elasticsearch.tasks.TaskId taskId76 = bulkShardRequest72.getParentTask();
        bulkShardRequest70.setParentTask(taskId76);
        bulkShardRequest54.setParentTask(taskId76);
        boolean boolean79 = indexMetaData35.equals((java.lang.Object) taskId76);
        bulkShardRequest34.setParentTask(taskId76);
        org.elasticsearch.index.shard.ShardId shardId81 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = bulkShardRequest34.setShardId(shardId81);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy83 = bulkShardRequest82.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str85 = bulkShardRequest84.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress86 = bulkShardRequest84.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy87 = bulkShardRequest84.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest89 = bulkShardRequest84.index("current version [0] is different than the one provided [100]");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel90 = bulkShardRequest84.consistencyLevel();
        org.elasticsearch.index.shard.ShardId shardId91 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest92 = bulkShardRequest84.setShardId(shardId91);
        org.elasticsearch.common.unit.TimeValue timeValue93 = bulkShardRequest84.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest94 = bulkShardRequest82.timeout(timeValue93);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + refreshPolicy48 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy48.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel49 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel49.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + refreshPolicy66 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy66.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel67 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel67.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + refreshPolicy74 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy74.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest82);
        org.junit.Assert.assertTrue("'" + refreshPolicy83 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy83.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(transportAddress86);
        org.junit.Assert.assertTrue("'" + refreshPolicy87 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy87.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest89);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel90 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel90.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest92);
        org.junit.Assert.assertNotNull(timeValue93);
        org.junit.Assert.assertNotNull(bulkShardRequest94);
    }

    @Test
    public void test06439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06439");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (short) 10, (long) 'a');
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType5 = versionType4.versionTypeForReplicationAndRecovery();
        long long8 = versionType4.updateVersion((long) (short) 0, (long) (short) 100);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
    }

    @Test
    public void test06440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06440");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("index.blocks.metadata");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest15.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException24 = bulkShardRequest20.validate();
        bulkShardRequest20.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy28 = bulkShardRequest20.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest15.setRefreshPolicy(refreshPolicy28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest14.setRefreshPolicy(refreshPolicy28);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest14.consistencyLevel();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(actionRequestValidationException24);
        org.junit.Assert.assertTrue("'" + refreshPolicy28 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy28.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test06441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06441");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("_na_");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest22.setShardId(shardId25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.index.shard.ShardId shardId30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest29.setShardId(shardId30);
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest31.remoteAddress(transportAddress32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest31.index("index.number_of_shards");
        boolean boolean36 = bulkShardRequest35.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId37 = bulkShardRequest35.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException38 = bulkShardRequest35.validate();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(taskId37);
        org.junit.Assert.assertNull(actionRequestValidationException38);
    }

    @Test
    public void test06442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06442");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.Version version12 = indexMetaData9.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.requireFilters();
        boolean boolean15 = indexMetaData9.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        long long18 = indexMetaData16.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData16.activeAllocationIds((int) (short) 1);
        java.lang.String str22 = indexMetaData16.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData9.diff(indexMetaData16);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters25 = indexMetaData9.requireFilters();
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData9.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long28 = indexMetaData27.getCreationDate();
        org.apache.lucene.util.Version version29 = indexMetaData27.getMinimumCompatibleVersion();
        org.elasticsearch.Version version30 = indexMetaData27.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters31 = indexMetaData27.requireFilters();
        boolean boolean33 = indexMetaData27.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        long long36 = indexMetaData34.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData34.getState();
        java.util.Set<java.lang.String> strSet39 = null; // flaky: indexMetaData34.activeAllocationIds((int) (short) 1);
        java.lang.String str40 = indexMetaData34.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData27.diff(indexMetaData34);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap42 = indexMetaData27.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap43 = indexMetaData27.getActiveAllocationIds();
        org.elasticsearch.Version version44 = indexMetaData27.getCreationVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff45 = indexMetaData9.diff(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = indexMetaData27.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertNull(discoveryNodeFilters25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNull(discoveryNodeFilters31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "_na_" + "'", str40, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap43);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(indexMetaDataDiff45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test06443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06443");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest5.setShardId(shardId13);
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest5.timeout(timeValue15);
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest16.indicesOptions();
        bulkShardRequest16.setParentTask("state-", 3L);
        org.elasticsearch.tasks.TaskId taskId21 = bulkShardRequest16.getParentTask();
        org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, org.elasticsearch.tasks.TaskId> strComparableTuple22 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Comparable<java.lang.String>) "current version [0] is different than the one provided [52]", taskId21);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(taskId21);
        org.junit.Assert.assertNotNull(strComparableTuple22);
    }

    @Test
    public void test06444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06444");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfReplicas((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate(0L);
        java.lang.String str11 = builder8.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.putMapping(mappingMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.creation_date" + "'", str11, "index.creation_date");
    }

    @Test
    public void test06445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06445");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        bulkShardRequest11.setParentTask("index.version.minimum_compatible", (long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest15.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str23 = bulkShardRequest22.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy24 = bulkShardRequest22.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest22.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.common.unit.TimeValue timeValue27 = bulkShardRequest26.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = null;
        bulkShardRequest28.remoteAddress(transportAddress29);
        org.elasticsearch.action.support.IndicesOptions indicesOptions31 = bulkShardRequest28.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest28.validate();
        java.lang.String str33 = bulkShardRequest28.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest35.index("index.number_of_replicas");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest38.remoteAddress(transportAddress39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest38.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue43 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest42.timeout(timeValue43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str46 = bulkShardRequest45.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy47 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest45.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest42.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = null;
        bulkShardRequest50.remoteAddress(transportAddress51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest50.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue55 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.timeout(timeValue55);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str58 = bulkShardRequest57.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy59 = bulkShardRequest57.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel60 = bulkShardRequest57.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest54.consistencyLevel(writeConsistencyLevel60);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest42.consistencyLevel(writeConsistencyLevel60);
        org.elasticsearch.index.shard.ShardId shardId63 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest62.setShardId(shardId63);
        org.elasticsearch.tasks.TaskId taskId65 = bulkShardRequest64.getParentTask();
        bulkShardRequest37.setParentTask(taskId65);
        bulkShardRequest11.setParentTask(taskId65);
        bulkShardRequest11.primaryTerm((long) (short) 10);
        org.elasticsearch.common.io.stream.StreamInput streamInput70 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest11.readFrom(streamInput70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + refreshPolicy24 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy24.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(timeValue27);
        org.junit.Assert.assertNotNull(indicesOptions31);
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel34 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel34.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + refreshPolicy47 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy47.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + refreshPolicy59 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy59.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel60 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel60.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(taskId65);
    }

    @Test
    public void test06446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        int int7 = indexMetaData0.getRoutingFactor();
        int int8 = indexMetaData0.getNumberOfReplicas();
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("index.number_of_replicas");
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version15 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertNotNull(version15);
    }

    @Test
    public void test06447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06447");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.creation_date_string]");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.primaryTerm((int) (byte) 10, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06448");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        int int6 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(version7);
    }

    @Test
    public void test06449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06449");
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray0 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState> indexShardStateSet1 = new java.util.LinkedHashSet<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, indexShardStateArray0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long4 = indexMetaData3.getCreationDate();
        org.apache.lucene.util.Version version5 = indexMetaData3.getMinimumCompatibleVersion();
        boolean boolean7 = indexMetaData3.isSameUUID("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData3);
        org.apache.lucene.util.Version version9 = indexMetaData3.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData3.activeAllocationIds((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long13 = indexMetaData12.getCreationDate();
        org.apache.lucene.util.Version version14 = indexMetaData12.getMinimumCompatibleVersion();
        org.elasticsearch.Version version15 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.requireFilters();
        boolean boolean18 = indexMetaData12.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData3.diff(indexMetaData12);
        org.elasticsearch.common.collect.Tuple<java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.common.io.stream.Writeable> indexShardStateSetTuple20 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractSet<org.elasticsearch.index.shard.IndexShardState>) indexShardStateSet1, (org.elasticsearch.common.io.stream.Writeable) indexMetaData12);
        boolean boolean22 = indexMetaData12.isSameUUID("index.version.upgraded");
        boolean boolean24 = indexMetaData12.isSameUUID("index.version.created");
        long long25 = indexMetaData12.getVersion();
        int int26 = indexMetaData12.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexShardStateArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(indexShardStateSetTuple20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test06450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06450");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest4.setShardId(shardId7);
        org.elasticsearch.common.unit.TimeValue timeValue9 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest8.timeout(timeValue9);
        boolean boolean11 = bulkShardRequest8.getShouldPersistResult();
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest8.setShardId(shardId12);
        org.elasticsearch.tasks.TaskId taskId14 = bulkShardRequest13.getParentTask();
        java.lang.Class<?> wildcardClass15 = bulkShardRequest13.getClass();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(taskId14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test06451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long10 = indexMetaData9.getCreationDate();
        org.apache.lucene.util.Version version11 = indexMetaData9.getMinimumCompatibleVersion();
        long long12 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData9.includeFilters();
        java.lang.String str15 = indexMetaData9.getIndexUUID();
        org.elasticsearch.Version version16 = indexMetaData9.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData9.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.apache.lucene.util.Version version21 = indexMetaData0.getMinimumCompatibleVersion();
        int int22 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(version21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test06452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06452");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest6.remoteAddress(transportAddress7);
        org.elasticsearch.action.support.IndicesOptions indicesOptions9 = bulkShardRequest6.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest6.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple15 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException10, builder12);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure17 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "primary_terms", (java.lang.Throwable) actionRequestValidationException10, "index.shared_filesystem");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure19 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "_na_", (java.lang.Throwable) actionRequestValidationException10, "index.uuid");
        java.lang.Throwable throwable20 = shardFailure19.cause;
        java.lang.String str21 = shardFailure19.reason;
        java.lang.String str22 = shardFailure19.reason;
        java.lang.Throwable throwable23 = shardFailure19.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure25 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [32] is different than the one provided [3]", throwable23, "current version [0] is different than the one provided [35]");
        java.lang.String str26 = shardFailure25.reason;
        java.lang.String str27 = shardFailure25.reason;
        org.junit.Assert.assertNotNull(indicesOptions9);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(throwable23);
        org.junit.Assert.assertEquals(throwable23.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable23.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable23.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "current version [32] is different than the one provided [3]" + "'", str26, "current version [32] is different than the one provided [3]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "current version [32] is different than the one provided [3]" + "'", str27, "current version [32] is different than the one provided [3]");
    }

    @Test
    public void test06453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06453");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.putCustom("state-", custom19);
        int int21 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        boolean boolean27 = indexMetaData22.isSameUUID("index.");
        org.elasticsearch.Version version28 = indexMetaData22.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData22.getSettings();
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder15.settings(settings29);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings29);
        org.elasticsearch.common.settings.Settings settings34 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings29);
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder13.settings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.setRoutingNumShards((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = builder38.build();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = builder38.primaryTerm((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
    }

    @Test
    public void test06454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = indexMetaData0.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
    }

    @Test
    public void test06455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06455");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData5.getActiveAllocationIds();
        boolean boolean10 = clusterBlockTuple4.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest11.remoteAddress(transportAddress12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest11.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.timeout(timeValue16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str19 = bulkShardRequest18.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy20 = bulkShardRequest18.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel21 = bulkShardRequest18.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest23.remoteAddress(transportAddress24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest23.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest27.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str31 = bulkShardRequest30.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy32 = bulkShardRequest30.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel33);
        boolean boolean36 = clusterBlockTuple4.equals((java.lang.Object) bulkShardRequest35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.creationDate((long) 35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom42 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder38.putCustom("state-", custom42);
        boolean boolean44 = clusterBlockTuple4.equals((java.lang.Object) custom42);
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + refreshPolicy20 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy20.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel21 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel21.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + refreshPolicy32 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy32.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06456");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap1 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap2 = indexMetaData0.getCustoms();
        int int3 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff7 = indexMetaData0.readDiffFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
    }

    @Test
    public void test06457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06457");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        boolean boolean6 = indexMetaData0.isSameUUID("current version [97] is higher than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long8 = indexMetaData7.getCreationDate();
        long long9 = indexMetaData7.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData7.activeAllocationIds((int) (short) 1);
        java.lang.String str13 = indexMetaData7.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap15 = indexMetaData0.getAliases();
        int int16 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test06458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06458");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest9.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = null;
        bulkShardRequest21.remoteAddress(transportAddress22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest21.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest25.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str29 = bulkShardRequest28.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy30 = bulkShardRequest28.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str36 = bulkShardRequest35.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest35.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = bulkShardRequest35.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest0.index("active_allocations");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = bulkShardRequest41.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + refreshPolicy30 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy30.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel38 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel38.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
    }

    @Test
    public void test06459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06459");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting1 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting3 = null;
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray5 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList6 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList6, indexShardStateArray5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest8.remoteAddress(transportAddress9);
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest8.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest8.validate();
        org.elasticsearch.common.collect.Tuple<java.util.List<org.elasticsearch.index.shard.IndexShardState>, java.lang.IllegalArgumentException> indexShardStateListTuple13 = org.elasticsearch.common.collect.Tuple.tuple((java.util.List<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList6, (java.lang.IllegalArgumentException) actionRequestValidationException12);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure15 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting3, "", (java.lang.Throwable) actionRequestValidationException12, "current version [10] is different than the one provided [100]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure17 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting1, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=indices:data/write/bulk[s]]]", (java.lang.Throwable) actionRequestValidationException12, "current version [-1] is higher than the one provided [-1]");
        java.lang.String str18 = shardFailure17.indexUUID;
        java.lang.Throwable throwable19 = shardFailure17.cause;
        org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, org.elasticsearch.index.shard.IndexShard.ShardFailure> strComparableTuple20 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Comparable<java.lang.String>) "current version [3] is higher or equal to the one provided [35]", shardFailure17);
        org.junit.Assert.assertNotNull(indexShardStateArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
        org.junit.Assert.assertNotNull(indexShardStateListTuple13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "current version [-1] is higher than the one provided [-1]" + "'", str18, "current version [-1] is higher than the one provided [-1]");
        org.junit.Assert.assertNotNull(throwable19);
        org.junit.Assert.assertEquals(throwable19.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable19.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable19.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(strComparableTuple20);
    }

    @Test
    public void test06460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06460");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean4 = clusterBlockTuple2.equals((java.lang.Object) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest5.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.timeout(timeValue10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str13 = bulkShardRequest12.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy14 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest12.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.common.unit.TimeValue timeValue17 = bulkShardRequest16.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.index("index.blocks.metadata");
        boolean boolean20 = clusterBlockTuple2.equals((java.lang.Object) "index.blocks.metadata");
        java.lang.String str21 = clusterBlockTuple2.toString();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock22 = clusterBlockTuple2.v1();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock23 = clusterBlockTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.index("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.index("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.removeAlias("index.uuid");
        java.lang.String[] strArray50 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder37.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray54 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList55 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList55, indexShardStateArray54);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte58 = state57.id();
        byte byte59 = state57.id();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateCollectionTuple60 = org.elasticsearch.common.collect.Tuple.tuple((java.util.AbstractCollection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList55, state57);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN;
        byte byte62 = state61.id();
        org.elasticsearch.common.collect.Tuple<java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.cluster.metadata.IndexMetaData.State> indexShardStateListTuple63 = org.elasticsearch.common.collect.Tuple.tuple(indexShardStateList55, state61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder37.state(state61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder29.state(state61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder29.removeAlias("");
        boolean boolean68 = clusterBlockTuple2.equals((java.lang.Object) "");
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + refreshPolicy14 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy14.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(timeValue17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str21, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(clusterBlock22);
        org.junit.Assert.assertNotNull(clusterBlock23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexShardStateArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte58 + "' != '" + (byte) 0 + "'", byte58 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte59 + "' != '" + (byte) 0 + "'", byte59 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateCollectionTuple60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte62 + "' != '" + (byte) 0 + "'", byte62 == (byte) 0);
        org.junit.Assert.assertNotNull(indexShardStateListTuple63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test06461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06461");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 1);
        int int6 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("index.data_path");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(version10);
    }

    @Test
    public void test06462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06462");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest2.remoteAddress(transportAddress3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel7 = bulkShardRequest2.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest2.remoteAddress(transportAddress8);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest2.validate();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock11 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple13 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock11, (java.lang.Comparable<java.lang.String>) "index.version.created");
        boolean boolean15 = clusterBlockTuple13.equals((java.lang.Object) (byte) 100);
        java.lang.Comparable<java.lang.String> strComparable16 = clusterBlockTuple13.v2();
        boolean boolean18 = clusterBlockTuple13.equals((java.lang.Object) (short) 10);
        java.lang.Comparable<java.lang.String> strComparable19 = clusterBlockTuple13.v2();
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock20 = clusterBlockTuple13.v1();
        java.lang.String str21 = clusterBlockTuple13.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        org.apache.lucene.util.Version version24 = indexMetaData22.getMinimumCompatibleVersion();
        boolean boolean26 = indexMetaData22.isSameUUID("state-");
        org.apache.lucene.util.Version version27 = indexMetaData22.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap28 = indexMetaData22.getAliases();
        boolean boolean29 = clusterBlockTuple13.equals((java.lang.Object) strImmutableOpenMap28);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.ActionRequestValidationException, org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>> actionRequestValidationExceptionTuple30 = org.elasticsearch.common.collect.Tuple.tuple(actionRequestValidationException10, clusterBlockTuple13);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure32 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [0] is different than the one provided [35]", (java.lang.Throwable) actionRequestValidationException10, "current version [10] is different than the one provided [97]");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting33 = shardFailure32.routing;
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel7 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel7.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertNotNull(clusterBlock11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + strComparable16 + "' != '" + "index.version.created" + "'", strComparable16, "index.version.created");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + strComparable19 + "' != '" + "index.version.created" + "'", strComparable19, "index.version.created");
        org.junit.Assert.assertNotNull(clusterBlock20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]" + "'", str21, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(version27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationExceptionTuple30);
        org.junit.Assert.assertNull(shardRouting33);
    }

    @Test
    public void test06463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06463");
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_METADATA_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple2 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.version.created");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple4 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "index.number_of_replicas");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>> clusterBlockTuple6 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.block.ClusterBlock, java.lang.Comparable<java.lang.String>>(clusterBlock0, (java.lang.Comparable<java.lang.String>) "current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        boolean boolean12 = versionType7.isVersionConflictForWrites((long) (short) 10, 10L, true);
        boolean boolean13 = clusterBlockTuple6.equals((java.lang.Object) 10L);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock14 = clusterBlockTuple6.v1();
        java.lang.String str15 = clusterBlockTuple6.toString();
        boolean boolean17 = clusterBlockTuple6.equals((java.lang.Object) "index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = null;
        bulkShardRequest18.remoteAddress(transportAddress19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest18.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest22.timeout(timeValue23);
        bulkShardRequest24.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress28 = null;
        bulkShardRequest27.remoteAddress(transportAddress28);
        org.elasticsearch.action.support.IndicesOptions indicesOptions30 = bulkShardRequest27.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest27.validate();
        org.elasticsearch.common.unit.TimeValue timeValue32 = bulkShardRequest27.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest27.index("index.blocks.write");
        org.elasticsearch.index.shard.ShardId shardId35 = bulkShardRequest34.shardId();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel36 = bulkShardRequest34.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel36);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException38 = bulkShardRequest24.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long40 = indexMetaData39.getCreationDate();
        org.apache.lucene.util.Version version41 = indexMetaData39.getMinimumCompatibleVersion();
        long long42 = indexMetaData39.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap43 = indexMetaData39.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters44 = indexMetaData39.getInitialRecoveryFilters();
        org.elasticsearch.Version version45 = indexMetaData39.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap46 = indexMetaData39.getAliases();
        int int47 = indexMetaData39.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getCreationDate();
        org.apache.lucene.util.Version version50 = indexMetaData48.getMinimumCompatibleVersion();
        long long51 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap52 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData48.includeFilters();
        java.lang.String str54 = indexMetaData48.getIndexUUID();
        org.elasticsearch.Version version55 = indexMetaData48.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData57 = indexMetaData48.mappingOrDefault("index.number_of_shards");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff58 = indexMetaData39.diff(indexMetaData48);
        org.elasticsearch.common.settings.Settings settings59 = indexMetaData48.getSettings();
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings59);
        boolean boolean61 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings59);
        org.elasticsearch.common.settings.Settings settings62 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings59);
        org.elasticsearch.common.settings.Settings settings63 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings62);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.common.settings.Settings> transportMessageTuple64 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.common.settings.Settings>((org.elasticsearch.transport.TransportMessage) bulkShardRequest24, settings62);
        boolean boolean65 = clusterBlockTuple6.equals((java.lang.Object) bulkShardRequest24);
        org.elasticsearch.index.VersionType versionType66 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean70 = versionType66.isVersionConflictForWrites((long) (byte) -1, 10L, false);
        boolean boolean71 = clusterBlockTuple6.equals((java.lang.Object) boolean70);
        org.junit.Assert.assertNotNull(clusterBlock0);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(clusterBlock14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]" + "'", str15, "Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=current version [35] is higher or equal to the one provided [100]]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(indicesOptions30);
        org.junit.Assert.assertNotNull(actionRequestValidationException31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(shardId35);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel36 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel36.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNull(actionRequestValidationException38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNull(version41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap43);
        org.junit.Assert.assertNull(discoveryNodeFilters44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNull(version50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap52);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "_na_" + "'", str54, "_na_");
        org.junit.Assert.assertNotNull(version55);
        org.junit.Assert.assertNull(mappingMetaData57);
        org.junit.Assert.assertNotNull(indexMetaDataDiff58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(settings62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(versionType66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test06464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06464");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.blocks.write");
        java.lang.String str8 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) (short) 10);
        int int11 = builder5.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder5.putCustom("current version [32] is different than the one provided [97]", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long17 = indexMetaData16.getCreationDate();
        org.apache.lucene.util.Version version18 = indexMetaData16.getMinimumCompatibleVersion();
        int int19 = indexMetaData16.getNumberOfShards();
        boolean boolean21 = indexMetaData16.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        java.util.Set<java.lang.String> strSet24 = indexMetaData16.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder14.putActiveAllocationIds((-1), strSet24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = builder27.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder27.index("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        org.apache.lucene.util.Version version36 = indexMetaData34.getMinimumCompatibleVersion();
        long long37 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData34.getInitialRecoveryFilters();
        org.elasticsearch.Version version40 = indexMetaData34.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = builder41.build();
        boolean boolean44 = indexMetaData42.isSameUUID("index.blocks.metadata");
        int int45 = indexMetaData42.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = indexMetaData42.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder33.state(state46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.creationDate(35L);
        int int50 = builder49.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder49.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder52.version(100L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder56.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long62 = indexMetaData61.getCreationDate();
        long long63 = indexMetaData61.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData61.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder60.state(state64);
        byte byte66 = state64.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder54.state(state64);
        byte byte68 = state64.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder14.state(state64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder71.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom75 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder71.putCustom("state-", custom75);
        int int77 = builder71.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData78 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long79 = indexMetaData78.getCreationDate();
        long long80 = indexMetaData78.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData78.getState();
        boolean boolean83 = indexMetaData78.isSameUUID("index.");
        org.elasticsearch.Version version84 = indexMetaData78.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings85 = indexMetaData78.getSettings();
        boolean boolean86 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings85);
        boolean boolean87 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder71.settings(settings85);
        org.elasticsearch.common.settings.Settings settings89 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings85);
        boolean boolean90 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder69.settings(settings89);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder69.putMapping(mappingMetaData92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.blocks.write" + "'", str8, "index.blocks.write");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + byte66 + "' != '" + (byte) 0 + "'", byte66 == (byte) 0);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + byte68 + "' != '" + (byte) 0 + "'", byte68 == (byte) 0);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(version84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(settings89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test06465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.blocks.metadata");
        int int11 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData8.getState();
        int int13 = indexMetaData8.getTotalNumberOfShards();
        int int14 = indexMetaData8.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData8.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData8.includeFilters();
        int int17 = indexMetaData8.getRoutingNumShards();
        org.apache.lucene.util.Version version18 = indexMetaData8.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(version18);
    }

    @Test
    public void test06466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06466");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.index("current version [0] is different than the one provided [35]");
        int int6 = builder3.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test06467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06467");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.index("current version [-1] is higher than the one provided [100]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.index("index.version.created_string");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest16.remoteAddress(transportAddress17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest16.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest20.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str24 = bulkShardRequest23.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy25 = bulkShardRequest23.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = bulkShardRequest23.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest20.consistencyLevel(writeConsistencyLevel26);
        org.elasticsearch.index.shard.ShardId shardId28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest20.setShardId(shardId28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest20.index("index.version.created");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting32 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy37 = bulkShardRequest36.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException38 = bulkShardRequest36.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure40 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting34, "active_allocations", (java.lang.Throwable) actionRequestValidationException38, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure42 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting32, "", (java.lang.Throwable) actionRequestValidationException38, "index.blocks.read_only");
        java.lang.Throwable throwable43 = shardFailure42.cause;
        java.lang.Class<?> wildcardClass44 = shardFailure42.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress46 = null;
        bulkShardRequest45.remoteAddress(transportAddress46);
        org.elasticsearch.action.support.IndicesOptions indicesOptions48 = bulkShardRequest45.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException49 = bulkShardRequest45.validate();
        java.lang.String str50 = bulkShardRequest45.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress51 = bulkShardRequest45.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy52 = bulkShardRequest45.getRefreshPolicy();
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationTuple53 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.GenericDeclaration) wildcardClass44, (java.io.Serializable) refreshPolicy52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest20.setRefreshPolicy(refreshPolicy52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest15.setRefreshPolicy(refreshPolicy52);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + refreshPolicy25 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy25.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel26 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel26.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + refreshPolicy37 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy37.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException38);
        org.junit.Assert.assertNotNull(throwable43);
        org.junit.Assert.assertEquals(throwable43.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable43.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable43.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(indicesOptions48);
        org.junit.Assert.assertNotNull(actionRequestValidationException49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(transportAddress51);
        org.junit.Assert.assertTrue("'" + refreshPolicy52 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy52.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(genericDeclarationTuple53);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
    }

    @Test
    public void test06468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06468");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        byte byte1 = versionType0.getValue();
        boolean boolean5 = versionType0.isVersionConflictForWrites((long) (byte) 1, (long) (short) -1, false);
        long long8 = versionType0.updateVersion((long) 1, 35L);
        boolean boolean11 = versionType0.isVersionConflictForReads(100L, (long) ' ');
        org.elasticsearch.index.VersionType versionType12 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 0 + "'", byte1 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2L + "'", long8 == 2L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(versionType12);
    }

    @Test
    public void test06469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06469");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        java.lang.Object obj10 = null;
        boolean boolean11 = indexMetaData0.equals(obj10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("indices:data/write/bulk[s]");
        boolean boolean14 = indexMetaData0.equals((java.lang.Object) "indices:data/write/bulk[s]");
        org.elasticsearch.Version version15 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(version15);
    }

    @Test
    public void test06470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06470");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest5.setShardId(shardId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str17 = bulkShardRequest16.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy18 = bulkShardRequest16.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest19 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        org.elasticsearch.tasks.TaskId taskId20 = bulkShardRequest16.getParentTask();
        bulkShardRequest14.setParentTask(taskId20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest14.index("indices:data/write/bulk[s]");
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = bulkShardRequest14.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest14.setShardId(shardId25);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest27 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = null;
        bulkShardRequest28.remoteAddress(transportAddress29);
        org.elasticsearch.action.support.IndicesOptions indicesOptions31 = bulkShardRequest28.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest28.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest33.remoteAddress(transportAddress34);
        org.elasticsearch.action.support.IndicesOptions indicesOptions36 = bulkShardRequest33.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException37 = bulkShardRequest33.validate();
        bulkShardRequest33.setParentTask("index.data_path", (long) 0);
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy41 = bulkShardRequest33.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest28.setRefreshPolicy(refreshPolicy41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest26.setRefreshPolicy(refreshPolicy41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest47.remoteAddress(transportAddress48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest47.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest51.timeout(timeValue52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str55 = bulkShardRequest54.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy56 = bulkShardRequest54.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel57 = bulkShardRequest54.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest51.consistencyLevel(writeConsistencyLevel57);
        org.elasticsearch.common.unit.TimeValue timeValue59 = bulkShardRequest58.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress61 = null;
        bulkShardRequest60.remoteAddress(transportAddress61);
        org.elasticsearch.action.support.IndicesOptions indicesOptions63 = bulkShardRequest60.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException64 = bulkShardRequest60.validate();
        java.lang.String str65 = bulkShardRequest60.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel66 = bulkShardRequest60.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest58.consistencyLevel(writeConsistencyLevel66);
        java.lang.String str68 = bulkShardRequest67.index();
        org.elasticsearch.tasks.TaskId taskId69 = bulkShardRequest67.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task70 = bulkShardRequest26.createTask((-1L), "current version [35] is different than the one provided [32]", "index.blocks.read", taskId69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + refreshPolicy18 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy18.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(taskId20);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNull(transportAddress24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(indicesOptions31);
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertNotNull(indicesOptions36);
        org.junit.Assert.assertNotNull(actionRequestValidationException37);
        org.junit.Assert.assertTrue("'" + refreshPolicy41 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy41.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + refreshPolicy56 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy56.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel57 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel57.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNull(timeValue59);
        org.junit.Assert.assertNotNull(indicesOptions63);
        org.junit.Assert.assertNotNull(actionRequestValidationException64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel66 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel66.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "index.creation_date" + "'", str68, "index.creation_date");
        org.junit.Assert.assertNotNull(taskId69);
    }

    @Test
    public void test06471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06471");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.settings.Settings settings4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.settings(settings4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("index.uuid", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("current version [-1] is higher or equal to the one provided [100]");
        java.lang.String str12 = builder9.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.creation_date" + "'", str12, "index.creation_date");
    }

    @Test
    public void test06472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06472");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest1.remoteAddress(transportAddress2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest1.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str9 = bulkShardRequest8.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy10 = bulkShardRequest8.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest12.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.index("indices:data/write/bulk[s]");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest16 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest12.remoteAddress();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = bulkShardRequest12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + refreshPolicy10 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy10.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress17);
    }

    @Test
    public void test06473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06473");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.creation_date");
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("index.blocks.metadata");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.xcontent.XContentParser xContentParser13 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = indexMetaData0.fromXContent(xContentParser13, parseFieldMatcher14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06474");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long5 = indexMetaData4.getCreationDate();
        long long6 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("index.uuid");
        java.lang.String[] strArray26 = new java.lang.String[] { "index.shadow_replicas", "hi!", "index.auto_expand_replicas", "index.number_of_shards", "index.version.created_string", "index.", "index.version.created", "index.uuid", "indices:data/write/bulk[s]", "", "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder13.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder8.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet27);
        int int31 = builder8.numberOfReplicas();
        long long32 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long35 = indexMetaData34.getCreationDate();
        org.apache.lucene.util.Version version36 = indexMetaData34.getMinimumCompatibleVersion();
        long long37 = indexMetaData34.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData34.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap40 = indexMetaData34.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData34.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData34.excludeFilters();
        java.util.Set<java.lang.String> strSet44 = indexMetaData34.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder8.putActiveAllocationIds((int) ' ', strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long49 = indexMetaData48.getCreationDate();
        org.apache.lucene.util.Version version50 = indexMetaData48.getMinimumCompatibleVersion();
        long long51 = indexMetaData48.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap52 = indexMetaData48.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData48.includeFilters();
        java.lang.String str54 = indexMetaData48.getIndexUUID();
        int int55 = indexMetaData48.getRoutingFactor();
        java.util.Set<java.lang.String> strSet57 = null; // flaky: indexMetaData48.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.Version version58 = indexMetaData48.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state59 = indexMetaData48.getState();
        byte byte60 = state59.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder47.state(state59);
        int int62 = builder47.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder47.creationDate((long) (byte) -1);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder64.putAlias(aliasMetaData65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNull(version50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap52);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "_na_" + "'", str54, "_na_");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(version58);
        org.junit.Assert.assertTrue("'" + state59 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state59.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte60 + "' != '" + (byte) 0 + "'", byte60 == (byte) 0);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 32 + "'", int62 == 32);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test06475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06475");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        bulkShardRequest6.primaryTerm(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str10 = bulkShardRequest9.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy11 = bulkShardRequest9.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.setRefreshPolicy(refreshPolicy11);
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest6.remoteAddress(transportAddress13);
        bulkShardRequest6.setParentTask("current version [52] is higher or equal to the one provided [100]", (long) (short) 0);
        bulkShardRequest6.primaryTerm(10L);
        bulkShardRequest6.setParentTask("current version [97] is different than the one provided [-1]", 100L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + refreshPolicy11 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy11.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
    }

    @Test
    public void test06476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06476");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfShards((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.putMapping("index.shadow_replicas", "");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test06477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06477");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.putCustom("state-", custom10);
        int int12 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long14 = indexMetaData13.getCreationDate();
        long long15 = indexMetaData13.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData13.getState();
        boolean boolean18 = indexMetaData13.isSameUUID("index.");
        org.elasticsearch.Version version19 = indexMetaData13.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData13.getSettings();
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder6.settings(settings20);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder4.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder4.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder4.putCustom("current version [35] is different than the one provided [0]", custom30);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test06478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06478");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [32] is different than the one provided [11]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [32] is different than the one provided [11]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06479");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.setParentTask("hi!", (long) (short) 100);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest0.remoteAddress();
        long long5 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str7 = bulkShardRequest6.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy8 = bulkShardRequest6.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest6.index("index.");
        long long11 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy13 = bulkShardRequest12.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.setRefreshPolicy(refreshPolicy13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest0.setRefreshPolicy(refreshPolicy13);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest0.setShardId(shardId16);
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.setShardId(shardId18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = bulkShardRequest17.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + refreshPolicy8 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy8.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy13 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy13.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
    }

    @Test
    public void test06480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06480");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.setRoutingNumShards((int) (byte) 3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder8.index("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.setRoutingNumShards((int) (short) 1);
        java.lang.String str19 = builder16.index();
        int int20 = builder16.numberOfShards();
        long long21 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder23.putCustom("state-", custom27);
        int int29 = builder23.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long31 = indexMetaData30.getCreationDate();
        long long32 = indexMetaData30.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData30.getState();
        boolean boolean35 = indexMetaData30.isSameUUID("index.");
        org.elasticsearch.Version version36 = indexMetaData30.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData30.getSettings();
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings37);
        boolean boolean39 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder23.settings(settings37);
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings37);
        org.elasticsearch.common.settings.Settings settings42 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        boolean boolean43 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder16.settings(settings42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder8.settings(settings42);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.blocks.write" + "'", str19, "index.blocks.write");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test06481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06481");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.state(state7);
        int int9 = builder8.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putCustom("state-", custom16);
        int int18 = builder12.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getCreationDate();
        long long21 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        boolean boolean24 = indexMetaData19.isSameUUID("index.");
        org.elasticsearch.Version version25 = indexMetaData19.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings26 = indexMetaData19.getSettings();
        boolean boolean27 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings26);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder12.settings(settings26);
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings26);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder10.settings(settings26);
        int int33 = builder10.numberOfShards();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNotNull(settings26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test06482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06482");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder3.mapping("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.index("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.apache.lucene.util.Version version12 = indexMetaData10.getMinimumCompatibleVersion();
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.Version version16 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder17.build();
        boolean boolean20 = indexMetaData18.isSameUUID("index.blocks.metadata");
        int int21 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData18.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder9.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder1.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.numberOfReplicas((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder33.removeAllAliases();
        int int35 = builder34.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder34.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder34.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long46 = indexMetaData45.getCreationDate();
        long long47 = indexMetaData45.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData45.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder42.state(state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder49.version((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long54 = indexMetaData53.getCreationDate();
        org.apache.lucene.util.Version version55 = indexMetaData53.getMinimumCompatibleVersion();
        long long56 = indexMetaData53.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap57 = indexMetaData53.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters58 = indexMetaData53.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap59 = indexMetaData53.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap60 = indexMetaData53.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters61 = indexMetaData53.excludeFilters();
        java.util.Set<java.lang.String> strSet63 = indexMetaData53.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder51.putActiveAllocationIds((int) (short) 1, strSet63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder39.putActiveAllocationIds(10, strSet63);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder26.putActiveAllocationIds((int) (short) 100, strSet63);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = builder26.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap57);
        org.junit.Assert.assertNull(discoveryNodeFilters58);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap59);
        org.junit.Assert.assertNotNull(strImmutableOpenMap60);
        org.junit.Assert.assertNull(discoveryNodeFilters61);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test06483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06483");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        bulkShardRequest15.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest15.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest20.remoteAddress(transportAddress21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest20.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest24.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str28 = bulkShardRequest27.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest27.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.index.shard.ShardId shardId32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest24.setShardId(shardId32);
        org.elasticsearch.common.unit.TimeValue timeValue34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest24.timeout(timeValue34);
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str38 = bulkShardRequest37.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy39 = bulkShardRequest37.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest37.index("index.");
        long long42 = bulkShardRequest37.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy44 = bulkShardRequest43.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest37.setRefreshPolicy(refreshPolicy44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest24.setRefreshPolicy(refreshPolicy44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest15.setRefreshPolicy(refreshPolicy44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = null;
        bulkShardRequest48.remoteAddress(transportAddress49);
        org.elasticsearch.action.support.IndicesOptions indicesOptions51 = bulkShardRequest48.indicesOptions();
        bulkShardRequest48.primaryTerm((long) ' ');
        org.elasticsearch.common.unit.TimeValue timeValue54 = bulkShardRequest48.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest47.timeout(timeValue54);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(transportAddress36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + refreshPolicy39 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy39.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + refreshPolicy44 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy44.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(indicesOptions51);
        org.junit.Assert.assertNotNull(timeValue54);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
    }

    @Test
    public void test06484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06484");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        int int3 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index4 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("state-");
        int int8 = indexMetaData5.getRoutingNumShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        int int13 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData0.mappingOrDefault("current version [10] is different than the one provided [100]");
        int int16 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(index4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test06485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06485");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [35] is different than the one provided [0]");
    }

    @Test
    public void test06486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06486");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.write");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.setRoutingNumShards((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.setRoutingNumShards((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putCustom("current version [-1] is higher than the one provided [52]", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfReplicas((int) (byte) 3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder8.putCustom("current version [32] is higher than the one provided [10]", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder14.putCustom("current version [2] is different than the one provided [3]", custom18);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test06487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06487");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest4.remoteAddress(transportAddress5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (byte) 0);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> runtimeExceptionTuple13 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>((java.lang.RuntimeException) actionRequestValidationException8, builder10);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure15 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "index.blocks.read_only", (java.lang.Throwable) actionRequestValidationException8, "index.creation_date_string");
        java.lang.Throwable throwable16 = shardFailure15.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure18 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.shared_filesystem", throwable16, "index.number_of_replicas");
        java.lang.String str19 = shardFailure18.reason;
        java.lang.String str20 = shardFailure18.reason;
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(throwable16);
        org.junit.Assert.assertEquals(throwable16.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable16.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable16.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.shared_filesystem" + "'", str19, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.shared_filesystem" + "'", str20, "index.shared_filesystem");
    }

    @Test
    public void test06488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06488");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        long long5 = indexMetaData0.getCreationDate();
        int int6 = indexMetaData0.getTotalNumberOfShards();
        long long7 = indexMetaData0.getCreationDate();
        int int8 = indexMetaData0.getRoutingNumShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test06489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06489");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest0.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("index.blocks.write");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest7.index("current version [52] is higher or equal to the one provided [100]");
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.setShardId(shardId10);
        bulkShardRequest11.primaryTerm(0L);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
    }

    @Test
    public void test06490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06490");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str8 = bulkShardRequest7.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy9 = bulkShardRequest7.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest4.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest4.index("index.version.created");
        bulkShardRequest15.setParentTask("index.version.created", (long) (byte) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str20 = bulkShardRequest19.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy21 = bulkShardRequest19.getRefreshPolicy();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.index("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.version.created]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str28 = bulkShardRequest27.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy29 = bulkShardRequest27.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest30 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest27);
        bulkShardRequest27.primaryTerm((long) '4');
        org.elasticsearch.common.unit.TimeValue timeValue33 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest27.timeout(timeValue33);
        java.lang.String str35 = bulkShardRequest34.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy36 = bulkShardRequest34.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest25.setRefreshPolicy(refreshPolicy36);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting38 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy43 = bulkShardRequest42.getRefreshPolicy();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException44 = bulkShardRequest42.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure46 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting40, "active_allocations", (java.lang.Throwable) actionRequestValidationException44, "index.creation_date");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure48 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting38, "", (java.lang.Throwable) actionRequestValidationException44, "index.blocks.read_only");
        java.lang.Throwable throwable49 = shardFailure48.cause;
        java.lang.Class<?> wildcardClass50 = shardFailure48.getClass();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress52 = null;
        bulkShardRequest51.remoteAddress(transportAddress52);
        org.elasticsearch.action.support.IndicesOptions indicesOptions54 = bulkShardRequest51.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException55 = bulkShardRequest51.validate();
        java.lang.String str56 = bulkShardRequest51.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress57 = bulkShardRequest51.remoteAddress();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy58 = bulkShardRequest51.getRefreshPolicy();
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationTuple59 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.GenericDeclaration) wildcardClass50, (java.io.Serializable) refreshPolicy58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest37.setRefreshPolicy(refreshPolicy58);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel61 = bulkShardRequest60.consistencyLevel();
        org.elasticsearch.tasks.TaskId taskId62 = bulkShardRequest60.getParentTask();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + refreshPolicy9 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy9.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + refreshPolicy21 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy21.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel22 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel22.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + refreshPolicy29 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy29.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + refreshPolicy36 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy36.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertTrue("'" + refreshPolicy43 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy43.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(actionRequestValidationException44);
        org.junit.Assert.assertNotNull(throwable49);
        org.junit.Assert.assertEquals(throwable49.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable49.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable49.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(indicesOptions54);
        org.junit.Assert.assertNotNull(actionRequestValidationException55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(transportAddress57);
        org.junit.Assert.assertTrue("'" + refreshPolicy58 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy58.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(genericDeclarationTuple59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel61 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel61.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(taskId62);
    }

    @Test
    public void test06491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06491");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.index("index.creation_date");
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest4.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.index("index.blocks.metadata");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest4.consistencyLevel();
        java.lang.String str12 = bulkShardRequest4.index();
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.blocks.metadata" + "'", str12, "index.blocks.metadata");
    }

    @Test
    public void test06492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06492");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder5.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder5.mapping("active_allocations");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test06493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06493");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy2 = bulkShardRequest0.getRefreshPolicy();
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest4.getParentTask();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel7 = bulkShardRequest4.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest8.remoteAddress(transportAddress9);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest8.timeout("Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.number_of_replicas]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [Tuple [v1=9,index metadata (api), blocks METADATA_READ,METADATA_WRITE, v2=index.number_of_replicas]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + refreshPolicy2 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy2.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel7 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel7.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest8);
    }

    @Test
    public void test06494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06494");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        long long3 = indexMetaData0.getVersion();
        int int4 = indexMetaData0.getRoutingNumShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long6 = indexMetaData5.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData5.getMinimumCompatibleVersion();
        boolean boolean9 = indexMetaData5.isSameUUID("index.blocks.read");
        boolean boolean11 = indexMetaData5.isSameUUID("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long23 = indexMetaData22.getCreationDate();
        long long24 = indexMetaData22.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder19.state(state25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder17.state(state25);
        java.lang.String str28 = builder17.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test06495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06495");
        org.elasticsearch.index.shard.IndexShardState[] indexShardStateArray0 = new org.elasticsearch.index.shard.IndexShardState[] {};
        java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState> indexShardStateList1 = new java.util.ArrayList<org.elasticsearch.index.shard.IndexShardState>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList1, indexShardStateArray0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str4 = bulkShardRequest3.index();
        org.elasticsearch.action.support.WriteRequest.RefreshPolicy refreshPolicy5 = bulkShardRequest3.getRefreshPolicy();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest3.index("index.");
        org.elasticsearch.action.support.IndicesOptions indicesOptions8 = bulkShardRequest7.indicesOptions();
        org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>> indexShardStateListTuple9 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>, org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>>((java.util.AbstractList<org.elasticsearch.index.shard.IndexShardState>) indexShardStateList1, (org.elasticsearch.action.support.WriteRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest7);
        boolean boolean10 = bulkShardRequest7.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest7.getParentTask();
        java.lang.Class<?> wildcardClass12 = taskId11.getClass();
        org.junit.Assert.assertNotNull(indexShardStateArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + refreshPolicy5 + "' != '" + org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE + "'", refreshPolicy5.equals(org.elasticsearch.action.support.WriteRequest.RefreshPolicy.NONE));
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(indicesOptions8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06496");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [0] is different than the one provided [-1]");
    }

    @Test
    public void test06497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06497");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.transport.TransportAddress transportAddress1 = null;
        bulkShardRequest0.remoteAddress(transportAddress1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException4 = bulkShardRequest0.validate();
        java.lang.String str5 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest0.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest0.indicesOptions();
        boolean boolean8 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertNotNull(actionRequestValidationException4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
    }

    @Test
    public void test06498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06498");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        java.lang.String str4 = builder1.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test06499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06499");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version2 = indexMetaData0.getMinimumCompatibleVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("state-");
        int int5 = indexMetaData0.getNumberOfReplicas();
        int int6 = indexMetaData0.getRoutingFactor();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds(3);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test06500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06500");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForWrites((long) (byte) 10);
        boolean boolean4 = versionType0.validateVersionForWrites((long) '#');
        org.elasticsearch.index.VersionType versionType5 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType7 = versionType6.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType6.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(versionType7);
    }
}
