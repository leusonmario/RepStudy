/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 14:32:16 GMT 2021
 */

package org.elasticsearch.action.bulk;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.elasticsearch.action.bulk.BulkShardRequest;
import org.elasticsearch.action.bulk.TransportShardBulkAction;
import org.elasticsearch.action.get.MultiGetShardRequest;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.support.ActionFilters;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateHelper;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.action.index.MappingUpdatedAction;
import org.elasticsearch.cluster.action.shard.ShardStateAction;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.indices.IndicesService;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.transport.Transport;
import org.elasticsearch.transport.TransportService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportShardBulkAction_ESTest extends TransportShardBulkAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = null;
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.success();
      assertFalse(boolean0);
      
      boolean boolean1 = transportShardBulkAction_UpdateResult0.success();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BulkShardRequest bulkShardRequest0 = transportShardBulkAction_UpdateResult0.request();
      assertNull(bulkShardRequest0);
      
      boolean boolean2 = transportShardBulkAction_UpdateResult0.failure();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = transportShardBulkAction_UpdateResult0.failure();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.success();
      assertTrue(boolean0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertFalse(updateResponse0.forcedRefresh());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      ScriptService scriptService0 = null;
      ActionFilters actionFilters0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      TransportService transportService0 = null;
      ThreadPool threadPool0 = null;
      UpdateHelper updateHelper0 = new UpdateHelper(settings0, scriptService0, clusterService0);
      assertNotNull(updateHelper0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      TransportShardBulkAction transportShardBulkAction0 = null;
      try {
        transportShardBulkAction0 = new TransportShardBulkAction(settings0, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, mappingUpdatedAction0, updateHelper0, actionFilters0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.success();
      assertTrue(boolean0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.forcedRefresh());
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = null;
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.failure();
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      MultiGetShardRequest multiGetShardRequest0 = new MultiGetShardRequest();
      assertNotNull(multiGetShardRequest0);
      assertEquals(0, multiGetShardRequest0.shardId());
      assertTrue(multiGetShardRequest0.operationThreaded());
      assertNull(multiGetShardRequest0.preference());
      assertNull(multiGetShardRequest0.index());
      assertTrue(multiGetShardRequest0.realtime());
      assertFalse(multiGetShardRequest0.refresh());
      assertFalse(multiGetShardRequest0.getShouldPersistResult());
      assertFalse(multiGetShardRequest0.ignoreErrorsOnGeneratedFields());
      
      UpdateHelper.Operation updateHelper_Operation0 = UpdateHelper.Operation.UPSERT;
      Map<String, Object> map0 = null;
      XContentType xContentType0 = XContentType.YAML;
      UpdateHelper.Result updateHelper_Result0 = new UpdateHelper.Result(multiGetShardRequest0, updateHelper_Operation0, map0, xContentType0);
      assertNotNull(updateHelper_Result0);
      assertEquals(0, multiGetShardRequest0.shardId());
      assertTrue(multiGetShardRequest0.operationThreaded());
      assertNull(multiGetShardRequest0.preference());
      assertNull(multiGetShardRequest0.index());
      assertTrue(multiGetShardRequest0.realtime());
      assertFalse(multiGetShardRequest0.refresh());
      assertFalse(multiGetShardRequest0.getShouldPersistResult());
      assertFalse(multiGetShardRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals(XContentType.YAML, updateHelper_Result0.updateSourceContentType());
      assertEquals(UpdateHelper.Operation.UPSERT, updateHelper_Result0.operation());
      
      UpdateResponse updateResponse0 = null;
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertEquals(0, multiGetShardRequest0.shardId());
      assertTrue(multiGetShardRequest0.operationThreaded());
      assertNull(multiGetShardRequest0.preference());
      assertNull(multiGetShardRequest0.index());
      assertTrue(multiGetShardRequest0.realtime());
      assertFalse(multiGetShardRequest0.refresh());
      assertFalse(multiGetShardRequest0.getShouldPersistResult());
      assertFalse(multiGetShardRequest0.ignoreErrorsOnGeneratedFields());
      assertEquals(XContentType.YAML, updateHelper_Result0.updateSourceContentType());
      assertEquals(UpdateHelper.Operation.UPSERT, updateHelper_Result0.operation());
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
      
      IndexRequest indexRequest0 = transportShardBulkAction_UpdateResult0.request();
      assertNull(indexRequest0);
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.forcedRefresh());
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = null;
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.success();
      assertFalse(boolean0);
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult1 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult1);
      assertFalse(transportShardBulkAction_UpdateResult1.equals((Object)transportShardBulkAction_UpdateResult0));
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult2 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult2);
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult0));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult1));
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult3 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult3);
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult2));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult1));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult0));
      
      BulkShardRequest bulkShardRequest0 = transportShardBulkAction_UpdateResult0.request();
      assertNull(bulkShardRequest0);
      assertNotSame(transportShardBulkAction_UpdateResult0, transportShardBulkAction_UpdateResult3);
      assertNotSame(transportShardBulkAction_UpdateResult0, transportShardBulkAction_UpdateResult2);
      assertNotSame(transportShardBulkAction_UpdateResult0, transportShardBulkAction_UpdateResult1);
      assertFalse(transportShardBulkAction_UpdateResult0.equals((Object)transportShardBulkAction_UpdateResult3));
      assertFalse(transportShardBulkAction_UpdateResult0.equals((Object)transportShardBulkAction_UpdateResult2));
      assertFalse(transportShardBulkAction_UpdateResult0.equals((Object)transportShardBulkAction_UpdateResult1));
      
      boolean boolean1 = transportShardBulkAction_UpdateResult3.failure();
      assertFalse(boolean1);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult2);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult1);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult0);
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult2));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult1));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      int int0 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      Random.setNextRandom(int0);
      System.setCurrentTimeMillis(int0);
      Random.setNextRandom(int0);
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      Transport transport0 = null;
      ThreadPool threadPool0 = null;
      ClusterName clusterName0 = ClusterName.clusterNameFromSettings(settings0);
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(transport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      ScriptService scriptService0 = null;
      UpdateHelper updateHelper0 = new UpdateHelper(settings0, scriptService0, clusterService0);
      assertNotNull(updateHelper0);
      
      ActionFilters actionFilters0 = null;
      IndexNameExpressionResolver indexNameExpressionResolver0 = null;
      TransportShardBulkAction transportShardBulkAction0 = null;
      try {
        transportShardBulkAction0 = new TransportShardBulkAction(settings0, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, mappingUpdatedAction0, updateHelper0, actionFilters0, indexNameExpressionResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.TransportAction", e);
      }
  }
}
