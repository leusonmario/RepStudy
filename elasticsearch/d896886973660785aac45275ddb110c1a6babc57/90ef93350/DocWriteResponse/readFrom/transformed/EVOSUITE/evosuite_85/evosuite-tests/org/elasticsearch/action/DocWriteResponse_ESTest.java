/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 07:53:00 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.sql.SQLException;
import java.sql.SQLRecoverableException;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.Supplier;
import org.apache.lucene.index.DocValuesType;
import org.apache.lucene.index.FieldInfo;
import org.apache.lucene.index.IndexOptions;
import org.apache.lucene.index.SegmentInfos;
import org.apache.lucene.store.BaseDirectoryWrapper;
import org.apache.lucene.store.BufferedChecksumIndexInput;
import org.apache.lucene.store.ChecksumIndexInput;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.IndexInput;
import org.apache.lucene.store.LockFactory;
import org.apache.lucene.store.SimpleFSLockFactory;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Setting;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.ByteArray;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.get.GetField;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.script.ScriptService;
import org.elasticsearch.search.aggregations.bucket.significant.heuristics.MutualInformation;
import org.elasticsearch.search.aggregations.metrics.avg.AvgAggregationBuilder;
import org.elasticsearch.search.aggregations.pipeline.movavg.models.EwmaModel;
import org.elasticsearch.search.aggregations.pipeline.movavg.models.SimpleModel;
import org.elasticsearch.search.aggregations.support.AggregationContext;
import org.elasticsearch.search.internal.InternalSearchHit;
import org.elasticsearch.search.internal.SearchContext;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.elasticsearch.transport.TransportRequestOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_SHARD_ID();
      assertEquals("_shard_id", string0);
      assertNotNull(string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      
      AvgAggregationBuilder avgAggregationBuilder0 = new AvgAggregationBuilder(docWriteResponse_Fields0._TYPE);
      assertNotNull(avgAggregationBuilder0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("avg", avgAggregationBuilder0.getWriteableName());
      assertEquals("_type", avgAggregationBuilder0.getName());
      assertNull(avgAggregationBuilder0.valueType());
      assertNull(avgAggregationBuilder0.field());
      assertNull(avgAggregationBuilder0.format());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) yamlXContent0);
      assertNotNull(xContentBuilder0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=false)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertNull(shardId0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertEquals("_id", string0);
      assertNotNull(string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertNotNull(jsonXContent0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = docWriteResponse_Fields0._TYPE;
      stringArray0[1] = docWriteResponse_Fields0._SHARD_ID;
      stringArray0[2] = docWriteResponse_Fields0._VERSION;
      stringArray0[3] = docWriteResponse_Fields0._SHARD_ID;
      stringArray0[4] = string0;
      boolean boolean0 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(5, stringArray0.length);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_ID();
      assertEquals("_id", string0);
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      int int0 = 0;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, docWriteResponse_Fields0._VERSION, int0);
      assertNotNull(shardId0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, int0, int0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_shard_id", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_shard_id", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(41, bytesStreamOutput0.size());
      assertEquals(41L, bytesStreamOutput0.position());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(9, stringArray0.length);
      assertEquals(41, bytesStreamOutput0.size());
      assertEquals(41L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      
      String string0 = "E|@kdajoK1[ue5:";
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(9, stringArray0.length);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_shard_id", updateResponse0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(41, bytesStreamOutput0.size());
      assertEquals(41L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      int int0 = 1789;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, docWriteResponse_Fields0._INDEX, int0);
      assertNotNull(shardId0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals(1789, shardId0.getId());
      assertEquals(1789, shardId0.id());
      
      long long0 = (-1L);
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals((-1L), updateResponse0.version);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1789, shardId0.getId());
      assertEquals(1789, shardId0.id());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals("_type", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1L), updateResponse0.getSeqNo());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(10, stringArray0.length);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(10, stringArray0.length);
      assertEquals((-1L), updateResponse0.version);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(1789, shardId0.getId());
      assertEquals(1789, shardId0.id());
      assertEquals((-1L), updateResponse0.getVersion());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals("_type", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "utpG";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, int0, int0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals((-1L), indexResponse0.version);
      assertEquals((-1L), indexResponse0.seqNo);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals("utpG", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      assertEquals("utpG", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals((-1L), indexResponse0.getVersion());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string1 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string2 = docWriteResponse_Fields0.get_SEQ_NO();
      assertEquals("_seq_no", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string3 = indexResponse0.toString();
      assertEquals("IndexResponse[index=utpG,type=utpG,id=utpG,version=-1,created=false,seqNo=-1,shards=null]", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals((-1L), indexResponse0.version);
      assertEquals((-1L), indexResponse0.seqNo);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals("utpG", indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      assertEquals("utpG", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals((-1L), indexResponse0.getVersion());
      
      String string4 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      // Undeclared exception!
      try { 
        deleteResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      String string0 = "";
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(updateResponse0.shardId, updateResponse0.type, string0, updateResponse0.version, deleteResponse0.seqNo, boolean0);
      assertNotNull(indexResponse0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals(201, restStatus0.getStatus());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "ALLOW_UNQUOTED_FIELD_NAMES";
      String string1 = "[";
      int int0 = 1185;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1185, shardId0.id());
      assertEquals(1185, shardId0.getId());
      
      String string2 = "org.elasticsearch.search.aggregations.bucket.terms.support.IncludeExclude$1";
      long long0 = 0L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string0, int0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0L, deleteResponse0.version);
      assertEquals(1185L, deleteResponse0.seqNo);
      assertEquals(1185, shardId0.id());
      assertEquals(1185, shardId0.getId());
      assertEquals("ALLOW_UNQUOTED_FIELD_NAMES", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.search.aggregations.bucket.terms.support.IncludeExclude$1", deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(1185L, deleteResponse0.getSeqNo());
      
      String string3 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=ALLOW_UNQUOTED_FIELD_NAMES,type=org.elasticsearch.search.aggregations.bucket.terms.support.IncludeExclude$1,id=ALLOW_UNQUOTED_FIELD_NAMES,version=0,found=false,shards=null]", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0L, deleteResponse0.version);
      assertEquals(1185L, deleteResponse0.seqNo);
      assertEquals(1185, shardId0.id());
      assertEquals(1185, shardId0.getId());
      assertEquals("ALLOW_UNQUOTED_FIELD_NAMES", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.search.aggregations.bucket.terms.support.IncludeExclude$1", deleteResponse0.getType());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(1185L, deleteResponse0.getSeqNo());
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string0);
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string1 = docWriteResponse_Fields0.get_SHARD_ID();
      assertEquals("_shard_id", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      boolean boolean0 = updateResponse0.isCreated();
      assertFalse(boolean0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      String string2 = updateResponse0.getType();
      assertNull(string2);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-37);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte1, (int) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)0}, byteArray0);
      assertNotNull(streamInput0);
      assertFalse(byte1 == byte0);
      assertEquals(2, byteArray0.length);
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertEquals("_seq_no", string0);
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(404, restStatus0.getStatus());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      Settings settings0 = Settings.EMPTY;
      assertNotNull(settings0);
      
      TransportRequestOptions transportRequestOptions0 = updateAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(transportRequestOptions0.compress());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string0);
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      ShardId shardId0 = null;
      long long0 = (-2900L);
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, docWriteResponse_Fields0._SHARD_ID, string0, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertEquals((-2900L), indexResponse0.version);
      assertEquals((-2900L), indexResponse0.seqNo);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", indexResponse0.getType());
      assertEquals((-2900L), indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals("_index", indexResponse0.getId());
      assertEquals((-2900L), indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      long long1 = indexResponse0.getVersion();
      assertEquals((-2900L), long1);
      assertTrue(long1 == long0);
      assertEquals((-2900L), indexResponse0.version);
      assertEquals((-2900L), indexResponse0.seqNo);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", indexResponse0.getType());
      assertEquals((-2900L), indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals("_index", indexResponse0.getId());
      assertEquals((-2900L), indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      String string1 = docWriteResponse_Fields0.get_SEQ_NO();
      assertEquals("_seq_no", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      
      String string2 = "";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(string2, docWriteResponse_Fields0._ID);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"_id\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "UTC chronology must not be null";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals("UTC chronology must not be null", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNull(shardId0);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals("UTC chronology must not be null", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      long long0 = 871L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(871L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.refresh());
      assertEquals("UTC chronology must not be null", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(871L, updateResponse0.getVersion());
      assertEquals("UTC chronology must not be null", updateResponse0.getType());
      assertEquals("UTC chronology must not be null", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      
      String string0 = "";
      DeleteRequest deleteRequest1 = deleteRequest0.routing(string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(shardId0);
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      
      int int0 = (-426);
      updateResponse0.shardId = shardId0;
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      
      long long0 = updateResponse0.getVersion();
      assertEquals(0L, long0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      String string1 = "5u[.>2OiSu";
      String string2 = "Te";
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-88);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)0, (byte) (-88), (byte)0, (byte) (-1)}, byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)0, (byte) (-88), (byte)0, (byte) (-1)}, byteArray0);
      assertNotNull(byteBufferStreamInput0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      int int1 = 4307;
      try { 
        byteBufferStreamInput0.readBytesReference(int1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string0);
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      int int0 = 0;
      XContentBuilder xContentBuilder0 = null;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      ToXContent.MapParams toXContent_MapParams0 = new ToXContent.MapParams(map0);
      assertNotNull(toXContent_MapParams0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_MapParams0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      String string0 = updateResponse0.getId();
      assertNull(string0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      
      String string1 = "";
      long long0 = 0L;
      boolean boolean0 = false;
      Setting<Integer> setting0 = ScriptService.SCRIPT_MAX_SIZE_IN_BYTES;
      assertNotNull(setting0);
      
      XContentBuilder xContentBuilder0 = null;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      
      // Undeclared exception!
      try { 
        setting0.toXContent(xContentBuilder0, fakeRestRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.settings.Setting", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "org.elasticsearch.cluster.routing.RoutingTable$Builder";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      ShardId shardId0 = deleteRequest0.shardId();
      assertNull(shardId0);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      long long0 = 2312L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string0, long0, long0, boolean0);
      assertNotNull(deleteResponse0);
      assertEquals(2312L, deleteResponse0.version);
      assertEquals(2312L, deleteResponse0.seqNo);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getType());
      assertEquals(2312L, deleteResponse0.getSeqNo());
      assertEquals(2312L, deleteResponse0.getVersion());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getId());
      
      String string1 = null;
      String string2 = "_shard_id";
      long long1 = 374L;
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(deleteResponse0.shardId, string1, string2, long1, boolean1);
      assertNotNull(updateResponse0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertEquals(2312L, deleteResponse0.version);
      assertEquals(2312L, deleteResponse0.seqNo);
      assertEquals(374L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getType());
      assertEquals(2312L, deleteResponse0.getSeqNo());
      assertEquals(2312L, deleteResponse0.getVersion());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(374L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_shard_id", updateResponse0.getId());
      
      updateResponse0.shardId = deleteResponse0.shardId;
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getType());
      assertEquals(2312L, deleteResponse0.getSeqNo());
      assertEquals(2312L, deleteResponse0.getVersion());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(374L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_shard_id", updateResponse0.getId());
      
      updateResponse0.shardId = deleteResponse0.shardId;
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getType());
      assertEquals(2312L, deleteResponse0.getSeqNo());
      assertEquals(2312L, deleteResponse0.getVersion());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(374L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_shard_id", updateResponse0.getId());
      
      RestStatus restStatus0 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertEquals(2312L, deleteResponse0.version);
      assertEquals(2312L, deleteResponse0.seqNo);
      assertEquals(374L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getType());
      assertEquals(2312L, deleteResponse0.getSeqNo());
      assertEquals(2312L, deleteResponse0.getVersion());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(374L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(200, restStatus0.getStatus());
      
      RestStatus restStatus1 = updateResponse0.status();
      assertEquals(RestStatus.OK, restStatus1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(restStatus1, restStatus0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(long1 == long0);
      assertEquals(2312L, deleteResponse0.version);
      assertEquals(2312L, deleteResponse0.seqNo);
      assertEquals(374L, updateResponse0.version);
      assertEquals((-2L), updateResponse0.seqNo);
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getType());
      assertEquals(2312L, deleteResponse0.getSeqNo());
      assertEquals(2312L, deleteResponse0.getVersion());
      assertEquals("org.elasticsearch.cluster.routing.RoutingTable$Builder", deleteResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(374L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(200, restStatus1.getStatus());
      
      // Undeclared exception!
      try { 
        deleteResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      String string0 = updateResponse0.getType();
      assertNull(string0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string1 = docWriteResponse_Fields0.get_SHARD_ID();
      assertEquals("_shard_id", string1);
      assertNotNull(string1);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_SEQ_NO();
      assertEquals("_seq_no", string0);
      assertNotNull(string0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      
      long long0 = deleteResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(getResult0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertNotNull(indexAction0);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      
      long long0 = indexResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "@$GA]PDkGf|+:Lak]OW";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      
      String string1 = shardId0.getIndexName();
      assertEquals("@$GA]PDkGf|+:Lak]OW", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      
      String string2 = "(QY47ar&rf/";
      long long0 = (-4348L);
      long long1 = 2032L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, string2, long0, long1, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-4348L), indexResponse0.seqNo);
      assertEquals(2032L, indexResponse0.version);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals(2032L, indexResponse0.getVersion());
      assertEquals((-4348L), indexResponse0.getSeqNo());
      assertEquals("(QY47ar&rf/", indexResponse0.getId());
      assertEquals("(QY47ar&rf/", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string3 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string4 = docWriteResponse_Fields0.get_SEQ_NO();
      assertEquals("_seq_no", string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      
      String string5 = indexResponse0.toString();
      assertEquals("IndexResponse[index=@$GA]PDkGf|+:Lak]OW,type=(QY47ar&rf/,id=(QY47ar&rf/,version=2032,created=true,seqNo=-4348,shards=null]", string5);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals((-4348L), indexResponse0.seqNo);
      assertEquals(2032L, indexResponse0.version);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals(2032L, indexResponse0.getVersion());
      assertEquals((-4348L), indexResponse0.getSeqNo());
      assertEquals("(QY47ar&rf/", indexResponse0.getId());
      assertEquals("(QY47ar&rf/", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertTrue(indexResponse0.isCreated());
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = null;
      try {
        dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // estimatedLength: -1
         //
         verifyException("org.jboss.netty.buffer.DynamicChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = ".&C8i";
      String string1 = "";
      long long0 = 229L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(229L, updateResponse0.version);
      assertEquals(229L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(".&C8i", updateResponse0.getType());
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(getResult0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(229L, updateResponse0.version);
      assertEquals(229L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertEquals(".&C8i", updateResponse0.getType());
      
      int int0 = 1023;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1023 cap=1023]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1023, byteBuffer0.remaining());
      assertEquals(1023, byteBuffer0.capacity());
      assertEquals(1023, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertNotNull(byteBufferBytesReference0);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1023 cap=1023]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1023, byteBuffer0.remaining());
      assertEquals(1023, byteBuffer0.capacity());
      assertEquals(1023, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      BytesRef bytesRef0 = byteBufferBytesReference0.toBytesRef();
      assertNotNull(bytesRef0);
      assertEquals(0, bytesRef0.offset);
      assertEquals(1023, bytesRef0.length);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1023 cap=1023]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1023, byteBuffer0.remaining());
      assertEquals(1023, byteBuffer0.capacity());
      assertEquals(1023, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      
      BytesArray bytesArray0 = new BytesArray(bytesRef0, boolean0);
      assertNotNull(bytesArray0);
      assertEquals(0, bytesRef0.offset);
      assertEquals(1023, bytesRef0.length);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1023 cap=1023]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1023, byteBuffer0.remaining());
      assertEquals(1023, byteBuffer0.capacity());
      assertEquals(1023, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(1023, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertNotNull(streamInput0);
      assertEquals(0, bytesRef0.offset);
      assertEquals(1023, bytesRef0.length);
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1023 cap=1023]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1023, byteBuffer0.remaining());
      assertEquals(1023, byteBuffer0.capacity());
      assertEquals(1023, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(1023, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      
      updateResponse0.readFrom(streamInput0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0, bytesRef0.offset);
      assertEquals(1023, bytesRef0.length);
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=1023 cap=1023]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1023, byteBuffer0.remaining());
      assertEquals(1023, byteBuffer0.capacity());
      assertEquals(1023, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(1023, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      
      int int0 = 499;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(499, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=499 cap=499]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(499, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=499 cap=499]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      LocalTransportAddress localTransportAddress0 = new LocalTransportAddress(byteBufferStreamInput0);
      assertNotNull(localTransportAddress0);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertFalse(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=1 lim=499 cap=499]", byteBuffer0.toString());
      assertEquals(498, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("", localTransportAddress0.id());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(0, localTransportAddress0.getPort());
      
      long long0 = byteBufferStreamInput0.readZLong();
      assertEquals(0L, long0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=2 lim=499 cap=499]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(497, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.position());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      updateResponse0.remoteAddress((TransportAddress) localTransportAddress0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getId());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=2 lim=499 cap=499]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(497, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.position());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("", localTransportAddress0.id());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(0, localTransportAddress0.getPort());
      
      ByteBuffer byteBuffer1 = byteBuffer0.putDouble((double) localTransportAddress0.TYPE_ID);
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      assertNotNull(byteBuffer1);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertEquals(489, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=10 lim=499 cap=499]", byteBuffer0.toString());
      assertEquals(10, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("", localTransportAddress0.id());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals(10, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=10 lim=499 cap=499]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.hasArray());
      assertEquals(489, byteBuffer1.remaining());
      assertEquals(499, byteBuffer1.limit());
      assertTrue(byteBuffer1.isDirect());
      assertEquals(499, byteBuffer1.capacity());
      
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      long[] longArray0 = byteBufferStreamInput0.readVLongArray();
      assertArrayEquals(new long[] {}, longArray0);
      assertSame(byteBuffer0, byteBuffer1);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(byteBuffer0.hasArray());
      assertEquals(488, byteBuffer0.remaining());
      assertEquals(11, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=11 lim=499 cap=499]", byteBuffer0.toString());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      TransportRequestOptions transportRequestOptions0 = updateAction0.transportOptions(settings0);
      assertNotNull(transportRequestOptions0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      assertFalse(transportRequestOptions0.compress());
      
      updateResponse0.readFrom(byteBufferStreamInput0);
      assertSame(byteBuffer0, byteBuffer1);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=23 lim=499 cap=499]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(23, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(499, byteBuffer0.capacity());
      assertEquals(499, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(476, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      ShardId shardId0 = updateResponse0.getShardId();
      assertNotNull(shardId0);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = docWriteResponse_Fields0.get_SHARD_ID();
      assertEquals("_shard_id", string0);
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        GetResult.readGetResult(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.get.GetResult", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      String string0 = "";
      DeleteRequest deleteRequest1 = deleteRequest0.routing(string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(shardId0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      
      DeleteRequest deleteRequest2 = deleteRequest1.timeout(deleteRequest0.DEFAULT_TIMEOUT);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertNotNull(deleteRequest2);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.index());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertNull(deleteRequest2.type());
      assertFalse(deleteRequest2.refresh());
      
      String string1 = "_index";
      long long0 = (-974L);
      long long1 = 281470681808895L;
      boolean boolean0 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string0, string1, long0, long1, boolean0);
      assertNotNull(deleteResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(281470681808895L, deleteResponse0.version);
      assertEquals((-974L), deleteResponse0.seqNo);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertEquals("_index", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(281470681808895L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals((-974L), deleteResponse0.getSeqNo());
      
      String string2 = deleteResponse0.getId();
      assertEquals("_index", string2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(281470681808895L, deleteResponse0.version);
      assertEquals((-974L), deleteResponse0.seqNo);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertEquals("_index", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(281470681808895L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals((-974L), deleteResponse0.getSeqNo());
      
      ShardId shardId1 = deleteResponse0.getShardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNull(shardId1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(281470681808895L, deleteResponse0.version);
      assertEquals((-974L), deleteResponse0.seqNo);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertEquals("_index", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(281470681808895L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals((-974L), deleteResponse0.getSeqNo());
      
      IndexResponse indexResponse0 = new IndexResponse(shardId1, string0, deleteResponse0.type, deleteResponse0.seqNo, long1, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(281470681808895L, deleteResponse0.version);
      assertEquals((-974L), deleteResponse0.seqNo);
      assertEquals(281470681808895L, indexResponse0.version);
      assertEquals((-974L), indexResponse0.seqNo);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertEquals("_index", deleteResponse0.getId());
      assertEquals("", deleteResponse0.getType());
      assertEquals(281470681808895L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals((-974L), deleteResponse0.getSeqNo());
      assertEquals("", indexResponse0.getType());
      assertEquals((-974L), indexResponse0.getSeqNo());
      assertEquals(281470681808895L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals("", indexResponse0.getId());
      
      int int0 = 0;
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int0);
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(dynamicChannelBuffer0);
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(duplicatedChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      
      BytesArray bytesArray0 = channelBufferBytesReference0.toBytesArray();
      assertNotNull(bytesArray0);
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      
      InputStreamStreamInput inputStreamStreamInput0 = (InputStreamStreamInput)StreamInput.wrap((BytesReference) bytesArray0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertTrue(bytesArray0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      
      Supplier<DeleteRequest> supplier0 = (Supplier<DeleteRequest>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      try { 
        inputStreamStreamInput0.readOptionalStreamable(supplier0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      
      String string0 = "lU";
      LocalTransportAddress localTransportAddress0 = new LocalTransportAddress(string0);
      assertNotNull(localTransportAddress0);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("lU", localTransportAddress0.id());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      
      int int0 = 2425;
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[2];
      DeleteRequest deleteRequest0 = new DeleteRequest(docWriteResponse_Fields0._INDEX);
      assertNotNull(deleteRequest0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("_index", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      DeleteRequest deleteRequest1 = deleteRequest0.parent(docWriteResponse_Fields0._SHARD_ID);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNotNull(deleteRequest1);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("_index", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_shard_id", deleteRequest0.parent());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.index());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertEquals("_shard_id", deleteRequest1.parent());
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertNull(shardId0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("_index", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_shard_id", deleteRequest0.parent());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.index());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertEquals("_shard_id", deleteRequest1.parent());
      
      Throwable throwable0 = null;
      RestStatus restStatus0 = RestStatus.SWITCHING_PROTOCOLS;
      boolean boolean0 = true;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure(shardId0, docWriteResponse_Fields0._SHARD_ID, throwable0, restStatus0, boolean0);
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("_index", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_shard_id", deleteRequest0.parent());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.index());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertEquals("_shard_id", deleteRequest1.parent());
      assertTrue(replicationResponse_ShardInfo_Failure0.primary());
      assertEquals(RestStatus.SWITCHING_PROTOCOLS, replicationResponse_ShardInfo_Failure0.status());
      assertEquals("_shard_id", replicationResponse_ShardInfo_Failure0.nodeId());
      
      replicationResponse_ShardInfo_FailureArray0[0] = replicationResponse_ShardInfo_Failure0;
      String string1 = null;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure1 = new ReplicationResponse.ShardInfo.Failure(shardId0, string1, throwable0, restStatus0, boolean0);
      assertNotNull(replicationResponse_ShardInfo_Failure1);
      assertFalse(replicationResponse_ShardInfo_Failure1.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("_index", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_shard_id", deleteRequest0.parent());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.index());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertEquals("_shard_id", deleteRequest1.parent());
      assertTrue(replicationResponse_ShardInfo_Failure1.primary());
      assertEquals(RestStatus.SWITCHING_PROTOCOLS, replicationResponse_ShardInfo_Failure1.status());
      assertNull(replicationResponse_ShardInfo_Failure1.nodeId());
      
      replicationResponse_ShardInfo_FailureArray0[1] = replicationResponse_ShardInfo_Failure1;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, localTransportAddress0.TYPE_ID, replicationResponse_ShardInfo_FailureArray0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(2, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(2, replicationResponse_ShardInfo0.getFailed());
      assertEquals(2, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(2425, replicationResponse_ShardInfo0.getTotal());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("lU", localTransportAddress0.id());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      
      String string2 = "org.elasticsearch.search.aggregations.pipeline.bucketmetrics.sum.SumBucketPipelineAggregator";
      boolean boolean1 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, string2, int0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals(2, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertEquals(2425L, updateResponse0.version);
      assertEquals(2425L, updateResponse0.seqNo);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(2, replicationResponse_ShardInfo0.getFailed());
      assertEquals(2, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(2425, replicationResponse_ShardInfo0.getTotal());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals("lU", localTransportAddress0.id());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(2425L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.search.aggregations.pipeline.bucketmetrics.sum.SumBucketPipelineAggregator", updateResponse0.getId());
      assertEquals(2425L, updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("_index", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("_shard_id", deleteRequest0.parent());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("_index", deleteRequest1.index());
      assertFalse(deleteRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.type());
      assertEquals("_shard_id", deleteRequest1.parent());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)91;
      byteArray0[0] = byte0;
      BytesArray bytesArray0 = new BytesArray(byteArray0);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertNotNull(bytesArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(bytesArray0.hasArray());
      assertEquals(1, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      
      ChannelBuffer channelBuffer0 = bytesArray0.toChannelBuffer();
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertNotNull(channelBuffer0);
      assertEquals(1, byteArray0.length);
      assertTrue(bytesArray0.hasArray());
      assertEquals(1, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(1, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals(1, byteArray0.length);
      assertTrue(bytesArray0.hasArray());
      assertEquals(1, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(1, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(1, byteArray0.length);
      assertTrue(bytesArray0.hasArray());
      assertEquals(1, bytesArray0.length());
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(1, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(1, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 1
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "VALUE_TRUE";
      String string1 = "(Rmz-6 ?@.XZXef\\";
      int int0 = 2098;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      
      String string2 = null;
      long long0 = 8L;
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      
      String string3 = indexResponse0.toString();
      assertEquals("IndexResponse[index=VALUE_TRUE,type=(Rmz-6 ?@.XZXef\\,id=null,version=8,created=true,seqNo=2098,shards=null]", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(201, restStatus0.getStatus());
      
      RestStatus restStatus1 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(restStatus1, restStatus0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(201, restStatus1.getStatus());
      
      long long1 = indexResponse0.getVersion();
      assertEquals(8L, long1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(long1 == long0);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertTrue(indexResponse0.isCreated());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "VALUE_TRUE";
      String string1 = "(Rmz-6 ?@.XZXef\\";
      int int0 = 2098;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      
      String string2 = null;
      long long0 = 8L;
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      String string3 = indexResponse0.toString();
      assertEquals("IndexResponse[index=VALUE_TRUE,type=(Rmz-6 ?@.XZXef\\,id=null,version=8,created=true,seqNo=2098,shards=null]", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(201, restStatus0.getStatus());
      
      RestStatus restStatus1 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(restStatus1, restStatus0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(201, restStatus1.getStatus());
      
      String string4 = indexResponse0.getIndex();
      assertEquals("VALUE_TRUE", string4);
      assertSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(string4, string0);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertTrue(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "VALUE_TRUE";
      String string1 = "(Rmz-6 ?@.XZXef\\";
      int int0 = 2098;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2098, shardId0.getId());
      assertEquals(2098, shardId0.id());
      
      String string2 = null;
      long long0 = 8L;
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.getId());
      assertEquals(2098, shardId0.id());
      assertTrue(indexResponse0.isCreated());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      
      String string3 = indexResponse0.toString();
      assertEquals("IndexResponse[index=VALUE_TRUE,type=(Rmz-6 ?@.XZXef\\,id=null,version=8,created=true,seqNo=2098,shards=null]", string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.getId());
      assertEquals(2098, shardId0.id());
      assertTrue(indexResponse0.isCreated());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.getId());
      assertEquals(2098, shardId0.id());
      assertTrue(indexResponse0.isCreated());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
      
      RestStatus restStatus1 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(restStatus1, restStatus0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.getId());
      assertEquals(2098, shardId0.id());
      assertTrue(indexResponse0.isCreated());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(201, restStatus1.getStatus());
      
      String string4 = indexResponse0.getType();
      assertEquals("(Rmz-6 ?@.XZXef\\", string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.getId());
      assertEquals(2098, shardId0.id());
      assertTrue(indexResponse0.isCreated());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "VALUE_TRUE";
      String string1 = "(Rmz-6 ?@.XZXef\\";
      int int0 = 2098;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      
      String string2 = null;
      long long0 = 8L;
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string1, string2, int0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(8L, indexResponse0.getVersion());
      
      String string3 = indexResponse0.toString();
      assertEquals("IndexResponse[index=VALUE_TRUE,type=(Rmz-6 ?@.XZXef\\,id=null,version=8,created=true,seqNo=2098,shards=null]", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(8L, indexResponse0.getVersion());
      
      indexResponse0.seqNo = long0;
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(8L, indexResponse0.getSeqNo());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(8L, indexResponse0.getVersion());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(8L, indexResponse0.version);
      assertEquals(8L, indexResponse0.seqNo);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(8L, indexResponse0.getSeqNo());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
      
      RestStatus restStatus1 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(restStatus1, restStatus0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(8L, indexResponse0.version);
      assertEquals(8L, indexResponse0.seqNo);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(8L, indexResponse0.getSeqNo());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(201, restStatus1.getStatus());
      
      String string4 = indexResponse0.getIndex();
      assertEquals("VALUE_TRUE", string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(8L, indexResponse0.version);
      assertEquals(8L, indexResponse0.seqNo);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(8L, indexResponse0.getSeqNo());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(8L, indexResponse0.getVersion());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertSame(shardId1, shardId0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(shardId0, shardId1);
      assertNotNull(shardId1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertEquals(8L, indexResponse0.version);
      assertEquals(8L, indexResponse0.seqNo);
      assertEquals(2098, shardId1.id());
      assertEquals(2098, shardId1.getId());
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(8L, indexResponse0.getSeqNo());
      assertEquals("(Rmz-6 ?@.XZXef\\", indexResponse0.getType());
      assertEquals(8L, indexResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      
      String string1 = "(doc=";
      int int0 = 0;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      long long0 = (-1L);
      long long1 = 1L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals(1L, updateResponse0.version);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("_type", updateResponse0.getType());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals(1L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals(1L, updateResponse0.version);
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("_type", updateResponse0.getType());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals(1L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-54);
      byteArray0[0] = byte0;
      byte byte1 = (byte)109;
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(2, byteArray0.length);
      
      MutualInformation mutualInformation0 = new MutualInformation(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(mutualInformation0);
      assertEquals(2, byteArray0.length);
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(1, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = simpleModel0.toXContent(xContentBuilder0, toXContent_Params0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(1, stringArray0.length);
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      String string2 = "E|@kdajoK1[ue5:";
      IndexOptions indexOptions0 = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
      DocValuesType docValuesType0 = DocValuesType.NONE;
      long long2 = 3600L;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      int int1 = 0;
      FieldInfo fieldInfo0 = new FieldInfo(string2, byte1, boolean0, boolean0, boolean0, indexOptions0, docValuesType0, long2, hashtable0, int1, byte1);
      assertNotNull(fieldInfo0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Map<String, String> map0 = fieldInfo0.attributes();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(map0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      XContentBuilder xContentBuilder2 = mutualInformation0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(xContentBuilder2);
      assertFalse(byte1 == byte0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(109, fieldInfo0.number);
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(xContentBuilder3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(byte1 == byte0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(109, fieldInfo0.number);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals(1L, updateResponse0.version);
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("_type", updateResponse0.getType());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals(1L, updateResponse0.getVersion());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, indexResponse0.type);
      assertFalse(boolean0);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      long long0 = (-1L);
      indexResponse0.seqNo = long0;
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      
      long long1 = indexResponse0.getSeqNo();
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertEquals((-1L), indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.version);
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals((-1L), indexResponse0.getSeqNo());
      
      int int0 = 34;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(int0);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      boolean boolean1 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, boolean1);
      assertNotNull(mockPrintStream0);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) indexResponse0.type, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "VALUE_TRUE";
      int int0 = 2098;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      
      String string1 = null;
      long long0 = 8L;
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, int0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      
      String string2 = indexResponse0.toString();
      assertEquals("IndexResponse[index=VALUE_TRUE,type=VALUE_TRUE,id=null,version=8,created=true,seqNo=2098,shards=null]", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string0));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(201, restStatus0.getStatus());
      
      RestStatus restStatus1 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus1);
      assertNotSame(string0, string2);
      assertSame(restStatus1, restStatus0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
      assertEquals(201, restStatus1.getStatus());
      
      long long1 = indexResponse0.getSeqNo();
      assertEquals(2098L, long1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(long1 == long0);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(8L, indexResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "VALUE_TRUE";
      int int0 = 2098;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      
      String string1 = null;
      long long0 = 8L;
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, int0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      
      String string2 = indexResponse0.toString();
      assertEquals("IndexResponse[index=VALUE_TRUE,type=VALUE_TRUE,id=null,version=8,created=true,seqNo=2098,shards=null]", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string0));
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      
      RestStatus restStatus0 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus0);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(201, restStatus0.getStatus());
      
      RestStatus restStatus1 = indexResponse0.status();
      assertEquals(RestStatus.CREATED, restStatus1);
      assertNotSame(string0, string2);
      assertSame(restStatus1, restStatus0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(201, restStatus1.getStatus());
      
      String string3 = "=%GV\\\"*";
      long long1 = (-615L);
      long long2 = 505L;
      DeleteResponse deleteResponse0 = new DeleteResponse(indexResponse0.shardId, string0, string3, long1, long2, boolean0);
      assertNotNull(deleteResponse0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals((-615L), deleteResponse0.seqNo);
      assertEquals(505L, deleteResponse0.version);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals("=%GV\\\"*", deleteResponse0.getId());
      assertTrue(deleteResponse0.isFound());
      assertEquals((-615L), deleteResponse0.getSeqNo());
      assertEquals(505L, deleteResponse0.getVersion());
      assertEquals("VALUE_TRUE", deleteResponse0.getType());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2098, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2098, byteBuffer0.limit());
      assertEquals(2098, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2098 cap=2098]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertNotNull(byteBufferStreamInput0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2098, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2098, byteBuffer0.limit());
      assertEquals(2098, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2098 cap=2098]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(11, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=2098 cap=2098]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2087, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2098, byteBuffer0.limit());
      assertEquals(2098, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      
      String string4 = deleteResponse0.getIndex();
      assertEquals("", string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      
      int int1 = (-729);
      int int2 = (-1127);
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int1, int2, deleteResponse0.EMPTY);
      assertNotNull(replicationResponse_ShardInfo0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals((-729), replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-1127), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      
      long long3 = (-1415L);
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, deleteResponse0.id, indexResponse0.id, long3, long2, boolean1);
      assertNotNull(updateResponse0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(long1 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals((-1415L), updateResponse0.seqNo);
      assertEquals(505L, updateResponse0.version);
      assertEquals(2098L, indexResponse0.seqNo);
      assertEquals(8L, indexResponse0.version);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(2098, shardId0.id());
      assertEquals(2098, shardId0.getId());
      assertEquals((-729), replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals((-1127), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("", updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(505L, updateResponse0.getVersion());
      assertEquals((-1415L), updateResponse0.getSeqNo());
      assertEquals("VALUE_TRUE", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(8L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(2098L, indexResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      
      SearchContext searchContext0 = SearchContext.current();
      assertNull(searchContext0);
      
      AggregationContext aggregationContext0 = new AggregationContext(searchContext0);
      assertNotNull(aggregationContext0);
      
      // Undeclared exception!
      try { 
        aggregationContext0.bigArrays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.search.aggregations.support.AggregationContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      int int0 = 4292;
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      Class<OpenOption> class0 = OpenOption.class;
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      System.setCurrentTimeMillis(indexResponse0.version);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-50);
      byteArray0[0] = byte0;
      byte byte1 = (byte)34;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)23;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-31);
      byteArray0[4] = byte4;
      byte byte5 = (byte)64;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-98);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-56);
      byteArray0[8] = byte8;
      int int1 = (-2629);
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int1, (int) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)34, (byte)0, (byte)23, (byte) (-31), (byte)64, (byte)0, (byte) (-98), (byte) (-56)}, byteArray0);
      assertNotNull(streamInput0);
      assertFalse(int1 == int0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        indexResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string1 = "(doc=";
      int int0 = 0;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      
      long long0 = 1L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, int0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-54);
      byteArray0[0] = byte0;
      byte byte1 = (byte)109;
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(2, byteArray0.length);
      
      MutualInformation mutualInformation0 = new MutualInformation(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(mutualInformation0);
      assertEquals(2, byteArray0.length);
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(1, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = simpleModel0.toXContent(xContentBuilder0, toXContent_Params0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(1, stringArray0.length);
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      String string2 = "E|@kdajoK1[ue5:";
      IndexOptions indexOptions0 = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
      DocValuesType docValuesType0 = DocValuesType.NONE;
      long long1 = 3600L;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      int int1 = 0;
      FieldInfo fieldInfo0 = new FieldInfo(string2, byte1, boolean0, boolean0, boolean0, indexOptions0, docValuesType0, long1, hashtable0, int1, byte1);
      assertNotNull(fieldInfo0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      
      Map<String, String> map0 = fieldInfo0.attributes();
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(map0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      XContentBuilder xContentBuilder2 = mutualInformation0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(xContentBuilder2);
      assertFalse(byte1 == byte0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long1 == long0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(109, fieldInfo0.number);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(xContentBuilder3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(long0 == long1);
      assertFalse(byte1 == byte0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long1 == long0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(1L, updateResponse0.version);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(109, fieldInfo0.number);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertEquals(XContentType.YAML, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertFalse(fieldInfo0.hasNorms());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      
      String string1 = "(doc=";
      int int0 = 0;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      long long0 = (-1L);
      long long1 = 1L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, updateResponse0.version);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("_type", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1L), updateResponse0.getSeqNo());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, updateResponse0.version);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("_type", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-54);
      byteArray0[0] = byte0;
      byte byte1 = (byte)109;
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(2, byteArray0.length);
      
      MutualInformation mutualInformation0 = new MutualInformation(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(mutualInformation0);
      assertEquals(2, byteArray0.length);
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = SmileXContent.contentBuilder();
      assertNotNull(xContentBuilder0);
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = SmileXContent.contentBuilder();
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      
      String string2 = "E|@kdajoK1[ue5:";
      IndexOptions indexOptions0 = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
      DocValuesType docValuesType0 = DocValuesType.NONE;
      long long2 = 3600L;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      int int1 = 0;
      FieldInfo fieldInfo0 = new FieldInfo(string2, byte1, boolean0, boolean0, boolean0, indexOptions0, docValuesType0, long2, hashtable0, int1, byte1);
      assertNotNull(fieldInfo0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Map<String, String> map0 = fieldInfo0.attributes();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(map0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      XContentBuilder xContentBuilder2 = mutualInformation0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertNotSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(xContentBuilder2);
      assertFalse(xContentBuilder2.equals((Object)xContentBuilder0));
      assertFalse(byte1 == byte0);
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(2, byteArray0.length);
      assertEquals(109, fieldInfo0.number);
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasPayloads());
      assertTrue(fieldInfo0.omitsNorms());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      try { 
        updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertNotNull(deleteAction0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertNotNull(deleteResponse0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(pipedInputStream0);
      assertNotNull(inputStreamStreamInput0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        deleteResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string1 = "(doc=";
      int int0 = 0;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      long long0 = 42L;
      long long1 = 1L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, updateResponse0.version);
      assertEquals(42L, updateResponse0.seqNo);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(42L, updateResponse0.getSeqNo());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1L, updateResponse0.version);
      assertEquals(42L, updateResponse0.seqNo);
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(42L, updateResponse0.getSeqNo());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-54);
      byteArray0[0] = byte0;
      byte byte1 = (byte)109;
      byteArray0[1] = byte1;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(2, byteArray0.length);
      
      MutualInformation mutualInformation0 = new MutualInformation(streamInput0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertNotNull(mutualInformation0);
      assertEquals(2, byteArray0.length);
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(1, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = simpleModel0.toXContent(xContentBuilder0, toXContent_Params0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotNull(xContentBuilder1);
      assertEquals(1, stringArray0.length);
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      String string2 = "E|@kdajoK1[ue5:";
      IndexOptions indexOptions0 = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
      DocValuesType docValuesType0 = DocValuesType.NONE;
      long long2 = (-1L);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      int int1 = 0;
      FieldInfo fieldInfo0 = new FieldInfo(string2, byte1, boolean0, boolean0, boolean0, indexOptions0, docValuesType0, long2, hashtable0, int1, byte1);
      assertNotNull(fieldInfo0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Map<String, String> map0 = fieldInfo0.attributes();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(map0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(byte1 == byte0);
      assertEquals(109, fieldInfo0.number);
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      XContentBuilder xContentBuilder2 = mutualInformation0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(xContentBuilder2);
      assertFalse(byte1 == byte0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(109, fieldInfo0.number);
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)109}, byteArray0);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(xContentBuilder3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(byte1 == byte0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(109, fieldInfo0.number);
      assertEquals(1L, updateResponse0.version);
      assertEquals(42L, updateResponse0.seqNo);
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertTrue(fieldInfo0.hasPayloads());
      assertEquals((-1L), fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals("/", fakeRestRequest0.uri());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(42L, updateResponse0.getSeqNo());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string0 = docWriteResponse_Fields0.get_TYPE();
      assertEquals("_type", string0);
      assertNotNull(string0);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      String string1 = "(doc=";
      int int0 = 0;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, string1, int0);
      assertNotNull(shardId0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      long long0 = (-1L);
      long long1 = 1L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, long0, long1, boolean0);
      assertNotNull(updateResponse0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals(1L, updateResponse0.version);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(1L, updateResponse0.getVersion());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals(1L, updateResponse0.version);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(1L, updateResponse0.getVersion());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(38, bytesStreamOutput0.size());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)109;
      byteArray0[1] = byte0;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109}, byteArray0);
      assertNotNull(streamInput0);
      assertEquals(2, byteArray0.length);
      
      MutualInformation mutualInformation0 = new MutualInformation(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109}, byteArray0);
      assertNotNull(mutualInformation0);
      assertEquals(2, byteArray0.length);
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[1];
      String string2 = "Expect";
      long long2 = 758L;
      boolean boolean1 = true;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      long long3 = 54L;
      ByteArray byteArray1 = bigArrays0.newByteArray(long3);
      assertNotNull(byteArray1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(54L, byteArray1.size());
      
      ReleasablePagedBytesReference releasablePagedBytesReference0 = new ReleasablePagedBytesReference(bigArrays0, byteArray1, int0);
      assertNotNull(releasablePagedBytesReference0);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(54L, byteArray1.size());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(0, releasablePagedBytesReference0.length());
      
      HashMap<String, GetField> hashMap0 = new HashMap<String, GetField>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      GetResult getResult0 = new GetResult(docWriteResponse_Fields0._VERSION, docWriteResponse_Fields0._SEQ_NO, string2, long2, boolean1, releasablePagedBytesReference0, hashMap0);
      assertNotNull(getResult0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals(54L, byteArray1.size());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(0, releasablePagedBytesReference0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(getResult0.isSourceEmpty());
      assertEquals("_seq_no", getResult0.getType());
      assertEquals("_version", getResult0.getIndex());
      assertEquals("Expect", getResult0.getId());
      assertTrue(getResult0.isExists());
      assertEquals(758L, getResult0.getVersion());
      
      updateResponse0.setGetResult(getResult0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long3);
      assertFalse(long1 == long0);
      assertFalse(long1 == long3);
      assertFalse(long1 == long2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(long2 == long3);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals((-1L), updateResponse0.seqNo);
      assertEquals(1L, updateResponse0.version);
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(54L, byteArray1.size());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals((-1L), updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(1L, updateResponse0.getVersion());
      assertTrue(releasablePagedBytesReference0.hasArray());
      assertEquals(0, releasablePagedBytesReference0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(getResult0.isSourceEmpty());
      assertEquals("_seq_no", getResult0.getType());
      assertEquals("_version", getResult0.getIndex());
      assertEquals("Expect", getResult0.getId());
      assertTrue(getResult0.isExists());
      assertEquals(758L, getResult0.getVersion());
      
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(1, stringArray0.length);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(38, bytesStreamOutput0.size());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      ToXContent.Params toXContent_Params0 = null;
      XContentBuilder xContentBuilder1 = simpleModel0.toXContent(xContentBuilder0, toXContent_Params0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotNull(xContentBuilder1);
      assertEquals(1, stringArray0.length);
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(38, bytesStreamOutput0.size());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      String string3 = "E|@kdajoK1[ue5:";
      IndexOptions indexOptions0 = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;
      DocValuesType docValuesType0 = DocValuesType.NONE;
      long long4 = 3600L;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      int int1 = 0;
      FieldInfo fieldInfo0 = new FieldInfo(string3, byte0, boolean0, boolean0, boolean0, indexOptions0, docValuesType0, long4, hashtable0, int1, byte0);
      assertNotNull(fieldInfo0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals(109, fieldInfo0.number);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.hasPayloads());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      
      Map<String, String> map0 = fieldInfo0.attributes();
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(map0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals(109, fieldInfo0.number);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.hasPayloads());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest(map0);
      assertNotNull(fakeRestRequest0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals(109, fieldInfo0.number);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.hasPayloads());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder2 = mutualInformation0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109}, byteArray0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotNull(xContentBuilder2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertEquals(1, stringArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals(109, fieldInfo0.number);
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(109, fieldInfo0.getPointNumBytes());
      assertTrue(fieldInfo0.omitsNorms());
      assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fieldInfo0.getIndexOptions());
      assertTrue(fieldInfo0.hasVectors());
      assertEquals(0, fieldInfo0.getPointDimensionCount());
      assertEquals(3600L, fieldInfo0.getDocValuesGen());
      assertTrue(fieldInfo0.hasPayloads());
      assertFalse(fieldInfo0.hasNorms());
      assertEquals(DocValuesType.NONE, fieldInfo0.getDocValuesType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(38, bytesStreamOutput0.size());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals("mutual_information", mutualInformation0.getWriteableName());
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      // Undeclared exception!
      try { 
        updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Compressor detection can only be called on some xcontent bytes or compressed xcontent bytes
         //
         verifyException("org.elasticsearch.common.compress.CompressorFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNotNull(indexResponse0);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      
      String string0 = "should shouldn't be failed with [";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(indexResponse0.shardId, string0, indexResponse0.id, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals((-2L), updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("should shouldn't be failed with [", updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      
      int int0 = 2367;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2367, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.readSlice(int0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotNull(channelBuffer0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals((-2367), bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2367, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2367, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2367, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2367, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2367, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(channelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals((-2367), bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2367, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2367, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2367, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2367, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2367, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(2367, channelBufferBytesReference0.length());
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotNull(streamInput0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals((-2367), bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2367, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2367, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2367, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2367, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2367, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(2367, channelBufferBytesReference0.length());
      assertTrue(streamInput0.markSupported());
      assertEquals(2367, streamInput0.available());
      
      updateResponse0.readFrom(streamInput0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2367), bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2367, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2367, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2367, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2367, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2367, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(2367, channelBufferBytesReference0.length());
      assertEquals(2355, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      
      String string1 = updateResponse0.getType();
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, indexResponse0.version);
      assertEquals(0L, indexResponse0.seqNo);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("", updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.OK, updateResponse0.status());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "@$GA]PDkGf|+:Lak]OW";
      int int0 = (-1);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertNotNull(shardId0);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      
      String string1 = shardId0.getIndexName();
      assertEquals("@$GA]PDkGf|+:Lak]OW", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      
      String string2 = "(QY47ar&rf/";
      long long0 = (-4311L);
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, string2, long0, long0, boolean0);
      assertNotNull(indexResponse0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-4311L), indexResponse0.seqNo);
      assertEquals((-4311L), indexResponse0.version);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("(QY47ar&rf/", indexResponse0.getId());
      assertEquals((-4311L), indexResponse0.getVersion());
      assertEquals((-4311L), indexResponse0.getSeqNo());
      assertEquals("(QY47ar&rf/", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string3 = docWriteResponse_Fields0.get_INDEX();
      assertEquals("_index", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      String string4 = docWriteResponse_Fields0.get_SEQ_NO();
      assertEquals("_seq_no", string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertNotNull(updateAction0);
      assertEquals("indices:data/write/update", updateAction0.name());
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.seqNo);
      assertEquals(0L, updateResponse0.version);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      String string5 = indexResponse0.toString();
      assertEquals("IndexResponse[index=@$GA]PDkGf|+:Lak]OW,type=(QY47ar&rf/,id=(QY47ar&rf/,version=-4311,created=true,seqNo=-4311,shards=null]", string5);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals((-4311L), indexResponse0.seqNo);
      assertEquals((-4311L), indexResponse0.version);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("(QY47ar&rf/", indexResponse0.getId());
      assertEquals((-4311L), indexResponse0.getVersion());
      assertEquals((-4311L), indexResponse0.getSeqNo());
      assertEquals("(QY47ar&rf/", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      
      String string6 = docWriteResponse_Fields0.get_VERSION();
      assertEquals("_version", string6);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      
      boolean boolean1 = indexResponse0.isCreated();
      assertTrue(boolean1);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertTrue(boolean1 == boolean0);
      assertEquals((-4311L), indexResponse0.seqNo);
      assertEquals((-4311L), indexResponse0.version);
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("(QY47ar&rf/", indexResponse0.getId());
      assertEquals((-4311L), indexResponse0.getVersion());
      assertEquals((-4311L), indexResponse0.getSeqNo());
      assertEquals("(QY47ar&rf/", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
      
      ShardId shardId1 = indexResponse0.getShardId();
      assertSame(shardId1, shardId0);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertSame(shardId0, shardId1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotNull(shardId1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertTrue(boolean0 == boolean1);
      assertEquals((-4311L), indexResponse0.seqNo);
      assertEquals((-4311L), indexResponse0.version);
      assertEquals((-1), shardId1.id());
      assertEquals((-1), shardId1.getId());
      assertEquals((-1), shardId0.id());
      assertEquals((-1), shardId0.getId());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals("(QY47ar&rf/", indexResponse0.getId());
      assertEquals((-4311L), indexResponse0.getVersion());
      assertEquals((-4311L), indexResponse0.getSeqNo());
      assertEquals("(QY47ar&rf/", indexResponse0.getType());
      assertTrue(indexResponse0.isCreated());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      int int0 = (-5295);
      ReplicationResponse.ShardInfo.Failure[] replicationResponse_ShardInfo_FailureArray0 = new ReplicationResponse.ShardInfo.Failure[3];
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure0 = new ReplicationResponse.ShardInfo.Failure();
      assertNotNull(replicationResponse_ShardInfo_Failure0);
      assertFalse(replicationResponse_ShardInfo_Failure0.primary());
      assertNull(replicationResponse_ShardInfo_Failure0.status());
      assertNull(replicationResponse_ShardInfo_Failure0.nodeId());
      
      replicationResponse_ShardInfo_FailureArray0[0] = replicationResponse_ShardInfo_Failure0;
      ShardId shardId0 = null;
      String string0 = "";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLException sQLException0 = new SQLException(string0, sQLRecoverableException0);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      
      RestStatus restStatus0 = RestStatus.LOCKED;
      boolean boolean0 = true;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure1 = new ReplicationResponse.ShardInfo.Failure(shardId0, string0, sQLException0, restStatus0, boolean0);
      assertNotNull(replicationResponse_ShardInfo_Failure1);
      assertFalse(replicationResponse_ShardInfo_Failure1.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertTrue(replicationResponse_ShardInfo_Failure1.primary());
      assertEquals("", replicationResponse_ShardInfo_Failure1.nodeId());
      assertEquals(RestStatus.LOCKED, replicationResponse_ShardInfo_Failure1.status());
      
      replicationResponse_ShardInfo_FailureArray0[1] = replicationResponse_ShardInfo_Failure1;
      ReplicationResponse.ShardInfo.Failure replicationResponse_ShardInfo_Failure2 = new ReplicationResponse.ShardInfo.Failure();
      assertNotNull(replicationResponse_ShardInfo_Failure2);
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure1));
      assertFalse(replicationResponse_ShardInfo_Failure2.equals((Object)replicationResponse_ShardInfo_Failure0));
      assertNull(replicationResponse_ShardInfo_Failure2.status());
      assertNull(replicationResponse_ShardInfo_Failure2.nodeId());
      assertFalse(replicationResponse_ShardInfo_Failure2.primary());
      
      replicationResponse_ShardInfo_FailureArray0[2] = replicationResponse_ShardInfo_Failure2;
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, replicationResponse_ShardInfo_FailureArray0);
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(3, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals(3, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.LOCKED, replicationResponse_ShardInfo0.status());
      assertEquals((-5295), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals((-5295), replicationResponse_ShardInfo0.getTotal());
      
      long long0 = (-5161L);
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string0, long0, int0, boolean1);
      assertNotNull(updateResponse0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals((-5295L), updateResponse0.version);
      assertEquals((-5161L), updateResponse0.seqNo);
      assertEquals("", updateResponse0.getType());
      assertEquals((-5295L), updateResponse0.getVersion());
      assertEquals(RestStatus.LOCKED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-5161L), updateResponse0.getSeqNo());
      assertEquals(3, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.LOCKED, replicationResponse_ShardInfo0.status());
      assertEquals((-5295), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals((-5295), replicationResponse_ShardInfo0.getTotal());
      
      String string1 = updateResponse0.getId();
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, replicationResponse_ShardInfo_FailureArray0.length);
      assertEquals((-5295L), updateResponse0.version);
      assertEquals((-5161L), updateResponse0.seqNo);
      assertEquals("", updateResponse0.getType());
      assertEquals((-5295L), updateResponse0.getVersion());
      assertEquals(RestStatus.LOCKED, updateResponse0.status());
      assertEquals("", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals((-5161L), updateResponse0.getSeqNo());
      assertEquals(3, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.LOCKED, replicationResponse_ShardInfo0.status());
      assertEquals((-5295), replicationResponse_ShardInfo0.getSuccessful());
      assertEquals((-5295), replicationResponse_ShardInfo0.getTotal());
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertNotNull(replicationResponse_ShardInfo0);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      
      String string0 = "(doc=";
      int int0 = 0;
      ShardId shardId0 = new ShardId(docWriteResponse_Fields0._SEQ_NO, string0, int0);
      assertNotNull(shardId0);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      
      long long0 = 42L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, docWriteResponse_Fields0._TYPE, docWriteResponse_Fields0._SHARD_ID, long0, long0, boolean0);
      assertNotNull(updateResponse0);
      assertEquals(42L, updateResponse0.version);
      assertEquals(42L, updateResponse0.seqNo);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(42L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(42L, updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertNotNull(bytesStreamOutput0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      
      updateResponse0.writeTo(bytesStreamOutput0);
      assertEquals(42L, updateResponse0.version);
      assertEquals(42L, updateResponse0.seqNo);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(42L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(42L, updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      
      SimpleModel simpleModel0 = new SimpleModel();
      assertNotNull(simpleModel0);
      assertEquals("simple", simpleModel0.getWriteableName());
      assertFalse(simpleModel0.canBeMinimized());
      assertFalse(simpleModel0.minimizeByDefault());
      
      YamlXContent yamlXContent0 = YamlXContent.yamlXContent;
      assertNotNull(yamlXContent0);
      assertEquals(XContentType.YAML, yamlXContent0.type());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = simpleModel0.NAME;
      XContentBuilder xContentBuilder0 = new XContentBuilder(yamlXContent0, bytesStreamOutput0, stringArray0, boolean0);
      assertNotNull(xContentBuilder0);
      assertEquals(9, stringArray0.length);
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      String string1 = "E|@kdajoK1[ue5:";
      long long1 = (-1L);
      int int1 = 0;
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertNotNull(fakeRestRequest0);
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      
      XContentBuilder xContentBuilder1 = replicationResponse_ShardInfo0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertNotNull(xContentBuilder1);
      assertEquals(9, stringArray0.length);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      
      boolean boolean1 = true;
      XContentBuilder xContentBuilder2 = xContentBuilder1.humanReadable(boolean1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotNull(xContentBuilder2);
      assertEquals(9, stringArray0.length);
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertTrue(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertTrue(xContentBuilder2.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.YAML, xContentBuilder2.contentType());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertTrue(xContentBuilder0.humanReadable());
      
      XContentBuilder xContentBuilder3 = updateResponse0.toXContent(xContentBuilder1, fakeRestRequest0);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertNotNull(xContentBuilder3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(9, stringArray0.length);
      assertEquals(42L, updateResponse0.version);
      assertEquals(42L, updateResponse0.seqNo);
      assertEquals("_version", docWriteResponse_Fields0.get_VERSION());
      assertEquals("_index", docWriteResponse_Fields0.get_INDEX());
      assertEquals("_shard_id", docWriteResponse_Fields0.get_SHARD_ID());
      assertEquals("_seq_no", docWriteResponse_Fields0.get_SEQ_NO());
      assertEquals("_id", docWriteResponse_Fields0.get_ID());
      assertEquals("_type", docWriteResponse_Fields0.get_TYPE());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertTrue(xContentBuilder1.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertEquals(XContentType.YAML, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertTrue(xContentBuilder3.humanReadable());
      assertTrue(updateResponse0.isCreated());
      assertEquals(42L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("_shard_id", updateResponse0.getId());
      assertEquals(42L, updateResponse0.getSeqNo());
      assertEquals("_type", updateResponse0.getType());
      assertEquals(38, bytesStreamOutput0.size());
      assertEquals(38L, bytesStreamOutput0.position());
      assertEquals(XContentType.YAML, yamlXContent0.type());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertTrue(xContentBuilder0.humanReadable());
  }
}
