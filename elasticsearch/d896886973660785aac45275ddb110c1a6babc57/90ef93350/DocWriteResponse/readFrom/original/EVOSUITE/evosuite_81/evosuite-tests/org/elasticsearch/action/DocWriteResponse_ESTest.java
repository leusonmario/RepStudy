/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 07:06:15 GMT 2021
 */

package org.elasticsearch.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.net.SocketAddress;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.SQLClientInfoException;
import java.sql.SQLTransientConnectionException;
import java.util.Hashtable;
import java.util.Map;
import org.apache.lucene.index.SegmentInfos;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.ReplicationResponse;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexAction;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.termvectors.TermVectorsRequest;
import org.elasticsearch.action.update.UpdateAction;
import org.elasticsearch.action.update.UpdateRequest;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.cluster.ClusterState;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.routing.OperationRouting;
import org.elasticsearch.cluster.routing.ShardRouting;
import org.elasticsearch.cluster.routing.allocation.decider.AwarenessAllocationDecider;
import org.elasticsearch.common.ParsingException;
import org.elasticsearch.common.bytes.ByteBufferBytesReference;
import org.elasticsearch.common.bytes.BytesArray;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.bytes.ReleasablePagedBytesReference;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.io.stream.BytesStreamOutput;
import org.elasticsearch.common.io.stream.DataOutputStreamOutput;
import org.elasticsearch.common.io.stream.InputStreamStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.io.stream.OutputStreamStreamOutput;
import org.elasticsearch.common.io.stream.ReleasableBytesStreamOutput;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.io.stream.StreamInputReader;
import org.elasticsearch.common.io.stream.StreamOutput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.LocalTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.util.MockBigArrays;
import org.elasticsearch.common.xcontent.ToXContent;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentGenerator;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.common.xcontent.cbor.CborXContent;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.json.JsonXContentParser;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.common.xcontent.yaml.YamlXContent;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.fielddata.plain.GeoPointArrayAtomicFieldData;
import org.elasticsearch.index.get.GetResult;
import org.elasticsearch.index.mapper.FieldMapper;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.indices.TermsLookup;
import org.elasticsearch.indices.breaker.CircuitBreakerService;
import org.elasticsearch.rest.RestRequest;
import org.elasticsearch.rest.RestStatus;
import org.elasticsearch.search.aggregations.metrics.max.MaxAggregationBuilder;
import org.elasticsearch.search.highlight.HighlightBuilder;
import org.elasticsearch.search.internal.ShardSearchTransportRequest;
import org.elasticsearch.search.sort.FieldSortBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.elasticsearch.test.rest.FakeRestRequest;
import org.elasticsearch.transport.TransportRequestOptions;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocWriteResponse_ESTest extends DocWriteResponse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      int int0 = 697;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(697, byteBuffer0.remaining());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(697, byteBuffer0.remaining());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(686, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=11 lim=697 cap=697]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.position());
      assertEquals(697, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(11L, bytesStreamOutput0.position());
      assertEquals(11, bytesStreamOutput0.size());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(string0);
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(jsonXContent0);
      
      String[] stringArray0 = new String[9];
      stringArray0[4] = string0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0, boolean1);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(9, stringArray0.length);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertNotNull(fakeRestRequest0);
      
      XContentBuilder xContentBuilder1 = deleteResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(9, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNotNull(indexResponse0);
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(shardId0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      int int0 = 24;
      ShardId shardId0 = new ShardId(indexAction0.NAME, indexAction0.NAME, int0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(24, shardId0.getId());
      assertEquals(24, shardId0.id());
      assertNotNull(shardId0);
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, indexAction0.NAME, indexAction0.NAME, int0, boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(24, shardId0.getId());
      assertEquals(24, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("indices:data/write/index", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(24L, updateResponse0.getVersion());
      assertEquals("indices:data/write/index", updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      XContentType xContentType0 = XContentType.SMILE;
      XContent xContent0 = xContentType0.xContent();
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertNotNull(xContent0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = indexAction0.NAME;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder(xContent0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(4, stringArray0.length);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(24, shardId0.getId());
      assertEquals(24, shardId0.id());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("indices:data/write/index", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals(24L, updateResponse0.getVersion());
      assertEquals("indices:data/write/index", updateResponse0.getId());
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo();
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertNotNull(replicationResponse_ShardInfo0);
      
      indexResponse0.setShardInfo(replicationResponse_ShardInfo0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertNull(indexResponse0.getId());
      assertEquals(0, replicationResponse_ShardInfo0.getTotal());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(0, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      
      boolean boolean0 = indexResponse0.isCreated();
      assertFalse(boolean0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertNull(indexResponse0.getId());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      long long0 = indexResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertNull(indexResponse0.getId());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(objectOutputStream0);
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(objectOutputStream0);
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStreamOutput0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(dataOutputStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "F";
      long long0 = (-2126L);
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string0, long0, long0, boolean0);
      assertEquals("F", indexResponse0.getType());
      assertFalse(indexResponse0.isCreated());
      assertEquals("F", indexResponse0.getId());
      assertEquals((-2126L), indexResponse0.getSeqNo());
      assertEquals((-2126L), indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      StreamOutput streamOutput0 = null;
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(streamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      String string0 = updateResponse0.getType();
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-114);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-54);
      byteArray0[3] = byte3;
      byte byte4 = (byte)73;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-78);
      byteArray0[5] = byte5;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-114), (byte)0, (byte) (-54), (byte)73, (byte) (-78)}, byteArray0);
      assertNotNull(streamInput0);
      
      ParsingException parsingException0 = null;
      try {
        parsingException0 = new ParsingException(streamInput0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unknown exception for id: 9418
         //
         verifyException("org.elasticsearch.ElasticsearchException", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)50;
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        deleteResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DocWriteResponse.Fields docWriteResponse_Fields0 = new DocWriteResponse.Fields();
      assertNotNull(docWriteResponse_Fields0);
      
      String string0 = "7a}1_";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string0, string0);
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("7a}1_", deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.refresh());
      assertEquals("7a}1_", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("7a}1_", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertNotNull(deleteRequest0);
      
      String string1 = "A";
      DeleteRequest deleteRequest1 = deleteRequest0.parent(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("A", deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("7a}1_", deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.refresh());
      assertEquals("7a}1_", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("7a}1_", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("7a}1_", deleteRequest1.index());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("7a}1_", deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("A", deleteRequest1.parent());
      assertEquals("7a}1_", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNotNull(deleteRequest1);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      
      ShardId shardId0 = deleteRequest1.shardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("A", deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("7a}1_", deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.refresh());
      assertEquals("7a}1_", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("7a}1_", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("7a}1_", deleteRequest1.index());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("7a}1_", deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("A", deleteRequest1.parent());
      assertEquals("7a}1_", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(shardId0);
      assertNotSame(string0, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest1, deleteRequest0);
      
      String string2 = null;
      long long0 = 0L;
      boolean boolean0 = true;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string2, string0, long0, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("A", deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("7a}1_", deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.refresh());
      assertEquals("7a}1_", deleteRequest0.index());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("7a}1_", deleteRequest0.id());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("7a}1_", deleteRequest1.index());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("7a}1_", deleteRequest1.id());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("A", deleteRequest1.parent());
      assertEquals("7a}1_", deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertTrue(indexResponse0.isCreated());
      assertEquals(RestStatus.CREATED, indexResponse0.status());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals("7a}1_", indexResponse0.getId());
      assertNotNull(indexResponse0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      boolean boolean1 = updateResponse0.isCreated();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      int int0 = 630;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals(0L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        indexResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNotNull(updateResponse0);
      
      String string0 = "=4i:g";
      BytesArray bytesArray0 = new BytesArray(string0);
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(5, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(0, bytesArray0.arrayOffset());
      assertEquals(5, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertNotNull(streamInput0);
      
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(getResult0);
      
      updateResponse0.setGetResult(getResult0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      long long0 = updateResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      
      String string0 = updateResponse0.getId();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        updateResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse1.getVersion());
      assertNull(updateResponse1.getId());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertNull(updateResponse1.getType());
      assertFalse(updateResponse1.isCreated());
      assertNotNull(updateResponse1);
      assertNotSame(updateResponse1, updateResponse0);
      
      // Undeclared exception!
      try { 
        updateResponse0.status();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      ShardId shardId0 = indexResponse0.getShardId();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(shardId0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      XContentType xContentType0 = XContentType.SMILE;
      XContent xContent0 = xContentType0.xContent();
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertNotNull(xContent0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      String[] stringArray0 = null;
      XContentBuilder xContentBuilder0 = new XContentBuilder(xContent0, byteArrayBuilder0, stringArray0);
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      IndexResponse indexResponse0 = new IndexResponse();
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(4L, mockFile0.length());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotNull(objectOutputStream0);
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(objectOutputStream0);
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(4L, mockFile0.length());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertNotNull(dataOutputStreamOutput0);
      
      // Undeclared exception!
      try { 
        indexResponse0.writeTo(dataOutputStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-127);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)74;
      byteArray0[3] = byte3;
      int int0 = 214;
      int int1 = 623158436;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0, (byte)74}, byteArray0);
      assertNotNull(streamInput0);
      
      try { 
        deleteResponse0.readFrom(streamInput0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.InputStreamStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      String string0 = "";
      LocalTransportAddress localTransportAddress0 = new LocalTransportAddress(string0);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("", localTransportAddress0.id());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertNotNull(localTransportAddress0);
      
      deleteResponse0.remoteAddress((TransportAddress) localTransportAddress0);
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("", localTransportAddress0.id());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertNotNull(updateResponse0);
      
      UpdateResponse updateResponse1 = updateAction0.newResponse();
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.isCreated());
      assertNull(updateResponse1.getId());
      assertNotNull(updateResponse1);
      assertNotSame(updateResponse1, updateResponse0);
      
      updateResponse1.remoteAddress((TransportAddress) localTransportAddress0);
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertEquals((short)2, LocalTransportAddress.TYPE_ID);
      assertFalse(localTransportAddress0.isLoopbackOrLinkLocalAddress());
      assertEquals((short)2, localTransportAddress0.uniqueAddressTypeId());
      assertEquals("local", localTransportAddress0.getHost());
      assertEquals(0, localTransportAddress0.getPort());
      assertEquals("", localTransportAddress0.id());
      assertEquals("0.0.0.0", localTransportAddress0.getAddress());
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.isCreated());
      assertNull(updateResponse1.getId());
      assertNotSame(updateResponse1, updateResponse0);
      
      UpdateResponse updateResponse2 = updateAction0.newResponse();
      assertFalse(updateResponse2.equals((Object)updateResponse0));
      assertFalse(updateResponse2.equals((Object)updateResponse1));
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse2.getVersion());
      assertNull(updateResponse2.getType());
      assertFalse(updateResponse2.isCreated());
      assertNull(updateResponse2.getId());
      assertEquals(0L, updateResponse2.getSeqNo());
      assertNotNull(updateResponse2);
      assertNotSame(updateResponse2, updateResponse0);
      assertNotSame(updateResponse2, updateResponse1);
      
      boolean boolean0 = updateResponse1.isCreated();
      assertFalse(updateResponse1.equals((Object)updateResponse2));
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertFalse(boolean0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.isCreated());
      assertNull(updateResponse1.getId());
      assertNotSame(updateResponse1, updateResponse2);
      assertNotSame(updateResponse1, updateResponse0);
      
      ShardId shardId0 = updateResponse1.getShardId();
      assertFalse(updateResponse1.equals((Object)updateResponse2));
      assertFalse(updateResponse1.equals((Object)updateResponse0));
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse1.getType());
      assertEquals(0L, updateResponse1.getSeqNo());
      assertEquals(0L, updateResponse1.getVersion());
      assertFalse(updateResponse1.isCreated());
      assertNull(updateResponse1.getId());
      assertNull(shardId0);
      assertNotSame(updateResponse1, updateResponse2);
      assertNotSame(updateResponse1, updateResponse0);
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(404, restStatus0.getStatus());
      
      boolean boolean1 = deleteResponse0.isFound();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      
      int int0 = 1708;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1708, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1708, byteBuffer0.remaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1708, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1708, byteBuffer0.remaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotNull(byteBufferBytesReference0);
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) byteBufferBytesReference0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1708, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1708, byteBuffer0.remaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotNull(streamInput0);
      
      DataInputStream dataInputStream0 = new DataInputStream(streamInput0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1708, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1708, byteBuffer0.remaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotNull(dataInputStream0);
      
      byte[] byteArray0 = byteBufferBytesReference0.toBytes();
      assertEquals(1708, byteArray0.length);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1708, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1708, byteBuffer0.remaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotNull(byteArray0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(dataInputStream0);
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1708, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1708, byteBuffer0.remaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotNull(inputStreamStreamInput0);
      
      deleteResponse0.readFrom(inputStreamStreamInput0);
      assertFalse(streamInput0.equals((Object)inputStreamStreamInput0));
      assertFalse(inputStreamStreamInput0.equals((Object)streamInput0));
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1708, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1708 cap=1708]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1708, byteBuffer0.remaining());
      assertEquals(1708, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBufferBytesReference0.hasArray());
      assertNotSame(streamInput0, inputStreamStreamInput0);
      assertNotSame(inputStreamStreamInput0, streamInput0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "H,{)F$eu{e`th^{qN";
      String string1 = ")$<A(J.{@H kw1";
      long long0 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(updateResponse0.isCreated());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("H,{)F$eu{e`th^{qN", updateResponse0.getType());
      assertEquals(")$<A(J.{@H kw1", updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      byte byte0 = (byte)72;
      bytesStreamOutput0.writeByte(byte0);
      assertEquals(1, bytesStreamOutput0.size());
      assertEquals(1L, bytesStreamOutput0.position());
      
      // Undeclared exception!
      try { 
        updateResponse0.writeTo(bytesStreamOutput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = indexResponse0.isCreated();
      assertFalse(boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(404, restStatus0.getStatus());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertNotNull(jsonXContent0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = indexAction0.NAME;
      stringArray0[1] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(2, stringArray0.length);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "org.elasticsearch.index.engine.VersionConflictEngineException";
      long long0 = 0L;
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("org.elasticsearch.index.engine.VersionConflictEngineException", updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertEquals("org.elasticsearch.index.engine.VersionConflictEngineException", updateResponse0.getId());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertNotNull(updateResponse0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      OutputStreamStreamOutput outputStreamStreamOutput0 = new OutputStreamStreamOutput(pipedOutputStream0);
      assertNotNull(outputStreamStreamOutput0);
      
      try { 
        updateResponse0.writeTo(outputStreamStreamOutput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNotNull(updateRequest0);
      
      String string0 = "_id";
      UpdateRequest updateRequest1 = updateRequest0.upsert(string0);
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      boolean boolean0 = true;
      UpdateRequest updateRequest2 = updateRequest1.scriptedUpsert(boolean0);
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.refresh());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.refresh());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertNull(shardId0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      
      String string1 = "_seq_no";
      long long0 = 0L;
      boolean boolean1 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string1, long0, long0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.refresh());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      long long1 = deleteResponse0.getVersion();
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest0.routing());
      assertTrue(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest1.concreteIndex());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(updateRequest1.scriptType());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest1.refresh());
      assertTrue(updateRequest1.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest2.docAsUpsert());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.id());
      assertNull(updateRequest2.routing());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertFalse(updateRequest2.refresh());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertNull(updateRequest2.scriptString());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string0, string1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest1);
      assertSame(updateRequest2, updateRequest0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNotNull(updateRequest0);
      
      String string0 = "~id";
      UpdateRequest updateRequest1 = updateRequest0.upsert(string0);
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest1.index());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.id());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      boolean boolean0 = true;
      UpdateRequest updateRequest2 = updateRequest1.scriptedUpsert(boolean0);
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest1.index());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.scriptString());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest1.index());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.scriptString());
      assertNull(shardId0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      
      String string1 = "_seq_no";
      long long0 = 0L;
      boolean boolean1 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string1, long0, long0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest1.index());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.scriptString());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      long long1 = deleteResponse0.getVersion();
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest1.index());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.scriptString());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string0, string1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNotSame(string1, string0);
      
      String string2 = deleteResponse0.getId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(long0 == long1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("_seq_no", string2);
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertNull(updateRequest0.scriptType());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.id());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.scriptLang());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest0.type());
      assertEquals((-3L), updateRequest0.version());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest1.index());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.type());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertTrue(updateRequest1.detectNoop());
      assertNull(updateRequest1.scriptString());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.parent());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.id());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.scriptType());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertNull(updateRequest2.scriptString());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertNotNull(string2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int0 = (-60);
      Settings settings0 = Settings.Builder.EMPTY_SETTINGS;
      assertNotNull(settings0);
      
      CircuitBreakerService circuitBreakerService0 = null;
      MockBigArrays mockBigArrays0 = new MockBigArrays(settings0, circuitBreakerService0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertNotNull(mockBigArrays0);
      
      ReleasableBytesStreamOutput releasableBytesStreamOutput0 = null;
      try {
        releasableBytesStreamOutput0 = new ReleasableBytesStreamOutput(int0, mockBigArrays0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.util.BigArrays", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      String string0 = ", took [";
      FieldSortBuilder fieldSortBuilder0 = new FieldSortBuilder(string0);
      assertNull(fieldSortBuilder0.getNestedPath());
      assertEquals("field_sort", fieldSortBuilder0.getWriteableName());
      assertEquals(", took [", fieldSortBuilder0.getFieldName());
      assertNull(fieldSortBuilder0.sortMode());
      assertEquals(SortOrder.ASC, fieldSortBuilder0.order());
      assertNull(fieldSortBuilder0.unmappedType());
      assertNotNull(fieldSortBuilder0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-13);
      byteArray0[0] = byte0;
      int int0 = (-25);
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);
      assertNotNull(streamInput0);
      
      SmileXContent smileXContent0 = SmileXContent.smileXContent;
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertNotNull(smileXContent0);
      
      String[] stringArray0 = new String[0];
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) smileXContent0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(XContentType.SMILE, smileXContent0.type());
      assertEquals((byte) (-1), smileXContent0.streamSeparator());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = null;
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(404, restStatus0.getStatus());
      
      // Undeclared exception!
      try { 
        deleteResponse0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      int int0 = 280;
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals(280, shardId0.id());
      assertEquals(280, shardId0.getId());
      assertNotNull(shardId0);
      
      long long0 = (-465L);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertNotNull(bigArrays0);
      
      String string1 = shardId0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[][280]", string1);
      assertEquals(280, shardId0.id());
      assertEquals(280, shardId0.getId());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string0, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(280, shardId0.id());
      assertEquals(280, shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-465L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      String string2 = updateResponse0.getType();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(280, shardId0.id());
      assertEquals(280, shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals((-465L), updateResponse0.getVersion());
      assertEquals("", updateResponse0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        indexResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getType());
      assertNotNull(deleteResponse0);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      String string0 = null;
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(cborXContent0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) cborXContent0, stringArray0, boolean0);
      assertEquals(0, stringArray0.length);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = metaData0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      boolean boolean1 = metaData0.hasIndex(string0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(settings0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(dataOutputStream0);
      
      dataOutputStream0.flush();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(dataOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(dataOutputStreamOutput0);
      
      Settings.writeSettingsToStream(settings0, dataOutputStreamOutput0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      TransportRequestOptions transportRequestOptions0 = updateAction0.transportOptions(settings0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertFalse(transportRequestOptions0.compress());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(transportRequestOptions0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNotNull(updateResponse0);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(getResult0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNotNull(indexResponse0);
      
      IndexResponse indexResponse1 = indexAction0.newResponse();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertNotNull(indexResponse1);
      assertNotSame(indexResponse1, indexResponse0);
      
      boolean boolean2 = indexResponse1.isCreated();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertNotSame(indexResponse1, indexResponse0);
      
      long long0 = indexResponse1.getSeqNo();
      assertFalse(indexResponse1.equals((Object)indexResponse0));
      assertEquals(0L, long0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse1.isCreated());
      assertEquals(0L, indexResponse1.getVersion());
      assertNull(indexResponse1.getType());
      assertEquals(0L, indexResponse1.getSeqNo());
      assertNull(indexResponse1.getId());
      assertNotSame(indexResponse1, indexResponse0);
      
      StreamInput streamInput0 = null;
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.ReplicationResponse$ShardInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "";
      String string1 = "";
      long long0 = 0L;
      boolean boolean0 = false;
      IndexResponse indexResponse0 = new IndexResponse(shardId0, string0, string1, long0, long0, boolean0);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      String string2 = indexResponse0.getId();
      assertEquals("", string2);
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertNotNull(updateRequest0);
      
      String string0 = "~id";
      UpdateRequest updateRequest1 = updateRequest0.upsert(string0);
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.refresh());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      boolean boolean0 = false;
      UpdateRequest updateRequest2 = updateRequest1.scriptedUpsert(boolean0);
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.refresh());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.scriptLang());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertNotNull(updateRequest2);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.refresh());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.scriptLang());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertNull(shardId0);
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      
      String string1 = "_seq_no";
      long long0 = (-10L);
      boolean boolean1 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string1, long0, long0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.refresh());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.scriptLang());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertEquals((-10L), deleteResponse0.getSeqNo());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals((-10L), deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      long long1 = deleteResponse0.getVersion();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(long1 == long0);
      assertEquals((-10L), long1);
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.routing());
      assertFalse(updateRequest0.scriptedUpsert());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.concreteIndex());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertNull(updateRequest1.index());
      assertNull(updateRequest1.scriptLang());
      assertFalse(updateRequest1.refresh());
      assertEquals((-3L), updateRequest1.version());
      assertNull(updateRequest1.concreteIndex());
      assertNull(updateRequest1.type());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertTrue(updateRequest2.detectNoop());
      assertNull(updateRequest2.parent());
      assertFalse(updateRequest2.docAsUpsert());
      assertFalse(updateRequest2.scriptedUpsert());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.type());
      assertFalse(updateRequest2.refresh());
      assertNull(updateRequest2.index());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertNull(updateRequest2.scriptLang());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.id());
      assertEquals((-10L), deleteResponse0.getSeqNo());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals((-10L), deleteResponse0.getVersion());
      assertSame(updateRequest0, updateRequest2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string0, string1);
      assertSame(updateRequest1, updateRequest0);
      assertSame(updateRequest1, updateRequest2);
      assertSame(updateRequest2, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      MetaData metaData0 = MetaData.PROTO;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      String string0 = null;
      CborXContent cborXContent0 = CborXContent.cborXContent;
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertNotNull(cborXContent0);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) cborXContent0, stringArray0, boolean0);
      assertEquals(0, stringArray0.length);
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = metaData0.toXContent(xContentBuilder0, toXContent_Params0);
      assertEquals(0, stringArray0.length);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(XContentType.CBOR, cborXContent0.type());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals(XContentType.CBOR, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      boolean boolean1 = metaData0.hasIndex(string0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.transientSettings();
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(dataOutputStream0);
      
      dataOutputStream0.flush();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      DataOutputStreamOutput dataOutputStreamOutput0 = new DataOutputStreamOutput(dataOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(dataOutputStreamOutput0);
      
      Settings.writeSettingsToStream(settings0, dataOutputStreamOutput0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      TransportRequestOptions transportRequestOptions0 = updateAction0.transportOptions(settings0);
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(TransportRequestOptions.Type.REG, transportRequestOptions0.type());
      assertFalse(transportRequestOptions0.compress());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(transportRequestOptions0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(getResult0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      boolean boolean2 = indexResponse0.isCreated();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      long long0 = indexResponse0.getSeqNo();
      assertEquals(0L, long0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.docAsUpsert());
      assertFalse(updateRequest0.scriptedUpsert());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertTrue(updateRequest0.detectNoop());
      assertNull(updateRequest0.id());
      assertNull(updateRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.concreteIndex());
      assertFalse(updateRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertNotNull(updateRequest0);
      
      String string0 = "~id";
      UpdateRequest updateRequest1 = new UpdateRequest(string0, string0, string0);
      assertFalse(updateRequest1.equals((Object)updateRequest0));
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertEquals("~id", updateRequest1.type());
      assertEquals("~id", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("~id", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.scriptedUpsert());
      assertFalse(updateRequest1.docAsUpsert());
      assertNotNull(updateRequest1);
      
      boolean boolean0 = true;
      UpdateRequest updateRequest2 = updateRequest1.scriptedUpsert(boolean0);
      assertFalse(updateRequest1.equals((Object)updateRequest0));
      assertFalse(updateRequest2.equals((Object)updateRequest0));
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertEquals("~id", updateRequest1.type());
      assertEquals("~id", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("~id", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertEquals("~id", updateRequest2.id());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals("~id", updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals("~id", updateRequest2.type());
      assertNotNull(updateRequest2);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNotSame(updateRequest2, updateRequest0);
      
      ShardId shardId0 = updateRequest2.getShardId();
      assertFalse(updateRequest1.equals((Object)updateRequest0));
      assertFalse(updateRequest2.equals((Object)updateRequest0));
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertEquals("~id", updateRequest1.type());
      assertEquals("~id", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("~id", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertEquals("~id", updateRequest2.id());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals("~id", updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals("~id", updateRequest2.type());
      assertNull(shardId0);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNotSame(updateRequest2, updateRequest0);
      
      String string1 = "_seq_no";
      long long0 = 10L;
      boolean boolean1 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string1, long0, long0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(updateRequest1.equals((Object)updateRequest0));
      assertFalse(boolean0 == boolean1);
      assertFalse(updateRequest2.equals((Object)updateRequest0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertEquals("~id", updateRequest1.type());
      assertEquals("~id", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("~id", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertEquals("~id", updateRequest2.id());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals("~id", updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals("~id", updateRequest2.type());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals(10L, deleteResponse0.getSeqNo());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(10L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      long long1 = deleteResponse0.getVersion();
      assertFalse(string0.equals((Object)string1));
      assertFalse(updateRequest1.equals((Object)updateRequest0));
      assertFalse(boolean0 == boolean1);
      assertFalse(updateRequest2.equals((Object)updateRequest0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertEquals(10L, long1);
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.refresh());
      assertEquals("~id", updateRequest1.type());
      assertEquals("~id", updateRequest1.index());
      assertNull(updateRequest1.routing());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.scriptType());
      assertNull(updateRequest1.scriptLang());
      assertTrue(updateRequest1.detectNoop());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.concreteIndex());
      assertEquals("~id", updateRequest1.id());
      assertNull(updateRequest1.scriptString());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertTrue(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.docAsUpsert());
      assertTrue(updateRequest2.detectNoop());
      assertEquals("~id", updateRequest2.id());
      assertFalse(updateRequest2.getShouldPersistResult());
      assertFalse(updateRequest2.docAsUpsert());
      assertNull(updateRequest2.concreteIndex());
      assertNull(updateRequest2.routing());
      assertNull(updateRequest2.parent());
      assertTrue(updateRequest2.scriptedUpsert());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest2.consistencyLevel());
      assertFalse(updateRequest2.refresh());
      assertEquals("~id", updateRequest2.index());
      assertNull(updateRequest2.scriptLang());
      assertEquals(VersionType.INTERNAL, updateRequest2.versionType());
      assertEquals(0, updateRequest2.retryOnConflict());
      assertEquals((-3L), updateRequest2.version());
      assertNull(updateRequest2.scriptType());
      assertNull(updateRequest2.scriptString());
      assertEquals("~id", updateRequest2.type());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals(10L, deleteResponse0.getSeqNo());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(10L, deleteResponse0.getVersion());
      assertNotSame(string0, string1);
      assertSame(updateRequest1, updateRequest2);
      assertNotSame(updateRequest1, updateRequest0);
      assertSame(updateRequest2, updateRequest1);
      assertNotSame(updateRequest2, updateRequest0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      UpdateRequest updateRequest0 = new UpdateRequest();
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNotNull(updateRequest0);
      
      String string0 = "~id";
      UpdateRequest updateRequest1 = updateRequest0.upsert(string0);
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.docAsUpsert());
      assertNotNull(updateRequest1);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      boolean boolean0 = true;
      ShardId shardId0 = updateRequest1.getShardId();
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.docAsUpsert());
      assertNull(shardId0);
      assertSame(updateRequest0, updateRequest1);
      assertSame(updateRequest1, updateRequest0);
      
      String string1 = "_seq_no";
      long long0 = 0L;
      boolean boolean1 = false;
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string1, string1, long0, long0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      
      long long1 = deleteResponse0.getVersion();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string0, string1);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string1, string0);
      
      String string2 = deleteResponse0.getType();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(long0 == long1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("_seq_no", string2);
      assertFalse(updateRequest0.getShouldPersistResult());
      assertNull(updateRequest0.scriptString());
      assertEquals((-3L), updateRequest0.version());
      assertNull(updateRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest0.consistencyLevel());
      assertNull(updateRequest0.parent());
      assertFalse(updateRequest0.scriptedUpsert());
      assertFalse(updateRequest0.docAsUpsert());
      assertNull(updateRequest0.scriptLang());
      assertNull(updateRequest0.index());
      assertNull(updateRequest0.id());
      assertFalse(updateRequest0.refresh());
      assertNull(updateRequest0.scriptType());
      assertNull(updateRequest0.routing());
      assertNull(updateRequest0.concreteIndex());
      assertTrue(updateRequest0.detectNoop());
      assertEquals(VersionType.INTERNAL, updateRequest0.versionType());
      assertEquals(0, updateRequest0.retryOnConflict());
      assertNull(updateRequest1.scriptString());
      assertFalse(updateRequest1.getShouldPersistResult());
      assertNull(updateRequest1.type());
      assertEquals((-3L), updateRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, updateRequest1.consistencyLevel());
      assertNull(updateRequest1.scriptType());
      assertEquals(VersionType.INTERNAL, updateRequest1.versionType());
      assertNull(updateRequest1.routing());
      assertNull(updateRequest1.concreteIndex());
      assertTrue(updateRequest1.detectNoop());
      assertEquals(0, updateRequest1.retryOnConflict());
      assertFalse(updateRequest1.scriptedUpsert());
      assertNull(updateRequest1.id());
      assertNull(updateRequest1.scriptLang());
      assertNull(updateRequest1.parent());
      assertFalse(updateRequest1.refresh());
      assertNull(updateRequest1.index());
      assertFalse(updateRequest1.docAsUpsert());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("_seq_no", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("_seq_no", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(string2);
      assertSame(updateRequest0, updateRequest1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(updateRequest1, updateRequest0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = new IndexResponse();
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      GetResult getResult0 = updateResponse0.getGetResult();
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(getResult0);
      
      XContentBuilder xContentBuilder0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-56);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-44);
      byteArray0[3] = byte3;
      byte byte4 = (byte)82;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-120);
      byteArray0[5] = byte5;
      byte byte6 = (byte)91;
      byteArray0[6] = byte6;
      byte byte7 = (byte)0;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0, (int) byte0, (int) byteArray0[6]);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte8);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte5);
      assertFalse(byte0 == byte7);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte) (-44), (byte)82, (byte) (-120), (byte)91, (byte)0, (byte)0}, byteArray0);
      assertNotNull(streamInput0);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(streamInput0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      
      RestStatus restStatus0 = deleteResponse0.status();
      assertEquals(RestStatus.NOT_FOUND, restStatus0);
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(404, restStatus0.getStatus());
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(jsonXContent0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      XContentBuilder xContentBuilder0 = YamlXContent.contentBuilder();
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.YAML, xContentBuilder0.contentType());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = null;
      // Undeclared exception!
      try { 
        deleteResponse0.toXContent(xContentBuilder0, toXContent_Params0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expected DocumentEndEvent, but got <com.fasterxml.jackson.dataformat.yaml.snakeyaml.events.ScalarEvent(anchor=null, tag=null, implicit=[true, true], value=false)>
         //
         verifyException("com.fasterxml.jackson.dataformat.yaml.snakeyaml.emitter.Emitter$ExpectDocumentEnd", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      ShardId shardId0 = null;
      String string0 = "l{";
      String string1 = "";
      long long0 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string0, string1, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", updateResponse0.getId());
      assertEquals("l{", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      long long1 = updateResponse0.getSeqNo();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(long1 == long0);
      assertEquals((-2L), long1);
      assertEquals("", updateResponse0.getId());
      assertEquals("l{", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertTrue(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      byte[] byteArray0 = null;
      int int0 = 844;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = 0;
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      byte byte0 = (byte) (-72);
      String string0 = updateResponse0.getType();
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertEquals(0L, updateResponse0.getVersion());
      assertNull(updateResponse0.getType());
      assertFalse(updateResponse0.isCreated());
      assertNull(string0);
      
      int int0 = 0;
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int0);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertNotNull(dynamicChannelBuffer0);
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(dynamicChannelBuffer0);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertNotNull(channelBufferBytesReference0);
      
      StreamInput streamInput0 = channelBufferBytesReference0.streamInput();
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertNotNull(streamInput0);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NamedWriteableAwareStreamInput namedWriteableAwareStreamInput0 = new NamedWriteableAwareStreamInput(streamInput0, namedWriteableRegistry0);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(0, channelBufferBytesReference0.length());
      assertTrue(channelBufferBytesReference0.hasArray());
      assertEquals(0, streamInput0.available());
      assertTrue(streamInput0.markSupported());
      assertNotNull(namedWriteableAwareStreamInput0);
      
      // Undeclared exception!
      try { 
        updateResponse0.readFrom(namedWriteableAwareStreamInput0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Readable byte limit exceeded: 0
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = null;
      int int0 = 593;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(593, byteBuffer0.limit());
      assertEquals(593, byteBuffer0.remaining());
      assertEquals(593, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=593 cap=593]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      ByteBufferBytesReference byteBufferBytesReference0 = new ByteBufferBytesReference(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(593, byteBuffer0.limit());
      assertEquals(593, byteBuffer0.remaining());
      assertEquals(593, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=593 cap=593]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertNotNull(byteBufferBytesReference0);
      
      StreamInput streamInput0 = StreamInput.wrap((BytesReference) byteBufferBytesReference0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(593, byteBuffer0.limit());
      assertEquals(593, byteBuffer0.remaining());
      assertEquals(593, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=593 cap=593]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertNotNull(streamInput0);
      
      ParsingException parsingException0 = new ParsingException(streamInput0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertNotNull(parsingException0);
      
      ShardId shardId0 = parsingException0.getShardId();
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(593, byteBuffer0.limit());
      assertEquals(593, byteBuffer0.remaining());
      assertEquals(593, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=593 cap=593]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertNull(shardId0);
      
      String string0 = "_seq_no";
      String string1 = "ZLGT$3]jL<0 RWg";
      long long0 = 1531L;
      boolean boolean1 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string0, string1, long0, long0, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(593, byteBuffer0.limit());
      assertEquals(593, byteBuffer0.remaining());
      assertEquals(593, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=593 cap=593]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals("ZLGT$3]jL<0 RWg", updateResponse0.getId());
      assertEquals("_seq_no", updateResponse0.getType());
      assertEquals(1531L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(1531L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      long long1 = updateResponse0.getSeqNo();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertTrue(long1 == long0);
      assertEquals(1531L, long1);
      assertFalse(ElasticsearchException.REST_EXCEPTION_SKIP_CAUSE_DEFAULT);
      assertTrue(ElasticsearchException.REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(593, byteBuffer0.limit());
      assertEquals(593, byteBuffer0.remaining());
      assertEquals(593, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=593 cap=593]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBufferBytesReference0.hasArray());
      assertEquals(0, parsingException0.getLineNumber());
      assertEquals(0, parsingException0.getColumnNumber());
      assertEquals(RestStatus.BAD_REQUEST, parsingException0.status());
      assertEquals("ZLGT$3]jL<0 RWg", updateResponse0.getId());
      assertEquals("_seq_no", updateResponse0.getType());
      assertEquals(1531L, updateResponse0.getSeqNo());
      assertFalse(updateResponse0.isCreated());
      assertEquals(1531L, updateResponse0.getVersion());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      
      int int0 = 678;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      int int1 = 118;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int1);
      assertFalse(int1 == int0);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(118, byteBuffer0.capacity());
      assertEquals(118, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(118, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertFalse(int1 == int0);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(118, byteBuffer0.capacity());
      assertEquals(118, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(118, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertFalse(int1 == int0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=118 cap=118]", byteBuffer0.toString());
      assertEquals(107, byteBuffer0.remaining());
      assertEquals(11, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(118, byteBuffer0.capacity());
      assertEquals(118, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(11L, bytesStreamOutput0.position());
      assertEquals(11, bytesStreamOutput0.size());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(string0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      // Undeclared exception!
      try { 
        Charset.forName(deleteAction0.NAME);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // indices:data/write/delete
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "~41~TRWR*P=`j.peF`";
      String string1 = "org.elasticsearch.action.DocWriteResponse";
      int int0 = 0;
      ShardId shardId0 = new ShardId(string0, string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertNotNull(shardId0);
      
      String string2 = "";
      String string3 = "S!Bh/YY^";
      boolean boolean0 = true;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      shardId0.writeTo(bytesStreamOutput0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals(62, bytesStreamOutput0.size());
      assertEquals(62L, bytesStreamOutput0.position());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      DeleteResponse deleteResponse0 = new DeleteResponse(shardId0, string2, string3, int0, int0, boolean0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("S!Bh/YY^", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(deleteResponse0);
      
      boolean boolean1 = deleteResponse0.isFound();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("S!Bh/YY^", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      String string4 = deleteResponse0.getIndex();
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("~41~TRWR*P=`j.peF`", string4);
      assertEquals(0, shardId0.getId());
      assertEquals(0, shardId0.id());
      assertEquals("", deleteResponse0.getType());
      assertTrue(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("S!Bh/YY^", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNotNull(string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      
      int int0 = 678;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      int int1 = 118;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int1);
      assertFalse(int1 == int0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(118, byteBuffer0.limit());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(118, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertFalse(int1 == int0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(118, byteBuffer0.limit());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(118, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertFalse(int1 == int0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(107, byteBuffer0.remaining());
      assertEquals(118, byteBuffer0.limit());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(11, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=118 cap=118]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertFalse(int0 == int1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(11L, bytesStreamOutput0.position());
      assertEquals(11, bytesStreamOutput0.size());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(string0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getType());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNotNull(indexResponse0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ShardId shardId0 = deleteResponse0.getShardId();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(0, shardId0.id());
      assertEquals(0, shardId0.getId());
      assertNotNull(shardId0);
      
      indexResponse0.readFrom(byteBufferStreamInput0);
      assertFalse(int1 == int0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(22, byteBuffer0.position());
      assertEquals(96, byteBuffer0.remaining());
      assertEquals(118, byteBuffer0.limit());
      assertEquals(118, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=22 lim=118 cap=118]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals("", indexResponse0.getType());
      assertEquals("", indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      
      String string1 = "_index";
      ByteBuffer byteBuffer1 = charset0.encode(string1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteBuffer1.isDirect());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(6, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(6, byteBuffer1.limit());
      assertEquals(6, byteBuffer1.capacity());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(string1, string0);
      
      ByteBufferStreamInput byteBufferStreamInput1 = new ByteBufferStreamInput(byteBuffer1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(byteBufferStreamInput1.equals((Object)byteBufferStreamInput0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteBuffer1.isDirect());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(6, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(6, byteBuffer1.limit());
      assertEquals(6, byteBuffer1.capacity());
      assertTrue(byteBufferStreamInput1.markSupported());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(byteBufferStreamInput1);
      
      try { 
        indexResponse0.readFrom(byteBufferStreamInput1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.common.io.stream.ByteBufferStreamInput", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      
      int int0 = 678;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      int int1 = 118;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int1);
      assertFalse(int1 == int0);
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(118, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertEquals(118, byteBuffer0.remaining());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertFalse(int1 == int0);
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(118, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertEquals(118, byteBuffer0.remaining());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertFalse(int1 == int0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(118, byteBuffer0.limit());
      assertEquals(11, byteBuffer0.position());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(107, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=118 cap=118]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(11, bytesStreamOutput0.size());
      assertEquals(11L, bytesStreamOutput0.position());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getId());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(string0);
      
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertNotNull(indexResponse0);
      
      String string1 = "_index";
      indexResponse0.readFrom(byteBufferStreamInput0);
      assertFalse(int1 == int0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(22, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(118, byteBuffer0.limit());
      assertEquals(96, byteBuffer0.remaining());
      assertEquals(118, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=22 lim=118 cap=118]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(RestStatus.OK, indexResponse0.status());
      assertEquals("", indexResponse0.getType());
      assertEquals(0L, indexResponse0.getVersion());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertEquals("", indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(deleteResponse0);
      
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      int int0 = 118;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertEquals(118, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(118, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertEquals(118, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(118, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=118 cap=118]", byteBuffer0.toString());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(118, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(107, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=118 cap=118]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(118, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(11L, bytesStreamOutput0.position());
      assertEquals(11, bytesStreamOutput0.size());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNotNull(string0);
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(22, bytesStreamOutput0.size());
      assertEquals(22L, bytesStreamOutput0.position());
      
      int int1 = 0;
      Random.setNextRandom(int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      DeleteAction deleteAction0 = DeleteAction.INSTANCE;
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertNotNull(deleteAction0);
      
      DeleteResponse deleteResponse0 = deleteAction0.newResponse();
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertNull(deleteResponse0.getId());
      assertNotNull(deleteResponse0);
      
      int int0 = 678;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput();
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertEquals(678, byteBuffer0.remaining());
      assertEquals(678, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(678, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=678 cap=678]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertEquals(678, byteBuffer0.remaining());
      assertEquals(678, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(678, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=678 cap=678]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertEquals(678, byteBuffer0.capacity());
      assertEquals(667, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=678 cap=678]", byteBuffer0.toString());
      assertEquals(678, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(11, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      String string0 = deleteResponse0.getIndex();
      assertEquals("", string0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertNotNull(string0);
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertEquals(11, bytesStreamOutput0.size());
      assertEquals(11L, bytesStreamOutput0.position());
      
      String string1 = deleteResponse0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string1);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals("indices:data/write/delete", deleteAction0.name());
      assertFalse(deleteResponse0.isFound());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("", deleteResponse0.getId());
      assertEquals(678, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=22 lim=678 cap=678]", byteBuffer0.toString());
      assertEquals(22, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(656, byteBuffer0.remaining());
      assertEquals(678, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNotNull(updateResponse0);
      
      // Undeclared exception!
      try { 
        updateResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.DocWriteResponse", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNull(indexResponse0.getType());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getId());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNotNull(indexResponse0);
      
      FieldMapper.MultiFields fieldMapper_MultiFields0 = FieldMapper.MultiFields.empty();
      assertNotNull(fieldMapper_MultiFields0);
      
      String string0 = "LKe`mJo?N";
      int int0 = 43;
      ShardId shardId0 = new ShardId(indexAction0.NAME, string0, int0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(43, shardId0.getId());
      assertEquals(43, shardId0.id());
      assertNotNull(shardId0);
      
      String string1 = "]pmYmYk'fgq";
      String string2 = "";
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, string1, string2, int0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(43, shardId0.getId());
      assertEquals(43, shardId0.id());
      assertTrue(updateResponse0.isCreated());
      assertEquals("", updateResponse0.getId());
      assertEquals("]pmYmYk'fgq", updateResponse0.getType());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(43L, updateResponse0.getVersion());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      XContentBuilder xContentBuilder0 = JsonXContent.contentBuilder();
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertNotNull(xContentBuilder0);
      
      Settings.Builder settings_Builder0 = Settings.builder();
      assertNotNull(settings_Builder0);
      
      Map<String, String> map0 = settings_Builder0.internalMap();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(map0, toXContent_Params0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(toXContent_DelegatingMapParams0);
      
      try { 
        updateResponse0.toXContent(xContentBuilder0, toXContent_DelegatingMapParams0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = null;
      String string0 = "group-0x";
      int int0 = (-1154);
      ShardId shardId0 = new ShardId(string0, string0, int0);
      assertEquals((-1154), shardId0.id());
      assertEquals((-1154), shardId0.getId());
      assertNotNull(shardId0);
      
      String string1 = "_id";
      long long0 = 0L;
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, string1, string1, int0, long0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1154), shardId0.id());
      assertEquals((-1154), shardId0.getId());
      assertEquals((-1154L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_id", updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1154), shardId0.id());
      assertEquals((-1154), shardId0.getId());
      assertEquals((-1154L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("_id", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals(0L, updateResponse0.getVersion());
      assertEquals("_id", updateResponse0.getId());
      assertEquals((-1154), shardId1.getId());
      assertEquals((-1154), shardId1.id());
      assertNotNull(shardId1);
      assertNotSame(string0, string1);
      assertSame(shardId0, shardId1);
      assertNotSame(string1, string0);
      assertSame(shardId1, shardId0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      int int0 = 681;
      UpdateAction updateAction0 = UpdateAction.INSTANCE;
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNotNull(updateAction0);
      
      UpdateResponse updateResponse0 = updateAction0.newResponse();
      assertEquals("indices:data/write/update", updateAction0.name());
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(bufferedInputStream0);
      
      InputStreamStreamInput inputStreamStreamInput0 = new InputStreamStreamInput(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(inputStreamStreamInput0);
      
      try { 
        updateResponse0.readFrom(inputStreamStreamInput0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      int int0 = 63;
      ShardId shardId0 = new ShardId(indexAction0.NAME, indexAction0.NAME, int0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(63, shardId0.id());
      assertEquals(63, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean0 = false;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, indexAction0.NAME, indexAction0.NAME, int0, boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(63, shardId0.id());
      assertEquals(63, shardId0.getId());
      assertEquals("indices:data/write/index", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("indices:data/write/index", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(63L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertNotNull(updateResponse0);
      
      XContentBuilder xContentBuilder0 = CborXContent.contentBuilder();
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals(XContentType.CBOR, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      ToXContent.DelegatingMapParams toXContent_DelegatingMapParams0 = new ToXContent.DelegatingMapParams(hashtable0, toXContent_Params0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(toXContent_DelegatingMapParams0);
      
      XContentBuilder xContentBuilder1 = JsonXContent.contentBuilder();
      assertFalse(xContentBuilder1.equals((Object)xContentBuilder0));
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertNotNull(xContentBuilder1);
      assertNotSame(xContentBuilder1, xContentBuilder0);
      
      ShardId shardId1 = updateResponse0.getShardId();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(63, shardId0.id());
      assertEquals(63, shardId0.getId());
      assertEquals("indices:data/write/index", updateResponse0.getType());
      assertEquals(RestStatus.OK, updateResponse0.status());
      assertEquals("indices:data/write/index", updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(63L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals(63, shardId1.getId());
      assertEquals(63, shardId1.id());
      assertNotNull(shardId1);
      assertSame(shardId0, shardId1);
      assertSame(shardId1, shardId0);
      
      String string0 = null;
      BytesArray bytesArray0 = null;
      try {
        bytesArray0 = new BytesArray(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.lucene.util.BytesRef", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(deleteResponse0);
      
      int int0 = 697;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(697, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(697, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(11, byteBuffer0.position());
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(686, byteBuffer0.remaining());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(11L, bytesStreamOutput0.position());
      assertEquals(11, bytesStreamOutput0.size());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertNotNull(string0);
      
      GetResult getResult0 = GetResult.readGetResult(byteBufferStreamInput0);
      assertEquals(697, byteBuffer0.limit());
      assertEquals(674, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("", getResult0.getIndex());
      assertEquals(0L, getResult0.getVersion());
      assertEquals("", getResult0.getId());
      assertNull(getResult0.getType());
      assertTrue(getResult0.isSourceEmpty());
      assertFalse(getResult0.isExists());
      assertNotNull(getResult0);
      
      MaxAggregationBuilder maxAggregationBuilder0 = new MaxAggregationBuilder(string0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.field());
      assertNull(maxAggregationBuilder0.format());
      assertNotNull(maxAggregationBuilder0);
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(jsonXContent0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = maxAggregationBuilder0.NAME;
      boolean boolean0 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0, boolean0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertNotNull(fakeRestRequest0);
      
      XContentBuilder xContentBuilder1 = maxAggregationBuilder0.doXContentBody(xContentBuilder0, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.field());
      assertNull(maxAggregationBuilder0.format());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      XContentBuilder xContentBuilder2 = getResult0.toXContentEmbedded(xContentBuilder1, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(697, byteBuffer0.limit());
      assertEquals(674, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(23, byteBuffer0.position());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals("", getResult0.getIndex());
      assertEquals(0L, getResult0.getVersion());
      assertEquals("", getResult0.getId());
      assertNull(getResult0.getType());
      assertTrue(getResult0.isSourceEmpty());
      assertFalse(getResult0.isExists());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.field());
      assertNull(maxAggregationBuilder0.format());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      
      XContentBuilder xContentBuilder3 = deleteResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertEquals(697, byteBuffer0.limit());
      assertEquals(674, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(23, byteBuffer0.position());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals("", getResult0.getIndex());
      assertEquals(0L, getResult0.getVersion());
      assertEquals("", getResult0.getId());
      assertNull(getResult0.getType());
      assertTrue(getResult0.isSourceEmpty());
      assertFalse(getResult0.isExists());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.field());
      assertNull(maxAggregationBuilder0.format());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      int int0 = 697;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertEquals(0, bytesStreamOutput0.size());
      assertEquals(0L, bytesStreamOutput0.position());
      assertNotNull(bytesStreamOutput0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(697, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(697, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(686, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(11, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(11, bytesStreamOutput0.size());
      assertEquals(11L, bytesStreamOutput0.position());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(string0);
      
      GetResult getResult0 = GetResult.readGetResult(byteBufferStreamInput0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(674, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertTrue(getResult0.isSourceEmpty());
      assertFalse(getResult0.isExists());
      assertEquals("", getResult0.getIndex());
      assertEquals("", getResult0.getId());
      assertNull(getResult0.getType());
      assertEquals(0L, getResult0.getVersion());
      assertNotNull(getResult0);
      
      MaxAggregationBuilder maxAggregationBuilder0 = new MaxAggregationBuilder(string0);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.format());
      assertNotNull(maxAggregationBuilder0);
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertNotNull(jsonXContent0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = maxAggregationBuilder0.NAME;
      stringArray0[1] = maxAggregationBuilder0.NAME;
      stringArray0[2] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      stringArray0[3] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      stringArray0[4] = string0;
      stringArray0[5] = maxAggregationBuilder0.NAME;
      boolean boolean0 = true;
      XContentGenerator xContentGenerator0 = jsonXContent0.createGenerator((OutputStream) bytesStreamOutput0, stringArray0, boolean0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals(11, bytesStreamOutput0.size());
      assertEquals(11L, bytesStreamOutput0.position());
      assertEquals(XContentType.JSON, xContentGenerator0.contentType());
      assertFalse(xContentGenerator0.isPrettyPrint());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertNotNull(xContentGenerator0);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      stringArray1[1] = string0;
      stringArray1[2] = string0;
      stringArray1[3] = string0;
      stringArray1[4] = string0;
      stringArray1[5] = maxAggregationBuilder0.NAME;
      boolean boolean1 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray1, boolean1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray1.length);
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertNotNull(xContentBuilder0);
      assertNotSame(stringArray1, stringArray0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNotNull(fakeRestRequest0);
      
      SocketAddress socketAddress0 = fakeRestRequest0.getLocalAddress();
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNull(socketAddress0);
      
      XContentBuilder xContentBuilder1 = maxAggregationBuilder0.doXContentBody(xContentBuilder0, fakeRestRequest0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray1.length);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.format());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotNull(xContentBuilder1);
      assertNotSame(stringArray1, stringArray0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      XContentBuilder xContentBuilder2 = getResult0.toXContentEmbedded(xContentBuilder1, fakeRestRequest0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray1.length);
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(674, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertTrue(getResult0.isSourceEmpty());
      assertFalse(getResult0.isExists());
      assertEquals("", getResult0.getIndex());
      assertEquals("", getResult0.getId());
      assertNull(getResult0.getType());
      assertEquals(0L, getResult0.getVersion());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.format());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotNull(xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertNotSame(stringArray1, stringArray0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      
      XContentBuilder xContentBuilder3 = deleteResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray1.length);
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder3.contentType());
      assertFalse(xContentBuilder3.humanReadable());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(674, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertTrue(getResult0.isSourceEmpty());
      assertFalse(getResult0.isExists());
      assertEquals("", getResult0.getIndex());
      assertEquals("", getResult0.getId());
      assertNull(getResult0.getType());
      assertEquals(0L, getResult0.getVersion());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNull(maxAggregationBuilder0.format());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertNotNull(xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder1);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertNotSame(stringArray1, stringArray0);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      
      XContentBuilder xContentBuilder4 = deleteResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray1.length);
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getType());
      assertEquals("", deleteResponse0.getId());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(XContentType.JSON, xContentBuilder4.contentType());
      assertFalse(xContentBuilder4.isPrettyPrint());
      assertFalse(xContentBuilder4.humanReadable());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNotNull(xContentBuilder4);
      assertSame(xContentBuilder4, xContentBuilder2);
      assertSame(xContentBuilder4, xContentBuilder3);
      assertSame(xContentBuilder4, xContentBuilder0);
      assertSame(xContentBuilder4, xContentBuilder1);
      assertNotSame(stringArray1, stringArray0);
      assertSame(xContentBuilder0, xContentBuilder4);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder3);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      DeleteResponse deleteResponse0 = new DeleteResponse();
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(deleteResponse0);
      
      int int0 = 697;
      BytesStreamOutput bytesStreamOutput0 = new BytesStreamOutput(int0);
      assertEquals(0L, bytesStreamOutput0.position());
      assertEquals(0, bytesStreamOutput0.size());
      assertNotNull(bytesStreamOutput0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(697, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertNotNull(byteBuffer0);
      
      ByteBufferStreamInput byteBufferStreamInput0 = new ByteBufferStreamInput(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(697, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=697 cap=697]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertNotNull(byteBufferStreamInput0);
      
      deleteResponse0.readFrom(byteBufferStreamInput0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals("java.nio.DirectByteBuffer[pos=11 lim=697 cap=697]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertEquals(11, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(686, byteBuffer0.remaining());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      
      deleteResponse0.writeTo(bytesStreamOutput0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(11, bytesStreamOutput0.size());
      assertEquals(11L, bytesStreamOutput0.position());
      
      String string0 = deleteResponse0.toString();
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", string0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNotNull(string0);
      
      GetResult getResult0 = GetResult.readGetResult(byteBufferStreamInput0);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertEquals(674, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("", getResult0.getIndex());
      assertNull(getResult0.getType());
      assertEquals("", getResult0.getId());
      assertFalse(getResult0.isExists());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals(0L, getResult0.getVersion());
      assertNotNull(getResult0);
      
      MaxAggregationBuilder maxAggregationBuilder0 = new MaxAggregationBuilder(string0);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertNull(maxAggregationBuilder0.format());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertNotNull(maxAggregationBuilder0);
      
      JsonXContent jsonXContent0 = JsonXContent.jsonXContent;
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(jsonXContent0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = maxAggregationBuilder0.NAME;
      stringArray0[1] = maxAggregationBuilder0.NAME;
      stringArray0[2] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      stringArray0[3] = jsonXContent0.JSON_ALLOW_UNQUOTED_FIELD_NAMES;
      stringArray0[4] = string0;
      stringArray0[5] = maxAggregationBuilder0.NAME;
      boolean boolean0 = true;
      XContentGenerator xContentGenerator0 = jsonXContent0.createGenerator((OutputStream) bytesStreamOutput0, stringArray0, boolean0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals(11, bytesStreamOutput0.size());
      assertEquals(11L, bytesStreamOutput0.position());
      assertFalse(xContentGenerator0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentGenerator0.contentType());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentGenerator0);
      
      boolean boolean1 = true;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder((XContent) jsonXContent0, stringArray0, boolean1);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder0);
      
      FakeRestRequest fakeRestRequest0 = new FakeRestRequest();
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNotNull(fakeRestRequest0);
      
      SocketAddress socketAddress0 = fakeRestRequest0.getLocalAddress();
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertNull(socketAddress0);
      
      XContentBuilder xContentBuilder1 = maxAggregationBuilder0.doXContentBody(xContentBuilder0, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertNull(maxAggregationBuilder0.format());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      
      XContentBuilder xContentBuilder2 = getResult0.toXContentEmbedded(xContentBuilder1, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertEquals(674, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals("", getResult0.getIndex());
      assertNull(getResult0.getType());
      assertEquals("", getResult0.getId());
      assertFalse(getResult0.isExists());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals(0L, getResult0.getVersion());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertNull(maxAggregationBuilder0.format());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder0);
      
      XContentBuilder xContentBuilder3 = deleteResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertEquals(674, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals("", getResult0.getIndex());
      assertNull(getResult0.getType());
      assertEquals("", getResult0.getId());
      assertFalse(getResult0.isExists());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals(0L, getResult0.getVersion());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertNull(maxAggregationBuilder0.format());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertFalse(xContentBuilder3.isPrettyPrint());
      assertFalse(xContentBuilder3.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder3.contentType());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertNotNull(xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder2);
      assertSame(xContentBuilder3, xContentBuilder0);
      assertSame(xContentBuilder3, xContentBuilder1);
      
      XContentBuilder xContentBuilder4 = deleteResponse0.toXContent(xContentBuilder0, fakeRestRequest0);
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder4.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder4.contentType());
      assertFalse(xContentBuilder4.isPrettyPrint());
      assertNotNull(xContentBuilder4);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder4);
      assertSame(xContentBuilder4, xContentBuilder2);
      assertSame(xContentBuilder4, xContentBuilder3);
      assertSame(xContentBuilder4, xContentBuilder1);
      assertSame(xContentBuilder4, xContentBuilder0);
      
      ReplicationResponse.ShardInfo replicationResponse_ShardInfo0 = new ReplicationResponse.ShardInfo(int0, int0, deleteResponse0.EMPTY);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(697, replicationResponse_ShardInfo0.getTotal());
      assertEquals(697, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertNotNull(replicationResponse_ShardInfo0);
      
      String string1 = "_shard_id";
      ShardId shardId0 = new ShardId(stringArray0[1], string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals(697, shardId0.id());
      assertEquals(697, shardId0.getId());
      assertNotNull(shardId0);
      
      UpdateResponse updateResponse0 = new UpdateResponse(replicationResponse_ShardInfo0, shardId0, stringArray0[1], stringArray0[1], int0, int0, boolean1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(697, replicationResponse_ShardInfo0.getTotal());
      assertEquals(697, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(697, shardId0.id());
      assertEquals(697, shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(697L, updateResponse0.getVersion());
      assertEquals("max", updateResponse0.getId());
      assertEquals("max", updateResponse0.getType());
      assertEquals(697L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(updateResponse0);
      
      GetResult getResult1 = updateResponse0.getGetResult();
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(697, replicationResponse_ShardInfo0.getTotal());
      assertEquals(697, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(697, shardId0.id());
      assertEquals(697, shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(697L, updateResponse0.getVersion());
      assertEquals("max", updateResponse0.getId());
      assertEquals("max", updateResponse0.getType());
      assertEquals(697L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNull(getResult1);
      assertNotSame(string1, string0);
      
      XContentBuilder xContentBuilder5 = updateResponse0.toXContent(xContentBuilder2, fakeRestRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(JsonXContent.unquotedFieldNamesSet);
      assertEquals(6, stringArray0.length);
      assertEquals("", deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getVersion());
      assertEquals("", deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals(RestStatus.NOT_FOUND, deleteResponse0.status());
      assertEquals(XContentType.JSON, xContentBuilder5.contentType());
      assertFalse(xContentBuilder5.isPrettyPrint());
      assertFalse(xContentBuilder5.humanReadable());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(697, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(697, byteBuffer0.limit());
      assertEquals(674, byteBuffer0.remaining());
      assertEquals("java.nio.DirectByteBuffer[pos=23 lim=697 cap=697]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(23, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBufferStreamInput0.markSupported());
      assertEquals("", getResult0.getIndex());
      assertNull(getResult0.getType());
      assertEquals("", getResult0.getId());
      assertFalse(getResult0.isExists());
      assertTrue(getResult0.isSourceEmpty());
      assertEquals(0L, getResult0.getVersion());
      assertNull(maxAggregationBuilder0.format());
      assertNull(maxAggregationBuilder0.field());
      assertEquals("DeleteResponse[index=,type=,id=,version=0,found=false,shards=\"_shards\"{\"total\":0,\"successful\":0,\"failed\":0}]", maxAggregationBuilder0.getName());
      assertNull(maxAggregationBuilder0.valueType());
      assertEquals("max", maxAggregationBuilder0.getWriteableName());
      assertEquals((byte)10, jsonXContent0.streamSeparator());
      assertEquals(XContentType.JSON, jsonXContent0.type());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertEquals(XContentType.JSON, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertEquals("/", fakeRestRequest0.uri());
      assertEquals("/", fakeRestRequest0.rawPath());
      assertFalse(fakeRestRequest0.hasContent());
      assertEquals(RestRequest.Method.GET, fakeRestRequest0.method());
      assertEquals(XContentType.JSON, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertFalse(xContentBuilder2.isPrettyPrint());
      assertFalse(xContentBuilder2.humanReadable());
      assertEquals(XContentType.JSON, xContentBuilder2.contentType());
      assertEquals(697, replicationResponse_ShardInfo0.getTotal());
      assertEquals(697, replicationResponse_ShardInfo0.getSuccessful());
      assertEquals(0, replicationResponse_ShardInfo0.getFailed());
      assertEquals(RestStatus.OK, replicationResponse_ShardInfo0.status());
      assertEquals(697, shardId0.id());
      assertEquals(697, shardId0.getId());
      assertTrue(updateResponse0.isCreated());
      assertEquals(697L, updateResponse0.getVersion());
      assertEquals("max", updateResponse0.getId());
      assertEquals("max", updateResponse0.getType());
      assertEquals(697L, updateResponse0.getSeqNo());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertNotNull(xContentBuilder5);
      assertSame(xContentBuilder5, xContentBuilder0);
      assertSame(xContentBuilder5, xContentBuilder3);
      assertSame(xContentBuilder5, xContentBuilder4);
      assertSame(xContentBuilder5, xContentBuilder1);
      assertSame(xContentBuilder5, xContentBuilder2);
      assertNotSame(string0, string1);
      assertSame(xContentBuilder0, xContentBuilder3);
      assertSame(xContentBuilder0, xContentBuilder5);
      assertSame(xContentBuilder0, xContentBuilder1);
      assertSame(xContentBuilder0, xContentBuilder2);
      assertSame(xContentBuilder0, xContentBuilder4);
      assertSame(xContentBuilder1, xContentBuilder4);
      assertSame(xContentBuilder1, xContentBuilder3);
      assertSame(xContentBuilder1, xContentBuilder5);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder1, xContentBuilder2);
      assertSame(xContentBuilder2, xContentBuilder4);
      assertSame(xContentBuilder2, xContentBuilder5);
      assertSame(xContentBuilder2, xContentBuilder1);
      assertSame(xContentBuilder2, xContentBuilder3);
      assertSame(xContentBuilder2, xContentBuilder0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      int int0 = 24;
      ShardId shardId0 = new ShardId(indexAction0.NAME, indexAction0.NAME, int0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(24, shardId0.id());
      assertEquals(24, shardId0.getId());
      assertNotNull(shardId0);
      
      IndexResponse indexResponse0 = indexAction0.newResponse();
      assertEquals("indices:data/write/index", indexAction0.name());
      assertFalse(indexResponse0.isCreated());
      assertEquals(0L, indexResponse0.getVersion());
      assertNull(indexResponse0.getId());
      assertEquals(0L, indexResponse0.getSeqNo());
      assertNull(indexResponse0.getType());
      assertNotNull(indexResponse0);
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, indexAction0.NAME, indexAction0.NAME, int0, boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(24, shardId0.id());
      assertEquals(24, shardId0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("indices:data/write/index", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("indices:data/write/index", updateResponse0.getId());
      assertEquals(24L, updateResponse0.getVersion());
      assertNotNull(updateResponse0);
      
      XContentType xContentType0 = XContentType.SMILE;
      XContent xContent0 = xContentType0.xContent();
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertNotNull(xContent0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, indexAction0.NAME);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("indices:data/write/index", indexAction0.name());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = indexAction0.NAME;
      stringArray0[1] = indexAction0.NAME;
      stringArray0[2] = indexAction0.NAME;
      stringArray0[3] = indexAction0.NAME;
      XContentBuilder xContentBuilder0 = XContentBuilder.builder(xContent0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder0);
      
      ToXContent.Params toXContent_Params0 = ToXContent.EMPTY_PARAMS;
      assertNotNull(toXContent_Params0);
      
      XContentBuilder xContentBuilder1 = updateResponse0.toXContent(xContentBuilder0, toXContent_Params0);
      assertFalse(boolean0 == boolean1);
      assertEquals(4, stringArray0.length);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(XContentType.SMILE, xContentBuilder1.contentType());
      assertFalse(xContentBuilder1.isPrettyPrint());
      assertFalse(xContentBuilder1.humanReadable());
      assertEquals(24, shardId0.id());
      assertEquals(24, shardId0.getId());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertTrue(updateResponse0.isCreated());
      assertEquals("indices:data/write/index", updateResponse0.getType());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("indices:data/write/index", updateResponse0.getId());
      assertEquals(24L, updateResponse0.getVersion());
      assertEquals((byte) (-1), xContent0.streamSeparator());
      assertEquals(XContentType.SMILE, xContent0.type());
      assertEquals(XContentType.SMILE, xContentBuilder0.contentType());
      assertFalse(xContentBuilder0.humanReadable());
      assertFalse(xContentBuilder0.isPrettyPrint());
      assertNotNull(xContentBuilder1);
      assertSame(xContentBuilder1, xContentBuilder0);
      assertSame(xContentBuilder0, xContentBuilder1);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      IndexAction indexAction0 = IndexAction.INSTANCE;
      assertEquals("indices:data/write/index", indexAction0.name());
      assertNotNull(indexAction0);
      
      int int0 = 24;
      ShardId shardId0 = new ShardId(indexAction0.NAME, indexAction0.NAME, int0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(24, shardId0.id());
      assertEquals(24, shardId0.getId());
      assertNotNull(shardId0);
      
      boolean boolean0 = true;
      UpdateResponse updateResponse0 = new UpdateResponse(shardId0, indexAction0.NAME, indexAction0.NAME, int0, boolean0);
      assertEquals("indices:data/write/index", indexAction0.name());
      assertEquals(24, shardId0.id());
      assertEquals(24, shardId0.getId());
      assertEquals(RestStatus.CREATED, updateResponse0.status());
      assertEquals("indices:data/write/index", updateResponse0.getType());
      assertTrue(updateResponse0.isCreated());
      assertEquals(24L, updateResponse0.getVersion());
      assertEquals((-2L), updateResponse0.getSeqNo());
      assertEquals("indices:data/write/index", updateResponse0.getId());
      assertNotNull(updateResponse0);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)19;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-25);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-89);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-19);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-14);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-122);
      byteArray0[6] = byte6;
      byte byte7 = (byte)4;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      BytesArray bytesArray0 = new BytesArray(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-25), (byte)0, (byte) (-89), (byte) (-19), (byte) (-14), (byte) (-122), (byte)4, (byte)0}, byteArray0);
      assertEquals(9, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertNotNull(bytesArray0);
      
      StreamInput streamInput0 = bytesArray0.streamInput();
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-25), (byte)0, (byte) (-89), (byte) (-19), (byte) (-14), (byte) (-122), (byte)4, (byte)0}, byteArray0);
      assertEquals(9, bytesArray0.length());
      assertTrue(bytesArray0.hasArray());
      assertEquals(0, bytesArray0.arrayOffset());
      assertNotNull(streamInput0);
      
      // Undeclared exception!
      updateResponse0.readFrom(streamInput0);
  }
}
