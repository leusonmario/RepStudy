/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 04:17:15 GMT 2021
 */

package org.elasticsearch.index.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.Path;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.log4j.Logger;
import org.apache.log4j.helpers.Loader;
import org.apache.lucene.analysis.MockAnalyzer;
import org.apache.lucene.analysis.MockTokenFilter;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.ExitableDirectoryReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.LeafReader;
import org.apache.lucene.index.MismatchedDirectoryReader;
import org.apache.lucene.index.QueryTimeoutImpl;
import org.apache.lucene.index.SegmentInfos;
import org.apache.lucene.index.StandardDirectoryReader;
import org.apache.lucene.store.BufferedChecksumIndexInput;
import org.apache.lucene.store.BufferedIndexInput;
import org.apache.lucene.store.ChecksumIndexInput;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.RAMFile;
import org.apache.lucene.store.RAMInputStream;
import org.apache.lucene.util.automaton.CharacterRunAutomaton;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.index.engine.EngineConfig;
import org.elasticsearch.index.engine.InternalEngine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InternalEngine_ESTest extends InternalEngine_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      ESLogger eSLogger0 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertNotNull(atomicBoolean0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      
      EngineConfig engineConfig0 = null;
      InternalEngine.SearchFactory internalEngine_SearchFactory0 = null;
      try {
        internalEngine_SearchFactory0 = new InternalEngine.SearchFactory(eSLogger0, atomicBoolean0, engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine$SearchFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      String string0 = null;
      Logger logger0 = Logger.getRootLogger();
      assertNotNull(logger0);
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertEquals("root", logger0.getName());
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertNotNull(eSLogger0);
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertFalse(logger0.isInfoEnabled());
      assertTrue(logger0.getAdditivity());
      assertEquals("root", logger0.getName());
      assertEquals("root", eSLogger0.getName());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertFalse(eSLogger0.isTraceEnabled());
      assertNull(eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      assertNotNull(atomicBoolean0);
      assertEquals("false", atomicBoolean0.toString());
      assertFalse(atomicBoolean0.get());
      
      EngineConfig engineConfig0 = null;
      InternalEngine.SearchFactory internalEngine_SearchFactory0 = null;
      try {
        internalEngine_SearchFactory0 = new InternalEngine.SearchFactory(eSLogger0, atomicBoolean0, engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine$SearchFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      long long0 = 16384L;
      System.setCurrentTimeMillis(long0);
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }
}
