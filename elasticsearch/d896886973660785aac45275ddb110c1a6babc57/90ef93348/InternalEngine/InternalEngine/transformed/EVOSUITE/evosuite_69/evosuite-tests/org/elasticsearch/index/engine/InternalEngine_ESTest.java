/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 04:54:52 GMT 2021
 */

package org.elasticsearch.index.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Predicate;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.NOPLoggerRepository;
import org.apache.lucene.index.IndexWriter;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.support.replication.ReplicationOperationTests;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.ParentTaskAssigningClient;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.settings.IndexScopedSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.index.Index;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.index.engine.ElasticsearchConcurrentMergeScheduler;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.engine.EngineConfig;
import org.elasticsearch.index.engine.InternalEngine;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.index.translog.Translog;
import org.elasticsearch.tasks.TaskId;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InternalEngine_ESTest extends InternalEngine_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      String string0 = "rollback indexWriter";
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      Logger logger0 = nOPLoggerRepository0.getLogger(string0);
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertEquals("rollback indexWriter", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertFalse(logger0.isDebugEnabled());
      assertFalse(logger0.isTraceEnabled());
      assertEquals("rollback indexWriter", logger0.getName());
      assertTrue(logger0.getAdditivity());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertFalse(eSLogger0.isInfoEnabled());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("rollback indexWriter", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isDebugEnabled());
      assertEquals("rollback indexWriter", eSLogger0.getName());
      assertFalse(eSLogger0.isErrorEnabled());
      assertNotNull(eSLogger0);
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertNotNull(replicationOperationTests_Request0);
      
      EngineConfig engineConfig0 = null;
      InternalEngine.SearchFactory internalEngine_SearchFactory0 = null;
      try {
        internalEngine_SearchFactory0 = new InternalEngine.SearchFactory(eSLogger0, replicationOperationTests_Request0.processedOnPrimary, engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine$SearchFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      Engine.Index engine_Index0 = null;
      IndexWriter indexWriter0 = null;
      // Undeclared exception!
      try { 
        InternalEngine.index(engine_Index0, indexWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      String string0 = "";
      NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
      assertNotNull(nOPLoggerRepository0);
      
      String string1 = "maxContentLength[{}] set to high value, resetting it to [100mb]";
      Logger logger0 = nOPLoggerRepository0.getLogger(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(logger0.isTraceEnabled());
      assertEquals("maxContentLength[{}] set to high value, resetting it to [100mb]", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertTrue(logger0.getAdditivity());
      assertNotNull(logger0);
      
      ESLogger eSLogger0 = new ESLogger(string0, logger0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(logger0.isTraceEnabled());
      assertEquals("maxContentLength[{}] set to high value, resetting it to [100mb]", logger0.getName());
      assertFalse(logger0.isInfoEnabled());
      assertFalse(logger0.isDebugEnabled());
      assertTrue(logger0.getAdditivity());
      assertEquals("OFF", eSLogger0.getLevel());
      assertEquals("maxContentLength[{}] set to high value, resetting it to [100mb]", eSLogger0.getName());
      assertFalse(eSLogger0.isTraceEnabled());
      assertFalse(eSLogger0.isErrorEnabled());
      assertFalse(eSLogger0.isDebugEnabled());
      assertFalse(eSLogger0.isWarnEnabled());
      assertEquals("", eSLogger0.getPrefix());
      assertFalse(eSLogger0.isInfoEnabled());
      assertNotNull(eSLogger0);
      
      String string2 = "TDN?VERHfIck";
      int int0 = 460;
      ShardId shardId0 = new ShardId(string2, string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(460, shardId0.getId());
      assertEquals("TDN?VERHfIck", shardId0.getIndexName());
      assertEquals(460, shardId0.id());
      assertNotNull(shardId0);
      
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request(shardId0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(460, shardId0.getId());
      assertEquals("TDN?VERHfIck", shardId0.getIndexName());
      assertEquals(460, shardId0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertEquals("TDN?VERHfIck", replicationOperationTests_Request0.index());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNotNull(replicationOperationTests_Request0);
      
      AtomicBoolean atomicBoolean0 = replicationOperationTests_Request0.processedOnPrimary;
      assertFalse(atomicBoolean0.get());
      assertEquals("false", atomicBoolean0.toString());
      assertNotNull(atomicBoolean0);
      
      EngineConfig engineConfig0 = null;
      InternalEngine.SearchFactory internalEngine_SearchFactory0 = null;
      try {
        internalEngine_SearchFactory0 = new InternalEngine.SearchFactory(eSLogger0, atomicBoolean0, engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine$SearchFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      Engine.Index engine_Index0 = null;
      IndexWriter indexWriter0 = null;
      // Undeclared exception!
      try { 
        InternalEngine.index(engine_Index0, indexWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      String string0 = "XZ3>^Qj";
      Object[] objectArray0 = new Object[0];
      ReplicationOperationTests.Request replicationOperationTests_Request0 = new ReplicationOperationTests.Request();
      assertEquals(0L, replicationOperationTests_Request0.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, replicationOperationTests_Request0.consistencyLevel());
      assertFalse(replicationOperationTests_Request0.getShouldPersistResult());
      assertNull(replicationOperationTests_Request0.index());
      assertEquals(0L, replicationOperationTests_Request0.seqNo());
      assertNotNull(replicationOperationTests_Request0);
      
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }
}
