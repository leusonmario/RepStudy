/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 05:00:58 GMT 2021
 */

package org.elasticsearch.index.engine;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.concurrent.atomic.AtomicBoolean;
import org.apache.log4j.LogManager;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.lucene.index.IndexOptions;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.LeafReader;
import org.apache.lucene.index.LeafReaderContext;
import org.apache.lucene.index.PostingsEnum;
import org.apache.lucene.index.RandomPostingsTester;
import org.apache.lucene.search.DocIdSetIterator;
import org.apache.lucene.util.BytesRef;
import org.apache.lucene.util.BytesRefBuilder;
import org.apache.lucene.util.LuceneTestCase;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
import org.elasticsearch.common.logging.ESLogger;
import org.elasticsearch.common.xcontent.XContentLocation;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.engine.EngineConfig;
import org.elasticsearch.index.engine.InternalEngine;
import org.elasticsearch.index.engine.LiveVersionMap;
import org.elasticsearch.index.engine.VersionValue;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.search.fetch.FetchSubPhase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InternalEngine_ESTest extends InternalEngine_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      IndexWriter indexWriter0 = null;
      Engine.Index engine_Index0 = null;
      // Undeclared exception!
      try { 
        InternalEngine.index(engine_Index0, indexWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      IndexWriter indexWriter0 = null;
      Engine.Index engine_Index0 = null;
      LiveVersionMap liveVersionMap0 = new LiveVersionMap();
      assertNotNull(liveVersionMap0);
      assertEquals(0L, liveVersionMap0.ramBytesUsed());
      
      long long0 = 0L;
      int int0 = (-212);
      IndexOptions indexOptions0 = IndexOptions.NONE;
      boolean boolean0 = false;
      RandomPostingsTester.SeedPostings randomPostingsTester_SeedPostings0 = new RandomPostingsTester.SeedPostings(long0, int0, int0, indexOptions0, boolean0);
      assertNotNull(randomPostingsTester_SeedPostings0);
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertEquals((-212L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((-212), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      
      BytesRef bytesRef0 = randomPostingsTester_SeedPostings0.getPayload();
      assertNotNull(bytesRef0);
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertEquals((-212L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((-212), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      assertEquals(1, bytesRef0.length);
      assertEquals(0, bytesRef0.offset);
      
      VersionValue versionValue0 = liveVersionMap0.getUnderLock(bytesRef0);
      assertNull(versionValue0);
      assertEquals(0L, liveVersionMap0.ramBytesUsed());
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertEquals((-212L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((-212), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      assertEquals(1, bytesRef0.length);
      assertEquals(0, bytesRef0.offset);
      
      // Undeclared exception!
      try { 
        InternalEngine.update(engine_Index0, versionValue0, indexWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      IndexWriter indexWriter0 = null;
      Engine.Index engine_Index0 = null;
      LiveVersionMap liveVersionMap0 = new LiveVersionMap();
      assertNotNull(liveVersionMap0);
      assertEquals(0L, liveVersionMap0.ramBytesUsed());
      
      long long0 = 0L;
      int int0 = (-212);
      int int1 = (-2682);
      IndexOptions indexOptions0 = IndexOptions.NONE;
      boolean boolean0 = false;
      RandomPostingsTester.SeedPostings randomPostingsTester_SeedPostings0 = new RandomPostingsTester.SeedPostings(long0, int0, int1, indexOptions0, boolean0);
      assertNotNull(randomPostingsTester_SeedPostings0);
      assertEquals((-211L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((-211), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals((short)0, PostingsEnum.NONE);
      
      BytesRef bytesRef0 = randomPostingsTester_SeedPostings0.getPayload();
      assertNotNull(bytesRef0);
      assertEquals((-211L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((-211), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals(0, bytesRef0.offset);
      assertEquals(1, bytesRef0.length);
      
      VersionValue versionValue0 = liveVersionMap0.getTombstoneUnderLock(bytesRef0);
      assertNull(versionValue0);
      assertEquals(0L, liveVersionMap0.ramBytesUsed());
      assertEquals((-211L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((-211), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals(0, bytesRef0.offset);
      assertEquals(1, bytesRef0.length);
      
      // Undeclared exception!
      try { 
        InternalEngine.update(engine_Index0, versionValue0, indexWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      ESLogger eSLogger0 = null;
      AtomicBoolean atomicBoolean0 = null;
      EngineConfig engineConfig0 = null;
      InternalEngine.SearchFactory internalEngine_SearchFactory0 = null;
      try {
        internalEngine_SearchFactory0 = new InternalEngine.SearchFactory(eSLogger0, atomicBoolean0, engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine$SearchFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      Engine.Index engine_Index0 = null;
      IndexWriter indexWriter0 = null;
      // Undeclared exception!
      try { 
        InternalEngine.index(engine_Index0, indexWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "";
      Object[] objectArray0 = new Object[3];
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      boolean boolean0 = true;
      LoggerRepository loggerRepository0 = LogManager.getLoggerRepository();
      assertNotNull(loggerRepository0);
      
      XContentLocation xContentLocation0 = null;
      String string0 = "index.store.stats_refresh_interval";
      String string1 = "flush";
      EngineConfig engineConfig0 = null;
      InternalEngine internalEngine0 = null;
      try {
        internalEngine0 = new InternalEngine(engineConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.Engine", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      IndexWriter indexWriter0 = null;
      Engine.Index engine_Index0 = null;
      LiveVersionMap liveVersionMap0 = new LiveVersionMap();
      assertNotNull(liveVersionMap0);
      assertEquals(0L, liveVersionMap0.ramBytesUsed());
      
      long long0 = 0L;
      int int0 = (-212);
      int int1 = (-2654);
      IndexOptions indexOptions0 = IndexOptions.NONE;
      boolean boolean0 = false;
      RandomPostingsTester.SeedPostings randomPostingsTester_SeedPostings0 = new RandomPostingsTester.SeedPostings(long0, int0, int1, indexOptions0, boolean0);
      assertNotNull(randomPostingsTester_SeedPostings0);
      assertEquals((-211L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals((-211), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      
      BytesRef bytesRef0 = randomPostingsTester_SeedPostings0.getPayload();
      assertNotNull(bytesRef0);
      assertEquals((-211L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals((-211), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      assertEquals(1, bytesRef0.length);
      assertEquals(0, bytesRef0.offset);
      
      VersionValue versionValue0 = liveVersionMap0.getUnderLock(bytesRef0);
      assertNull(versionValue0);
      assertEquals(0L, liveVersionMap0.ramBytesUsed());
      assertEquals((-211L), randomPostingsTester_SeedPostings0.cost());
      assertEquals(0, randomPostingsTester_SeedPostings0.freq());
      assertEquals((-1), randomPostingsTester_SeedPostings0.docID());
      assertEquals(0, randomPostingsTester_SeedPostings0.startOffset());
      assertEquals(0, randomPostingsTester_SeedPostings0.endOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, DocIdSetIterator.NO_MORE_DOCS);
      assertEquals((short)8, PostingsEnum.FREQS);
      assertEquals((short)56, PostingsEnum.OFFSETS);
      assertEquals((short)24, PostingsEnum.POSITIONS);
      assertEquals((short)120, PostingsEnum.ALL);
      assertEquals((short)0, PostingsEnum.NONE);
      assertEquals((-211), randomPostingsTester_SeedPostings0.docFreq);
      assertEquals(0, randomPostingsTester_SeedPostings0.upto);
      assertEquals((short)88, PostingsEnum.PAYLOADS);
      assertEquals(1, bytesRef0.length);
      assertEquals(0, bytesRef0.offset);
      
      // Undeclared exception!
      try { 
        InternalEngine.update(engine_Index0, versionValue0, indexWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.index.engine.InternalEngine", e);
      }
  }
}
