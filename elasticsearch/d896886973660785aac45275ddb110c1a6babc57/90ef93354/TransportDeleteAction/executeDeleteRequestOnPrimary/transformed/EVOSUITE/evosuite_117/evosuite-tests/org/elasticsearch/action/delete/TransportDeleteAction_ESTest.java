/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 15:14:11 GMT 2021
 */

package org.elasticsearch.action.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.concurrent.CountDownLatch;
import org.elasticsearch.Version;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.LatchedActionListener;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.delete.TransportDeleteAction;
import org.elasticsearch.action.support.ActionFilter;
import org.elasticsearch.action.support.ActionFilters;
import org.elasticsearch.action.support.AutoCreateIndex;
import org.elasticsearch.action.support.PlainActionFuture;
import org.elasticsearch.action.support.replication.ReplicationTask;
import org.elasticsearch.action.support.replication.TransportReplicationActionTests;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.action.shard.ShardStateAction;
import org.elasticsearch.cluster.block.ClusterBlockLevel;
import org.elasticsearch.cluster.metadata.IndexMetaData;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;
import org.elasticsearch.cluster.routing.RoutingService;
import org.elasticsearch.cluster.routing.allocation.AllocationService;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.ParseFieldMatcher;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.NamedWriteableRegistry;
import org.elasticsearch.common.network.NetworkService;
import org.elasticsearch.common.settings.ClusterSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.util.BigArrays;
import org.elasticsearch.common.xcontent.XContentParser;
import org.elasticsearch.common.xcontent.smile.SmileXContent;
import org.elasticsearch.index.IndexSettings;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.index.translog.Translog;
import org.elasticsearch.index.translog.TranslogConfig;
import org.elasticsearch.indices.IndicesService;
import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;
import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
import org.elasticsearch.tasks.Task;
import org.elasticsearch.test.transport.CapturingTransport;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.threadpool.ThreadPoolInfo;
import org.elasticsearch.threadpool.ThreadPoolStats;
import org.elasticsearch.transport.Transport;
import org.elasticsearch.transport.TransportService;
import org.elasticsearch.transport.netty.NettyTransportIT;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportDeleteAction_ESTest extends TransportDeleteAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      
      boolean boolean0 = false;
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_GATEWAY, deleteRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      DeleteRequest deleteRequest0 = new DeleteRequest(metaData0.CONTEXT_MODE_SNAPSHOT);
      assertNotNull(deleteRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertEquals("SNAPSHOT", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      
      VersionType versionType0 = VersionType.FORCE;
      DeleteRequest deleteRequest1 = deleteRequest0.id(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertNotNull(deleteRequest1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("global-", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertEquals("SNAPSHOT", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.type());
      assertEquals("global-", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals("SNAPSHOT", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.parent());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, deleteRequest1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("global-", deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertEquals("SNAPSHOT", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.type());
      assertEquals("global-", deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals("SNAPSHOT", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.parent());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest1, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertSame(settings1, settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      MetaData.API_AND_SNAPSHOT = metaData0.API_ONLY;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(1, MetaData.API_AND_SNAPSHOT.size());
      
      Version version0 = Version.V_2_0_0;
      assertNotNull(version0);
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)2, version0.major);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)2, version0.major);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)2, version0.major);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ActionFilter actionFilter0 = mock(ActionFilter.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = hashSet0.add(actionFilter0);
      assertTrue(boolean2);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(actionFilter0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)2, version0.major);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertTrue(hashSet0.contains(actionFilter0));
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(autoCreateIndex0.needToCheck());
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)2, version0.major);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertTrue(hashSet0.contains(actionFilter0));
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.id());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      DeleteResponse deleteResponse0 = transportDeleteAction0.newResponseInstance();
      assertNotNull(deleteResponse0);
      assertNull(deleteResponse0.getId());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)2, version0.major);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertTrue(hashSet0.contains(actionFilter0));
      
      long long1 = 0L;
      AutoCreateIndex autoCreateIndex1 = transportDeleteAction0.getautoCreateIndex();
      assertNotNull(autoCreateIndex1);
      assertTrue(autoCreateIndex1.needToCheck());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertSame(autoCreateIndex1, autoCreateIndex0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertSame(autoCreateIndex0, autoCreateIndex1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)2, version0.major);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)99, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertTrue(hashSet0.contains(actionFilter0));
      
      // Undeclared exception!
      try { 
        transportDeleteAction0.resolveRequest(metaData0, indexMetaData0, deleteRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "%";
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertSame(settings1, settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      Version version0 = Version.V_5_0_0_alpha2;
      assertNotNull(version0);
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals((byte)0, version0.minor);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(autoCreateIndex0.needToCheck());
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest1.seqNo());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      DeleteRequest deleteRequest2 = deleteRequest0.version((long) bigArrays0.LONG_PAGE_SIZE);
      assertNotNull(deleteRequest2);
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(2048L, deleteRequest0.version());
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("GATEWAY", deleteRequest2.routing());
      assertNull(deleteRequest2.id());
      assertEquals(0L, deleteRequest2.seqNo());
      assertNull(deleteRequest2.index());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.refresh());
      assertNull(deleteRequest2.type());
      assertEquals(2048L, deleteRequest2.version());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      long long1 = 0L;
      Task task0 = null;
      PlainActionFuture<DeleteResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      // Undeclared exception!
      try { 
        transportDeleteAction0.doExecute(task0, deleteRequest1, (ActionListener<DeleteResponse>) plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = "";
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.transientSettings();
      assertNotNull(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(settings1.equals((Object)settings0));
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      Version version0 = Version.V_5_0_0_alpha2;
      assertNotNull(version0);
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)0, version0.revision);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)0, version0.revision);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)0, version0.revision);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean3 = true;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean2, boolean2, boolean3);
      assertFalse(boolean4);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(settings0.equals((Object)settings1));
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)0, version0.revision);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(autoCreateIndex0.needToCheck());
      assertTrue(settings0.equals((Object)settings1));
      
      ThreadPoolInfo threadPoolInfo0 = threadPool0.info();
      assertNotNull(threadPoolInfo0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)0, version0.revision);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.type());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      TransportCreateIndexAction transportCreateIndexAction1 = transportDeleteAction0.getcreateIndexAction();
      assertNotNull(transportCreateIndexAction1);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertSame(transportCreateIndexAction1, transportCreateIndexAction0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertSame(transportCreateIndexAction0, transportCreateIndexAction1);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals((byte)0, version0.revision);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)5, version0.major);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      long long1 = 0L;
      String string1 = "V@4MWHR=FL@jDsx:";
      DeleteRequest deleteRequest2 = new DeleteRequest(string1);
      assertNotNull(deleteRequest2);
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals(0L, deleteRequest2.seqNo());
      assertNull(deleteRequest2.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals((-3L), deleteRequest2.version());
      assertFalse(deleteRequest2.refresh());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertNull(deleteRequest2.id());
      assertFalse(string1.equals((Object)string0));
      assertFalse(deleteRequest2.equals((Object)deleteRequest0));
      assertFalse(deleteRequest2.equals((Object)deleteRequest1));
      
      // Undeclared exception!
      try { 
        transportDeleteAction0.shardOperationOnPrimary(deleteRequest2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      long long0 = 10L;
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertSame(settings1, settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      
      Version version0 = Version.V_5_0_0_alpha2;
      assertNotNull(version0);
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)0, version0.revision);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)0, version0.revision);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)0, version0.revision);
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)0, version0.revision);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertTrue(autoCreateIndex0.needToCheck());
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)2, version0.build);
      assertEquals((byte)0, version0.revision);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      
      ThreadPoolStats threadPoolStats0 = threadPool0.stats();
      assertNotNull(threadPoolStats0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertSame(settings1, settings0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest1.parent());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.refresh());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      long long1 = 0L;
      // Undeclared exception!
      try { 
        transportDeleteAction0.shardOperationOnReplica(deleteRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeleteRequest deleteRequest0 = null;
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      
      DeleteRequest deleteRequest0 = new DeleteRequest(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertNotNull(deleteRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("global-", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_GATEWAY, deleteRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals("global-", deleteRequest0.index());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MetaData metaData0 = null;
      String string0 = "m6z-";
      String string1 = ")H?Ac4T,On'";
      String string2 = "auto(delete api)";
      DeleteRequest deleteRequest0 = new DeleteRequest(string1, string2, string1);
      assertNotNull(deleteRequest0);
      assertEquals(")H?Ac4T,On'", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals("auto(delete api)", deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(")H?Ac4T,On'", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      VersionType versionType0 = VersionType.FORCE;
      DeleteRequest deleteRequest1 = deleteRequest0.versionType(versionType0);
      assertNotNull(deleteRequest1);
      assertEquals(")H?Ac4T,On'", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals("auto(delete api)", deleteRequest0.type());
      assertEquals(VersionType.FORCE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(")H?Ac4T,On'", deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(")H?Ac4T,On'", deleteRequest1.index());
      assertEquals(VersionType.FORCE, deleteRequest1.versionType());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("auto(delete api)", deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(")H?Ac4T,On'", deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      long long0 = 1L;
      DeleteRequest deleteRequest2 = deleteRequest1.version(long0);
      assertNotNull(deleteRequest2);
      assertEquals(")H?Ac4T,On'", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals("auto(delete api)", deleteRequest0.type());
      assertEquals(VersionType.FORCE, deleteRequest0.versionType());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(")H?Ac4T,On'", deleteRequest0.id());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(1L, deleteRequest0.version());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(")H?Ac4T,On'", deleteRequest1.index());
      assertEquals(VersionType.FORCE, deleteRequest1.versionType());
      assertEquals("auto(delete api)", deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(1L, deleteRequest1.version());
      assertEquals(")H?Ac4T,On'", deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertEquals("auto(delete api)", deleteRequest2.type());
      assertEquals(1L, deleteRequest2.version());
      assertEquals(VersionType.FORCE, deleteRequest2.versionType());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.refresh());
      assertEquals(")H?Ac4T,On'", deleteRequest2.index());
      assertEquals(")H?Ac4T,On'", deleteRequest2.id());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.routing());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        TransportDeleteAction.resolveAndValidateRouting(metaData0, string0, deleteRequest2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      String string0 = ">e]8s0x_''wD}gZ5$a";
      String string1 = "?+wHnTOHw8*\\gw7";
      DeleteRequest deleteRequest0 = new DeleteRequest(metaData0.CONTEXT_MODE_SNAPSHOT, string1, metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertNotNull(deleteRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(deleteRequest0.parent());
      assertEquals("?+wHnTOHw8*\\gw7", deleteRequest0.type());
      assertEquals("SNAPSHOT", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("global-", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(string1.equals((Object)string0));
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_PARAM);
      assertNotNull(deleteRequest1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(deleteRequest0.parent());
      assertEquals("?+wHnTOHw8*\\gw7", deleteRequest0.type());
      assertEquals("context_mode", deleteRequest0.routing());
      assertEquals("SNAPSHOT", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("global-", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("context_mode", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("?+wHnTOHw8*\\gw7", deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("SNAPSHOT", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals("global-", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNotSame(string1, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertFalse(string1.equals((Object)string0));
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, string0, deleteRequest1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNull(deleteRequest0.parent());
      assertEquals("?+wHnTOHw8*\\gw7", deleteRequest0.type());
      assertEquals("context_mode", deleteRequest0.routing());
      assertEquals("SNAPSHOT", deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("global-", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("context_mode", deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("?+wHnTOHw8*\\gw7", deleteRequest1.type());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("SNAPSHOT", deleteRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals("global-", deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "l<*4lLrB";
      String string1 = "";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0, string0, string1);
      assertNotNull(deleteRequest0);
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("l<*4lLrB", deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertFalse(deleteRequest0.refresh());
      assertEquals("l<*4lLrB", deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals("", deleteRequest0.id());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      DeleteRequest deleteRequest0 = new DeleteRequest(string0);
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("", deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean3);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean4 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      
      String string0 = "";
      boolean boolean5 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      int int0 = 0;
      Random.setNextRandom(int0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotNull(settings1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      Version version0 = Version.V_2_1_2;
      assertNotNull(version0);
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, version0.id);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, version0.id);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, version0.id);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(settings0.equals((Object)settings1));
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, version0.id);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(settings0.equals((Object)settings1));
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isRC());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, version0.id);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      
      DeleteRequest deleteRequest1 = deleteRequest0.parent(indexMetaData0.SETTING_VERSION_CREATED_STRING);
      assertNotNull(deleteRequest1);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.version.created_string", deleteRequest0.parent());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertNull(deleteRequest1.index());
      assertEquals("index.version.created_string", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      long long1 = 0L;
      DeleteRequest deleteRequest2 = deleteRequest1.version(long1);
      assertNotNull(deleteRequest2);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("index.version.created_string", deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(0L, deleteRequest1.seqNo());
      assertNull(deleteRequest1.id());
      assertNull(deleteRequest1.type());
      assertNull(deleteRequest1.index());
      assertEquals("index.version.created_string", deleteRequest1.parent());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals(0L, deleteRequest1.version());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest2.type());
      assertEquals(0L, deleteRequest2.version());
      assertNull(deleteRequest2.routing());
      assertNull(deleteRequest2.id());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertFalse(deleteRequest2.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(0L, deleteRequest2.seqNo());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.index());
      assertEquals("index.version.created_string", deleteRequest2.parent());
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertFalse(long1 == long0);
      
      // Undeclared exception!
      try { 
        transportDeleteAction0.resolveRequest(metaData0, indexMetaData0, deleteRequest2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean3);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean4 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      String string0 = "";
      boolean boolean5 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      int int0 = 0;
      Random.setNextRandom(int0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      
      Settings settings1 = IndexMetaData.addHumanReadableSettings(settings0);
      assertNotNull(settings1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      Version version0 = Version.V_2_1_2;
      assertNotNull(version0);
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030099, Version.V_2_3_0_ID);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertTrue(settings0.equals((Object)settings1));
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertTrue(settings0.equals((Object)settings1));
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      
      long long1 = 0L;
      DeleteResponse deleteResponse0 = transportDeleteAction0.newResponseInstance();
      assertNotNull(deleteResponse0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(0L, deleteResponse0.getSeqNo());
      assertFalse(deleteResponse0.isFound());
      assertEquals(0L, deleteResponse0.getVersion());
      assertNull(deleteResponse0.getType());
      assertNull(deleteResponse0.getId());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals(0L, deleteResponse0.seqNo);
      assertEquals(0L, deleteResponse0.version);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      
      DeleteResponse deleteResponse1 = transportDeleteAction0.newResponseInstance();
      assertNotNull(deleteResponse1);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(0L, deleteResponse1.getVersion());
      assertNull(deleteResponse1.getType());
      assertNull(deleteResponse1.getId());
      assertFalse(deleteResponse1.isFound());
      assertEquals(0L, deleteResponse1.getSeqNo());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotSame(deleteResponse1, deleteResponse0);
      assertNotSame(settings0, settings1);
      assertNotSame(settings1, settings0);
      assertEquals(0L, deleteResponse1.version);
      assertEquals(0L, deleteResponse1.seqNo);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals((byte)1, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, version0.id);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)2, version0.major);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals((byte)99, version0.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals((byte)2, version0.revision);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertFalse(deleteResponse1.equals((Object)deleteResponse0));
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean3);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean4 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      String string0 = "";
      boolean boolean5 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      int int0 = 0;
      Random.setNextRandom(int0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertSame(settings1, settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      
      Version version0 = Version.V_5_0_0_alpha2;
      assertNotNull(version0);
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals((byte)0, version0.minor);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      
      DeleteRequest deleteRequest1 = deleteRequest0.parent(indexMetaData0.SETTING_VERSION_CREATED_STRING);
      assertNotNull(deleteRequest1);
      assertEquals("index.version.created_string", deleteRequest0.parent());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("index.version.created_string", deleteRequest1.parent());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.routing());
      assertNull(deleteRequest1.id());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      long long1 = 0L;
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings0, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals((byte)0, version0.minor);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, version0.id);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      
      // Undeclared exception!
      try { 
        transportDeleteAction0.shardOperationOnReplica(deleteRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = "%";
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertSame(settings1, settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      Version version0 = Version.V_5_0_0_alpha2;
      assertNotNull(version0);
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(5000002, version0.id);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)2, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals((byte)0, version0.revision);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(5000002, version0.id);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)2, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals((byte)0, version0.revision);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(5000002, version0.id);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)2, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals((byte)0, version0.revision);
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(5000002, version0.id);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)2, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals((byte)0, version0.revision);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(autoCreateIndex0.needToCheck());
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isRC());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(5000002, version0.id);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)2, version0.build);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals((byte)0, version0.revision);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      DeleteRequest deleteRequest2 = deleteRequest0.version((long) bigArrays0.LONG_PAGE_SIZE);
      assertNotNull(deleteRequest2);
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertEquals("GATEWAY", deleteRequest2.routing());
      assertEquals(2048L, deleteRequest2.version());
      assertNull(deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNull(deleteRequest2.index());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.seqNo());
      assertFalse(deleteRequest2.refresh());
      assertNull(deleteRequest2.type());
      assertNull(deleteRequest0.index());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(2048L, deleteRequest0.version());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      
      long long1 = 0L;
      Task task0 = null;
      PlainActionFuture<DeleteResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      // Undeclared exception!
      try { 
        transportDeleteAction0.doExecute(task0, deleteRequest1, (ActionListener<DeleteResponse>) plainActionFuture0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = "";
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertSame(settings1, settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      Version version0 = Version.V_5_0_0_alpha2;
      assertNotNull(version0);
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals((byte)2, version0.build);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals((byte)2, version0.build);
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals((byte)2, version0.build);
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean3 = true;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean2, boolean2, boolean3);
      assertFalse(boolean4);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals((byte)2, version0.build);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(autoCreateIndex0.needToCheck());
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals((byte)2, version0.build);
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest1.seqNo());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      TransportCreateIndexAction transportCreateIndexAction1 = transportDeleteAction0.getcreateIndexAction();
      assertNotNull(transportCreateIndexAction1);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertFalse(version0.isBeta());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.resolveIndex());
      assertSame(transportCreateIndexAction1, transportCreateIndexAction0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertSame(transportCreateIndexAction0, transportCreateIndexAction1);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals((byte)0, version0.revision);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)5, version0.major);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals((byte)2, version0.build);
      
      long long1 = 0L;
      // Undeclared exception!
      try { 
        transportDeleteAction0.resolveRequest(metaData0, indexMetaData0, deleteRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = "%";
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      
      Settings settings1 = Settings.EMPTY;
      assertNotNull(settings1);
      assertNotSame(settings1, settings0);
      assertTrue(settings1.equals((Object)settings0));
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertTrue(settings1.equals((Object)settings0));
      
      NetworkService networkService0 = null;
      BigArrays bigArrays0 = BigArrays.NON_RECYCLING_INSTANCE;
      assertNotNull(bigArrays0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      Version version0 = Version.V_5_0_0_alpha2;
      assertNotNull(version0);
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals((byte)5, version0.major);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      Version version1 = Version.fromId(version0.V_2_0_2_ID);
      assertNotNull(version1);
      assertFalse(version1.isBeta());
      assertFalse(version1.isAlpha());
      assertFalse(version1.isRC());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertNotSame(version1, version0);
      assertNotSame(version0, version1);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2000299, version1.id);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals((byte)2, version1.revision);
      assertEquals((byte)2, version1.major);
      assertEquals((byte)99, version1.build);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals((byte)0, version1.minor);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertFalse(version1.equals((Object)version0));
      
      NettyTransportIT.ExceptionThrowingNettyTransport nettyTransportIT_ExceptionThrowingNettyTransport0 = new NettyTransportIT.ExceptionThrowingNettyTransport(settings0, threadPool0, networkService0, bigArrays0, version0, namedWriteableRegistry0, noneCircuitBreakerService0);
      assertNotNull(nettyTransportIT_ExceptionThrowingNettyTransport0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(version0.equals((Object)version1));
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      TransportService transportService0 = new TransportService(settings1, nettyTransportIT_ExceptionThrowingNettyTransport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(version0.equals((Object)version1));
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      HashSet<ActionFilter> hashSet0 = new HashSet<ActionFilter>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(settings0.equals((Object)settings1));
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertTrue(autoCreateIndex0.needToCheck());
      assertTrue(settings0.equals((Object)settings1));
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertNull(deleteRequest1.type());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      DeleteRequest deleteRequest2 = deleteRequest0.version((long) bigArrays0.LONG_PAGE_SIZE);
      assertNotNull(deleteRequest2);
      assertNull(deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(2048L, deleteRequest0.version());
      assertNull(deleteRequest2.type());
      assertNull(deleteRequest2.index());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals(2048L, deleteRequest2.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertFalse(deleteRequest2.refresh());
      assertEquals("GATEWAY", deleteRequest2.routing());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.id());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      
      long long1 = 0L;
      Task task0 = null;
      PlainActionFuture<DeleteResponse> plainActionFuture0 = PlainActionFuture.newFuture();
      assertNotNull(plainActionFuture0);
      
      ActionFilters actionFilters0 = new ActionFilters(hashSet0);
      assertNotNull(actionFilters0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings1, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertFalse(version0.isRC());
      assertTrue(version0.isAlpha());
      assertFalse(version0.isBeta());
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      assertEquals(Lifecycle.State.INITIALIZED, nettyTransportIT_ExceptionThrowingNettyTransport0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(2048, BigArrays.OBJECT_PAGE_SIZE);
      assertEquals(16384, BigArrays.PAGE_SIZE_IN_BYTES);
      assertEquals(4096, BigArrays.INT_PAGE_SIZE);
      assertEquals(2048, BigArrays.LONG_PAGE_SIZE);
      assertEquals(16384, BigArrays.BYTE_PAGE_SIZE);
      assertEquals((byte)5, version0.major);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)2, version0.build);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(5000002, version0.id);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertTrue(settings0.equals((Object)settings1));
      assertTrue(settings1.equals((Object)settings0));
      assertFalse(version0.equals((Object)version1));
      
      ActionFilters actionFilters1 = null;
      TransportDeleteAction transportDeleteAction0 = null;
      try {
        transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters1, indexNameExpressionResolver0, autoCreateIndex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.TransportAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      long long0 = 10L;
      System.setCurrentTimeMillis(long0);
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertNotNull(metaData0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings0 = metaData0.settings();
      assertNotNull(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      Settings settings1 = metaData0.settings();
      assertNotNull(settings1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertSame(settings1, settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings1);
      assertNotNull(threadPool0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      NetworkService networkService0 = null;
      MetaData.API_AND_SNAPSHOT = metaData0.API_ONLY;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(1, MetaData.API_AND_SNAPSHOT.size());
      
      Version version0 = Version.V_2_0_0;
      assertNotNull(version0);
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      
      NamedWriteableRegistry namedWriteableRegistry0 = new NamedWriteableRegistry();
      assertNotNull(namedWriteableRegistry0);
      
      NoneCircuitBreakerService noneCircuitBreakerService0 = new NoneCircuitBreakerService();
      assertNotNull(noneCircuitBreakerService0);
      assertEquals(Lifecycle.State.INITIALIZED, noneCircuitBreakerService0.lifecycleState());
      
      ClusterName clusterName0 = ClusterName.DEFAULT;
      assertNotNull(clusterName0);
      assertEquals("elasticsearch", clusterName0.value());
      
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      MetaDataCreateIndexService metaDataCreateIndexService0 = null;
      ActionFilter actionFilter0 = mock(ActionFilter.class, new ViolatedAssumptionAnswer());
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertNotNull(indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertNotNull(autoCreateIndex0);
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      
      IndexMetaData indexMetaData0 = IndexMetaData.PROTO;
      assertNotNull(indexMetaData0);
      assertEquals(1L, indexMetaData0.getVersion());
      assertEquals(1, indexMetaData0.getNumberOfShards());
      assertEquals(1, indexMetaData0.getTotalNumberOfShards());
      assertEquals(IndexMetaData.State.OPEN, indexMetaData0.getState());
      assertEquals("_na_", indexMetaData0.getIndexUUID());
      assertEquals(0, indexMetaData0.getNumberOfReplicas());
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNotNull(deleteRequest0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.CONTEXT_MODE_GATEWAY);
      assertNotNull(deleteRequest1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertNull(deleteRequest1.id());
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      long long1 = 0L;
      CapturingTransport capturingTransport0 = new CapturingTransport();
      assertNotNull(capturingTransport0);
      assertNull(capturingTransport0.lifecycleState());
      assertEquals(0L, capturingTransport0.serverOpen());
      
      Transport transport0 = capturingTransport0.start();
      assertNull(transport0);
      assertNull(capturingTransport0.lifecycleState());
      assertEquals(0L, capturingTransport0.serverOpen());
      
      TransportService transportService0 = new TransportService(settings1, transport0, threadPool0, clusterName0);
      assertNotNull(transportService0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(capturingTransport0.lifecycleState());
      assertEquals(0L, capturingTransport0.serverOpen());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertEquals("elasticsearch", clusterName0.value());
      
      LinkedHashSet<ActionFilter> linkedHashSet0 = new LinkedHashSet<ActionFilter>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(actionFilter0));
      
      ActionFilters actionFilters0 = new ActionFilters(linkedHashSet0);
      assertNotNull(actionFilters0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(actionFilter0));
      
      TransportCreateIndexAction transportCreateIndexAction0 = new TransportCreateIndexAction(settings0, transportService0, clusterService0, threadPool0, metaDataCreateIndexService0, actionFilters0, indexNameExpressionResolver0);
      assertNotNull(transportCreateIndexAction0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(capturingTransport0.lifecycleState());
      assertEquals(0L, capturingTransport0.serverOpen());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("elasticsearch", clusterName0.value());
      assertFalse(linkedHashSet0.contains(actionFilter0));
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings1, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertNotNull(transportDeleteAction0);
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("elasticsearch", clusterName0.value());
      assertTrue(autoCreateIndex0.needToCheck());
      assertNull(capturingTransport0.lifecycleState());
      assertEquals(0L, capturingTransport0.serverOpen());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(actionFilter0));
      
      TransportDeleteAction transportDeleteAction1 = new TransportDeleteAction(settings1, transportDeleteAction0.transportService, transportDeleteAction0.clusterService, transportDeleteAction0.indicesService, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, transportDeleteAction0.autoCreateIndex);
      assertNotNull(transportDeleteAction1);
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction1.globalBlockLevel());
      assertTrue(transportDeleteAction1.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction1.indexBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction1.getdefaultWriteConsistencyLevel());
      assertTrue(transportDeleteAction1.resolveIndex());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction1.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction1.gettransportPrimaryAction());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("elasticsearch", clusterName0.value());
      assertTrue(autoCreateIndex0.needToCheck());
      assertNull(capturingTransport0.lifecycleState());
      assertEquals(0L, capturingTransport0.serverOpen());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(actionFilter0));
      assertFalse(transportDeleteAction1.equals((Object)transportDeleteAction0));
      
      PlainActionFuture<DeleteResponse> plainActionFuture0 = new PlainActionFuture<DeleteResponse>();
      assertNotNull(plainActionFuture0);
      
      CountDownLatch countDownLatch0 = new CountDownLatch(version0.V_2_0_0_rc1_ID);
      assertNotNull(countDownLatch0);
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      
      LatchedActionListener<DeleteResponse> latchedActionListener0 = new LatchedActionListener<DeleteResponse>(plainActionFuture0, countDownLatch0);
      assertNotNull(latchedActionListener0);
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      
      ReplicationTask replicationTask0 = (ReplicationTask)transportDeleteAction1.execute(deleteRequest1, (ActionListener<DeleteResponse>) latchedActionListener0);
      assertNotNull(replicationTask0);
      assertTrue(transportDeleteAction0.resolveIndex());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction0.getdefaultWriteConsistencyLevel());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction0.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction0.gettransportPrimaryAction());
      assertTrue(transportDeleteAction0.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.globalBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction0.indexBlockLevel());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction1.globalBlockLevel());
      assertTrue(transportDeleteAction1.checkWriteConsistency());
      assertEquals(ClusterBlockLevel.WRITE, transportDeleteAction1.indexBlockLevel());
      assertEquals(WriteConsistencyLevel.QUORUM, transportDeleteAction1.getdefaultWriteConsistencyLevel());
      assertTrue(transportDeleteAction1.resolveIndex());
      assertEquals("indices:data/write/delete[r]", transportDeleteAction1.gettransportReplicaAction());
      assertEquals("indices:data/write/delete[p]", transportDeleteAction1.gettransportPrimaryAction());
      assertEquals(1L, replicationTask0.getId());
      assertEquals("indices:data/write/delete", replicationTask0.getAction());
      assertEquals("delete {[null][null][null]}", replicationTask0.getDescription());
      assertEquals(10L, replicationTask0.getStartTime());
      assertEquals("transport", replicationTask0.getType());
      assertEquals("starting", replicationTask0.getPhase());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertFalse(version0.isBeta());
      assertFalse(version0.isAlpha());
      assertFalse(version0.isRC());
      assertEquals("elasticsearch", clusterName0.value());
      assertTrue(autoCreateIndex0.needToCheck());
      assertEquals("GATEWAY", deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals((-3L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.refresh());
      assertEquals((-3L), deleteRequest1.version());
      assertNull(deleteRequest1.type());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals("GATEWAY", deleteRequest1.routing());
      assertNull(deleteRequest1.id());
      assertNull(capturingTransport0.lifecycleState());
      assertEquals(0L, capturingTransport0.serverOpen());
      assertEquals(Lifecycle.State.INITIALIZED, transportService0.lifecycleState());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotSame(transportDeleteAction0, transportDeleteAction1);
      assertNotSame(transportDeleteAction1, transportDeleteAction0);
      assertSame(settings0, settings1);
      assertSame(settings1, settings0);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertEquals(5000002, Version.V_5_0_0_alpha2_ID);
      assertEquals(5000001, Version.V_5_0_0_alpha1_ID);
      assertEquals(2000299, Version.V_2_0_2_ID);
      assertEquals(5000099, Version.V_5_0_0_ID);
      assertEquals(2000199, Version.V_2_0_1_ID);
      assertEquals(2030099, Version.V_2_3_0_ID);
      assertEquals(5000003, Version.V_5_0_0_alpha3_ID);
      assertEquals(2030299, Version.V_2_3_2_ID);
      assertEquals(2000099, Version.V_2_0_0_ID);
      assertEquals(2010099, Version.V_2_1_0_ID);
      assertEquals(2030399, Version.V_2_3_3_ID);
      assertEquals((byte)0, version0.minor);
      assertEquals(2000051, Version.V_2_0_0_rc1_ID);
      assertEquals(2010299, Version.V_2_1_2_ID);
      assertEquals(2000001, Version.V_2_0_0_beta1_ID);
      assertEquals(2010199, Version.V_2_1_1_ID);
      assertEquals(2000002, Version.V_2_0_0_beta2_ID);
      assertEquals(2020199, Version.V_2_2_1_ID);
      assertEquals(2020299, Version.V_2_2_2_ID);
      assertEquals(2020099, Version.V_2_2_0_ID);
      assertEquals(2030199, Version.V_2_3_1_ID);
      assertEquals(2000099, version0.id);
      assertEquals((byte)0, version0.revision);
      assertEquals((byte)99, version0.build);
      assertEquals((byte)2, version0.major);
      assertFalse(linkedHashSet0.contains(actionFilter0));
      assertFalse(transportDeleteAction0.equals((Object)transportDeleteAction1));
      assertFalse(transportDeleteAction1.equals((Object)transportDeleteAction0));
      
      // Undeclared exception!
      try { 
        transportDeleteAction0.innerExecute(replicationTask0, deleteRequest0, latchedActionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction$ReroutePhase", e);
      }
  }
}
