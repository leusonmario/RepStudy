/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 14:14:10 GMT 2021
 */

package org.elasticsearch.action.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.TransportDeleteAction;
import org.elasticsearch.action.support.ActionFilter;
import org.elasticsearch.action.support.ActionFilters;
import org.elasticsearch.action.support.AutoCreateIndex;
import org.elasticsearch.cluster.ClusterName;
import org.elasticsearch.cluster.action.shard.ShardStateAction;
import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
import org.elasticsearch.cluster.metadata.MetaData;
import org.elasticsearch.cluster.service.ClusterService;
import org.elasticsearch.common.component.Lifecycle;
import org.elasticsearch.common.io.stream.StreamInput;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.indices.IndicesService;
import org.elasticsearch.threadpool.ThreadPool;
import org.elasticsearch.transport.Transport;
import org.elasticsearch.transport.TransportService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportDeleteAction_ESTest extends TransportDeleteAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      DeleteRequest deleteRequest0 = new DeleteRequest(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.id());
      assertEquals("global-", deleteRequest0.index());
      assertNotNull(deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, deleteRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.id());
      assertEquals("global-", deleteRequest0.index());
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.GLOBAL_STATE_FILE_PREFIX, deleteRequest0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.type());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.id());
      assertEquals("global-", deleteRequest0.index());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      DeleteRequest deleteRequest0 = null;
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("global-", deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.type());
      assertEquals("global-", deleteRequest1.routing());
      assertEquals((-3L), deleteRequest1.version());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, deleteRequest0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals("global-", deleteRequest0.routing());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertSame(deleteRequest0, deleteRequest1);
      
      byte byte0 = (byte) (-1);
      TransportService transportService0 = null;
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      TransportCreateIndexAction transportCreateIndexAction0 = null;
      LinkedHashSet<ActionFilter> linkedHashSet0 = new LinkedHashSet<ActionFilter>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      ActionFilters actionFilters0 = new ActionFilters(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(actionFilters0);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(threadPool0);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(indexNameExpressionResolver0);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertTrue(autoCreateIndex0.needToCheck());
      assertNotNull(autoCreateIndex0);
      
      TransportDeleteAction transportDeleteAction0 = null;
      try {
        transportDeleteAction0 = new TransportDeleteAction(settings0, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      String string0 = "";
      DeleteRequest deleteRequest0 = new DeleteRequest(metaData0.CONTEXT_MODE_GATEWAY);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("GATEWAY", deleteRequest0.index());
      assertNotNull(deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, string0, deleteRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNull(deleteRequest0.type());
      assertNull(deleteRequest0.routing());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals("GATEWAY", deleteRequest0.index());
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(metaData0);
      
      String string0 = "default:false;text-align:right;desc:total user memory";
      String string1 = "";
      String string2 = metaData0.resolveIndexRouting(string0, string1, string1);
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "indices:data/write/delete";
      DeleteRequest deleteRequest0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.resolveAndValidateRouting(metaData0, string3, deleteRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.index());
      assertNotNull(deleteRequest0);
      
      String string0 = "org.elasticsearch.action.delete.TransportDeleteAction$1";
      DeleteRequest deleteRequest1 = deleteRequest0.id(string0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest1.id());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      long long0 = (-2286L);
      DeleteRequest deleteRequest2 = deleteRequest1.version(long0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals((-2286L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest1.id());
      assertEquals((-2286L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.refresh());
      assertEquals(0L, deleteRequest2.seqNo());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals((-2286L), deleteRequest2.version());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertNotNull(deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest0);
      
      boolean boolean0 = false;
      DeleteRequest deleteRequest3 = deleteRequest2.refresh(boolean0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals((-2286L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertNull(deleteRequest1.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest1.id());
      assertEquals((-2286L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.refresh());
      assertEquals(0L, deleteRequest2.seqNo());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals((-2286L), deleteRequest2.version());
      assertNull(deleteRequest2.routing());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(0L, deleteRequest3.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertFalse(deleteRequest3.refresh());
      assertNull(deleteRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertNull(deleteRequest3.index());
      assertNull(deleteRequest3.parent());
      assertNull(deleteRequest3.routing());
      assertEquals((-2286L), deleteRequest3.version());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest3.id());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertNotNull(deleteRequest3);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest2);
      
      DeleteRequest deleteRequest4 = deleteRequest3.routing(string0);
      assertEquals(0L, deleteRequest0.seqNo());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.type());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest0.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest0.routing());
      assertNull(deleteRequest0.parent());
      assertEquals((-2286L), deleteRequest0.version());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest1.routing());
      assertNull(deleteRequest1.index());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest1.id());
      assertEquals((-2286L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest2.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertFalse(deleteRequest2.refresh());
      assertEquals(0L, deleteRequest2.seqNo());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.index());
      assertNull(deleteRequest2.type());
      assertEquals((-2286L), deleteRequest2.version());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest2.routing());
      assertEquals(0L, deleteRequest3.seqNo());
      assertEquals(VersionType.INTERNAL, deleteRequest3.versionType());
      assertFalse(deleteRequest3.refresh());
      assertNull(deleteRequest3.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest3.consistencyLevel());
      assertFalse(deleteRequest3.getShouldPersistResult());
      assertNull(deleteRequest3.index());
      assertNull(deleteRequest3.parent());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest3.routing());
      assertEquals((-2286L), deleteRequest3.version());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest3.id());
      assertEquals(0L, deleteRequest3.primaryTerm());
      assertEquals(0L, deleteRequest4.primaryTerm());
      assertNull(deleteRequest4.type());
      assertFalse(deleteRequest4.getShouldPersistResult());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest4.routing());
      assertEquals((-2286L), deleteRequest4.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest4.consistencyLevel());
      assertEquals("org.elasticsearch.action.delete.TransportDeleteAction$1", deleteRequest4.id());
      assertEquals(VersionType.INTERNAL, deleteRequest4.versionType());
      assertFalse(deleteRequest4.refresh());
      assertNull(deleteRequest4.index());
      assertEquals(0L, deleteRequest4.seqNo());
      assertNull(deleteRequest4.parent());
      assertNotNull(deleteRequest4);
      assertSame(deleteRequest0, deleteRequest4);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest3);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest4);
      assertSame(deleteRequest2, deleteRequest1);
      assertSame(deleteRequest2, deleteRequest3);
      assertSame(deleteRequest2, deleteRequest4);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest4);
      assertSame(deleteRequest3, deleteRequest1);
      assertSame(deleteRequest3, deleteRequest0);
      assertSame(deleteRequest3, deleteRequest2);
      assertSame(deleteRequest4, deleteRequest0);
      assertSame(deleteRequest4, deleteRequest1);
      assertSame(deleteRequest4, deleteRequest2);
      assertSame(deleteRequest4, deleteRequest3);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest4, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.delete.TransportDeleteAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      MetaData metaData0 = MetaData.EMPTY_META_DATA;
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNotNull(metaData0);
      
      String string0 = ":q0?Hu'0+tuj6L";
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.id());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.index());
      assertEquals("global-", deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("global-", deleteRequest1.routing());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      boolean boolean0 = true;
      DeleteRequest deleteRequest2 = deleteRequest1.refresh(boolean0);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.id());
      assertTrue(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.index());
      assertEquals("global-", deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("global-", deleteRequest1.routing());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertTrue(deleteRequest1.refresh());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertNull(deleteRequest2.type());
      assertTrue(deleteRequest2.refresh());
      assertNull(deleteRequest2.id());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.index());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("global-", deleteRequest2.routing());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertNotNull(deleteRequest2);
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, string0, deleteRequest2);
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertNull(deleteRequest0.id());
      assertTrue(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.index());
      assertEquals("global-", deleteRequest0.routing());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("global-", deleteRequest1.routing());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertTrue(deleteRequest1.refresh());
      assertEquals((-3L), deleteRequest2.version());
      assertEquals(0L, deleteRequest2.seqNo());
      assertNull(deleteRequest2.type());
      assertTrue(deleteRequest2.refresh());
      assertNull(deleteRequest2.id());
      assertNull(deleteRequest2.parent());
      assertEquals(0L, deleteRequest2.primaryTerm());
      assertNull(deleteRequest2.index());
      assertEquals(VersionType.INTERNAL, deleteRequest2.versionType());
      assertEquals("global-", deleteRequest2.routing());
      assertFalse(deleteRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest2.consistencyLevel());
      assertSame(deleteRequest0, deleteRequest2);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      assertSame(deleteRequest1, deleteRequest2);
      assertSame(deleteRequest2, deleteRequest0);
      assertSame(deleteRequest2, deleteRequest1);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.routing());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals("global-", deleteRequest0.routing());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.index());
      assertNull(deleteRequest1.parent());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertEquals("global-", deleteRequest1.routing());
      assertNull(deleteRequest1.type());
      assertFalse(deleteRequest1.refresh());
      assertNull(deleteRequest1.id());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, deleteRequest0);
      assertEquals(0L, metaData0.version());
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.type());
      assertEquals((-3L), deleteRequest0.version());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.index());
      assertEquals(0L, deleteRequest0.seqNo());
      assertNull(deleteRequest0.parent());
      assertEquals("global-", deleteRequest0.routing());
      assertSame(deleteRequest0, deleteRequest1);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)66;
      byteArray0[3] = byte3;
      StreamInput streamInput0 = StreamInput.wrap(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(streamInput0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)66}, byteArray0);
      
      Settings settings0 = Settings.readSettingsFromStream(streamInput0);
      assertEquals(4, byteArray0.length);
      assertNotNull(settings0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)66}, byteArray0);
      
      TransportService transportService0 = null;
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertEquals(4, byteArray0.length);
      assertNotNull(threadPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)66}, byteArray0);
      
      ShardStateAction shardStateAction0 = null;
      TransportCreateIndexAction transportCreateIndexAction0 = null;
      LinkedHashSet<ActionFilter> linkedHashSet0 = new LinkedHashSet<ActionFilter>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      ActionFilters actionFilters0 = new ActionFilters(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(actionFilters0);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals(4, byteArray0.length);
      assertNotNull(indexNameExpressionResolver0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)66}, byteArray0);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertEquals(4, byteArray0.length);
      assertTrue(autoCreateIndex0.needToCheck());
      assertNotNull(autoCreateIndex0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)66}, byteArray0);
      
      TransportDeleteAction transportDeleteAction0 = null;
      try {
        transportDeleteAction0 = new TransportDeleteAction(settings0, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      MetaData metaData0 = MetaData.PROTO;
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(metaData0);
      
      DeleteRequest deleteRequest0 = new DeleteRequest();
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertNull(deleteRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertNotNull(deleteRequest0);
      
      DeleteRequest deleteRequest1 = deleteRequest0.routing(metaData0.GLOBAL_STATE_FILE_PREFIX);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("global-", deleteRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest1.consistencyLevel());
      assertEquals(0L, deleteRequest1.primaryTerm());
      assertNull(deleteRequest1.id());
      assertFalse(deleteRequest1.getShouldPersistResult());
      assertNull(deleteRequest1.parent());
      assertNull(deleteRequest1.index());
      assertEquals(VersionType.INTERNAL, deleteRequest1.versionType());
      assertFalse(deleteRequest1.refresh());
      assertEquals((-3L), deleteRequest1.version());
      assertEquals(0L, deleteRequest1.seqNo());
      assertEquals("global-", deleteRequest1.routing());
      assertNull(deleteRequest1.type());
      assertNotNull(deleteRequest1);
      assertSame(deleteRequest0, deleteRequest1);
      assertSame(deleteRequest1, deleteRequest0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_PARAM, deleteRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("global-", deleteRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertSame(deleteRequest0, deleteRequest1);
      
      byte byte0 = (byte) (-1);
      TransportService transportService0 = null;
      ClusterService clusterService0 = null;
      IndicesService indicesService0 = null;
      ShardStateAction shardStateAction0 = null;
      TransportCreateIndexAction transportCreateIndexAction0 = null;
      LinkedHashSet<ActionFilter> linkedHashSet0 = new LinkedHashSet<ActionFilter>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ActionFilters actionFilters0 = new ActionFilters(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(actionFilters0);
      
      TransportDeleteAction.resolveAndValidateRouting(metaData0, metaData0.CONTEXT_MODE_SNAPSHOT, deleteRequest0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(VersionType.INTERNAL, deleteRequest0.versionType());
      assertFalse(deleteRequest0.refresh());
      assertNull(deleteRequest0.id());
      assertNull(deleteRequest0.index());
      assertNull(deleteRequest0.parent());
      assertEquals(0L, deleteRequest0.primaryTerm());
      assertEquals((-3L), deleteRequest0.version());
      assertNull(deleteRequest0.type());
      assertEquals(0L, deleteRequest0.seqNo());
      assertFalse(deleteRequest0.getShouldPersistResult());
      assertEquals("global-", deleteRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, deleteRequest0.consistencyLevel());
      assertSame(deleteRequest0, deleteRequest1);
      
      Settings settings0 = metaData0.persistentSettings();
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(settings0);
      
      ThreadPool threadPool0 = new ThreadPool(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(threadPool0);
      
      String string0 = "): likely integer overflow?";
      String[] stringArray0 = settings0.getAsArray(string0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(stringArray0);
      
      boolean boolean0 = linkedHashSet0.containsAll(metaData0.API_AND_SNAPSHOT);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(boolean0);
      
      IndexNameExpressionResolver indexNameExpressionResolver0 = new IndexNameExpressionResolver(settings0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertNotNull(indexNameExpressionResolver0);
      
      Transport transport0 = null;
      ClusterName clusterName0 = null;
      TransportService transportService1 = new TransportService(transport0, threadPool0, clusterName0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, transportService1.lifecycleState());
      assertNotNull(transportService1);
      
      AutoCreateIndex autoCreateIndex0 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(autoCreateIndex0.needToCheck());
      assertNotNull(autoCreateIndex0);
      
      TransportDeleteAction transportDeleteAction0 = new TransportDeleteAction(settings0, transportService1, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertEquals(Lifecycle.State.INITIALIZED, transportService1.lifecycleState());
      assertTrue(autoCreateIndex0.needToCheck());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(transportDeleteAction0);
      
      AutoCreateIndex autoCreateIndex1 = new AutoCreateIndex(settings0, indexNameExpressionResolver0);
      assertEquals(0, metaData0.getTotalNumberOfShards());
      assertEquals(0L, metaData0.version());
      assertEquals("_na_", metaData0.clusterUUID());
      assertEquals(0, metaData0.getNumberOfShards());
      assertTrue(autoCreateIndex1.needToCheck());
      assertNotNull(autoCreateIndex1);
      assertFalse(autoCreateIndex1.equals((Object)autoCreateIndex0));
      
      TransportDeleteAction transportDeleteAction1 = null;
      try {
        transportDeleteAction1 = new TransportDeleteAction(settings0, transportService0, clusterService0, indicesService0, threadPool0, shardStateAction0, transportCreateIndexAction0, actionFilters0, indexNameExpressionResolver0, autoCreateIndex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.support.replication.TransportReplicationAction", e);
      }
  }
}
