import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.cutoffFrequency(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        multiMatchQueryBuilder20.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        java.lang.String str23 = multiMatchQueryBuilder20.getfuzzyRewrite();
        multiMatchQueryBuilder20.cutoffFrequency = (-1.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str23, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.lang.String str14 = multiMatchQueryBuilder13.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.queryName("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder13.zeroTermsQuery = zeroTermsQuery17;
        multiMatchQueryBuilder13.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}";
        multiMatchQueryBuilder13.setslop((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.String str39 = multiMatchQueryBuilder10.fuzzyRewrite;
        java.util.List<java.lang.String> strList40 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator41 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder10.maxExpansions(100);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(operator41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        multiMatchQueryBuilder23.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder23.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.fuzzyRewrite("");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder23.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) strList30);
        java.lang.String[] strArray33 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder31, strArray33);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator35 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.operator(operator35);
        java.lang.String str37 = null; // flaky: multiMatchQueryBuilder31.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\"\n  }\n}" + "'", str37, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\"\n  }\n}");
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder15.setlenient((java.lang.Boolean) false);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder15.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.Integer int15 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder11.doXContent(xContentBuilder16, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(params17);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        multiMatchQueryBuilder21.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.field("hi!");
        java.lang.Integer int29 = multiMatchQueryBuilder21.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder21.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 97,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str32 = multiMatchQueryBuilder31.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder31.zeroTermsQuery = zeroTermsQuery33;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.boost((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.lenient(true);
        multiMatchQueryBuilder38.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        java.lang.Object obj19 = multiMatchQueryBuilder14.text;
        multiMatchQueryBuilder14.slop = 0;
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder32.setzeroTermsQuery(zeroTermsQuery33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.cutoffFrequency((float) 100);
        java.lang.Integer int39 = multiMatchQueryBuilder36.slop;
        multiMatchQueryBuilder36.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator42 = multiMatchQueryBuilder36.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder36.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = null; // flaky: multiMatchQueryBuilder14.fuzziness((java.lang.Object) multiMatchQueryBuilder44);
        multiMatchQueryBuilder44.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.Boolean boolean48 = multiMatchQueryBuilder44.getlenient();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray56);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder57.useDisMax(false);
        java.lang.String str60 = multiMatchQueryBuilder59.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness61 = multiMatchQueryBuilder59.fuzziness;
        multiMatchQueryBuilder59.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder59.cutoffFrequency = (-1.0f);
        multiMatchQueryBuilder59.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = multiMatchQueryBuilder44.fuzziness((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        java.lang.String str69 = multiMatchQueryBuilder44.getminimumShouldMatch();
        multiMatchQueryBuilder44.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Float float72 = multiMatchQueryBuilder44.getboost();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + '#' + "'", obj19, '#');
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(operator42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(fuzziness61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(float72);
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        multiMatchQueryBuilder12.tieBreaker = 1.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder12.setfuzziness(fuzziness15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.field("", (float) 0);
        java.lang.String str20 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.slop(97);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder12.getfieldsBoosts();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = multiMatchQueryBuilder12.toXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.analyzer("hi!");
        java.lang.String str13 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str16 = multiMatchQueryBuilder15.getfuzzyRewrite();
        multiMatchQueryBuilder15.setprefixLength((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" + "'", str16, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.operator(operator28);
        multiMatchQueryBuilder10.slop = 100;
        multiMatchQueryBuilder10.setminimumShouldMatch("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.analyzer("");
        multiMatchQueryBuilder35.cutoffFrequency = 52.0f;
        multiMatchQueryBuilder35.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 52.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        java.lang.Object obj42 = multiMatchQueryBuilder35.text;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + '#' + "'", obj42, '#');
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = null;
        multiMatchQueryBuilder8.setoperator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder14.operator;
        multiMatchQueryBuilder14.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        java.lang.Boolean boolean20 = multiMatchQueryBuilder14.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        java.lang.Object obj0 = null;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder9.useDisMax(false);
        java.lang.String str12 = multiMatchQueryBuilder11.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.minimumShouldMatch = "hi!";
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder11.fuzziness;
        java.lang.Integer int18 = multiMatchQueryBuilder11.getmaxExpansions();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = multiMatchQueryBuilder27.getoperator();
        java.lang.Integer int29 = multiMatchQueryBuilder27.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = null;
        multiMatchQueryBuilder27.setoperator(operator30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray41);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = multiMatchQueryBuilder42.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.boost((float) (short) 100);
        multiMatchQueryBuilder45.queryName = "hi!";
        java.lang.Integer int48 = multiMatchQueryBuilder45.maxExpansions;
        java.lang.String str49 = multiMatchQueryBuilder45.queryName;
        java.lang.Boolean boolean50 = multiMatchQueryBuilder45.lenient;
        java.lang.Boolean boolean51 = multiMatchQueryBuilder45.lenient;
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        multiMatchQueryBuilder60.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder60.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder60.minimumShouldMatch("");
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean51, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder27, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) int18, strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj0, strArray74);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(operator28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(zeroTermsQuery43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator41 = null;
        multiMatchQueryBuilder40.operator = operator41;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder40.setprefixLength((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"maxExpansions\" : 0\n  }\n}", (float) 10L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setboost((java.lang.Float) 0.0f);
        multiMatchQueryBuilder17.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.cutoffFrequency((float) 1);
        java.lang.Boolean boolean24 = multiMatchQueryBuilder17.useDisMax;
        java.lang.Boolean boolean25 = multiMatchQueryBuilder17.useDisMax;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder17.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(zeroTermsQuery26);
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.slop((int) (byte) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        multiMatchQueryBuilder21.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder21.setslop((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.setoperator(operator22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.useDisMax(false);
        java.lang.String str35 = multiMatchQueryBuilder34.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness36 = multiMatchQueryBuilder34.fuzziness;
        java.lang.String str37 = multiMatchQueryBuilder34.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = null;
        multiMatchQueryBuilder34.zeroTermsQuery = zeroTermsQuery38;
        multiMatchQueryBuilder34.setqueryName("hi!");
        multiMatchQueryBuilder34.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder10.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(fuzziness36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(zeroTermsQuery45);
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"class org.joda.time.format.DateTimeFormatter\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}^1.0\" ],\n    \"boost\" : 0.0,\n    \"useDisMax\" : true,\n    \"Name\" : \"hi!\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder12.setoperator(operator13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder12.gettype();
        java.lang.Integer int17 = multiMatchQueryBuilder12.getslop();
        multiMatchQueryBuilder12.setcutoffFrequency((java.lang.Float) 100.0f);
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder12.fields;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}" + "'", str15, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strList20);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder12.setfieldsBoosts(strObjectFloatHashMap15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost(100.0f);
        java.lang.Integer int19 = multiMatchQueryBuilder12.getprefixLength();
        java.lang.Integer int20 = multiMatchQueryBuilder12.slop;
        multiMatchQueryBuilder12.setmaxExpansions((java.lang.Integer) 32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder12.prefixLength((int) (short) 1);
        multiMatchQueryBuilder24.slop = 35;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("hi!");
        java.lang.Float float19 = multiMatchQueryBuilder18.tieBreaker;
        java.lang.Object obj20 = multiMatchQueryBuilder18.gettext();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + '#' + "'", obj20, '#');
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        java.lang.Integer int13 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.slop = 35;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery16;
        multiMatchQueryBuilder11.boost = (-1.0f);
        multiMatchQueryBuilder11.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.cutoffFrequency((float) 0);
        java.lang.String str18 = multiMatchQueryBuilder17.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder8.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder8.lenient;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap19;
        multiMatchQueryBuilder8.fuzzyRewrite = "";
        java.lang.Object obj23 = multiMatchQueryBuilder8.gettext();
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 32);
        java.lang.Integer int26 = multiMatchQueryBuilder8.getslop();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        java.lang.Float float11 = multiMatchQueryBuilder8.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator12 = multiMatchQueryBuilder8.operator;
        java.lang.Integer int13 = multiMatchQueryBuilder8.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.queryName("");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder24.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery29;
        multiMatchQueryBuilder24.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder24.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder24.zeroTermsQuery = zeroTermsQuery35;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder24.cutoffFrequency((float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNull(operator12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        java.lang.Float float16 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.prefixLength((int) '#');
        multiMatchQueryBuilder10.setboost((java.lang.Float) 35.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = multiMatchQueryBuilder19.toXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength((int) (byte) 0);
        java.lang.Class<?> wildcardClass19 = multiMatchQueryBuilder16.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0\n  }\n}", (float) 35);
        multiMatchQueryBuilder15.maxExpansions = 35;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder21.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : true,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\"\n  }\n}";
        java.lang.String str24 = multiMatchQueryBuilder21.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder16.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        java.lang.String str19 = multiMatchQueryBuilder18.analyzer;
        java.lang.Integer int20 = multiMatchQueryBuilder18.getslop();
        java.lang.String str21 = multiMatchQueryBuilder18.getqueryName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder11.setoperator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int21 = multiMatchQueryBuilder11.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder11.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.elasticsearch.common.xcontent.XContentBuilder.defaultDatePrinter;
        java.lang.Class<?> wildcardClass1 = dateTimeFormatter0.getClass();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray9);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder14.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder14.operator(operator16);
        multiMatchQueryBuilder17.useDisMax = false;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.getuseDisMax();
        java.lang.Integer int19 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int20 = multiMatchQueryBuilder10.getprefixLength();
        java.lang.String str21 = multiMatchQueryBuilder10.analyzer;
        java.lang.Integer int22 = multiMatchQueryBuilder10.slop;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator12 = null;
        multiMatchQueryBuilder8.setoperator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder15.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder19.setcutoffFrequency((java.lang.Float) 35.0f);
        multiMatchQueryBuilder19.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}";
        multiMatchQueryBuilder19.cutoffFrequency = 52.0f;
        org.elasticsearch.common.xcontent.XContentType xContentType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference27 = multiMatchQueryBuilder19.buildAsBytes(xContentType26);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setboost((java.lang.Float) 0.0f);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder8.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder13.lenient = true;
        multiMatchQueryBuilder13.maxExpansions = 100;
        java.lang.Float float18 = multiMatchQueryBuilder13.boost;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery19);
        java.lang.Float float21 = multiMatchQueryBuilder20.getboost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(float21);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str13 = null; // flaky: multiMatchQueryBuilder10.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery14);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) (-1));
        java.lang.String str18 = multiMatchQueryBuilder10.analyzer;
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}" + "'", str13, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}" + "'", str18, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder10.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 35,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder20.settieBreaker((java.lang.Float) 10.0f);
        org.elasticsearch.common.xcontent.XContentType xContentType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference24 = multiMatchQueryBuilder20.buildAsBytes(xContentType23);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        multiMatchQueryBuilder10.setoperator(operator28);
        java.lang.Integer int30 = multiMatchQueryBuilder10.slop;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(int30);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder10.fields;
        multiMatchQueryBuilder10.tieBreaker = 1.0f;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = multiMatchQueryBuilder10.toXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"lenient\" : true,\n    \"Name\" : \"hi!\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = multiMatchQueryBuilder10.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray21);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.boost((float) (short) 100);
        multiMatchQueryBuilder25.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        multiMatchQueryBuilder25.setoperator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.fuzzyRewrite("");
        java.util.List<java.lang.String> strList32 = multiMatchQueryBuilder25.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder13.fuzziness((java.lang.Object) strList32);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.useDisMax(false);
        java.lang.String str45 = multiMatchQueryBuilder44.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = null;
        multiMatchQueryBuilder44.setzeroTermsQuery(zeroTermsQuery46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.type(type48);
        float float50 = type48.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder13.type(type48);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.useDisMax(false);
        java.lang.String str63 = multiMatchQueryBuilder62.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness64 = multiMatchQueryBuilder62.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type67 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type68 = type67.matchQueryType();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray76);
        multiMatchQueryBuilder77.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder77.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder77.minimumShouldMatch("");
        java.lang.String[] strArray91 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type68, strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder62, strArray91);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder51, strArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder97 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(operator11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type48.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(fuzziness64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type67.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type68.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(strArray91);
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.maxExpansions(35);
        multiMatchQueryBuilder15.analyzer = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.tieBreaker((float) 0L);
        multiMatchQueryBuilder22.prefixLength = 97;
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder22.fuzziness;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness25);
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        java.lang.String str14 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness15;
        java.lang.Float float17 = multiMatchQueryBuilder13.cutoffFrequency;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.operator(operator20);
        java.lang.Float float22 = multiMatchQueryBuilder13.tieBreaker;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray31);
        java.lang.Integer int34 = multiMatchQueryBuilder33.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.field("hi!");
        multiMatchQueryBuilder33.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = multiMatchQueryBuilder47.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.boost((float) (short) 100);
        java.lang.Integer int51 = multiMatchQueryBuilder50.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder50.boost((float) '4');
        multiMatchQueryBuilder50.setfuzzyRewrite("");
        java.lang.Integer int56 = multiMatchQueryBuilder50.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder50.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder50.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = null; // flaky: multiMatchQueryBuilder33.fuzziness((java.lang.Object) multiMatchQueryBuilder50);
        java.lang.String str62 = null; // flaky: multiMatchQueryBuilder61.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = null; // flaky: multiMatchQueryBuilder61.gettype();
        java.lang.Integer int64 = null; // flaky: multiMatchQueryBuilder61.getmaxExpansions();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder73.useDisMax(false);
        java.lang.String str76 = multiMatchQueryBuilder75.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness77 = multiMatchQueryBuilder75.fuzziness;
        multiMatchQueryBuilder75.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder75.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder90.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type93 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder90.type(type93);
        org.elasticsearch.common.ParseField parseField95 = type93.parseField();
        multiMatchQueryBuilder75.settype(type93);
        org.elasticsearch.index.search.MatchQuery.Type type97 = type93.matchQueryType();
// flaky:         multiMatchQueryBuilder61.type = type93;
        multiMatchQueryBuilder13.type = type93;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float22);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(zeroTermsQuery48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str62, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(type63);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(fuzziness77);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertTrue("'" + type93 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type93.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNotNull(parseField95);
        org.junit.Assert.assertTrue("'" + type97 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type97.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder8.useDisMax = true;
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder8.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder8.type(type19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder25.zeroTermsQuery = zeroTermsQuery26;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap28 = multiMatchQueryBuilder25.fieldsBoosts;
        multiMatchQueryBuilder25.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder25.maxExpansions = 0;
        java.lang.Boolean boolean33 = multiMatchQueryBuilder25.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(strObjectFloatHashMap28);
        org.junit.Assert.assertEquals("'" + boolean33 + "' != '" + false + "'", boolean33, false);
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.boost((float) 10L);
        java.lang.String[] strArray23 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray23);
        java.lang.Integer int25 = multiMatchQueryBuilder18.getmaxExpansions();
        java.lang.String str26 = null; // flaky: multiMatchQueryBuilder18.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = null;
        multiMatchQueryBuilder18.setoperator(operator27);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(int25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 100.0\n  }\n}");
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.maxExpansions = 1;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder8.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray23);
        java.lang.Integer int25 = multiMatchQueryBuilder24.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.String str26 = multiMatchQueryBuilder23.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder23.type;
        java.lang.Float float28 = multiMatchQueryBuilder23.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.boost((float) (byte) 0);
        multiMatchQueryBuilder30.cutoffFrequency = 52.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(type27);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Integer int18 = multiMatchQueryBuilder11.getslop();
        multiMatchQueryBuilder11.slop = 0;
        java.lang.Float float21 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder30.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.boost((float) (short) 100);
        java.lang.Integer int34 = multiMatchQueryBuilder33.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder33.zeroTermsQuery;
        multiMatchQueryBuilder33.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder33.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder39.fuzziness;
        java.lang.String str41 = multiMatchQueryBuilder39.getqueryName();
        multiMatchQueryBuilder39.boost = 0.0f;
        multiMatchQueryBuilder39.setboost((java.lang.Float) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder11.type((java.lang.Object) multiMatchQueryBuilder39);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multi_match\" : {?    \"query\" : -1.0,?    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],?    \"boost\" : 10.0,?    \"max_expansions\" : -1?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(zeroTermsQuery35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(fuzziness40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.slop((int) ' ');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder12.prefixLength = 35;
        org.elasticsearch.common.xcontent.XContentType xContentType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference18 = multiMatchQueryBuilder12.buildAsBytes(xContentType17);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        java.lang.Float float22 = multiMatchQueryBuilder21.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.maxExpansions((int) (byte) 1);
        java.lang.Float float27 = multiMatchQueryBuilder26.boost;
        multiMatchQueryBuilder26.maxExpansions = 10;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(float27);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type15 = type14.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.type(type14);
        multiMatchQueryBuilder16.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.Class<?> wildcardClass19 = multiMatchQueryBuilder16.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type15.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness18);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.tieBreaker((float) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.slop(0);
        java.lang.Boolean boolean25 = multiMatchQueryBuilder22.getlenient();
        multiMatchQueryBuilder22.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"tie_breaker\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        multiMatchQueryBuilder36.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        java.lang.String str48 = multiMatchQueryBuilder47.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.type((java.lang.Object) str48);
        multiMatchQueryBuilder49.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder27.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder27.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder27.field("{\n  \"multi_match\" : {\n    \"query\" : \"class org.joda.time.format.DateTimeFormatter\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) 0);
        java.lang.Float float60 = multiMatchQueryBuilder59.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(float60);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.util.List<java.lang.String> strList10 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder8.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder13.lenient = true;
        multiMatchQueryBuilder13.maxExpansions = 100;
        java.lang.Float float18 = multiMatchQueryBuilder13.boost;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.zeroTermsQuery(zeroTermsQuery19);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder13.lenient;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.useDisMax(true);
        java.lang.Float float24 = multiMatchQueryBuilder13.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.gettext();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder10.getfieldsBoosts();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder10.fieldsBoosts;
        java.lang.String str23 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0\n  }\n}", 52.0f);
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 1.0f);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(fuzziness26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.util.List<java.lang.String> strList18 = multiMatchQueryBuilder10.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList18);
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder15.boost = 100.0f;
        multiMatchQueryBuilder15.slop = 35;
        java.lang.String str23 = multiMatchQueryBuilder15.getminimumShouldMatch();
        multiMatchQueryBuilder15.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        multiMatchQueryBuilder15.prefixLength = 52;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        java.lang.String str24 = multiMatchQueryBuilder8.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}", (float) (byte) 1);
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder8.fields;
        java.lang.String str29 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = multiMatchQueryBuilder8.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(operator30);
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        java.lang.Float float22 = multiMatchQueryBuilder11.tieBreaker;
        multiMatchQueryBuilder11.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"maxExpansions\" : 32,\n    \"useDisMax\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.type(type30);
        org.elasticsearch.common.ParseField parseField32 = type30.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder18.type(type30);
        multiMatchQueryBuilder33.boost = (-1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float37 = type36.tieBreaker();
        float float38 = type36.tieBreaker();
        org.elasticsearch.common.ParseField parseField39 = type36.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type41 = type36.matchQueryType();
        org.elasticsearch.common.ParseField parseField42 = type36.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder33.type(type36);
        multiMatchQueryBuilder43.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder43.prefixLength((int) (byte) 10);
        multiMatchQueryBuilder43.setboost((java.lang.Float) (-1.0f));
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params51 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder43.doXContent(xContentBuilder50, params51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(parseField32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertNotNull(parseField39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type41 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type41.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(params51);
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.operator(operator24);
        multiMatchQueryBuilder25.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"minimumShouldMatch\" : \"hi!\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder10.operator = operator16;
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder21.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}";
        java.lang.Float float24 = multiMatchQueryBuilder21.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.lenient(true);
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.type(type17);
        multiMatchQueryBuilder21.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder21.getoperator();
        java.lang.String str25 = multiMatchQueryBuilder21.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        multiMatchQueryBuilder27.setoperator(operator28);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.String str15 = multiMatchQueryBuilder11.queryName;
        multiMatchQueryBuilder11.useDisMax = false;
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.getuseDisMax();
        multiMatchQueryBuilder11.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder11.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.slop((int) '4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false,\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder16.setzeroTermsQuery(zeroTermsQuery17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getuseDisMax();
        multiMatchQueryBuilder20.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        java.lang.Class<?> wildcardClass24 = multiMatchQueryBuilder20.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder11.queryName = "hi!";
        multiMatchQueryBuilder11.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.slop((int) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = null;
        multiMatchQueryBuilder11.fuzziness = fuzziness14;
        multiMatchQueryBuilder11.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder11.fuzzyRewrite;
        java.lang.String str19 = null; // flaky: multiMatchQueryBuilder11.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(str18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder15.getfields();
        java.lang.String str18 = multiMatchQueryBuilder15.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.maxExpansions((-1));
        multiMatchQueryBuilder20.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"max_expansions\" : 10\n  }\n}", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder20.cutoffFrequency((float) (byte) 100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        multiMatchQueryBuilder21.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.field("hi!");
        java.lang.Integer int29 = multiMatchQueryBuilder21.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder21.zeroTermsQuery(zeroTermsQuery30);
        multiMatchQueryBuilder31.setuseDisMax((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        multiMatchQueryBuilder14.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder14.gettype();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = multiMatchQueryBuilder14.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(type17);
        org.junit.Assert.assertNull(strObjectFloatHashMap18);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder16.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery20);
        multiMatchQueryBuilder21.maxExpansions = 0;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder32.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder32.useDisMax = true;
        java.util.List<java.lang.String> strList42 = multiMatchQueryBuilder32.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type43 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float44 = type43.tieBreaker();
        float float45 = type43.tieBreaker();
        org.elasticsearch.common.ParseField parseField46 = type43.parseField();
        float float47 = type43.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type48 = type43.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder32.type(type43);
        multiMatchQueryBuilder21.settype(type43);
        org.elasticsearch.index.search.MatchQuery.Type type51 = type43.matchQueryType();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type43.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertNotNull(parseField46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type48.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type51.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions(0);
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        org.elasticsearch.common.xcontent.XContentType xContentType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference21 = multiMatchQueryBuilder10.buildAsBytes(xContentType20);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder12.setfieldsBoosts(strObjectFloatHashMap15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost(100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        float float22 = type19.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.type(type19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery24);
        multiMatchQueryBuilder25.prefixLength = 1;
        java.lang.Integer int28 = multiMatchQueryBuilder25.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int28);
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        multiMatchQueryBuilder11.setzeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.useDisMax(true);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder19.fields;
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        multiMatchQueryBuilder30.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        java.lang.String str42 = multiMatchQueryBuilder41.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder30.type((java.lang.Object) str42);
        multiMatchQueryBuilder30.setslop((java.lang.Integer) (-1));
        java.lang.Float float46 = multiMatchQueryBuilder30.getcutoffFrequency();
        java.lang.String[] strArray51 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder30, strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strList21, strArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray51);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(float46);
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder15.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true\n  }\n}");
        java.lang.Boolean boolean18 = multiMatchQueryBuilder15.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean18);
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.operator(operator16);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder17.useDisMax;
        multiMatchQueryBuilder17.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder17.type;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = multiMatchQueryBuilder17.toXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(type21);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        multiMatchQueryBuilder13.setanalyzer("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder19.zeroTermsQuery = zeroTermsQuery20;
        java.lang.Float float22 = multiMatchQueryBuilder19.getcutoffFrequency();
        java.lang.Boolean boolean23 = multiMatchQueryBuilder19.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float22);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + false + "'", boolean23, false);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.lang.String str14 = multiMatchQueryBuilder12.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder12.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder16.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.boost((float) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.String str26 = multiMatchQueryBuilder23.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type27 = multiMatchQueryBuilder23.type;
        java.lang.Float float28 = multiMatchQueryBuilder23.getcutoffFrequency();
        java.lang.String str29 = multiMatchQueryBuilder23.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = null;
        multiMatchQueryBuilder23.operator = operator30;
        multiMatchQueryBuilder23.setslop((java.lang.Integer) (-1));
        java.lang.Integer int34 = multiMatchQueryBuilder23.maxExpansions;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str26, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(type27);
        org.junit.Assert.assertNull(float28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(int34);
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.boost((float) 0L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        multiMatchQueryBuilder36.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        java.lang.String str48 = multiMatchQueryBuilder47.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.type((java.lang.Object) str48);
        multiMatchQueryBuilder49.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) 10.0f);
        java.lang.Float float53 = multiMatchQueryBuilder27.boost;
        multiMatchQueryBuilder27.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str56 = multiMatchQueryBuilder27.getanalyzer();
        java.lang.Float float57 = multiMatchQueryBuilder27.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(float53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(float57);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Integer int17 = multiMatchQueryBuilder14.slop;
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = multiMatchQueryBuilder14.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int23 = multiMatchQueryBuilder22.maxExpansions;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Float float17 = multiMatchQueryBuilder8.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.slop((int) (short) 1);
        java.lang.Float float24 = multiMatchQueryBuilder8.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        java.lang.Float float16 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        float float21 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) type17);
        org.elasticsearch.index.search.MatchQuery.Type type24 = type17.matchQueryType();
        float float25 = type17.tieBreaker();
        float float26 = type17.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder10.getfuzziness();
        java.lang.Object obj18 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float19 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder21.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (-1.0f) + "'", obj18, (-1.0f));
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        java.lang.Float float11 = multiMatchQueryBuilder8.tieBreaker;
        multiMatchQueryBuilder8.setboost((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder8.type;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(type16);
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.operator(operator20);
        multiMatchQueryBuilder21.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 1.0,\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.queryName("");
        multiMatchQueryBuilder11.boost = 1.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getlenient();
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray28);
        java.lang.Integer int31 = multiMatchQueryBuilder30.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder30.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder30.zeroTermsQuery = zeroTermsQuery33;
        java.util.List<java.lang.String> strList35 = multiMatchQueryBuilder30.getfields();
        multiMatchQueryBuilder30.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean38 = multiMatchQueryBuilder30.getuseDisMax();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.zeroTermsQuery(zeroTermsQuery50);
        java.util.List<java.lang.String> strList52 = multiMatchQueryBuilder49.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder49.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder49.tieBreaker((float) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        multiMatchQueryBuilder64.maxExpansions = 0;
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray74);
        multiMatchQueryBuilder75.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder75.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder75.minimumShouldMatch("");
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder30.fuzziness((java.lang.Object) strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}", strArray89);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator96 = null;
        multiMatchQueryBuilder95.operator = operator96;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Float float15 = multiMatchQueryBuilder10.boost;
        java.lang.Boolean boolean16 = multiMatchQueryBuilder10.getuseDisMax();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        java.lang.String str28 = multiMatchQueryBuilder27.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness29 = multiMatchQueryBuilder27.fuzziness;
        java.lang.String str30 = multiMatchQueryBuilder27.getqueryName();
        multiMatchQueryBuilder27.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder27.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder27.zeroTermsQuery = zeroTermsQuery35;
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder45.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.boost((float) (short) 100);
        java.lang.Integer int49 = multiMatchQueryBuilder48.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = multiMatchQueryBuilder48.zeroTermsQuery;
        multiMatchQueryBuilder48.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder48.field("");
        java.lang.String str55 = multiMatchQueryBuilder48.queryName;
        multiMatchQueryBuilder48.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type58 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float59 = type58.tieBreaker();
        float float60 = type58.tieBreaker();
        multiMatchQueryBuilder48.type = type58;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder27.type(type58);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder62);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder62.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder62.setboost((java.lang.Float) 97.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap68 = multiMatchQueryBuilder62.getfieldsBoosts();
        org.elasticsearch.common.xcontent.XContentType xContentType69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference70 = multiMatchQueryBuilder62.buildAsBytes(xContentType69);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + true + "'", boolean16, true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(fuzziness29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(zeroTermsQuery46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(zeroTermsQuery50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type58.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(strObjectFloatHashMap68);
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator12 = null;
        multiMatchQueryBuilder8.setoperator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder15.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder15.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.boost = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder22.prefixLength = (-1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder11.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float16 = type15.tieBreaker();
        float float17 = type15.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type18 = type15.matchQueryType();
        org.elasticsearch.common.ParseField parseField19 = type15.parseField();
        multiMatchQueryBuilder11.type = type15;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.maxExpansions((int) (byte) -1);
        java.lang.String str23 = multiMatchQueryBuilder22.analyzer;
        multiMatchQueryBuilder22.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 97.0,\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"tieBreaker\" : 52.0,\n    \"Name\" : \"hi!\"\n  }\n}";
        java.lang.Boolean boolean26 = multiMatchQueryBuilder22.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type18.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(boolean26);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder17.setboost((java.lang.Float) 0.0f);
        multiMatchQueryBuilder17.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.cutoffFrequency((float) 1);
        multiMatchQueryBuilder17.setcutoffFrequency((java.lang.Float) 0.0f);
        multiMatchQueryBuilder17.setlenient((java.lang.Boolean) false);
        java.lang.Float float28 = multiMatchQueryBuilder17.gettieBreaker();
        multiMatchQueryBuilder17.useDisMax = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float28);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        java.lang.Integer int15 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.prefixLength((int) (byte) 1);
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 10.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder8.fieldsBoosts;
        multiMatchQueryBuilder8.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.Integer int22 = multiMatchQueryBuilder8.getslop();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        multiMatchQueryBuilder36.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        java.lang.String str48 = multiMatchQueryBuilder47.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.type((java.lang.Object) str48);
        multiMatchQueryBuilder49.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) 10.0f);
        multiMatchQueryBuilder52.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = multiMatchQueryBuilder52.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(zeroTermsQuery55);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        float float22 = type19.tieBreaker();
        multiMatchQueryBuilder8.type = type19;
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder8.getfields();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.zeroTermsQuery(zeroTermsQuery25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder26.lenient(false);
        multiMatchQueryBuilder26.prefixLength = 35;
        multiMatchQueryBuilder26.setcutoffFrequency((java.lang.Float) 97.0f);
        java.lang.Object obj35 = multiMatchQueryBuilder26.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + (-1.0f) + "'", obj35, (-1.0f));
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder17.fuzziness;
        java.lang.String str19 = multiMatchQueryBuilder17.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.maxExpansions((int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder18.fields;
        java.lang.String str22 = multiMatchQueryBuilder18.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder18.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder18.zeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = multiMatchQueryBuilder11.operator;
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery17);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        multiMatchQueryBuilder23.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder23.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.fuzzyRewrite("");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder23.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) strList30);
        java.lang.String str32 = multiMatchQueryBuilder31.fuzzyRewrite;
        multiMatchQueryBuilder31.lenient = false;
        java.lang.Integer int35 = multiMatchQueryBuilder31.getslop();
        java.lang.Object obj36 = multiMatchQueryBuilder31.text;
        java.lang.Boolean boolean37 = multiMatchQueryBuilder31.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + (-1.0f) + "'", obj36, (-1.0f));
        org.junit.Assert.assertNull(boolean37);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.lang.Boolean boolean13 = multiMatchQueryBuilder10.getlenient();
        java.lang.String str14 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery15;
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Class<?> wildcardClass19 = multiMatchQueryBuilder10.getClass();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder8.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery20);
        java.lang.String str22 = multiMatchQueryBuilder8.getfuzzyRewrite();
        java.lang.Boolean boolean23 = multiMatchQueryBuilder8.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(boolean23);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.boost = 10.0f;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder10.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.setboost((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        java.lang.String str28 = multiMatchQueryBuilder10.getfuzzyRewrite();
        multiMatchQueryBuilder10.prefixLength = 10;
        multiMatchQueryBuilder10.prefixLength = 10;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" + "'", str28, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap14);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder11.setfuzziness(fuzziness16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(false);
        multiMatchQueryBuilder21.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder21.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder18.tieBreaker = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.operator(operator21);
        java.lang.Boolean boolean23 = multiMatchQueryBuilder22.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertEquals("'" + boolean23 + "' != '" + false + "'", boolean23, false);
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder18.setprefixLength((java.lang.Integer) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.tieBreaker((float) 10L);
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder18.getfields();
        java.lang.String str24 = null; // flaky: multiMatchQueryBuilder18.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"prefix_length\" : 0,\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"prefix_length\" : 0,\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        multiMatchQueryBuilder21.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.field("hi!");
        java.lang.Integer int29 = multiMatchQueryBuilder21.getprefixLength();
        java.lang.Integer int30 = multiMatchQueryBuilder21.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(int30);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        java.lang.Float float20 = multiMatchQueryBuilder19.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = null;
        multiMatchQueryBuilder19.setzeroTermsQuery(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder8.fuzziness;
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        multiMatchQueryBuilder24.cutoffFrequency = 0.0f;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        java.lang.String str41 = multiMatchQueryBuilder40.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder24.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder8.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str46 = multiMatchQueryBuilder45.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.slop((int) (byte) 0);
        java.lang.Boolean boolean49 = multiMatchQueryBuilder45.useDisMax;
        multiMatchQueryBuilder45.setboost((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(boolean49);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        multiMatchQueryBuilder11.setoperator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 52,\n    \"Name\" : \"hi!\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder10.getuseDisMax();
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 100);
        java.lang.Integer int20 = multiMatchQueryBuilder10.maxExpansions;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder11.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float16 = type15.tieBreaker();
        float float17 = type15.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type18 = type15.matchQueryType();
        org.elasticsearch.common.ParseField parseField19 = type15.parseField();
        multiMatchQueryBuilder11.type = type15;
        org.elasticsearch.index.search.MatchQuery.Type type21 = type15.matchQueryType();
        org.elasticsearch.common.ParseField parseField22 = type15.parseField();
        org.elasticsearch.common.ParseField parseField23 = type15.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type15.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type18.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type21.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(parseField23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.prefixLength((int) (byte) 100);
        multiMatchQueryBuilder23.useDisMax = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = multiMatchQueryBuilder23.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        multiMatchQueryBuilder23.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}";
        java.lang.Class<?> wildcardClass31 = multiMatchQueryBuilder23.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(operator26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost((float) ' ');
        java.lang.Integer int19 = multiMatchQueryBuilder18.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true\n  }\n}", (float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.slop((int) (short) 0);
        org.elasticsearch.common.unit.Fuzziness fuzziness27 = multiMatchQueryBuilder26.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder29.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"fuzzy_rewrite\" : \"\"\n  }\n}";
        java.lang.Float float32 = multiMatchQueryBuilder29.tieBreaker;
        multiMatchQueryBuilder29.slop = 52;
        java.lang.Boolean boolean35 = multiMatchQueryBuilder29.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(fuzziness27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(float32);
        org.junit.Assert.assertEquals("'" + boolean35 + "' != '" + false + "'", boolean35, false);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder8.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder8.lenient;
        java.lang.Integer int19 = multiMatchQueryBuilder8.getprefixLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        multiMatchQueryBuilder31.queryName = "hi!";
        java.lang.Integer int34 = multiMatchQueryBuilder31.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder31.maxExpansions((int) (short) 0);
        java.lang.String str40 = multiMatchQueryBuilder31.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap41 = multiMatchQueryBuilder31.fieldsBoosts;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap41);
        multiMatchQueryBuilder8.cutoffFrequency = 10.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness45 = multiMatchQueryBuilder8.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap41);
        org.junit.Assert.assertNull(fuzziness45);
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((int) '#');
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder21.fuzziness;
        multiMatchQueryBuilder21.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        java.lang.Integer int25 = multiMatchQueryBuilder21.getprefixLength();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness22);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        multiMatchQueryBuilder21.setslop((java.lang.Integer) 1);
        java.lang.String str27 = multiMatchQueryBuilder21.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder21.tieBreaker(1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder21.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 0,\n    \"max_expansions\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.useDisMax(true);
        java.lang.String str18 = multiMatchQueryBuilder15.getanalyzer();
        java.lang.String str19 = multiMatchQueryBuilder15.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder10.analyzer;
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        multiMatchQueryBuilder8.operator = operator19;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder22.settieBreaker((java.lang.Float) 35.0f);
        java.lang.Integer int25 = multiMatchQueryBuilder22.slop;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params27 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder28 = multiMatchQueryBuilder22.toXContent(xContentBuilder26, params27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(params27);
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder15.boost = 100.0f;
        java.lang.String str21 = multiMatchQueryBuilder15.getanalyzer();
        java.lang.Boolean boolean22 = multiMatchQueryBuilder15.getlenient();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.gettext();
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Float float24 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.common.unit.Fuzziness fuzziness25 = multiMatchQueryBuilder10.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNull(fuzziness25);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.Integer int10 = multiMatchQueryBuilder8.maxExpansions;
        multiMatchQueryBuilder8.boost = 1.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.type(type35);
        org.elasticsearch.common.ParseField parseField37 = type35.parseField();
        float float38 = type35.tieBreaker();
        multiMatchQueryBuilder8.settype(type35);
        multiMatchQueryBuilder8.setanalyzer("hi!");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery22;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        multiMatchQueryBuilder32.cutoffFrequency = 0.0f;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.zeroTermsQuery(zeroTermsQuery47);
        java.lang.String str49 = multiMatchQueryBuilder48.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder32.type((java.lang.Object) str49);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray59);
        java.lang.Integer int62 = multiMatchQueryBuilder61.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap63 = multiMatchQueryBuilder61.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = null;
        multiMatchQueryBuilder61.zeroTermsQuery = zeroTermsQuery64;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.boost((float) (short) 10);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray75);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery77 = multiMatchQueryBuilder76.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder76.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder76.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder76.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness84 = multiMatchQueryBuilder76.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder76.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type87 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float88 = type87.tieBreaker();
        float float89 = type87.tieBreaker();
        float float90 = type87.tieBreaker();
        multiMatchQueryBuilder76.type = type87;
        float float92 = type87.tieBreaker();
        org.elasticsearch.common.ParseField parseField93 = type87.parseField();
        multiMatchQueryBuilder67.settype(type87);
        org.elasticsearch.index.search.MatchQuery.Type type95 = type87.matchQueryType();
        multiMatchQueryBuilder50.type = type87;
        multiMatchQueryBuilder10.settype(type87);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNull(strObjectFloatHashMap63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNull(zeroTermsQuery77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNull(fuzziness84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertTrue("'" + type87 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type87.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float88 + "' != '" + 0.0f + "'", float88 == 0.0f);
        org.junit.Assert.assertTrue("'" + float89 + "' != '" + 0.0f + "'", float89 == 0.0f);
        org.junit.Assert.assertTrue("'" + float90 + "' != '" + 0.0f + "'", float90 == 0.0f);
        org.junit.Assert.assertTrue("'" + float92 + "' != '" + 0.0f + "'", float92 == 0.0f);
        org.junit.Assert.assertNotNull(parseField93);
        org.junit.Assert.assertTrue("'" + type95 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type95.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.tieBreaker;
        java.lang.String str17 = multiMatchQueryBuilder15.analyzer;
        java.lang.String str18 = multiMatchQueryBuilder15.getanalyzer();
        multiMatchQueryBuilder15.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"prefixLength\" : 32,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder15.fields;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String str16 = multiMatchQueryBuilder10.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 0);
        java.lang.String str22 = multiMatchQueryBuilder10.queryName;
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 10.0f);
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder8.fuzziness;
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        multiMatchQueryBuilder24.cutoffFrequency = 0.0f;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        java.lang.String str41 = multiMatchQueryBuilder40.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder24.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder8.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str46 = multiMatchQueryBuilder45.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.slop((int) (byte) 0);
        java.lang.Boolean boolean49 = multiMatchQueryBuilder45.useDisMax;
        multiMatchQueryBuilder45.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        java.lang.Boolean boolean52 = multiMatchQueryBuilder45.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(boolean52);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        java.lang.Float float19 = multiMatchQueryBuilder11.gettieBreaker();
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder11.fields;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder11.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        java.lang.String str9 = multiMatchQueryBuilder8.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float13 = type12.tieBreaker();
        float float14 = type12.tieBreaker();
        org.elasticsearch.common.ParseField parseField15 = type12.parseField();
        multiMatchQueryBuilder8.settype(type12);
        org.elasticsearch.common.ParseField parseField17 = type12.parseField();
        float float18 = type12.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type19 = type12.matchQueryType();
        float float20 = type12.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(parseField15);
        org.junit.Assert.assertNotNull(parseField17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type19.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.Object obj19 = multiMatchQueryBuilder16.text;
        java.lang.Float float20 = multiMatchQueryBuilder16.getcutoffFrequency();
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder16.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder24.setmaxExpansions((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Integer int18 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        multiMatchQueryBuilder10.operator = operator20;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = multiMatchQueryBuilder10.toXContent(xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNotNull(params23);
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) 100);
        java.lang.String str16 = multiMatchQueryBuilder13.analyzer;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder13.fuzziness;
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder26.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.boost((float) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        multiMatchQueryBuilder29.setzeroTermsQuery(zeroTermsQuery30);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        java.lang.String str41 = multiMatchQueryBuilder40.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float45 = type44.tieBreaker();
        float float46 = type44.tieBreaker();
        org.elasticsearch.common.ParseField parseField47 = type44.parseField();
        multiMatchQueryBuilder40.settype(type44);
        multiMatchQueryBuilder29.settype(type44);
        multiMatchQueryBuilder13.settype(type44);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap51 = multiMatchQueryBuilder13.fieldsBoosts;
        java.lang.Boolean boolean52 = multiMatchQueryBuilder13.lenient;
        java.lang.String str53 = multiMatchQueryBuilder13.queryName;
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) 10.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertNotNull(parseField47);
        org.junit.Assert.assertNull(strObjectFloatHashMap51);
        org.junit.Assert.assertNull(boolean52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        multiMatchQueryBuilder36.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        java.lang.String str48 = multiMatchQueryBuilder47.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.type((java.lang.Object) str48);
        multiMatchQueryBuilder49.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) 10.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness53 = multiMatchQueryBuilder52.fuzziness;
        multiMatchQueryBuilder52.boost = 1.0f;
        multiMatchQueryBuilder52.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery58 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder52.zeroTermsQuery(zeroTermsQuery58);
        java.lang.Object obj60 = multiMatchQueryBuilder52.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(fuzziness53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + (-1.0f) + "'", obj60, (-1.0f));
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"fuzzy_rewrite\" : \"\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.getzeroTermsQuery();
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = multiMatchQueryBuilder11.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        multiMatchQueryBuilder11.queryName = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefixLength\" : 1,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertNull(fuzziness13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 10.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder8.fieldsBoosts;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness16;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder19.lenient;
        multiMatchQueryBuilder19.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.prefixLength(52);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = multiMatchQueryBuilder19.toXContent(xContentBuilder25, params26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(params26);
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String str16 = multiMatchQueryBuilder10.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Object obj20 = multiMatchQueryBuilder19.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder19.cutoffFrequency((float) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.zeroTermsQuery(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float21 = type20.tieBreaker();
        float float22 = type20.tieBreaker();
        multiMatchQueryBuilder11.settype(type20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery24;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.tieBreaker(1.0f);
        multiMatchQueryBuilder11.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"lenient\" : true\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type20.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        java.lang.Object obj14 = multiMatchQueryBuilder13.gettext();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.type(type26);
        org.elasticsearch.common.ParseField parseField28 = type26.parseField();
        multiMatchQueryBuilder13.type = type26;
        java.lang.Float float30 = multiMatchQueryBuilder13.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (-1.0f) + "'", obj14, (-1.0f));
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type26.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(parseField28);
        org.junit.Assert.assertNull(float30);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String[] strArray11 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray11);
        java.lang.Float float13 = multiMatchQueryBuilder12.getboost();
        multiMatchQueryBuilder12.tieBreaker = 10.0f;
        multiMatchQueryBuilder12.setprefixLength((java.lang.Integer) 100);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        java.lang.String str29 = multiMatchQueryBuilder28.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder28.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery31;
        java.lang.Integer int33 = multiMatchQueryBuilder28.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder35.zeroTermsQuery(zeroTermsQuery36);
        java.lang.String str38 = multiMatchQueryBuilder35.getanalyzer();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        java.lang.String str50 = multiMatchQueryBuilder49.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float52 = type51.tieBreaker();
        float float53 = type51.tieBreaker();
        org.elasticsearch.common.ParseField parseField54 = type51.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type55 = type51.matchQueryType();
        multiMatchQueryBuilder49.type = type51;
        org.elasticsearch.index.search.MatchQuery.Type type57 = type51.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type51.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder35.type(type51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = null; // flaky: multiMatchQueryBuilder12.fuzziness((java.lang.Object) multiMatchQueryBuilder59);
        org.elasticsearch.common.xcontent.XContentType xContentType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference62 = multiMatchQueryBuilder12.buildAsBytes(xContentType61);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(parseField54);
        org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type55.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type57.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.setslop((java.lang.Integer) 1);
        java.lang.Integer int22 = multiMatchQueryBuilder19.maxExpansions;
        multiMatchQueryBuilder19.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder14.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder14.setoperator(operator21);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder31.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder31.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder31.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder31.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float43 = type42.tieBreaker();
        float float44 = type42.tieBreaker();
        float float45 = type42.tieBreaker();
        multiMatchQueryBuilder31.type = type42;
        float float47 = type42.tieBreaker();
        org.elasticsearch.common.ParseField parseField48 = type42.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder14.type(type42);
        multiMatchQueryBuilder49.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder49.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness54 = null;
        multiMatchQueryBuilder53.fuzziness = fuzziness54;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 0.0f + "'", float43 == 0.0f);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(parseField48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness15);
        java.lang.Integer int17 = multiMatchQueryBuilder10.slop;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        multiMatchQueryBuilder8.cutoffFrequency = 1.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder22.fieldsBoosts;
        java.lang.String str24 = multiMatchQueryBuilder22.getqueryName();
        java.lang.Object obj25 = multiMatchQueryBuilder22.text;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str24, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + (-1.0f) + "'", obj25, (-1.0f));
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder23.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.Boolean boolean26 = multiMatchQueryBuilder23.getuseDisMax();
        multiMatchQueryBuilder23.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.boost((float) 32);
        java.lang.String str33 = multiMatchQueryBuilder32.getanalyzer();
        multiMatchQueryBuilder32.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + true + "'", boolean26, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.operator(operator13);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        multiMatchQueryBuilder8.setoperator(operator15);
        multiMatchQueryBuilder8.maxExpansions = 35;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.getfieldsBoosts();
        java.lang.Boolean boolean20 = multiMatchQueryBuilder18.useDisMax;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + true + "'", boolean20, true);
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.cutoffFrequency(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"tieBreaker\" : 100.0\n  }\n}", (float) 32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder18.setzeroTermsQuery(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder8.gettext();
        multiMatchQueryBuilder8.lenient = false;
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder8.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder8.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertNull(operator24);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.type(type28);
        org.elasticsearch.common.ParseField parseField30 = type28.parseField();
        multiMatchQueryBuilder10.settype(type28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.tieBreaker((float) 0);
        java.lang.String str34 = null; // flaky: multiMatchQueryBuilder33.toString();
        multiMatchQueryBuilder33.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder33.doXContent(xContentBuilder37, params38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0\n  }\n}" + "'", str34, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"tie_breaker\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(params38);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params16 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = multiMatchQueryBuilder8.toXContent(xContentBuilder15, params16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(params16);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Float float16 = multiMatchQueryBuilder13.boost;
        multiMatchQueryBuilder13.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder13.type;
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder13.toString();
        java.lang.Integer int21 = multiMatchQueryBuilder13.getmaxExpansions();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = null;
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap22;
        java.lang.String str24 = multiMatchQueryBuilder13.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder13.cutoffFrequency((float) (short) -1);
        java.lang.String str27 = multiMatchQueryBuilder13.fuzzyRewrite;
        java.lang.String str28 = null; // flaky: multiMatchQueryBuilder13.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(type19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}" + "'", str28, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.useDisMax(false);
        java.lang.String str27 = multiMatchQueryBuilder26.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder26.fuzziness;
        java.lang.String str29 = multiMatchQueryBuilder26.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        multiMatchQueryBuilder26.zeroTermsQuery = zeroTermsQuery30;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder26.setzeroTermsQuery(zeroTermsQuery32);
        multiMatchQueryBuilder26.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder26.operator(operator36);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder37.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator43 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.operator(operator43);
        java.util.List<java.lang.String> strList45 = multiMatchQueryBuilder44.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator46 = null;
        multiMatchQueryBuilder44.setoperator(operator46);
        java.lang.String str48 = multiMatchQueryBuilder44.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator49 = multiMatchQueryBuilder44.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder15.type((java.lang.Object) operator49);
        java.lang.Integer int51 = multiMatchQueryBuilder50.getprefixLength();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(fuzziness28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(operator49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(int51);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.lang.String str14 = multiMatchQueryBuilder13.getanalyzer();
        multiMatchQueryBuilder13.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.operator(operator17);
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.getlenient();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String str16 = multiMatchQueryBuilder10.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery18;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        java.lang.Integer int32 = multiMatchQueryBuilder28.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery33;
        multiMatchQueryBuilder28.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder28.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type38 = multiMatchQueryBuilder28.type;
        java.lang.String str39 = null; // flaky: multiMatchQueryBuilder28.toString();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder48.getzeroTermsQuery();
        multiMatchQueryBuilder48.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder48.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.useDisMax(false);
        java.lang.Float float56 = multiMatchQueryBuilder53.boost;
        multiMatchQueryBuilder53.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = multiMatchQueryBuilder53.type;
        java.lang.String str60 = null; // flaky: multiMatchQueryBuilder53.toString();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray68);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery70 = multiMatchQueryBuilder69.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder69.boost((float) (short) 100);
        multiMatchQueryBuilder72.queryName = "hi!";
        java.lang.Integer int75 = multiMatchQueryBuilder72.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = multiMatchQueryBuilder72.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder72.maxExpansions((int) (short) 0);
        java.lang.String str81 = multiMatchQueryBuilder72.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap82 = multiMatchQueryBuilder72.fieldsBoosts;
        multiMatchQueryBuilder53.fieldsBoosts = strObjectFloatHashMap82;
        multiMatchQueryBuilder28.fieldsBoosts = strObjectFloatHashMap82;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"useDisMax\" : true\n  }\n}", (float) (byte) 1);
        java.lang.Integer int89 = multiMatchQueryBuilder88.getprefixLength();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNull(type38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}" + "'", str39, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(float56);
        org.junit.Assert.assertNull(type59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str60, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(zeroTermsQuery70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNull(int89);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        multiMatchQueryBuilder8.setcutoffFrequency((java.lang.Float) 10.0f);
        java.lang.Integer int15 = multiMatchQueryBuilder8.prefixLength;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap16 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}", (float) 35);
        java.lang.String str21 = multiMatchQueryBuilder8.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.lang.Integer int13 = multiMatchQueryBuilder12.slop;
        java.lang.Object obj14 = multiMatchQueryBuilder12.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float16 = type15.tieBreaker();
        float float17 = type15.tieBreaker();
        org.elasticsearch.common.ParseField parseField18 = type15.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder12.type(type15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.lenient(true);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder30.getzeroTermsQuery();
        multiMatchQueryBuilder30.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder30.setqueryName("hi!");
        java.lang.Integer int36 = multiMatchQueryBuilder30.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder30.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness39 = multiMatchQueryBuilder38.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder38.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Float float42 = multiMatchQueryBuilder41.tieBreaker;
        java.util.List<java.lang.String> strList43 = multiMatchQueryBuilder41.getfields();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder19.type((java.lang.Object) multiMatchQueryBuilder41);
// flaky:             org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [{?  \"multimatch\" : {?    \"query\" : -1.0,?    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\" ],?    \"cutofffrequency\" : 0.0,?    \"name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"?  }?}]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (-1.0f) + "'", obj14, (-1.0f));
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(fuzziness39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNull(float42);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder8.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder8.fuzziness;
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder8.type;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        java.lang.Integer int36 = multiMatchQueryBuilder35.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder35.zeroTermsQuery;
        multiMatchQueryBuilder35.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.lenient(false);
        java.util.List<java.lang.String> strList45 = null; // flaky: multiMatchQueryBuilder44.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = null; // flaky: multiMatchQueryBuilder44.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"analyzer\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"use_dis_max\\\\\\\" : false\\\\n  }\\\\n}\\\",\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true,\n    \"cutoff_frequency\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type48 = null;
// flaky:         multiMatchQueryBuilder47.type = type48;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
// flaky:         org.junit.Assert.assertNotNull(strList45);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
        java.lang.Float float23 = multiMatchQueryBuilder22.tieBreaker;
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder22.fields;
        java.lang.String str25 = multiMatchQueryBuilder22.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float13 = type12.tieBreaker();
        float float14 = type12.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type15 = type12.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type16 = type12.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.type(type12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.prefixLength((int) '4');
        java.lang.Class<?> wildcardClass20 = multiMatchQueryBuilder8.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.0f + "'", float13 == 0.0f);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type15.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type16.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.prefixLength((int) (short) 0);
        multiMatchQueryBuilder8.maxExpansions = 1;
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        java.lang.String str29 = multiMatchQueryBuilder28.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder28.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder28.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type34 = type33.matchQueryType();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray42);
        multiMatchQueryBuilder43.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder43.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder43.minimumShouldMatch("");
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type34, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder28, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder62.cutoffFrequency((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder62.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        multiMatchQueryBuilder62.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder62.setlenient((java.lang.Boolean) false);
        org.elasticsearch.common.unit.Fuzziness fuzziness71 = multiMatchQueryBuilder62.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type72 = multiMatchQueryBuilder62.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type34 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type34.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(fuzziness71);
        org.junit.Assert.assertNull(type72);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        multiMatchQueryBuilder21.setslop((java.lang.Integer) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.field("hi!");
        java.lang.Integer int29 = multiMatchQueryBuilder21.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder21.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 97,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str32 = multiMatchQueryBuilder31.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder31.zeroTermsQuery = zeroTermsQuery33;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder31.boost((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder31.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder31.cutoffFrequency(0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 100);
        java.lang.Object obj24 = multiMatchQueryBuilder10.text;
        multiMatchQueryBuilder10.setboost((java.lang.Float) 1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder10.operator(operator27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + (-1.0f) + "'", obj24, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.lenient(false);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.type(type35);
        org.elasticsearch.common.ParseField parseField37 = type35.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder21.fuzziness((java.lang.Object) type35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder21.useDisMax(true);
        multiMatchQueryBuilder40.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder8.gettext();
        multiMatchQueryBuilder8.lenient = false;
        java.lang.String str20 = null; // flaky: multiMatchQueryBuilder8.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        java.lang.Object obj25 = multiMatchQueryBuilder22.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}" + "'", str20, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + (-1.0f) + "'", obj25, (-1.0f));
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.fuzzyRewrite = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder10.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setboost((java.lang.Float) 0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder10.getfieldsBoosts();
        java.lang.Boolean boolean21 = multiMatchQueryBuilder10.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNull(boolean21);
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.maxExpansions(35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        multiMatchQueryBuilder14.cutoffFrequency = (-1.0f);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray25);
        java.lang.Integer int28 = multiMatchQueryBuilder27.maxExpansions;
        multiMatchQueryBuilder27.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = null; // flaky: multiMatchQueryBuilder14.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder14.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(int28);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.boost((float) (short) 10);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder25.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness33 = multiMatchQueryBuilder25.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder25.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float37 = type36.tieBreaker();
        float float38 = type36.tieBreaker();
        float float39 = type36.tieBreaker();
        multiMatchQueryBuilder25.type = type36;
        float float41 = type36.tieBreaker();
        org.elasticsearch.common.ParseField parseField42 = type36.parseField();
        multiMatchQueryBuilder16.settype(type36);
        java.lang.String str44 = multiMatchQueryBuilder16.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder16.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : true,\n    \"_name\" : \"\"\n  }\n}");
        multiMatchQueryBuilder16.tieBreaker = 100.0f;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(fuzziness33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertNotNull(parseField42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Object obj17 = multiMatchQueryBuilder8.gettext();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder8.lenient;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap19;
        multiMatchQueryBuilder8.cutoffFrequency = 100.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean18 + "' != '" + false + "'", boolean18, false);
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        java.lang.Float float22 = multiMatchQueryBuilder19.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        multiMatchQueryBuilder23.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder23.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.fuzzyRewrite("");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder23.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) strList30);
        multiMatchQueryBuilder31.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        multiMatchQueryBuilder31.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator36 = multiMatchQueryBuilder31.operator;
        org.elasticsearch.common.xcontent.XContentType xContentType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference38 = multiMatchQueryBuilder31.buildAsBytes(xContentType37);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(operator36);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        java.lang.String str29 = multiMatchQueryBuilder28.analyzer;
        multiMatchQueryBuilder28.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = null;
        multiMatchQueryBuilder28.zeroTermsQuery = zeroTermsQuery32;
        multiMatchQueryBuilder28.boost = 10.0f;
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder44.useDisMax(false);
        java.lang.String str47 = multiMatchQueryBuilder46.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        multiMatchQueryBuilder46.setzeroTermsQuery(zeroTermsQuery48);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.type(type50);
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator61 = multiMatchQueryBuilder60.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder60.field("");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray71);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery73 = multiMatchQueryBuilder72.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder72.boost((float) (short) 100);
        multiMatchQueryBuilder75.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator78 = null;
        multiMatchQueryBuilder75.setoperator(operator78);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder75.fuzzyRewrite("");
        java.util.List<java.lang.String> strList82 = multiMatchQueryBuilder75.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder63.fuzziness((java.lang.Object) strList82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder63.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness86 = multiMatchQueryBuilder85.fuzziness;
        multiMatchQueryBuilder46.setfuzziness(fuzziness86);
        multiMatchQueryBuilder28.setfuzziness(fuzziness86);
        multiMatchQueryBuilder17.setfuzziness(fuzziness86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder91.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type50.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(operator61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(zeroTermsQuery73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(fuzziness86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder18.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.String str21 = multiMatchQueryBuilder18.analyzer;
        java.lang.Float float22 = multiMatchQueryBuilder18.boost;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(float22);
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type14);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = multiMatchQueryBuilder24.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.field("");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder36.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.boost((float) (short) 100);
        multiMatchQueryBuilder39.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator42 = null;
        multiMatchQueryBuilder39.setoperator(operator42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.fuzzyRewrite("");
        java.util.List<java.lang.String> strList46 = multiMatchQueryBuilder39.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) strList46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder27.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness50 = multiMatchQueryBuilder49.fuzziness;
        multiMatchQueryBuilder10.setfuzziness(fuzziness50);
        multiMatchQueryBuilder10.lenient = false;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 1.0f);
        java.lang.Integer int56 = multiMatchQueryBuilder10.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(operator25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(fuzziness50);
        org.junit.Assert.assertNull(int56);
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.type(type17);
        multiMatchQueryBuilder21.setboost((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}", (float) (short) 1);
        java.lang.String str27 = multiMatchQueryBuilder26.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        multiMatchQueryBuilder26.cutoffFrequency = 35.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder26.slop((int) (short) 100);
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder26.maxExpansions((int) 'a');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str27, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder16.fieldsBoosts;
        java.lang.Float float18 = multiMatchQueryBuilder16.boost;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        java.lang.Boolean boolean19 = multiMatchQueryBuilder11.getuseDisMax();
        multiMatchQueryBuilder11.setprefixLength((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.slop(0);
        java.lang.String str24 = multiMatchQueryBuilder23.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        multiMatchQueryBuilder23.zeroTermsQuery = zeroTermsQuery27;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        multiMatchQueryBuilder19.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder19.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.minimumShouldMatch("");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type38 = type37.matchQueryType();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        multiMatchQueryBuilder47.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder47.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.minimumShouldMatch("");
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type38, strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray61);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder67.cutoffFrequency(97.0f);
        multiMatchQueryBuilder69.setslop((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type38.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder8.setoperator(operator13);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder8.type = type15;
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 0);
        java.lang.String str19 = multiMatchQueryBuilder8.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap13);
        java.lang.String str15 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder8.setoperator(operator16);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = multiMatchQueryBuilder26.getoperator();
        java.lang.Integer int28 = multiMatchQueryBuilder26.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder26.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder41.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.boost((float) (short) 100);
        multiMatchQueryBuilder44.queryName = "hi!";
        java.lang.Integer int47 = multiMatchQueryBuilder44.maxExpansions;
        java.lang.String str48 = multiMatchQueryBuilder44.queryName;
        java.lang.Boolean boolean49 = multiMatchQueryBuilder44.lenient;
        java.lang.Boolean boolean50 = multiMatchQueryBuilder44.lenient;
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray58);
        multiMatchQueryBuilder59.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder59.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder59.minimumShouldMatch("");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean50, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder26, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type79 = multiMatchQueryBuilder78.type;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(type79);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder10.getboost();
        java.lang.Boolean boolean17 = multiMatchQueryBuilder10.getuseDisMax();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder10.doXContent(xContentBuilder18, params19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(params19);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder12.fuzziness = fuzziness13;
        multiMatchQueryBuilder12.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Boolean boolean19 = multiMatchQueryBuilder18.useDisMax;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        multiMatchQueryBuilder28.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray38);
        java.lang.String str40 = multiMatchQueryBuilder39.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder28.type((java.lang.Object) str40);
        multiMatchQueryBuilder41.tieBreaker = 10.0f;
        multiMatchQueryBuilder41.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder41.fuzziness((java.lang.Object) 1.0d);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder56.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap59 = null;
        multiMatchQueryBuilder56.fieldsBoosts = strObjectFloatHashMap59;
        multiMatchQueryBuilder56.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery63 = null;
        multiMatchQueryBuilder56.setzeroTermsQuery(zeroTermsQuery63);
        multiMatchQueryBuilder56.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder75.useDisMax(false);
        java.lang.String str78 = multiMatchQueryBuilder77.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery79 = null;
        multiMatchQueryBuilder77.setzeroTermsQuery(zeroTermsQuery79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type81 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder77.type(type81);
        multiMatchQueryBuilder56.settype(type81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder41.type(type81);
        multiMatchQueryBuilder18.type = type81;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type88 = multiMatchQueryBuilder18.gettype();
        java.lang.Class<?> wildcardClass89 = multiMatchQueryBuilder18.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + type81 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type81.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertTrue("'" + type88 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type88.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        multiMatchQueryBuilder21.setmaxExpansions((java.lang.Integer) (-1));
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = multiMatchQueryBuilder21.toXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        multiMatchQueryBuilder10.setboost((java.lang.Float) 10.0f);
        java.lang.Integer int21 = multiMatchQueryBuilder10.slop;
        multiMatchQueryBuilder10.cutoffFrequency = 52.0f;
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.String str39 = null; // flaky: multiMatchQueryBuilder38.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = null; // flaky: multiMatchQueryBuilder38.gettype();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder38.lenient(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray51);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray51);
        java.lang.Integer int54 = multiMatchQueryBuilder53.maxExpansions;
        multiMatchQueryBuilder53.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder53.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness59 = multiMatchQueryBuilder58.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder58.boost((float) 10L);
        java.lang.String[] strArray66 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder61, strArray66);
        java.lang.String str68 = multiMatchQueryBuilder67.analyzer;
        java.lang.String str69 = multiMatchQueryBuilder67.fuzzyRewrite;
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray79);
        multiMatchQueryBuilder82.maxExpansions = (-1);
        java.lang.Float float85 = multiMatchQueryBuilder82.cutoffFrequency;
        multiMatchQueryBuilder82.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder82.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = multiMatchQueryBuilder89.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = null; // flaky: multiMatchQueryBuilder67.fuzziness((java.lang.Object) multiMatchQueryBuilder89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = null; // flaky: multiMatchQueryBuilder42.fuzziness((java.lang.Object) multiMatchQueryBuilder92);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = null; // flaky: multiMatchQueryBuilder92.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 10.0\n  }\n}", (float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder98 = null; // flaky: multiMatchQueryBuilder96.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}" + "'", str39, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(type40);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(fuzziness59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNull(float85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder91);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder93);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder96);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder98);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        java.lang.String str19 = multiMatchQueryBuilder18.analyzer;
        java.util.List<java.lang.String> strList20 = multiMatchQueryBuilder18.fields;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        multiMatchQueryBuilder29.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        java.lang.String str41 = multiMatchQueryBuilder40.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder29.type((java.lang.Object) str41);
        multiMatchQueryBuilder29.setslop((java.lang.Integer) (-1));
        java.lang.Float float45 = multiMatchQueryBuilder29.getcutoffFrequency();
        java.lang.String[] strArray50 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder29, strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) strList20, strArray50);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder52.getzeroTermsQuery();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray61);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery63 = multiMatchQueryBuilder62.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder62.boost((float) (short) 100);
        multiMatchQueryBuilder65.queryName = "hi!";
        java.lang.Integer int68 = multiMatchQueryBuilder65.maxExpansions;
        java.lang.String str69 = multiMatchQueryBuilder65.queryName;
        java.lang.Boolean boolean70 = multiMatchQueryBuilder65.lenient;
        java.lang.Boolean boolean71 = multiMatchQueryBuilder65.lenient;
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray79);
        multiMatchQueryBuilder80.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder80.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = multiMatchQueryBuilder80.minimumShouldMatch("");
        java.lang.String[] strArray94 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray94);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray94);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean71, strArray94);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder98 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) zeroTermsQuery53, strArray94);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(float45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(zeroTermsQuery63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNull(boolean70);
        org.junit.Assert.assertNull(boolean71);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder86);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String str16 = multiMatchQueryBuilder10.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Object obj20 = multiMatchQueryBuilder19.gettext();
        multiMatchQueryBuilder19.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"class org.joda.time.format.DateTimeFormatter\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder19.tieBreaker = 52.0f;
        multiMatchQueryBuilder19.setprefixLength((java.lang.Integer) 35);
        multiMatchQueryBuilder19.tieBreaker = (-1.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = multiMatchQueryBuilder19.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNull(operator29);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.Object obj17 = multiMatchQueryBuilder8.text;
        java.lang.String str18 = multiMatchQueryBuilder8.getminimumShouldMatch();
        java.lang.Object obj19 = multiMatchQueryBuilder8.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.tieBreaker((float) 100L);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder8.operator;
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"prefixLength\" : 32,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        java.lang.Boolean boolean25 = multiMatchQueryBuilder8.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNull(boolean25);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        java.lang.String str19 = multiMatchQueryBuilder18.analyzer;
        java.lang.String str20 = multiMatchQueryBuilder18.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder18.tieBreaker(10.0f);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.useDisMax(false);
        java.lang.String str34 = multiMatchQueryBuilder33.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder33.setzeroTermsQuery(zeroTermsQuery35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.type(type37);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder33.operator(operator39);
        java.lang.Float float41 = multiMatchQueryBuilder40.gettieBreaker();
        java.lang.String[] strArray46 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 97,\n    \"use_dis_max\" : false\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder40, strArray46);
        multiMatchQueryBuilder47.cutoffFrequency = 0.0f;
        java.lang.Float float50 = multiMatchQueryBuilder47.getboost();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray59);
        java.lang.Integer int62 = multiMatchQueryBuilder61.maxExpansions;
        multiMatchQueryBuilder61.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder61.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float67 = multiMatchQueryBuilder66.tieBreaker;
        java.lang.String str68 = multiMatchQueryBuilder66.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery69 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder66.zeroTermsQuery(zeroTermsQuery69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray78);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery80 = multiMatchQueryBuilder79.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder79.boost((float) (short) 100);
        multiMatchQueryBuilder82.queryName = "hi!";
        java.lang.Integer int85 = multiMatchQueryBuilder82.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder82.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder82.maxExpansions((int) (short) 0);
        java.lang.String str91 = multiMatchQueryBuilder82.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap92 = multiMatchQueryBuilder82.fieldsBoosts;
        multiMatchQueryBuilder70.setfieldsBoosts(strObjectFloatHashMap92);
        multiMatchQueryBuilder47.setfieldsBoosts(strObjectFloatHashMap92);
        multiMatchQueryBuilder22.setfieldsBoosts(strObjectFloatHashMap92);
        java.lang.String str96 = multiMatchQueryBuilder22.getanalyzer();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(float41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(float50);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(float67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNull(zeroTermsQuery80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(int85);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap92);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator12 = null;
        multiMatchQueryBuilder8.setoperator(operator12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder15.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder19.setcutoffFrequency((java.lang.Float) 35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.lenient(false);
        java.lang.Float float24 = multiMatchQueryBuilder23.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = null;
        multiMatchQueryBuilder12.setfieldsBoosts(strObjectFloatHashMap15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost(100.0f);
        java.lang.Integer int19 = multiMatchQueryBuilder12.getprefixLength();
        java.lang.Integer int20 = multiMatchQueryBuilder12.slop;
        java.util.List<java.lang.String> strList21 = multiMatchQueryBuilder12.getfields();
        java.lang.Object obj22 = multiMatchQueryBuilder12.gettext();
        multiMatchQueryBuilder12.boost = (-1.0f);
        java.lang.Integer int25 = multiMatchQueryBuilder12.getslop();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + (-1.0f) + "'", obj22, (-1.0f));
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap13);
        multiMatchQueryBuilder8.cutoffFrequency = (-1.0f);
        java.lang.String str17 = multiMatchQueryBuilder8.queryName;
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder26.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = null;
        multiMatchQueryBuilder26.fieldsBoosts = strObjectFloatHashMap29;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator31 = null;
        multiMatchQueryBuilder26.setoperator(operator31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder26.type = type33;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder8.type(type33);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 10);
        java.lang.Boolean boolean38 = multiMatchQueryBuilder8.useDisMax;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap39 = multiMatchQueryBuilder8.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + false + "'", boolean38, false);
        org.junit.Assert.assertNull(strObjectFloatHashMap39);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder10.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder40.settieBreaker((java.lang.Float) 35.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery43 = null;
        multiMatchQueryBuilder40.zeroTermsQuery = zeroTermsQuery43;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder40.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"Name\" : \"hi!\"\n  }\n}");
        java.util.List<java.lang.String> strList47 = multiMatchQueryBuilder46.fields;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(strList47);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = null;
        multiMatchQueryBuilder24.setoperator(operator25);
        java.lang.String str27 = multiMatchQueryBuilder24.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}" + "'", str27, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder15.getzeroTermsQuery();
        java.lang.Integer int17 = multiMatchQueryBuilder15.getslop();
        java.lang.Object obj18 = multiMatchQueryBuilder15.text;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = multiMatchQueryBuilder29.type;
        multiMatchQueryBuilder29.slop = 0;
        multiMatchQueryBuilder29.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator35 = multiMatchQueryBuilder29.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder29.boost(1.0f);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray45);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator47 = multiMatchQueryBuilder46.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.field("");
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray57);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery59 = multiMatchQueryBuilder58.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder58.boost((float) (short) 100);
        multiMatchQueryBuilder61.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator64 = null;
        multiMatchQueryBuilder61.setoperator(operator64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.fuzzyRewrite("");
        java.util.List<java.lang.String> strList68 = multiMatchQueryBuilder61.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder49.fuzziness((java.lang.Object) strList68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder49.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness72 = multiMatchQueryBuilder71.fuzziness;
        multiMatchQueryBuilder29.fuzziness = fuzziness72;
        multiMatchQueryBuilder15.fuzziness = fuzziness72;
        java.lang.Integer int75 = multiMatchQueryBuilder15.prefixLength;
        multiMatchQueryBuilder15.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery78 = null;
        multiMatchQueryBuilder15.setzeroTermsQuery(zeroTermsQuery78);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + '#' + "'", obj18, '#');
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertNull(operator35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(operator47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(zeroTermsQuery59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(fuzziness72);
        org.junit.Assert.assertNull(int75);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Integer int17 = multiMatchQueryBuilder15.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder15.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(zeroTermsQuery18);
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        multiMatchQueryBuilder10.setqueryName("hi!");
        multiMatchQueryBuilder10.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.operator = operator22;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.maxExpansions((int) (short) 100);
        java.lang.Integer int27 = multiMatchQueryBuilder10.prefixLength;
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = multiMatchQueryBuilder10.operator;
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : -1,\n    \"useDisMax\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(operator30);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 0);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.lang.Float float16 = multiMatchQueryBuilder10.tieBreaker;
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + (-1.0f) + "'", obj15, (-1.0f));
        org.junit.Assert.assertNull(float16);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder11.queryName;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder11.fields;
        java.lang.Integer int14 = multiMatchQueryBuilder11.slop;
        multiMatchQueryBuilder11.setmaxExpansions((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str12, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        multiMatchQueryBuilder11.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder11.minimumShouldMatch("");
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder11.fields;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray24);
        java.lang.Integer int27 = multiMatchQueryBuilder26.maxExpansions;
        multiMatchQueryBuilder26.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder26.fuzziness;
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray38);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder39.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.zeroTermsQuery(zeroTermsQuery42);
        java.lang.Integer int44 = multiMatchQueryBuilder43.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder26.type((java.lang.Object) int44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder26);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = null;
        multiMatchQueryBuilder26.setzeroTermsQuery(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(boolean15);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(fuzziness30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap18);
        multiMatchQueryBuilder17.setqueryName("");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder17.zeroTermsQuery;
        multiMatchQueryBuilder17.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder17.settieBreaker((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str20 = multiMatchQueryBuilder19.getminimumShouldMatch();
        java.lang.Float float21 = multiMatchQueryBuilder19.getboost();
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) false);
        java.lang.String str24 = multiMatchQueryBuilder19.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str20, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(float21);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder17.setslop((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder17.boost((float) (byte) 1);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params26 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder24.doXContent(xContentBuilder25, params26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(params26);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.maxExpansions = 10;
        multiMatchQueryBuilder8.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.cutoffFrequency((float) '#');
        java.lang.Integer int18 = multiMatchQueryBuilder8.getprefixLength();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        multiMatchQueryBuilder8.setoperator(operator19);
        java.lang.Integer int21 = multiMatchQueryBuilder8.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder23.zeroTermsQuery = zeroTermsQuery26;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        multiMatchQueryBuilder10.setqueryName("hi!");
        multiMatchQueryBuilder10.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.maxExpansions((-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.operator = operator22;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder10.operator;
        multiMatchQueryBuilder10.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.lang.String str14 = multiMatchQueryBuilder13.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.queryName("hi!");
        multiMatchQueryBuilder16.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 10.0\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery19);
        java.lang.String str21 = multiMatchQueryBuilder20.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder20.getoperator();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder20.fields;
        multiMatchQueryBuilder20.prefixLength = 1;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNotNull(strList23);
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.minimumShouldMatch = "";
        multiMatchQueryBuilder8.setboost((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.String str19 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery20;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder8.setzeroTermsQuery(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str17 = multiMatchQueryBuilder10.getqueryName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder10.getfields();
        java.lang.Boolean boolean15 = multiMatchQueryBuilder10.lenient;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.boost((float) (short) 0);
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder8.fields;
        java.lang.Integer int17 = multiMatchQueryBuilder8.maxExpansions;
        multiMatchQueryBuilder8.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap14);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = null;
        multiMatchQueryBuilder11.setfuzziness(fuzziness16);
        multiMatchQueryBuilder11.useDisMax = false;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        java.lang.Integer int32 = multiMatchQueryBuilder31.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder31.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness34 = null;
        multiMatchQueryBuilder31.fuzziness = fuzziness34;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator36 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.operator(operator36);
        multiMatchQueryBuilder37.setboost((java.lang.Float) 1.0f);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder48.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((float) (short) 100);
        multiMatchQueryBuilder51.queryName = "hi!";
        java.lang.Integer int54 = multiMatchQueryBuilder51.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder51.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder51.maxExpansions((int) (short) 0);
        java.lang.String str60 = multiMatchQueryBuilder51.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap61 = multiMatchQueryBuilder51.fieldsBoosts;
        multiMatchQueryBuilder37.setfieldsBoosts(strObjectFloatHashMap61);
        multiMatchQueryBuilder11.fieldsBoosts = strObjectFloatHashMap61;
        java.lang.Boolean boolean64 = multiMatchQueryBuilder11.getlenient();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap61);
        org.junit.Assert.assertNull(boolean64);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.boost((float) 100L);
        multiMatchQueryBuilder14.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        java.lang.Object obj25 = multiMatchQueryBuilder21.gettext();
        java.lang.String str26 = multiMatchQueryBuilder21.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder21.lenient(true);
        java.lang.Integer int29 = multiMatchQueryBuilder28.getprefixLength();
        java.lang.Class<?> wildcardClass30 = multiMatchQueryBuilder28.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + (-1.0f) + "'", obj25, (-1.0f));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery22);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        java.lang.Integer int36 = multiMatchQueryBuilder35.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder35.zeroTermsQuery;
        multiMatchQueryBuilder35.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder35.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = null; // flaky: multiMatchQueryBuilder23.fuzziness((java.lang.Object) multiMatchQueryBuilder41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = null; // flaky: multiMatchQueryBuilder42.lenient(false);
// flaky:         multiMatchQueryBuilder42.setprefixLength((java.lang.Integer) 100);
        java.lang.Boolean boolean47 = null; // flaky: multiMatchQueryBuilder42.useDisMax;
        java.lang.String str48 = null; // flaky: multiMatchQueryBuilder42.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(boolean47);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder10.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.cutoffFrequency((float) 1L);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params28 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder29 = multiMatchQueryBuilder26.toXContent(xContentBuilder27, params28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(params28);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(false);
        java.lang.String str19 = multiMatchQueryBuilder18.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder18.type;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap13);
        java.lang.String str15 = multiMatchQueryBuilder8.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder8.setoperator(operator16);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator27 = multiMatchQueryBuilder26.getoperator();
        java.lang.Integer int28 = multiMatchQueryBuilder26.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder26.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder26.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder41.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.boost((float) (short) 100);
        multiMatchQueryBuilder44.queryName = "hi!";
        java.lang.Integer int47 = multiMatchQueryBuilder44.maxExpansions;
        java.lang.String str48 = multiMatchQueryBuilder44.queryName;
        java.lang.Boolean boolean49 = multiMatchQueryBuilder44.lenient;
        java.lang.Boolean boolean50 = multiMatchQueryBuilder44.lenient;
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray58);
        multiMatchQueryBuilder59.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder59.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder59.minimumShouldMatch("");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) boolean50, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder26, strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder78 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray73);
        java.lang.Integer int79 = multiMatchQueryBuilder8.prefixLength;
        java.util.List<java.lang.String> strList80 = multiMatchQueryBuilder8.fields;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(operator27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertNull(boolean50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNull(int79);
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder11.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.lenient(true);
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.lenient(true);
        multiMatchQueryBuilder8.slop = 0;
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.boost((float) (short) 100);
        java.lang.Integer int33 = multiMatchQueryBuilder32.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) '4');
        multiMatchQueryBuilder32.setfuzzyRewrite("");
        java.lang.String str38 = multiMatchQueryBuilder32.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder32.tieBreaker(0.0f);
        multiMatchQueryBuilder40.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder40.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder44.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.String str47 = multiMatchQueryBuilder44.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder44.tieBreaker((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder44.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery61 = multiMatchQueryBuilder60.getzeroTermsQuery();
        multiMatchQueryBuilder60.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder60.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder65.useDisMax(false);
        java.lang.Float float68 = multiMatchQueryBuilder65.boost;
        multiMatchQueryBuilder65.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type71 = multiMatchQueryBuilder65.type;
        java.lang.String str72 = null; // flaky: multiMatchQueryBuilder65.toString();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray80);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery82 = multiMatchQueryBuilder81.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder81.boost((float) (short) 100);
        multiMatchQueryBuilder84.queryName = "hi!";
        java.lang.Integer int87 = multiMatchQueryBuilder84.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder84.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = multiMatchQueryBuilder84.maxExpansions((int) (short) 0);
        java.lang.String str93 = multiMatchQueryBuilder84.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap94 = multiMatchQueryBuilder84.fieldsBoosts;
        multiMatchQueryBuilder65.fieldsBoosts = strObjectFloatHashMap94;
        multiMatchQueryBuilder44.fieldsBoosts = strObjectFloatHashMap94;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap94;
        java.lang.Integer int98 = multiMatchQueryBuilder8.getprefixLength();
        java.lang.String str99 = multiMatchQueryBuilder8.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str47, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(zeroTermsQuery61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNull(float68);
        org.junit.Assert.assertNull(type71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str72, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNull(zeroTermsQuery82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertNull(int87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap94);
        org.junit.Assert.assertNull(int98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str99, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        java.lang.String str16 = multiMatchQueryBuilder11.getanalyzer();
        multiMatchQueryBuilder11.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        java.lang.Float float19 = multiMatchQueryBuilder11.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(float19);
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.operator(operator28);
        multiMatchQueryBuilder10.slop = 100;
        multiMatchQueryBuilder10.setminimumShouldMatch("hi!");
        java.lang.String str34 = multiMatchQueryBuilder10.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder10.prefixLength(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder10.maxExpansions(0);
        multiMatchQueryBuilder38.setboost((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 97,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Boolean boolean17 = multiMatchQueryBuilder16.lenient;
        java.lang.Integer int18 = multiMatchQueryBuilder16.slop;
        java.lang.String str19 = null; // flaky: multiMatchQueryBuilder16.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(int18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 97,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}" + "'", str19, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 97,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        java.lang.Integer int19 = multiMatchQueryBuilder10.getslop();
        multiMatchQueryBuilder10.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.slop((int) (byte) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = null;
        multiMatchQueryBuilder10.setoperator(operator24);
        java.lang.Boolean boolean26 = multiMatchQueryBuilder10.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(boolean26);
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("");
        java.lang.Float float16 = multiMatchQueryBuilder15.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder15.setlenient((java.lang.Boolean) false);
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = multiMatchQueryBuilder29.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.boost((float) (short) 100);
        multiMatchQueryBuilder32.queryName = "hi!";
        java.lang.Integer int35 = multiMatchQueryBuilder32.maxExpansions;
        java.lang.String str36 = multiMatchQueryBuilder32.queryName;
        multiMatchQueryBuilder32.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder15.fuzziness((java.lang.Object) false);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder48.getzeroTermsQuery();
        multiMatchQueryBuilder48.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder48.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder53.prefixLength((int) ' ');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator56 = null;
        multiMatchQueryBuilder55.operator = operator56;
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray65);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = multiMatchQueryBuilder66.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder66.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type70 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder69.settype(type70);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery72 = multiMatchQueryBuilder69.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type73 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float74 = type73.tieBreaker();
        float float75 = type73.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type76 = type73.matchQueryType();
        org.elasticsearch.common.ParseField parseField77 = type73.parseField();
        multiMatchQueryBuilder69.type = type73;
        org.elasticsearch.index.search.MatchQuery.Type type79 = type73.matchQueryType();
        org.elasticsearch.common.ParseField parseField80 = type73.parseField();
        multiMatchQueryBuilder55.type = type73;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder39.type(type73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = multiMatchQueryBuilder39.cutoffFrequency((float) 1);
        java.lang.Object obj85 = multiMatchQueryBuilder84.text;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(zeroTermsQuery30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(zeroTermsQuery67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertTrue("'" + type70 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type70.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery72);
        org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type73.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.0f + "'", float74 == 0.0f);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 0.0f + "'", float75 == 0.0f);
        org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type76.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField77);
        org.junit.Assert.assertTrue("'" + type79 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type79.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder84);
        org.junit.Assert.assertEquals("'" + obj85 + "' != '" + '#' + "'", obj85, '#');
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder11.cutoffFrequency((float) 10L);
        multiMatchQueryBuilder11.useDisMax = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.lenient(true);
        java.lang.Integer int18 = multiMatchQueryBuilder11.getprefixLength();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}", (float) 1L);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = null;
        multiMatchQueryBuilder24.operator = operator25;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder24.maxExpansions(0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray21);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.boost((float) (short) 100);
        java.lang.Integer int26 = multiMatchQueryBuilder25.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((float) '4');
        multiMatchQueryBuilder25.setfuzzyRewrite("");
        java.lang.String str31 = multiMatchQueryBuilder25.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder25.tieBreaker(0.0f);
        multiMatchQueryBuilder25.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder25.type = type36;
        float float38 = type36.tieBreaker();
        float float39 = type36.tieBreaker();
        multiMatchQueryBuilder8.settype(type36);
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder8.fields;
        java.util.List<java.lang.String> strList42 = multiMatchQueryBuilder8.fields;
        multiMatchQueryBuilder8.tieBreaker = 0.0f;
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray52);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = multiMatchQueryBuilder53.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder53.boost((float) (short) 100);
        multiMatchQueryBuilder56.queryName = "hi!";
        java.lang.Integer int59 = multiMatchQueryBuilder56.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder56.settype(type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder8.type((java.lang.Object) type60);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder8.maxExpansions((int) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(zeroTermsQuery54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type60.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder11.tieBreaker = 1.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = multiMatchQueryBuilder11.getzeroTermsQuery();
        multiMatchQueryBuilder11.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField16 = type15.parseField();
        org.elasticsearch.common.ParseField parseField17 = type15.parseField();
        org.elasticsearch.common.ParseField parseField18 = type15.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.type(type15);
        java.lang.Integer int20 = multiMatchQueryBuilder19.maxExpansions;
        java.lang.Integer int21 = multiMatchQueryBuilder19.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap22 = multiMatchQueryBuilder19.getfieldsBoosts();
        multiMatchQueryBuilder19.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(zeroTermsQuery12);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField16);
        org.junit.Assert.assertNotNull(parseField17);
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(strObjectFloatHashMap22);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        java.lang.Integer int16 = multiMatchQueryBuilder8.getslop();
        java.lang.Float float17 = multiMatchQueryBuilder8.tieBreaker;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(zeroTermsQuery18);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.Object obj14 = multiMatchQueryBuilder8.gettext();
        java.lang.String str15 = multiMatchQueryBuilder8.queryName;
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.boost = 35.0f;
        java.lang.String str23 = multiMatchQueryBuilder8.getanalyzer();
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder8.fields;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (-1.0f) + "'", obj14, (-1.0f));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        java.lang.String str16 = multiMatchQueryBuilder10.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder10.getzeroTermsQuery();
        java.lang.Float float18 = multiMatchQueryBuilder10.boost;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        java.lang.String str9 = multiMatchQueryBuilder8.analyzer;
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.tieBreaker((float) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder15.tieBreaker = 35.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.lenient(false);
        multiMatchQueryBuilder19.slop = (-1);
        org.elasticsearch.common.unit.Fuzziness fuzziness22 = multiMatchQueryBuilder19.fuzziness;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(fuzziness22);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder11.getfields();
        multiMatchQueryBuilder11.slop = 1;
        multiMatchQueryBuilder11.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder11.setoperator(operator22);
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.lenient(false);
        multiMatchQueryBuilder21.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder21.settieBreaker((java.lang.Float) 10.0f);
        multiMatchQueryBuilder21.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery42 = multiMatchQueryBuilder41.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.boost((float) (short) 100);
        java.lang.Integer int45 = multiMatchQueryBuilder44.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.boost((float) '4');
        multiMatchQueryBuilder44.setfuzzyRewrite("");
        java.lang.String str50 = multiMatchQueryBuilder44.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder44.tieBreaker(0.0f);
        multiMatchQueryBuilder52.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder52.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder56.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.String str59 = multiMatchQueryBuilder56.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type60 = multiMatchQueryBuilder56.type;
        multiMatchQueryBuilder56.setcutoffFrequency((java.lang.Float) 35.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder21.fuzziness((java.lang.Object) 35.0f);
        java.lang.String str64 = multiMatchQueryBuilder63.queryName;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap65 = multiMatchQueryBuilder63.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(zeroTermsQuery42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" + "'", str59, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNull(type60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap65);
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        java.lang.Float float15 = multiMatchQueryBuilder14.cutoffFrequency;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder14.setzeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder14.setoperator(operator18);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        multiMatchQueryBuilder28.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder28.setqueryName("hi!");
        java.lang.Integer int34 = multiMatchQueryBuilder28.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder28.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness37 = multiMatchQueryBuilder36.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Float float40 = multiMatchQueryBuilder39.tieBreaker;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder14.fuzziness((java.lang.Object) float40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(fuzziness37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(float40);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        java.lang.Float float11 = multiMatchQueryBuilder8.tieBreaker;
        multiMatchQueryBuilder8.setboost((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.fuzzyRewrite("hi!");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder15.setzeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.operator(operator18);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap13 = multiMatchQueryBuilder12.getfieldsBoosts();
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder12.fields;
        multiMatchQueryBuilder12.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(strObjectFloatHashMap13);
        org.junit.Assert.assertNotNull(strList14);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        java.lang.Float float17 = multiMatchQueryBuilder10.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder10.maxExpansions = 10;
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder10.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        java.lang.String str30 = multiMatchQueryBuilder27.getqueryName();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder14.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder14.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder14.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type23 = type22.matchQueryType();
        multiMatchQueryBuilder14.type = type22;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = multiMatchQueryBuilder14.getoperator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type23.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(operator25);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("");
        multiMatchQueryBuilder17.prefixLength = 0;
        multiMatchQueryBuilder17.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}";
        multiMatchQueryBuilder17.useDisMax = false;
        java.lang.String str24 = null; // flaky: multiMatchQueryBuilder17.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : true,\\n    \\\"cutoff_frequency\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str24, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 0,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : true,\\n    \\\"cutoff_frequency\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.maxExpansions;
        java.lang.Float float16 = multiMatchQueryBuilder10.gettieBreaker();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder10.getfuzziness();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(zeroTermsQuery17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type0 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type1 = type0.matchQueryType();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        multiMatchQueryBuilder10.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.minimumShouldMatch("");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type1, strArray24);
        java.lang.Integer int28 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder27.operator = operator29;
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 0);
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 35);
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type0.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type1.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(int28);
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        multiMatchQueryBuilder23.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder23.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.fuzzyRewrite("");
        java.util.List<java.lang.String> strList30 = multiMatchQueryBuilder23.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder11.fuzziness((java.lang.Object) strList30);
        multiMatchQueryBuilder31.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!^-1.0\", \"\", \"hi!^-1.0\", \"hi!^-1.0\", \"hi!^-1.0\", \"\", \"hi!^-1.0\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        java.lang.String str34 = null; // flaky: multiMatchQueryBuilder31.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!^-1.0\\\", \\\"\\\", \\\"hi!^-1.0\\\", \\\"hi!^-1.0\\\", \\\"hi!^-1.0\\\", \\\"\\\", \\\"hi!^-1.0\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ]\\\\n  }\\\\n}\\\"\\n  }\\n}\"\n  }\n}" + "'", str34, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"\" ],\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!^-1.0\\\", \\\"\\\", \\\"hi!^-1.0\\\", \\\"hi!^-1.0\\\", \\\"hi!^-1.0\\\", \\\"\\\", \\\"hi!^-1.0\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"Name\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ]\\\\n  }\\\\n}\\\"\\n  }\\n}\"\n  }\n}");
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.String str14 = multiMatchQueryBuilder11.getqueryName();
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        java.lang.Float float17 = multiMatchQueryBuilder11.cutoffFrequency;
        java.lang.String str18 = multiMatchQueryBuilder11.getminimumShouldMatch();
        multiMatchQueryBuilder11.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"cross_fields\",\n    \"boost\" : 100.0,\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.maxExpansions(32);
        multiMatchQueryBuilder22.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimumShouldMatch\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.boost((float) (short) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.tieBreaker((float) 0L);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery18;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness11;
        multiMatchQueryBuilder8.boost = 10.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"lenient\" : true\n  }\n}");
        java.util.List<java.lang.String> strList19 = multiMatchQueryBuilder18.fields;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strList19);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = null;
        multiMatchQueryBuilder11.fuzziness = fuzziness14;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.operator(operator16);
        java.lang.Float float18 = multiMatchQueryBuilder11.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.type(type19);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.maxExpansions((int) 'a');
        java.lang.Float float17 = multiMatchQueryBuilder10.getcutoffFrequency();
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder10.zeroTermsQuery;
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNull(zeroTermsQuery20);
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        java.lang.Float float14 = multiMatchQueryBuilder8.getcutoffFrequency();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder23.getoperator();
        java.lang.Integer int25 = multiMatchQueryBuilder23.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = null;
        multiMatchQueryBuilder23.setoperator(operator26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder23.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int30 = multiMatchQueryBuilder29.prefixLength;
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray38);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery40 = multiMatchQueryBuilder39.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder39.boost((float) (short) 100);
        java.lang.Integer int43 = multiMatchQueryBuilder42.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder42.boost((float) '4');
        multiMatchQueryBuilder42.setfuzzyRewrite("");
        java.lang.String str48 = multiMatchQueryBuilder42.getfuzzyRewrite();
        java.lang.Boolean boolean49 = multiMatchQueryBuilder42.lenient;
        java.lang.Object obj50 = multiMatchQueryBuilder42.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type51 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float52 = type51.tieBreaker();
        float float53 = type51.tieBreaker();
        multiMatchQueryBuilder42.settype(type51);
        org.elasticsearch.common.ParseField parseField55 = type51.parseField();
        multiMatchQueryBuilder29.settype(type51);
        org.elasticsearch.common.ParseField parseField57 = type51.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type58 = type51.matchQueryType();
        multiMatchQueryBuilder8.settype(type51);
        java.lang.String str60 = multiMatchQueryBuilder8.getminimumShouldMatch();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(zeroTermsQuery40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(boolean49);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + (-1.0f) + "'", obj50, (-1.0f));
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type51.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 0.0f + "'", float52 == 0.0f);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertNotNull(parseField57);
        org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type58.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getuseDisMax();
        multiMatchQueryBuilder14.cutoffFrequency = (-1.0f);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder16.setslop((java.lang.Integer) 52);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder16.setfieldsBoosts(strObjectFloatHashMap19);
        multiMatchQueryBuilder16.boost = 1.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder16.getfuzziness();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(fuzziness23);
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder14.toString();
        multiMatchQueryBuilder14.cutoffFrequency = 97.0f;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.lenient(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        java.lang.String str18 = multiMatchQueryBuilder15.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.operator(operator19);
        java.lang.Float float21 = multiMatchQueryBuilder15.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(float21);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder12.fields;
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder12.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.boost((float) 10L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type23 = type19.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type24 = type19.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder12.type(type19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.maxExpansions(1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.boost((float) 1L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type23.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.lenient = true;
        java.lang.Integer int14 = multiMatchQueryBuilder10.getmaxExpansions();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.lenient(false);
        java.lang.String str24 = multiMatchQueryBuilder23.fuzzyRewrite;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder23.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder23.queryName("");
        java.lang.String str28 = multiMatchQueryBuilder27.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap29 = multiMatchQueryBuilder27.getfieldsBoosts();
        java.lang.Float float30 = multiMatchQueryBuilder27.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(strObjectFloatHashMap29);
        org.junit.Assert.assertNull(float30);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.field("", (float) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.gettype();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(type15);
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        multiMatchQueryBuilder10.setoperator(operator28);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery30;
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\",\n    \"useDisMax\" : false,\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str20 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        java.lang.Integer int23 = multiMatchQueryBuilder10.getslop();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        java.lang.Boolean boolean36 = multiMatchQueryBuilder32.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder32.slop((int) '4');
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        java.lang.String str50 = multiMatchQueryBuilder49.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness51 = multiMatchQueryBuilder49.fuzziness;
        multiMatchQueryBuilder49.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder49.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int56 = multiMatchQueryBuilder49.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder49.lenient(true);
        java.lang.String str59 = multiMatchQueryBuilder49.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder38.type((java.lang.Object) str59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder10.type((java.lang.Object) str59);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator62 = multiMatchQueryBuilder10.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(boolean36);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(fuzziness51);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNull(operator62);
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.cutoffFrequency(100.0f);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder19.useDisMax;
        java.lang.Integer int23 = multiMatchQueryBuilder19.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"prefix_length\" : 0,\n    \"minimum_should_match\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true,\\n    \\\"cutoffFrequency\\\" : 100.0\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type25 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder24.settype(type25);
        multiMatchQueryBuilder11.settype(type25);
        org.elasticsearch.index.search.MatchQuery.Type type28 = type25.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNull(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type25.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type28.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        multiMatchQueryBuilder10.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.Object obj18 = multiMatchQueryBuilder10.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}", 0.0f);
        multiMatchQueryBuilder21.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder21.getfuzziness();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = null;
        multiMatchQueryBuilder21.setfieldsBoosts(strObjectFloatHashMap25);
        java.lang.Boolean boolean27 = multiMatchQueryBuilder21.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (-1.0f) + "'", obj18, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertEquals("'" + boolean27 + "' != '" + false + "'", boolean27, false);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder11.getcutoffFrequency();
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.lang.Object obj18 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        multiMatchQueryBuilder11.type = type19;
        java.lang.String str23 = multiMatchQueryBuilder11.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + (-1.0f) + "'", obj18, (-1.0f));
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder19.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}", (float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder19.lenient(false);
        java.lang.String str27 = null; // flaky: multiMatchQueryBuilder19.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefix_length\\\" : 1,\\n    \\\"use_dis_max\\\" : false,\\n    \\\"cutoff_frequency\\\" : 0.0\\n  }\\n}^1.0\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"lenient\" : false\n  }\n}" + "'", str27, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefix_length\\\" : 1,\\n    \\\"use_dis_max\\\" : false,\\n    \\\"cutoff_frequency\\\" : 0.0\\n  }\\n}^1.0\" ],\n    \"boost\" : 10.0,\n    \"minimumShouldMatch\" : \"\",\n    \"fuzzyRewrite\" : \"\",\n    \"lenient\" : false\n  }\n}");
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Float float18 = multiMatchQueryBuilder10.boost;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float18);
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setboost((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder15.type;
        java.lang.String str20 = multiMatchQueryBuilder15.getqueryName();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = multiMatchQueryBuilder12.type;
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder12.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 35,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true\n  }\n}");
        java.lang.Integer int21 = multiMatchQueryBuilder20.getprefixLength();
        multiMatchQueryBuilder20.boost = (-1.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder20.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.lenient(true);
        multiMatchQueryBuilder8.slop = 0;
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray29);
        java.lang.Integer int32 = multiMatchQueryBuilder31.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.field("hi!");
        multiMatchQueryBuilder31.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder45.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.boost((float) (short) 100);
        java.lang.Integer int49 = multiMatchQueryBuilder48.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((float) '4');
        multiMatchQueryBuilder48.setfuzzyRewrite("");
        java.lang.Integer int54 = multiMatchQueryBuilder48.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder48.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder48.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = null; // flaky: multiMatchQueryBuilder31.fuzziness((java.lang.Object) multiMatchQueryBuilder48);
        java.lang.String str60 = multiMatchQueryBuilder31.fuzzyRewrite;
        multiMatchQueryBuilder31.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type64 = type63.matchQueryType();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder73 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray72);
        multiMatchQueryBuilder73.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder73.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder73.minimumShouldMatch("");
        java.lang.String[] strArray87 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type64, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder31, strArray87);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray87);
        java.lang.Float float93 = multiMatchQueryBuilder92.gettieBreaker();
        java.lang.Object obj94 = multiMatchQueryBuilder92.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder96 = multiMatchQueryBuilder92.boost((float) (byte) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(zeroTermsQuery46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type63.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type64 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type64.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNull(float93);
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + 0 + "'", obj94, 0);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder96);
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.io.OutputStream outputStream1 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder10.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.boost((float) (short) 100);
        java.lang.Integer int14 = multiMatchQueryBuilder13.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder13.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder13.type(type19);
        multiMatchQueryBuilder23.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator26 = multiMatchQueryBuilder23.getoperator();
        java.lang.String str27 = multiMatchQueryBuilder23.analyzer;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery37 = multiMatchQueryBuilder36.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder36.boost((float) (short) 100);
        java.lang.Integer int40 = multiMatchQueryBuilder39.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder39.zeroTermsQuery;
        multiMatchQueryBuilder39.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder39.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray55);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery57 = multiMatchQueryBuilder56.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder56.boost((float) (short) 100);
        multiMatchQueryBuilder59.queryName = "hi!";
        java.lang.Integer int62 = multiMatchQueryBuilder59.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = multiMatchQueryBuilder59.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator64 = multiMatchQueryBuilder59.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder59.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness67 = null;
        multiMatchQueryBuilder59.fuzziness = fuzziness67;
        java.lang.Float float69 = multiMatchQueryBuilder59.cutoffFrequency;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = org.elasticsearch.common.xcontent.XContentBuilder.defaultDatePrinter;
        java.lang.Class<?> wildcardClass71 = dateTimeFormatter70.getClass();
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass71, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) float69, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder47, strArray79);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) str27, strArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder85 = new org.elasticsearch.common.xcontent.XContentBuilder(xContent0, outputStream1, strArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(operator26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str27, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(zeroTermsQuery37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(zeroTermsQuery57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNull(type63);
        org.junit.Assert.assertNull(operator64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNull(float69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(strArray79);
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder12.minimumShouldMatch = "hi!";
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder12.fields;
        multiMatchQueryBuilder12.slop = 52;
        multiMatchQueryBuilder12.setboost((java.lang.Float) (-1.0f));
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.useDisMax(false);
        java.lang.String str31 = multiMatchQueryBuilder30.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness32 = multiMatchQueryBuilder30.fuzziness;
        java.lang.String str33 = multiMatchQueryBuilder30.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder30.zeroTermsQuery = zeroTermsQuery34;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        multiMatchQueryBuilder30.setzeroTermsQuery(zeroTermsQuery36);
        multiMatchQueryBuilder30.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator40 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder30.operator(operator40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder41.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator47 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder46.operator(operator47);
        java.lang.String str49 = multiMatchQueryBuilder48.getminimumShouldMatch();
        java.lang.String str50 = multiMatchQueryBuilder48.getqueryName();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder12.type((java.lang.Object) str50);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(fuzziness32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.common.ParseField parseField22 = type21.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder8.type(type21);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}", 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.boost = 10.0f;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder10.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.Float float25 = multiMatchQueryBuilder10.tieBreaker;
        multiMatchQueryBuilder10.prefixLength = 1;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNull(float25);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder16.tieBreaker((float) (short) 100);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder20.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        multiMatchQueryBuilder11.setmaxExpansions((java.lang.Integer) 35);
        java.lang.String str20 = multiMatchQueryBuilder11.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder11.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"type\\\" : \\\"phrase_prefix\\\",\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"maxExpansions\" : 0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = null;
        multiMatchQueryBuilder22.operator = operator23;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder11.setoperator(operator16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.slop((int) '#');
        multiMatchQueryBuilder11.setmaxExpansions((java.lang.Integer) 1);
        java.lang.String str22 = null; // flaky: multiMatchQueryBuilder11.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 35,\n    \"maxExpansions\" : 1,\n    \"Name\" : \"hi!\"\n  }\n}" + "'", str22, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 35,\n    \"maxExpansions\" : 1,\n    \"Name\" : \"hi!\"\n  }\n}");
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.Float float39 = multiMatchQueryBuilder10.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(float39);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String str16 = multiMatchQueryBuilder10.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = null;
        multiMatchQueryBuilder21.zeroTermsQuery = zeroTermsQuery23;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strObjectFloatHashMap17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.Integer int28 = multiMatchQueryBuilder27.getmaxExpansions();
        multiMatchQueryBuilder27.useDisMax = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator31 = multiMatchQueryBuilder27.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(operator31);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = multiMatchQueryBuilder10.getzeroTermsQuery();
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.prefixLength((-1));
        java.lang.Float float18 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.slop((int) ' ');
        java.lang.Object obj32 = null;
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        multiMatchQueryBuilder41.maxExpansions = 0;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.elasticsearch.common.xcontent.XContentBuilder.defaultDatePrinter;
        java.lang.Class<?> wildcardClass45 = dateTimeFormatter44.getClass();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass45, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder(obj32, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder27, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) float18, strArray53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}", strArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray53);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(zeroTermsQuery11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.setboost((java.lang.Float) 10.0f);
        java.lang.String str20 = multiMatchQueryBuilder10.getfuzzyRewrite();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray29);
        java.lang.Integer int32 = multiMatchQueryBuilder31.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap33 = multiMatchQueryBuilder31.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder31.zeroTermsQuery = zeroTermsQuery34;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder31.boost((float) (short) 10);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray45);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder46.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder46.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness54 = multiMatchQueryBuilder46.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder46.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type57 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float58 = type57.tieBreaker();
        float float59 = type57.tieBreaker();
        float float60 = type57.tieBreaker();
        multiMatchQueryBuilder46.type = type57;
        float float62 = type57.tieBreaker();
        org.elasticsearch.common.ParseField parseField63 = type57.parseField();
        multiMatchQueryBuilder37.settype(type57);
        org.elasticsearch.common.ParseField parseField65 = type57.parseField();
        multiMatchQueryBuilder10.settype(type57);
        org.elasticsearch.common.ParseField parseField67 = type57.parseField();
        org.elasticsearch.common.ParseField parseField68 = type57.parseField();
        java.lang.Class<?> wildcardClass69 = parseField68.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(strObjectFloatHashMap33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(fuzziness54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type57.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 0.0f + "'", float59 == 0.0f);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertNotNull(parseField63);
        org.junit.Assert.assertNotNull(parseField65);
        org.junit.Assert.assertNotNull(parseField67);
        org.junit.Assert.assertNotNull(parseField68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.operator(operator16);
        java.lang.Integer int18 = multiMatchQueryBuilder8.slop;
        java.lang.Float float19 = multiMatchQueryBuilder8.tieBreaker;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(float19);
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str15 = multiMatchQueryBuilder10.analyzer;
        java.lang.String str16 = multiMatchQueryBuilder10.minimumShouldMatch;
        java.lang.Float float17 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.boost(0.0f);
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 35);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder10.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness14 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder28.settype(type29);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery31 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float33 = type32.tieBreaker();
        float float34 = type32.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type35 = type32.matchQueryType();
        org.elasticsearch.common.ParseField parseField36 = type32.parseField();
        multiMatchQueryBuilder28.type = type32;
        multiMatchQueryBuilder16.type = type32;
        java.lang.Boolean boolean39 = multiMatchQueryBuilder16.useDisMax;
        multiMatchQueryBuilder16.setcutoffFrequency((java.lang.Float) 0.0f);
        java.lang.Boolean boolean42 = multiMatchQueryBuilder16.getuseDisMax();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(fuzziness14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertTrue("'" + type29 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type29.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery31);
        org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type32.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type35.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNull(boolean42);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.lenient(false);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        java.lang.String str33 = multiMatchQueryBuilder32.analyzer;
        multiMatchQueryBuilder32.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        multiMatchQueryBuilder32.zeroTermsQuery = zeroTermsQuery36;
        multiMatchQueryBuilder32.boost = 10.0f;
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder48.useDisMax(false);
        java.lang.String str51 = multiMatchQueryBuilder50.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = null;
        multiMatchQueryBuilder50.setzeroTermsQuery(zeroTermsQuery52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder50.type(type54);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator65 = multiMatchQueryBuilder64.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder64.field("");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray75);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery77 = multiMatchQueryBuilder76.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder76.boost((float) (short) 100);
        multiMatchQueryBuilder79.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator82 = null;
        multiMatchQueryBuilder79.setoperator(operator82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = multiMatchQueryBuilder79.fuzzyRewrite("");
        java.util.List<java.lang.String> strList86 = multiMatchQueryBuilder79.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = multiMatchQueryBuilder67.fuzziness((java.lang.Object) strList86);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = multiMatchQueryBuilder67.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness90 = multiMatchQueryBuilder89.fuzziness;
        multiMatchQueryBuilder50.setfuzziness(fuzziness90);
        multiMatchQueryBuilder32.setfuzziness(fuzziness90);
        multiMatchQueryBuilder21.fuzziness = fuzziness90;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = multiMatchQueryBuilder21.slop((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder97 = multiMatchQueryBuilder95.prefixLength((int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNull(operator65);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNull(zeroTermsQuery77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder87);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
        org.junit.Assert.assertNotNull(fuzziness90);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder95);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder97);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        java.lang.Float float18 = multiMatchQueryBuilder10.getcutoffFrequency();
        java.lang.String str19 = multiMatchQueryBuilder10.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder14.boost = 1.0f;
        java.lang.String str25 = multiMatchQueryBuilder14.getfuzzyRewrite();
        java.lang.String str26 = multiMatchQueryBuilder14.analyzer;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap27 = multiMatchQueryBuilder14.getfieldsBoosts();
        multiMatchQueryBuilder14.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"use_dis_max\" : false\n  }\n}";
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = multiMatchQueryBuilder14.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder14.slop(52);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(strObjectFloatHashMap27);
        org.junit.Assert.assertNull(strObjectFloatHashMap30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.prefixLength((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder16.type;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type19);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        multiMatchQueryBuilder16.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder16.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder16.getoperator();
        java.lang.Float float23 = multiMatchQueryBuilder16.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = multiMatchQueryBuilder16.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder16.lenient(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}" + "'", str21, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNull(float23);
        org.junit.Assert.assertNull(zeroTermsQuery24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.prefixLength((int) ' ');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder13.operator;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap17;
        java.lang.Float float19 = multiMatchQueryBuilder13.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.String str22 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder16.getzeroTermsQuery();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.zeroTermsQuery(zeroTermsQuery20);
        java.lang.Float float22 = multiMatchQueryBuilder21.tieBreaker;
        multiMatchQueryBuilder21.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}";
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder21.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 35,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"lenient\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float22);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.String str18 = multiMatchQueryBuilder10.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(type19);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.setboost((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.cutoffFrequency((float) 1L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.boost((float) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder21.slop((int) (short) 1);
        multiMatchQueryBuilder21.lenient = false;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Integer int17 = multiMatchQueryBuilder15.slop;
        multiMatchQueryBuilder15.boost = 1.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder8.setfieldsBoosts(strObjectFloatHashMap12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder8.type = type14;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder8.type;
        java.lang.String str17 = multiMatchQueryBuilder8.getqueryName();
        multiMatchQueryBuilder8.queryName = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"prefixLength\" : 32,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        java.lang.Integer int22 = multiMatchQueryBuilder21.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder21.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder21.setcutoffFrequency((java.lang.Float) 97.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type16 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type16.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder10.prefixLength;
        java.lang.String str15 = multiMatchQueryBuilder10.getqueryName();
        java.lang.String str16 = multiMatchQueryBuilder10.queryName;
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder10.toString();
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ]\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ]\n  }\n}");
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        multiMatchQueryBuilder36.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        java.lang.String str48 = multiMatchQueryBuilder47.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.type((java.lang.Object) str48);
        multiMatchQueryBuilder49.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) 10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder27.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder27.queryName("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder27.field("{\n  \"multi_match\" : {\n    \"query\" : \"class org.joda.time.format.DateTimeFormatter\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) 0);
        java.lang.String str60 = multiMatchQueryBuilder27.getqueryName();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray68);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery70 = multiMatchQueryBuilder69.getzeroTermsQuery();
        multiMatchQueryBuilder69.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder69.setqueryName("hi!");
        java.lang.Integer int75 = multiMatchQueryBuilder69.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder69.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness78 = multiMatchQueryBuilder77.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder77.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Float float81 = multiMatchQueryBuilder80.tieBreaker;
        java.util.List<java.lang.String> strList82 = multiMatchQueryBuilder80.getfields();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) strList82);
        multiMatchQueryBuilder27.cutoffFrequency = 0.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(zeroTermsQuery70);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNull(fuzziness78);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNull(float81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder83);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        multiMatchQueryBuilder10.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.operator(operator20);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery22;
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = null;
        multiMatchQueryBuilder34.setzeroTermsQuery(zeroTermsQuery35);
        java.util.List<java.lang.String> strList37 = multiMatchQueryBuilder34.fields;
        java.lang.String str38 = multiMatchQueryBuilder34.queryName;
        java.lang.Boolean boolean39 = multiMatchQueryBuilder34.lenient;
        org.elasticsearch.common.unit.Fuzziness fuzziness40 = multiMatchQueryBuilder34.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder10.type((java.lang.Object) fuzziness40);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 0.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNull(fuzziness40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        multiMatchQueryBuilder10.setanalyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery14;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery16);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        multiMatchQueryBuilder19.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}";
        multiMatchQueryBuilder19.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder19.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"best_fields\",\n    \"analyzer\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"useDisMax\\\" : true\\n  }\\n}\",\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false,\\n    \\\"lenient\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder11.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder11.type = type22;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery24);
        multiMatchQueryBuilder11.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Integer int13 = multiMatchQueryBuilder10.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = multiMatchQueryBuilder10.getoperator();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(operator14);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        multiMatchQueryBuilder15.tieBreaker = 10.0f;
        org.elasticsearch.common.unit.Fuzziness fuzziness20 = multiMatchQueryBuilder15.getfuzziness();
        java.lang.String str21 = multiMatchQueryBuilder15.getanalyzer();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNull(fuzziness20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = null;
        multiMatchQueryBuilder8.setoperator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder14.operator;
        multiMatchQueryBuilder14.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder14.setprefixLength((java.lang.Integer) 35);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = multiMatchQueryBuilder14.zeroTermsQuery;
        java.lang.Integer int21 = multiMatchQueryBuilder14.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNull(zeroTermsQuery20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder14.operator;
        multiMatchQueryBuilder14.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.lenient(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder14.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(type20);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        java.lang.String str12 = multiMatchQueryBuilder8.fuzzyRewrite;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder8.getfields();
        multiMatchQueryBuilder8.minimumShouldMatch = "";
        multiMatchQueryBuilder8.setboost((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder8.zeroTermsQuery;
        java.lang.String str19 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery20;
        java.lang.Object obj22 = multiMatchQueryBuilder8.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + (-1.0f) + "'", obj22, (-1.0f));
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.analyzer = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.cutoffFrequency((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder10.boost(10.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        java.lang.String str24 = multiMatchQueryBuilder23.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder11.setoperator(operator17);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Integer int21 = multiMatchQueryBuilder20.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder20.operator = operator22;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.type(type28);
        org.elasticsearch.common.ParseField parseField30 = type28.parseField();
        multiMatchQueryBuilder10.settype(type28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.tieBreaker((float) 0);
        java.lang.String str34 = null; // flaky: multiMatchQueryBuilder33.toString();
        multiMatchQueryBuilder33.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder33.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder38.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        multiMatchQueryBuilder38.settieBreaker((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}" + "'", str34, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap17 = null;
        multiMatchQueryBuilder16.fieldsBoosts = strObjectFloatHashMap17;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder16.zeroTermsQuery = zeroTermsQuery19;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder16.lenient(false);
        java.lang.String[] strArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder16, strArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 10);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.getlenient();
        multiMatchQueryBuilder10.setboost((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.lenient(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder22.operator(operator23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = null;
        multiMatchQueryBuilder22.zeroTermsQuery = zeroTermsQuery25;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.tieBreaker = (-1.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = multiMatchQueryBuilder10.toXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        java.lang.String str16 = multiMatchQueryBuilder11.getanalyzer();
        multiMatchQueryBuilder11.setuseDisMax((java.lang.Boolean) false);
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 1.0f);
        java.lang.String str21 = multiMatchQueryBuilder11.minimumShouldMatch;
        java.lang.String str22 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder11.fields;
        java.lang.Class<?> wildcardClass24 = strList23.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder8.setoperator(operator13);
        java.lang.Float float15 = multiMatchQueryBuilder8.tieBreaker;
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder8.getfuzziness();
        java.lang.String str20 = multiMatchQueryBuilder8.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        java.lang.Integer int19 = multiMatchQueryBuilder14.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder14.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        float float22 = type21.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.type(type21);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder23.fuzziness;
        java.lang.Integer int25 = multiMatchQueryBuilder23.prefixLength;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type21.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 1.0f + "'", float22 == 1.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(fuzziness24);
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getuseDisMax();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap21 = multiMatchQueryBuilder17.fieldsBoosts;
        java.lang.String str22 = multiMatchQueryBuilder17.fuzzyRewrite;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap23 = multiMatchQueryBuilder17.fieldsBoosts;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder17.doXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNull(strObjectFloatHashMap21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(strObjectFloatHashMap23);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str19 = multiMatchQueryBuilder18.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder18.useDisMax(true);
        java.lang.String str24 = multiMatchQueryBuilder23.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap25 = multiMatchQueryBuilder23.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str19, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(strObjectFloatHashMap25);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder19.maxExpansions;
        multiMatchQueryBuilder19.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder19.tieBreaker = 35.0f;
        multiMatchQueryBuilder19.prefixLength = 10;
        multiMatchQueryBuilder19.tieBreaker = 35.0f;
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) 35.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        multiMatchQueryBuilder10.setoperator(operator28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder10.useDisMax(true);
        multiMatchQueryBuilder31.boost = 0.0f;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder11.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost(0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = null;
        multiMatchQueryBuilder18.setfieldsBoosts(strObjectFloatHashMap19);
        java.lang.Boolean boolean21 = multiMatchQueryBuilder18.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder18.field("{\n  \"multi_match\" : {\n    \"query\" : \"class org.joda.time.format.DateTimeFormatter\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", (float) 1L);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder24.operator(operator25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = null;
        multiMatchQueryBuilder24.setzeroTermsQuery(zeroTermsQuery27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder24.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator31 = multiMatchQueryBuilder24.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(operator31);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray22);
        java.lang.Integer int25 = multiMatchQueryBuilder24.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.queryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        multiMatchQueryBuilder27.maxExpansions = 1;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        float float14 = type12.tieBreaker();
        org.elasticsearch.common.ParseField parseField15 = type12.parseField();
        org.elasticsearch.common.ParseField parseField16 = type12.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type17 = type12.matchQueryType();
        org.elasticsearch.common.ParseField parseField18 = type12.parseField();
        org.elasticsearch.common.ParseField parseField19 = type12.parseField();
        float float20 = type12.tieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.0f + "'", float14 == 0.0f);
        org.junit.Assert.assertNotNull(parseField15);
        org.junit.Assert.assertNotNull(parseField16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type17.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertNotNull(parseField19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        java.lang.Integer int10 = multiMatchQueryBuilder8.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = null;
        multiMatchQueryBuilder8.setoperator(operator11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder14.operator;
        java.lang.String str16 = null; // flaky: multiMatchQueryBuilder14.toString();
        java.lang.Float float17 = multiMatchQueryBuilder14.cutoffFrequency;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}" + "'", str16, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder25.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = null; // flaky: multiMatchQueryBuilder31.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = null; // flaky: multiMatchQueryBuilder31.tieBreaker(10.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
// flaky:         multiMatchQueryBuilder35.setzeroTermsQuery(zeroTermsQuery36);
        java.lang.Integer int38 = null; // flaky: multiMatchQueryBuilder35.getprefixLength();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int38);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        java.lang.Float float16 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        float float21 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) type17);
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder10.getfuzziness();
        java.lang.Class<?> wildcardClass25 = fuzziness24.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(fuzziness24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = multiMatchQueryBuilder25.getzeroTermsQuery();
        multiMatchQueryBuilder25.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator29 = null;
        multiMatchQueryBuilder25.setoperator(operator29);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = null; // flaky: multiMatchQueryBuilder16.fuzziness((java.lang.Object) multiMatchQueryBuilder25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder16.cutoffFrequency((float) (short) 1);
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder16.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 10.0,\n    \"slop\" : 1,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNull(zeroTermsQuery26);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder15.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.slop((int) (short) -1);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap19 = multiMatchQueryBuilder18.getfieldsBoosts();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(strObjectFloatHashMap19);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder20.operator = operator21;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.String str39 = multiMatchQueryBuilder10.fuzzyRewrite;
        multiMatchQueryBuilder10.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type42 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type43 = type42.matchQueryType();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray51);
        multiMatchQueryBuilder52.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder52.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder52.minimumShouldMatch("");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) type43, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder10.cutoffFrequency(0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator73 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.boost = 35.0f;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type42.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type43.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(operator73);
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.tieBreaker;
        multiMatchQueryBuilder15.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder15.operator(operator19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder15.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(zeroTermsQuery21);
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.tieBreaker((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        java.lang.Integer int30 = multiMatchQueryBuilder27.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder27.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder27.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        multiMatchQueryBuilder27.setlenient((java.lang.Boolean) true);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder48.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((float) (short) 100);
        multiMatchQueryBuilder51.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator54 = null;
        multiMatchQueryBuilder51.setoperator(operator54);
        java.util.List<java.lang.String> strList56 = multiMatchQueryBuilder51.getfields();
        java.util.List<java.lang.String> strList57 = multiMatchQueryBuilder51.getfields();
        java.lang.String str58 = multiMatchQueryBuilder51.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float60 = type59.tieBreaker();
        float float61 = type59.tieBreaker();
        org.elasticsearch.common.ParseField parseField62 = type59.parseField();
        float float63 = type59.tieBreaker();
        multiMatchQueryBuilder51.settype(type59);
        multiMatchQueryBuilder27.settype(type59);
        multiMatchQueryBuilder15.type = type59;
        multiMatchQueryBuilder15.setmaxExpansions((java.lang.Integer) 52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder70 = multiMatchQueryBuilder15.prefixLength(100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder72 = multiMatchQueryBuilder15.lenient(true);
        java.lang.Float float73 = multiMatchQueryBuilder72.boost;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 0.0f + "'", float60 == 0.0f);
        org.junit.Assert.assertTrue("'" + float61 + "' != '" + 0.0f + "'", float61 == 0.0f);
        org.junit.Assert.assertNotNull(parseField62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 0.0f + "'", float63 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder70);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder72);
        org.junit.Assert.assertNull(float73);
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.type(type30);
        org.elasticsearch.common.ParseField parseField32 = type30.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder18.type(type30);
        multiMatchQueryBuilder33.boost = (-1.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap36 = multiMatchQueryBuilder33.fieldsBoosts;
        multiMatchQueryBuilder33.maxExpansions = 35;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(parseField32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(strObjectFloatHashMap36);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type12 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder11.settype(type12);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type12.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        multiMatchQueryBuilder10.setuseDisMax((java.lang.Boolean) true);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.lenient;
        java.lang.String str19 = multiMatchQueryBuilder10.getqueryName();
        java.lang.Object obj20 = multiMatchQueryBuilder10.gettext();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder19.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder19.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Integer int24 = multiMatchQueryBuilder23.prefixLength;
        multiMatchQueryBuilder23.setuseDisMax((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type29 = multiMatchQueryBuilder23.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder23.prefixLength((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNull(type29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : true,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        multiMatchQueryBuilder21.setzeroTermsQuery(zeroTermsQuery22);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness11;
        multiMatchQueryBuilder8.boost = 10.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.operator(operator15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"lenient\" : true\n  }\n}");
        java.lang.Boolean boolean19 = multiMatchQueryBuilder8.useDisMax;
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder28.useDisMax(false);
        java.lang.String str31 = multiMatchQueryBuilder30.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder30.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder30.slop((int) (short) 10);
        multiMatchQueryBuilder30.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder30.boost((float) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = null; // flaky: multiMatchQueryBuilder8.fuzziness((java.lang.Object) multiMatchQueryBuilder39);
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder39.fields;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strList41);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder8.maxExpansions((int) (short) 10);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder8.setoperator(operator21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder12.fuzziness = fuzziness13;
        multiMatchQueryBuilder12.cutoffFrequency = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder12.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder12.lenient(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.type(type28);
        org.elasticsearch.common.ParseField parseField30 = type28.parseField();
        multiMatchQueryBuilder10.settype(type28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.tieBreaker((float) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder10.field("", (float) (byte) 100);
        java.lang.Boolean boolean37 = multiMatchQueryBuilder10.getlenient();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray45);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery47 = multiMatchQueryBuilder46.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.boost((float) (short) 100);
        java.lang.Integer int50 = multiMatchQueryBuilder49.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder49.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float53 = multiMatchQueryBuilder49.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder49.cutoffFrequency((float) 100L);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type56 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float57 = type56.tieBreaker();
        float float58 = type56.tieBreaker();
        org.elasticsearch.common.ParseField parseField59 = type56.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type60 = type56.matchQueryType();
        org.elasticsearch.common.ParseField parseField61 = type56.parseField();
        float float62 = type56.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder63 = multiMatchQueryBuilder55.type(type56);
        float float64 = type56.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder65 = multiMatchQueryBuilder10.type(type56);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder10.tieBreaker = 10.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNull(boolean37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(zeroTermsQuery47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(float53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type56.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.0f + "'", float58 == 0.0f);
        org.junit.Assert.assertNotNull(parseField59);
        org.junit.Assert.assertTrue("'" + type60 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type60.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField61);
        org.junit.Assert.assertTrue("'" + float62 + "' != '" + 0.0f + "'", float62 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder63);
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 0.0f + "'", float64 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder65);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = multiMatchQueryBuilder11.operator;
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder11.fuzziness;
        multiMatchQueryBuilder11.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.maxExpansions((int) (short) 100);
        multiMatchQueryBuilder11.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 10.0\n  }\n}";
        multiMatchQueryBuilder11.lenient = false;
        java.lang.String str25 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 10.0\n  }\n}" + "'", str25, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 10.0\n  }\n}");
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.type(type17);
        multiMatchQueryBuilder21.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder21.operator;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.String str20 = multiMatchQueryBuilder17.getanalyzer();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        java.lang.String str32 = multiMatchQueryBuilder31.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type33 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float34 = type33.tieBreaker();
        float float35 = type33.tieBreaker();
        org.elasticsearch.common.ParseField parseField36 = type33.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type37 = type33.matchQueryType();
        multiMatchQueryBuilder31.type = type33;
        org.elasticsearch.index.search.MatchQuery.Type type39 = type33.matchQueryType();
        org.elasticsearch.index.search.MatchQuery.Type type40 = type33.matchQueryType();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder17.type(type33);
        org.elasticsearch.common.ParseField parseField42 = type33.parseField();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type33.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 0.0f + "'", float34 == 0.0f);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.0f + "'", float35 == 0.0f);
        org.junit.Assert.assertNotNull(parseField36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type37.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type39.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertNotNull(parseField42);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = multiMatchQueryBuilder13.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder13.tieBreaker((float) (byte) 0);
        java.lang.Class<?> wildcardClass17 = multiMatchQueryBuilder16.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(type14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.fuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.field("", (float) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder17.prefixLength((int) (short) 0);
        multiMatchQueryBuilder17.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = null;
        multiMatchQueryBuilder17.setoperator(operator25);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.type(type11);
        multiMatchQueryBuilder12.tieBreaker = 1.0f;
        multiMatchQueryBuilder12.useDisMax = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder12.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder18.operator = operator21;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertTrue("'" + type11 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type11.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder10.setoperator(operator13);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.operator(operator15);
        java.lang.Float float17 = multiMatchQueryBuilder16.getboost();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(float17);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery16);
        java.lang.String str18 = multiMatchQueryBuilder17.analyzer;
        java.lang.Object obj19 = multiMatchQueryBuilder17.gettext();
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getuseDisMax();
        java.lang.Object obj21 = multiMatchQueryBuilder17.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 35.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + (-1.0f) + "'", obj21, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        java.lang.String str20 = multiMatchQueryBuilder19.getminimumShouldMatch();
        multiMatchQueryBuilder19.setslop((java.lang.Integer) 1);
        java.lang.Object obj23 = multiMatchQueryBuilder19.gettext();
        multiMatchQueryBuilder19.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 10,\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        java.lang.String str18 = multiMatchQueryBuilder11.queryName;
        multiMatchQueryBuilder11.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}";
        java.lang.String str21 = multiMatchQueryBuilder11.fuzzyRewrite;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getlenient();
        multiMatchQueryBuilder14.setminimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray28);
        java.lang.Integer int31 = multiMatchQueryBuilder30.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap32 = multiMatchQueryBuilder30.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = null;
        multiMatchQueryBuilder30.zeroTermsQuery = zeroTermsQuery33;
        java.util.List<java.lang.String> strList35 = multiMatchQueryBuilder30.getfields();
        multiMatchQueryBuilder30.settieBreaker((java.lang.Float) (-1.0f));
        java.lang.Boolean boolean38 = multiMatchQueryBuilder30.getuseDisMax();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery50 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder49.zeroTermsQuery(zeroTermsQuery50);
        java.util.List<java.lang.String> strList52 = multiMatchQueryBuilder49.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery53 = multiMatchQueryBuilder49.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder49.tieBreaker((float) '#');
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray63);
        multiMatchQueryBuilder64.maxExpansions = 0;
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray74);
        multiMatchQueryBuilder75.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder75.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder81 = multiMatchQueryBuilder75.minimumShouldMatch("");
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder91 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder92 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder93 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder94 = multiMatchQueryBuilder30.fuzziness((java.lang.Object) strArray89);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder95 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}", strArray89);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap96 = multiMatchQueryBuilder95.fieldsBoosts;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder98 = multiMatchQueryBuilder95.useDisMax(false);
        java.lang.Integer int99 = multiMatchQueryBuilder98.getslop();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(strObjectFloatHashMap32);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(zeroTermsQuery53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder81);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder94);
        org.junit.Assert.assertNull(strObjectFloatHashMap96);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder98);
        org.junit.Assert.assertNull(int99);
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.tieBreaker;
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder15.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder15.getzeroTermsQuery();
        java.lang.Boolean boolean19 = multiMatchQueryBuilder15.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder15.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
        multiMatchQueryBuilder22.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 97,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str25 = multiMatchQueryBuilder22.minimumShouldMatch;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"Name\" : \"hi!\"\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.String str14 = multiMatchQueryBuilder11.getqueryName();
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder11.setlenient((java.lang.Boolean) true);
        java.lang.String str19 = multiMatchQueryBuilder11.analyzer;
        java.lang.Integer int20 = multiMatchQueryBuilder11.getslop();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.getprefixLength();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        java.lang.String str17 = multiMatchQueryBuilder15.fuzzyRewrite;
        multiMatchQueryBuilder15.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder15.operator(operator22);
        multiMatchQueryBuilder23.tieBreaker = 97.0f;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}" + "'", str17, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.operator;
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder10.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder10.setoperator(operator18);
        multiMatchQueryBuilder10.prefixLength = (-1);
        java.lang.Boolean boolean22 = multiMatchQueryBuilder10.lenient;
        java.lang.Object obj23 = multiMatchQueryBuilder10.text;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(type15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-1.0f) + "'", obj23, (-1.0f));
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.prefixLength((int) (byte) -1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder10.getoperator();
        java.lang.String str16 = multiMatchQueryBuilder10.fuzzyRewrite;
        java.lang.Boolean boolean17 = multiMatchQueryBuilder10.getuseDisMax();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder26.getzeroTermsQuery();
        java.lang.Integer int28 = multiMatchQueryBuilder26.maxExpansions;
        java.lang.Integer int29 = multiMatchQueryBuilder26.prefixLength;
        multiMatchQueryBuilder26.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"slop\" : 0,\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        java.lang.Object obj32 = multiMatchQueryBuilder26.gettext();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder41.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap44 = null;
        multiMatchQueryBuilder41.fieldsBoosts = strObjectFloatHashMap44;
        multiMatchQueryBuilder41.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery48 = null;
        multiMatchQueryBuilder41.setzeroTermsQuery(zeroTermsQuery48);
        multiMatchQueryBuilder41.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.useDisMax(false);
        java.lang.String str63 = multiMatchQueryBuilder62.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery64 = null;
        multiMatchQueryBuilder62.setzeroTermsQuery(zeroTermsQuery64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type66 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder62.type(type66);
        multiMatchQueryBuilder41.settype(type66);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder26.type((java.lang.Object) type66);
        multiMatchQueryBuilder10.type = type66;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + false + "'", boolean17, false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + (-1.0f) + "'", obj32, (-1.0f));
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + type66 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type66.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 52.0f);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder16.setmaxExpansions((java.lang.Integer) 100);
        java.lang.Integer int19 = multiMatchQueryBuilder16.getprefixLength();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder16.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder21.getoperator();
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder21.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNull(fuzziness23);
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String[] strArray11 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray11);
        java.lang.Float float13 = multiMatchQueryBuilder12.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.useDisMax(true);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        java.lang.Float float31 = multiMatchQueryBuilder30.cutoffFrequency;
        java.lang.Boolean boolean32 = multiMatchQueryBuilder30.useDisMax;
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray40);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator42 = multiMatchQueryBuilder41.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder41.field("");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray52);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery54 = multiMatchQueryBuilder53.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder56 = multiMatchQueryBuilder53.boost((float) (short) 100);
        multiMatchQueryBuilder56.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator59 = null;
        multiMatchQueryBuilder56.setoperator(operator59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder56.fuzzyRewrite("");
        java.util.List<java.lang.String> strList63 = multiMatchQueryBuilder56.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder44.fuzziness((java.lang.Object) strList63);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = multiMatchQueryBuilder44.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness67 = multiMatchQueryBuilder66.fuzziness;
        multiMatchQueryBuilder30.fuzziness = fuzziness67;
        multiMatchQueryBuilder12.fuzziness = fuzziness67;
        multiMatchQueryBuilder12.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(float31);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNull(operator42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNull(zeroTermsQuery54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder56);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder66);
        org.junit.Assert.assertNotNull(fuzziness67);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder11.boost((float) ' ');
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = null;
        multiMatchQueryBuilder11.setfuzziness(fuzziness19);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type21 = multiMatchQueryBuilder11.gettype();
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 32.0,\n    \"prefix_length\" : 1,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multiMatch\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"maxExpansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzyRewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"Name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tieBreaker\\\" : 10.0\\n  }\\n}\",\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = multiMatchQueryBuilder11.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(type21);
        org.junit.Assert.assertNull(type24);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.slop = 0;
        multiMatchQueryBuilder10.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder10.getoperator();
        multiMatchQueryBuilder10.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder10.boost = 10.0f;
        java.lang.Boolean boolean21 = multiMatchQueryBuilder10.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.Float float24 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.Object obj25 = multiMatchQueryBuilder10.text;
        java.lang.Boolean boolean26 = multiMatchQueryBuilder10.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertEquals("'" + boolean21 + "' != '" + true + "'", boolean21, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + (-1.0f) + "'", obj25, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean26 + "' != '" + true + "'", boolean26, true);
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder11.getfields();
        java.lang.String str18 = multiMatchQueryBuilder11.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        multiMatchQueryBuilder11.settype(type19);
        java.lang.String str25 = multiMatchQueryBuilder11.getqueryName();
        multiMatchQueryBuilder11.useDisMax = true;
        org.elasticsearch.common.unit.Fuzziness fuzziness28 = multiMatchQueryBuilder11.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNull(fuzziness28);
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = multiMatchQueryBuilder13.operator;
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.type(type28);
        org.elasticsearch.common.ParseField parseField30 = type28.parseField();
        multiMatchQueryBuilder13.type = type28;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder13.cutoffFrequency((-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder33.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray43);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery45 = multiMatchQueryBuilder44.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder44.boost((float) (short) 100);
        multiMatchQueryBuilder47.queryName = "hi!";
        java.lang.Integer int50 = multiMatchQueryBuilder47.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder47.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder47.maxExpansions((int) (short) 0);
        java.lang.String str56 = multiMatchQueryBuilder47.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap57 = multiMatchQueryBuilder47.getfieldsBoosts();
        multiMatchQueryBuilder33.setfieldsBoosts(strObjectFloatHashMap57);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder59 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params60 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder61 = multiMatchQueryBuilder33.toXContent(xContentBuilder59, params60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(operator16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNull(zeroTermsQuery45);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap57);
        org.junit.Assert.assertNotNull(params60);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.getlenient();
        multiMatchQueryBuilder11.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.String str19 = multiMatchQueryBuilder11.getanalyzer();
        multiMatchQueryBuilder11.tieBreaker = 52.0f;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder11.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.boost((float) 52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder19.useDisMax(true);
        java.lang.String str22 = multiMatchQueryBuilder21.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertEquals("'" + boolean17 + "' != '" + true + "'", boolean17, true);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type13 = multiMatchQueryBuilder12.type;
        multiMatchQueryBuilder12.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder12.getfields();
        org.elasticsearch.common.xcontent.XContentType xContentType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference18 = multiMatchQueryBuilder12.buildAsBytes(xContentType17);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(type13);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.boost((float) 10L);
        java.lang.String[] strArray23 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray23);
        java.lang.String[] strArray31 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : true,\n    \"lenient\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator33 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.operator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder34.cutoffFrequency((float) (byte) 100);
        multiMatchQueryBuilder36.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Integer int18 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.operator(operator16);
        java.lang.Integer int18 = multiMatchQueryBuilder8.slop;
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.maxExpansions((int) 'a');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = null;
        multiMatchQueryBuilder10.operator = operator17;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder20.field("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder20.getfuzziness();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(fuzziness23);
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        java.lang.String[] strArray11 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray11);
        java.lang.Float float13 = multiMatchQueryBuilder12.getboost();
        multiMatchQueryBuilder12.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder12.cutoffFrequency(0.0f);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder26.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.boost((float) (short) 100);
        java.lang.Integer int30 = multiMatchQueryBuilder29.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder29.boost((float) '4');
        multiMatchQueryBuilder29.setfuzzyRewrite("");
        java.lang.Integer int35 = multiMatchQueryBuilder29.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder29.boost(10.0f);
        multiMatchQueryBuilder37.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder37.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder37.cutoffFrequency(10.0f);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray52);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray52);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery55 = null;
        multiMatchQueryBuilder54.setzeroTermsQuery(zeroTermsQuery55);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder54.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder58.cutoffFrequency((float) (short) 100);
        multiMatchQueryBuilder58.setlenient((java.lang.Boolean) true);
        java.lang.Object obj63 = multiMatchQueryBuilder58.text;
        multiMatchQueryBuilder58.slop = 0;
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray74);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray74);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery77 = null;
        multiMatchQueryBuilder76.setzeroTermsQuery(zeroTermsQuery77);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder76.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder80.cutoffFrequency((float) 100);
        java.lang.Integer int83 = multiMatchQueryBuilder80.slop;
        multiMatchQueryBuilder80.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator86 = multiMatchQueryBuilder80.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder80.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder89 = null; // flaky: multiMatchQueryBuilder58.fuzziness((java.lang.Object) multiMatchQueryBuilder88);
        org.elasticsearch.common.unit.Fuzziness fuzziness90 = null; // flaky: multiMatchQueryBuilder89.fuzziness;
        multiMatchQueryBuilder43.setfuzziness(fuzziness90);
        multiMatchQueryBuilder17.fuzziness = fuzziness90;
        multiMatchQueryBuilder17.setboost((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + '#' + "'", obj63, '#');
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNull(operator86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder89);
// flaky:         org.junit.Assert.assertNotNull(fuzziness90);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"type\" : \"best_fields\",\n    \"boost\" : 100.0,\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.slop;
        java.lang.Integer int16 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery17 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery17);
        multiMatchQueryBuilder10.tieBreaker = 10.0f;
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"useDisMax\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray32);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = multiMatchQueryBuilder33.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type37 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder36.settype(type37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder24.type(type37);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder41 = multiMatchQueryBuilder24.tieBreaker((float) (byte) -1);
        java.lang.Object obj42 = multiMatchQueryBuilder41.gettext();
        org.elasticsearch.common.xcontent.XContentType xContentType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference44 = multiMatchQueryBuilder41.buildAsBytes(xContentType43);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNull(zeroTermsQuery34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type37.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder41);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + (-1.0f) + "'", obj42, (-1.0f));
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = multiMatchQueryBuilder17.getoperator();
        java.lang.String str19 = multiMatchQueryBuilder17.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.useDisMax(true);
        multiMatchQueryBuilder21.lenient = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(operator18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder11.getfields();
        java.lang.String str18 = multiMatchQueryBuilder11.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type19 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float20 = type19.tieBreaker();
        float float21 = type19.tieBreaker();
        org.elasticsearch.common.ParseField parseField22 = type19.parseField();
        float float23 = type19.tieBreaker();
        multiMatchQueryBuilder11.settype(type19);
        java.lang.String str25 = multiMatchQueryBuilder11.getqueryName();
        multiMatchQueryBuilder11.prefixLength = 52;
        multiMatchQueryBuilder11.boost = 1.0f;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type19.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.0f + "'", float20 == 0.0f);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 0.0f + "'", float21 == 0.0f);
        org.junit.Assert.assertNotNull(parseField22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.boost((float) 10L);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder15.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        java.lang.String str39 = multiMatchQueryBuilder10.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type40 = multiMatchQueryBuilder10.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertNull(zeroTermsQuery41);
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray9);
        multiMatchQueryBuilder12.setprefixLength((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.elasticsearch.common.xcontent.XContentBuilder.defaultDatePrinter;
        java.lang.Class<?> wildcardClass1 = dateTimeFormatter0.getClass();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) wildcardClass1, strArray9);
        java.lang.String str12 = multiMatchQueryBuilder11.minimumShouldMatch;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder11.fuzziness;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.lenient;
        java.lang.Object obj19 = multiMatchQueryBuilder11.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.lenient(false);
        java.lang.String str24 = multiMatchQueryBuilder23.fuzzyRewrite;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator25 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder23.operator(operator25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.maxExpansions((int) (byte) -1);
        multiMatchQueryBuilder28.lenient = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-1.0f) + "'", obj19, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.operator(operator16);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder15.setfieldsBoosts(strObjectFloatHashMap18);
        java.lang.Float float20 = multiMatchQueryBuilder15.gettieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder15.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.util.List<java.lang.String> strList23 = multiMatchQueryBuilder15.fields;
        org.elasticsearch.common.unit.Fuzziness fuzziness24 = multiMatchQueryBuilder15.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(fuzziness24);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.maxExpansions = 1;
        multiMatchQueryBuilder8.useDisMax = false;
        java.lang.String str21 = multiMatchQueryBuilder8.analyzer;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder8.getoperator();
        multiMatchQueryBuilder8.prefixLength = 52;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder8.boost((float) (-1));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(operator22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.fieldsBoosts = strObjectFloatHashMap14;
        multiMatchQueryBuilder10.queryName = "";
        java.lang.String str18 = multiMatchQueryBuilder10.getfuzzyRewrite();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = multiMatchQueryBuilder10.toXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        multiMatchQueryBuilder11.settype(type15);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder11.useDisMax;
        java.lang.String str18 = null; // flaky: multiMatchQueryBuilder11.toString();
        multiMatchQueryBuilder11.slop = 100;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNull(boolean17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}" + "'", str18, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder11.getfields();
        java.util.List<java.lang.String> strList17 = multiMatchQueryBuilder11.getfields();
        multiMatchQueryBuilder11.slop = 1;
        multiMatchQueryBuilder11.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder11.setoperator(operator22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.prefixLength(97);
        java.lang.Object obj26 = multiMatchQueryBuilder11.text;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + (-1.0f) + "'", obj26, (-1.0f));
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        java.lang.Float float18 = multiMatchQueryBuilder10.tieBreaker;
        org.elasticsearch.common.unit.Fuzziness fuzziness19 = multiMatchQueryBuilder10.fuzziness;
        java.lang.Object obj20 = multiMatchQueryBuilder10.text;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true\n  }\n}");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery32 = multiMatchQueryBuilder31.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder31.boost((float) (short) 100);
        java.lang.Integer int35 = multiMatchQueryBuilder34.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder34.boost((float) '4');
        multiMatchQueryBuilder34.setfuzzyRewrite("");
        java.lang.String str40 = multiMatchQueryBuilder34.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder34.tieBreaker(0.0f);
        multiMatchQueryBuilder34.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder34.type = type45;
        float float47 = type45.tieBreaker();
        multiMatchQueryBuilder10.type = type45;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder10.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.Boolean boolean51 = multiMatchQueryBuilder10.getlenient();
        org.elasticsearch.common.unit.Fuzziness fuzziness52 = multiMatchQueryBuilder10.getfuzziness();
        java.lang.Object obj53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder10.fuzziness(obj53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(float18);
        org.junit.Assert.assertNull(fuzziness19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(zeroTermsQuery32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertNull(boolean51);
        org.junit.Assert.assertNull(fuzziness52);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        multiMatchQueryBuilder11.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder11.type = type22;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery24);
        multiMatchQueryBuilder11.lenient = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type22.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray21);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder22.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder22.boost((float) (short) 100);
        java.lang.Integer int26 = multiMatchQueryBuilder25.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder25.boost((float) '4');
        multiMatchQueryBuilder25.setfuzzyRewrite("");
        java.lang.String str31 = multiMatchQueryBuilder25.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder25.tieBreaker(0.0f);
        multiMatchQueryBuilder25.boost = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS;
        multiMatchQueryBuilder25.type = type36;
        float float38 = type36.tieBreaker();
        float float39 = type36.tieBreaker();
        multiMatchQueryBuilder8.settype(type36);
        java.util.List<java.lang.String> strList41 = multiMatchQueryBuilder8.fields;
        java.util.List<java.lang.String> strList42 = multiMatchQueryBuilder8.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder8.lenient(true);
        multiMatchQueryBuilder44.setslop((java.lang.Integer) 35);
        multiMatchQueryBuilder44.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}^1.0\" ],\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.CROSS_FIELDS));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertTrue("'" + float39 + "' != '" + 0.0f + "'", float39 == 0.0f);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray24);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder25.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type28 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder25.type(type28);
        org.elasticsearch.common.ParseField parseField30 = type28.parseField();
        multiMatchQueryBuilder10.settype(type28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder10.tieBreaker((float) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery34 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery34;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery36 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery36);
        java.lang.Float float38 = multiMatchQueryBuilder10.getboost();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type28.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(parseField30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(float38);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery18;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type20 = multiMatchQueryBuilder10.type;
        multiMatchQueryBuilder10.cutoffFrequency = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder10.cutoffFrequency((float) 10L);
        java.lang.String str25 = multiMatchQueryBuilder24.getfuzzyRewrite();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        java.lang.Boolean boolean23 = multiMatchQueryBuilder14.lenient;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = null;
        multiMatchQueryBuilder14.setfieldsBoosts(strObjectFloatHashMap24);
        java.lang.String str26 = multiMatchQueryBuilder14.getanalyzer();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder14.tieBreaker((float) ' ');
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(boolean23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.fuzzyRewrite("");
        java.lang.Float float13 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = multiMatchQueryBuilder15.getzeroTermsQuery();
        java.lang.Integer int17 = multiMatchQueryBuilder15.getslop();
        java.lang.Object obj18 = multiMatchQueryBuilder15.text;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = multiMatchQueryBuilder29.type;
        multiMatchQueryBuilder29.slop = 0;
        multiMatchQueryBuilder29.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator35 = multiMatchQueryBuilder29.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder29.boost(1.0f);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray45);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator47 = multiMatchQueryBuilder46.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder46.field("");
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray57);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery59 = multiMatchQueryBuilder58.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder61 = multiMatchQueryBuilder58.boost((float) (short) 100);
        multiMatchQueryBuilder61.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator64 = null;
        multiMatchQueryBuilder61.setoperator(operator64);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder67 = multiMatchQueryBuilder61.fuzzyRewrite("");
        java.util.List<java.lang.String> strList68 = multiMatchQueryBuilder61.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder49.fuzziness((java.lang.Object) strList68);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = multiMatchQueryBuilder49.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness72 = multiMatchQueryBuilder71.fuzziness;
        multiMatchQueryBuilder29.fuzziness = fuzziness72;
        multiMatchQueryBuilder15.fuzziness = fuzziness72;
        multiMatchQueryBuilder15.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.Float float77 = multiMatchQueryBuilder15.getboost();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type78 = null;
        multiMatchQueryBuilder15.settype(type78);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(zeroTermsQuery16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + '#' + "'", obj18, '#');
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(type30);
        org.junit.Assert.assertNull(operator35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNull(operator47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNull(zeroTermsQuery59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder61);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder71);
        org.junit.Assert.assertNotNull(fuzziness72);
        org.junit.Assert.assertNull(float77);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.common.unit.Fuzziness fuzziness11 = null;
        multiMatchQueryBuilder8.fuzziness = fuzziness11;
        multiMatchQueryBuilder8.boost = 10.0f;
        multiMatchQueryBuilder8.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 97.0,\n    \"fuzziness\" : \"[hi!, , hi!, hi!, hi!, ]\",\n    \"tieBreaker\" : 52.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        java.lang.Float float14 = multiMatchQueryBuilder13.cutoffFrequency;
        multiMatchQueryBuilder13.settieBreaker((java.lang.Float) 10.0f);
        multiMatchQueryBuilder13.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder13.queryName("{\n  \"multi_match\" : {\n    \"query\" : {\n      \"multi_match\" : {\n        \"query\" : -1.0,\n        \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n      }\n    },\n    \"fields\" : [ \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\" ]\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}", (float) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder23.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(float14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        org.elasticsearch.common.xcontent.XContent xContent0 = null;
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray9);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray9);
        java.lang.Integer int12 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.field("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.tieBreaker((float) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.tieBreaker((float) 'a');
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        multiMatchQueryBuilder27.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray37);
        java.lang.String str39 = multiMatchQueryBuilder38.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder27.type((java.lang.Object) str39);
        multiMatchQueryBuilder40.tieBreaker = 10.0f;
        multiMatchQueryBuilder40.setlenient((java.lang.Boolean) true);
        multiMatchQueryBuilder40.settieBreaker((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder40.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray56);
        multiMatchQueryBuilder57.maxExpansions = 0;
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder68 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray67);
        multiMatchQueryBuilder68.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder68.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder68.minimumShouldMatch("");
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder83 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder84 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "", strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder85 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0, strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder86 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}", strArray82);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder87 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder88 = null; // flaky: org.elasticsearch.common.xcontent.XContentBuilder.builder(xContent0, strArray82);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Integer int15 = multiMatchQueryBuilder10.getmaxExpansions();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions((int) (short) 0);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.zeroTermsQuery(zeroTermsQuery18);
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.getuseDisMax();
        multiMatchQueryBuilder17.setfuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0\n  }\n}");
        multiMatchQueryBuilder17.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder17.maxExpansions((int) (short) 10);
        org.elasticsearch.common.unit.Fuzziness fuzziness27 = multiMatchQueryBuilder26.getfuzziness();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertEquals("'" + boolean20 + "' != '" + false + "'", boolean20, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNull(fuzziness27);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        java.lang.String str12 = multiMatchQueryBuilder11.queryName;
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder11.fields;
        java.lang.Object obj14 = multiMatchQueryBuilder11.text;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}" + "'", str12, "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"_name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (-1.0f) + "'", obj14, (-1.0f));
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder8.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = multiMatchQueryBuilder8.toXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        multiMatchQueryBuilder10.lenient = true;
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        java.util.List<java.lang.String> strList22 = multiMatchQueryBuilder10.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        multiMatchQueryBuilder15.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str20 = multiMatchQueryBuilder15.queryName;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type23 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        org.elasticsearch.index.search.MatchQuery.Type type24 = type23.matchQueryType();
        multiMatchQueryBuilder14.type = type23;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder14.zeroTermsQuery(zeroTermsQuery26);
        java.lang.String str28 = multiMatchQueryBuilder27.fuzzyRewrite;
        multiMatchQueryBuilder27.setuseDisMax((java.lang.Boolean) true);
        multiMatchQueryBuilder27.slop = (-1);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type23.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        org.elasticsearch.common.unit.Fuzziness fuzziness26 = null;
        multiMatchQueryBuilder10.setfuzziness(fuzziness26);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(zeroTermsQuery28);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 100.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness16 = multiMatchQueryBuilder15.getfuzziness();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.boost((float) 10L);
        java.lang.String[] strArray23 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder18, strArray23);
        java.lang.String str25 = multiMatchQueryBuilder24.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type26 = null;
        multiMatchQueryBuilder24.settype(type26);
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder24.fields;
        java.lang.Boolean boolean29 = multiMatchQueryBuilder24.lenient;
        org.elasticsearch.common.unit.Fuzziness fuzziness30 = multiMatchQueryBuilder24.getfuzziness();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(fuzziness16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(boolean29);
        org.junit.Assert.assertNull(fuzziness30);
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap18);
        multiMatchQueryBuilder17.setqueryName("");
        multiMatchQueryBuilder17.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.boost((float) (byte) 1);
        multiMatchQueryBuilder17.analyzer = "";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder17.slop((int) (short) -1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        org.elasticsearch.common.unit.Fuzziness fuzziness32 = multiMatchQueryBuilder31.getfuzziness();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder31.zeroTermsQuery;
        java.lang.Class<?> wildcardClass34 = multiMatchQueryBuilder31.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(fuzziness32);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Object obj12 = multiMatchQueryBuilder11.text;
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + (-1.0f) + "'", obj12, (-1.0f));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.boost(0.0f);
        multiMatchQueryBuilder14.setmaxExpansions((java.lang.Integer) (-1));
        multiMatchQueryBuilder14.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.Integer int13 = multiMatchQueryBuilder10.slop;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap14 = null;
        multiMatchQueryBuilder10.setfieldsBoosts(strObjectFloatHashMap14);
        java.lang.Float float16 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.prefixLength((int) '#');
        java.lang.String str19 = multiMatchQueryBuilder18.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder18.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"prefixLength\\\" : 1,\\n    \\\"useDisMax\\\" : false,\\n    \\\"cutoffFrequency\\\" : 0.0\\n  }\\n}\" ],\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : -1.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder18.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(type22);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator9 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.field("");
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery21 = multiMatchQueryBuilder20.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type24 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder23.settype(type24);
        float float26 = type24.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.type(type24);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        multiMatchQueryBuilder36.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        java.lang.String str48 = multiMatchQueryBuilder47.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder36.type((java.lang.Object) str48);
        multiMatchQueryBuilder49.tieBreaker = 10.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder52 = multiMatchQueryBuilder27.fuzziness((java.lang.Object) 10.0f);
        java.lang.Float float53 = multiMatchQueryBuilder27.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder27.slop((int) 'a');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder27.cutoffFrequency(10.0f);
        multiMatchQueryBuilder57.maxExpansions = 52;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder60 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params61 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder57.doXContent(xContentBuilder60, params61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(zeroTermsQuery21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type24.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float26 + "' != '" + 0.0f + "'", float26 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder52);
        org.junit.Assert.assertNull(float53);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(params61);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        java.lang.Object obj15 = multiMatchQueryBuilder10.gettext();
        java.util.List<java.lang.String> strList16 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder10.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"maxExpansions\\\" : 100,\\n    \\\"fuzzyRewrite\\\" : \\\"\\\",\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tieBreaker\" : 10.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder18.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"boost\" : -1.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\", \\\"hi!\\\" ],\\n    \\\"fuzziness\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 52.0,\\\\n    \\\\\\\"max_expansions\\\\\\\" : 100,\\\\n    \\\\\\\"fuzzy_rewrite\\\\\\\" : \\\\\\\"\\\\\\\",\\\\n    \\\\\\\"_name\\\\\\\" : \\\\\\\"hi!\\\\\\\"\\\\n  }\\\\n}\\\",\\n    \\\"tie_breaker\\\" : 10.0\\n  }\\n}\"\n  }\n}");
        multiMatchQueryBuilder20.settieBreaker((java.lang.Float) 10.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = null;
        multiMatchQueryBuilder20.operator = operator23;
        multiMatchQueryBuilder20.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '#' + "'", obj15, '#');
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.cutoffFrequency((float) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.prefixLength((int) (byte) 0);
        java.lang.String str19 = multiMatchQueryBuilder16.analyzer;
        java.lang.Object obj20 = multiMatchQueryBuilder16.gettext();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder16.setoperator(operator21);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (-1.0f) + "'", obj20, (-1.0f));
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder8.lenient(true);
        multiMatchQueryBuilder12.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder12.gettieBreaker();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(float15);
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.String str17 = multiMatchQueryBuilder11.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.tieBreaker(0.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder19.maxExpansions;
        multiMatchQueryBuilder19.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder19.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder19.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"slop\" : 0,\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : -1.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator17 = multiMatchQueryBuilder15.getoperator();
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder15.fuzziness;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(operator17);
        org.junit.Assert.assertNull(fuzziness18);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        multiMatchQueryBuilder8.setqueryName("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder8.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder8.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder8.slop = 0;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.tieBreaker((float) 'a');
        java.lang.Integer int23 = multiMatchQueryBuilder22.getprefixLength();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        java.lang.Boolean boolean17 = multiMatchQueryBuilder14.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder14.operator(operator18);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder14.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder14.boost(0.0f);
        multiMatchQueryBuilder14.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tieBreaker\" : 10.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        multiMatchQueryBuilder15.setlenient((java.lang.Boolean) false);
        multiMatchQueryBuilder15.setuseDisMax((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder15.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0\n  }\n}");
        java.lang.String str25 = multiMatchQueryBuilder15.analyzer;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0\n  }\n}" + "'", str25, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0\n  }\n}");
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder15.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder15.slop(0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder15.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNull(operator19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder8.getmaxExpansions();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder8.zeroTermsQuery = zeroTermsQuery13;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder8.fuzzyRewrite("");
        org.elasticsearch.common.unit.Fuzziness fuzziness18 = multiMatchQueryBuilder8.getfuzziness();
        multiMatchQueryBuilder8.maxExpansions = 100;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder8.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = multiMatchQueryBuilder8.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(fuzziness18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder24);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        java.lang.String str13 = multiMatchQueryBuilder10.getqueryName();
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.maxExpansions(0);
        multiMatchQueryBuilder10.cutoffFrequency = (-1.0f);
        java.lang.Integer int20 = multiMatchQueryBuilder10.getprefixLength();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray28);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder29.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type32 = multiMatchQueryBuilder31.type;
        multiMatchQueryBuilder31.slop = 0;
        multiMatchQueryBuilder31.useDisMax = true;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator37 = multiMatchQueryBuilder31.getoperator();
        java.lang.Float float38 = multiMatchQueryBuilder31.boost;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder31.useDisMax(false);
        multiMatchQueryBuilder31.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder31.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder10.fuzziness((java.lang.Object) true);
        java.lang.Integer int46 = multiMatchQueryBuilder45.slop;
        java.lang.Integer int47 = multiMatchQueryBuilder45.getslop();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder48 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params49 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = multiMatchQueryBuilder45.toXContent(xContentBuilder48, params49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNull(type32);
        org.junit.Assert.assertNull(operator37);
        org.junit.Assert.assertNull(float38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(params49);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder32.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type35 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder32.type(type35);
        org.elasticsearch.common.ParseField parseField37 = type35.parseField();
        float float38 = type35.tieBreaker();
        multiMatchQueryBuilder8.settype(type35);
        multiMatchQueryBuilder8.setprefixLength((java.lang.Integer) (-1));
        multiMatchQueryBuilder8.lenient = true;
        java.lang.String str44 = multiMatchQueryBuilder8.getanalyzer();
        multiMatchQueryBuilder8.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefix_length\" : 1,\n    \"minimum_should_match\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : \\\"#\\\",\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"fuzzy_rewrite\\\" : \\\"{\\\\n  \\\\\\\"multi_match\\\\\\\" : {\\\\n    \\\\\\\"query\\\\\\\" : -1.0,\\\\n    \\\\\\\"fields\\\\\\\" : [ \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"hi!\\\\\\\", \\\\\\\"\\\\\\\" ],\\\\n    \\\\\\\"boost\\\\\\\" : 100.0\\\\n  }\\\\n}\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"use_dis_max\" : false,\n    \"cutoff_frequency\" : 0.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type35.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(parseField37);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 1.0f + "'", float38 == 1.0f);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator15 = multiMatchQueryBuilder8.getoperator();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator30 = null;
        multiMatchQueryBuilder27.setoperator(operator30);
        java.lang.Boolean boolean32 = multiMatchQueryBuilder27.getlenient();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator33 = null;
        multiMatchQueryBuilder27.setoperator(operator33);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder27.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        java.lang.String str46 = multiMatchQueryBuilder45.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.maxExpansions(10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type49 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float50 = type49.tieBreaker();
        float float51 = type49.tieBreaker();
        org.elasticsearch.common.ParseField parseField52 = type49.parseField();
        multiMatchQueryBuilder45.settype(type49);
        multiMatchQueryBuilder27.settype(type49);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap55 = null;
        multiMatchQueryBuilder27.setfieldsBoosts(strObjectFloatHashMap55);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator57 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder27.operator(operator57);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type59 = multiMatchQueryBuilder58.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = multiMatchQueryBuilder8.type(type59);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) 35);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(operator14);
        org.junit.Assert.assertNull(operator15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type49.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 0.0f + "'", float50 == 0.0f);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 0.0f + "'", float51 == 0.0f);
        org.junit.Assert.assertNotNull(parseField52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
        org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type59.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder60);
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setboost((java.lang.Float) 0.0f);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap20 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder10.operator(operator21);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator23 = multiMatchQueryBuilder22.operator;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        multiMatchQueryBuilder32.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder32.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder32.prefixLength((int) (short) 0);
        multiMatchQueryBuilder32.setboost((java.lang.Float) 35.0f);
        java.util.List<java.lang.String> strList42 = multiMatchQueryBuilder32.getfields();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray50);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder51.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type54 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder55 = multiMatchQueryBuilder51.type(type54);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap56 = multiMatchQueryBuilder55.getfieldsBoosts();
        multiMatchQueryBuilder55.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery59 = null;
        multiMatchQueryBuilder55.setzeroTermsQuery(zeroTermsQuery59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type61 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        multiMatchQueryBuilder55.settype(type61);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder71 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray70);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery72 = multiMatchQueryBuilder71.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = multiMatchQueryBuilder71.boost((float) (short) 100);
        multiMatchQueryBuilder74.queryName = "hi!";
        java.lang.Integer int77 = multiMatchQueryBuilder74.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder74.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder74.maxExpansions((int) (short) 0);
        java.lang.String str83 = multiMatchQueryBuilder74.getanalyzer();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap84 = multiMatchQueryBuilder74.getfieldsBoosts();
        multiMatchQueryBuilder55.setfieldsBoosts(strObjectFloatHashMap84);
        multiMatchQueryBuilder32.setfieldsBoosts(strObjectFloatHashMap84);
        multiMatchQueryBuilder22.setfieldsBoosts(strObjectFloatHashMap84);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNull(strObjectFloatHashMap20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
        org.junit.Assert.assertNull(operator23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
        org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type54.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder55);
        org.junit.Assert.assertNull(strObjectFloatHashMap56);
        org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type61.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNull(zeroTermsQuery72);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder74);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap84);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.field("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}", (float) 1);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            multiMatchQueryBuilder15.doXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(params20);
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.lang.Float float15 = multiMatchQueryBuilder10.cutoffFrequency;
        java.lang.Float float16 = multiMatchQueryBuilder10.getcutoffFrequency();
        org.elasticsearch.common.unit.Fuzziness fuzziness17 = multiMatchQueryBuilder10.getfuzziness();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder10.lenient;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(fuzziness17);
        org.junit.Assert.assertNull(boolean18);
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = multiMatchQueryBuilder10.fieldsBoosts;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = null;
        multiMatchQueryBuilder10.zeroTermsQuery = zeroTermsQuery13;
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder10.getfields();
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) (-1.0f));
        multiMatchQueryBuilder10.setslop((java.lang.Integer) 0);
        multiMatchQueryBuilder10.setlenient((java.lang.Boolean) true);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = null;
        multiMatchQueryBuilder10.setoperator(operator22);
        java.util.List<java.lang.String> strList24 = multiMatchQueryBuilder10.fields;
        multiMatchQueryBuilder10.fuzzyRewrite = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 0.0,\n    \"slop\" : 35,\n    \"fuzzy_rewrite\" : \"hi!\",\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(strObjectFloatHashMap12);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList24);
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery14 = multiMatchQueryBuilder10.zeroTermsQuery;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) '#');
        java.lang.Integer int17 = multiMatchQueryBuilder10.getmaxExpansions();
        multiMatchQueryBuilder10.setboost((java.lang.Float) 52.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(zeroTermsQuery14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.util.List<java.lang.String> strList14 = multiMatchQueryBuilder10.getfields();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap15 = multiMatchQueryBuilder10.getfieldsBoosts();
        multiMatchQueryBuilder10.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : 0.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 0,\n    \"maxExpansions\" : -1,\n    \"useDisMax\" : true\n  }\n}");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(strObjectFloatHashMap15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setboost((java.lang.Float) (-1.0f));
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = null;
        multiMatchQueryBuilder15.setzeroTermsQuery(zeroTermsQuery19);
        java.lang.String str21 = multiMatchQueryBuilder15.queryName;
        org.elasticsearch.common.xcontent.XContentType xContentType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference23 = multiMatchQueryBuilder15.buildAsBytes(xContentType22);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.fuzzyRewrite("");
        multiMatchQueryBuilder17.minimumShouldMatch = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 10.0\n  }\n}";
        multiMatchQueryBuilder17.settieBreaker((java.lang.Float) 1.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder10, strArray22);
        multiMatchQueryBuilder10.maxExpansions = 1;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator28 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder10.operator(operator28);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap30 = null;
        multiMatchQueryBuilder29.setfieldsBoosts(strObjectFloatHashMap30);
        org.elasticsearch.common.unit.Fuzziness fuzziness32 = multiMatchQueryBuilder29.fuzziness;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = multiMatchQueryBuilder29.fuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.Float float35 = multiMatchQueryBuilder29.tieBreaker;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = multiMatchQueryBuilder29.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator37 = null;
        multiMatchQueryBuilder29.setoperator(operator37);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNull(fuzziness32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder34);
        org.junit.Assert.assertNull(float35);
        org.junit.Assert.assertNull(type36);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        multiMatchQueryBuilder10.setcutoffFrequency((java.lang.Float) 1.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness13 = null;
        multiMatchQueryBuilder10.fuzziness = fuzziness13;
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        multiMatchQueryBuilder25.setzeroTermsQuery(zeroTermsQuery26);
        java.util.List<java.lang.String> strList28 = multiMatchQueryBuilder25.fields;
        java.lang.String str29 = multiMatchQueryBuilder25.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery30 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder25.zeroTermsQuery(zeroTermsQuery30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = multiMatchQueryBuilder42.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type45 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder46 = multiMatchQueryBuilder42.type(type45);
        org.elasticsearch.common.ParseField parseField47 = type45.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder33.type(type45);
        multiMatchQueryBuilder10.settype(type45);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder10.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"_name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery52 = multiMatchQueryBuilder51.zeroTermsQuery;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder44);
        org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type45.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder46);
        org.junit.Assert.assertNotNull(parseField47);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(zeroTermsQuery52);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder15.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder15.maxExpansions(35);
        multiMatchQueryBuilder15.analyzer = "";
        multiMatchQueryBuilder15.queryName = "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}";
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertEquals("'" + boolean16 + "' != '" + false + "'", boolean16, false);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        java.lang.Float float11 = multiMatchQueryBuilder8.tieBreaker;
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray19);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = multiMatchQueryBuilder20.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder20.field("");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder35.settype(type36);
        float float38 = type36.tieBreaker();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder39 = multiMatchQueryBuilder23.type(type36);
        org.elasticsearch.index.search.MatchQuery.Type type40 = type36.matchQueryType();
        multiMatchQueryBuilder8.settype(type36);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(float11);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNull(operator21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 0.0f + "'", float38 == 0.0f);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder39);
        org.junit.Assert.assertTrue("'" + type40 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX + "'", type40.equals(org.elasticsearch.index.search.MatchQuery.Type.PHRASE_PREFIX));
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.maxExpansions((int) (short) 0);
        multiMatchQueryBuilder11.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}";
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery22);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 100\n  }\n}");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder34 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray33);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery35 = multiMatchQueryBuilder34.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = multiMatchQueryBuilder34.boost((float) (short) 100);
        java.lang.Integer int38 = multiMatchQueryBuilder34.getmaxExpansions();
        java.lang.Boolean boolean39 = multiMatchQueryBuilder34.useDisMax;
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder48.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((float) (short) 100);
        java.lang.Integer int52 = multiMatchQueryBuilder51.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = multiMatchQueryBuilder51.boost((float) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator55 = multiMatchQueryBuilder54.operator;
        multiMatchQueryBuilder54.setslop((java.lang.Integer) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder58 = multiMatchQueryBuilder34.fuzziness((java.lang.Object) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder25.type((java.lang.Object) 100);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: failed to parse [multi_match] query type [100]. unknown type.");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(zeroTermsQuery35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(boolean39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder54);
        org.junit.Assert.assertNull(operator55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder58);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        java.util.List<java.lang.String> strList12 = multiMatchQueryBuilder10.getfields();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.useDisMax(false);
        java.lang.String str24 = multiMatchQueryBuilder23.getminimumShouldMatch();
        java.util.List<java.lang.String> strList25 = multiMatchQueryBuilder23.getfields();
        java.lang.Integer int26 = multiMatchQueryBuilder23.slop;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = multiMatchQueryBuilder23.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder37 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder37.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder37.boost((float) (short) 100);
        java.lang.Integer int41 = multiMatchQueryBuilder40.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.boost((float) '4');
        java.lang.Float float44 = multiMatchQueryBuilder43.cutoffFrequency;
        java.lang.Boolean boolean45 = multiMatchQueryBuilder43.useDisMax;
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder54 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray53);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator55 = multiMatchQueryBuilder54.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder54.field("");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder66 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray65);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery67 = multiMatchQueryBuilder66.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder69 = multiMatchQueryBuilder66.boost((float) (short) 100);
        multiMatchQueryBuilder69.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator72 = null;
        multiMatchQueryBuilder69.setoperator(operator72);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = multiMatchQueryBuilder69.fuzzyRewrite("");
        java.util.List<java.lang.String> strList76 = multiMatchQueryBuilder69.fields;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder77 = multiMatchQueryBuilder57.fuzziness((java.lang.Object) strList76);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder79 = multiMatchQueryBuilder57.boost(0.0f);
        org.elasticsearch.common.unit.Fuzziness fuzziness80 = multiMatchQueryBuilder79.fuzziness;
        multiMatchQueryBuilder43.fuzziness = fuzziness80;
        multiMatchQueryBuilder23.fuzziness = fuzziness80;
        multiMatchQueryBuilder10.fuzziness = fuzziness80;
        java.lang.Boolean boolean84 = multiMatchQueryBuilder10.getlenient();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap85 = multiMatchQueryBuilder10.getfieldsBoosts();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery86 = multiMatchQueryBuilder10.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder88 = multiMatchQueryBuilder10.lenient(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder90 = multiMatchQueryBuilder10.boost((float) (-1L));
        multiMatchQueryBuilder90.setboost((java.lang.Float) 100.0f);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNull(float44);
        org.junit.Assert.assertNull(boolean45);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(operator55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(zeroTermsQuery67);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder69);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder77);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder79);
        org.junit.Assert.assertNotNull(fuzziness80);
        org.junit.Assert.assertNull(boolean84);
        org.junit.Assert.assertNull(strObjectFloatHashMap85);
        org.junit.Assert.assertNull(zeroTermsQuery86);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder88);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder90);
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        java.lang.Boolean boolean18 = multiMatchQueryBuilder11.useDisMax;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder11.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        multiMatchQueryBuilder11.useDisMax = false;
        org.elasticsearch.common.unit.Fuzziness fuzziness23 = multiMatchQueryBuilder11.getfuzziness();
        java.lang.Boolean boolean24 = multiMatchQueryBuilder11.useDisMax;
        multiMatchQueryBuilder11.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ]\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNull(fuzziness23);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.common.unit.Fuzziness fuzziness12 = multiMatchQueryBuilder10.fuzziness;
        multiMatchQueryBuilder10.minimumShouldMatch = "hi!";
        multiMatchQueryBuilder10.minimumShouldMatch = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        java.lang.Integer int17 = multiMatchQueryBuilder10.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.lenient(true);
        java.lang.String str20 = multiMatchQueryBuilder10.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator21 = null;
        multiMatchQueryBuilder10.operator = operator21;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder10.zeroTermsQuery;
        java.lang.String str24 = multiMatchQueryBuilder10.getanalyzer();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(fuzziness12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder12.setoperator(operator13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        java.lang.String str16 = multiMatchQueryBuilder12.getfuzzyRewrite();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = null;
        multiMatchQueryBuilder27.setzeroTermsQuery(zeroTermsQuery28);
        java.lang.Boolean boolean30 = multiMatchQueryBuilder27.getlenient();
        java.lang.Object obj31 = multiMatchQueryBuilder27.text;
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray39);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery41 = multiMatchQueryBuilder40.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder40.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type44 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder43.settype(type44);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery46 = multiMatchQueryBuilder43.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type47 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float48 = type47.tieBreaker();
        float float49 = type47.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type50 = type47.matchQueryType();
        org.elasticsearch.common.ParseField parseField51 = type47.parseField();
        multiMatchQueryBuilder43.type = type47;
        org.elasticsearch.index.search.MatchQuery.Type type53 = type47.matchQueryType();
        multiMatchQueryBuilder27.settype(type47);
        org.elasticsearch.common.ParseField parseField55 = type47.parseField();
        multiMatchQueryBuilder12.settype(type47);
        java.lang.Float float57 = multiMatchQueryBuilder12.getcutoffFrequency();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery58 = multiMatchQueryBuilder12.getzeroTermsQuery();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(boolean30);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + '#' + "'", obj31, '#');
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNull(zeroTermsQuery41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type44.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery46);
        org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type47.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 0.0f + "'", float49 == 0.0f);
        org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type50.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField51);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type53.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertNull(float57);
        org.junit.Assert.assertNull(zeroTermsQuery58);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.tieBreaker;
        java.lang.String str17 = multiMatchQueryBuilder15.analyzer;
        java.lang.String str18 = multiMatchQueryBuilder15.getanalyzer();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = null;
        multiMatchQueryBuilder15.operator = operator19;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.maxExpansions = 0;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator11 = multiMatchQueryBuilder8.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 0,\n    \"useDisMax\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = multiMatchQueryBuilder8.getoperator();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder8.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(operator11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(operator14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\" ],\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\" ],\n    \"maxExpansions\" : 0,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder11.slop((int) (byte) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float18 = type17.tieBreaker();
        float float19 = type17.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type17.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder11.type(type17);
        multiMatchQueryBuilder21.lenient = false;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = multiMatchQueryBuilder21.getoperator();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = multiMatchQueryBuilder21.boost((float) 52);
        java.util.List<java.lang.String> strList27 = multiMatchQueryBuilder21.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type17.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 0.0f + "'", float18 == 0.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator24);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.analyzer("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.prefixLength((-1));
        java.lang.String str16 = multiMatchQueryBuilder8.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type17 = multiMatchQueryBuilder8.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(type17);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type14);
        org.elasticsearch.common.xcontent.XContentType xContentType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference17 = multiMatchQueryBuilder15.buildAsBytes(xContentType16);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.prefixLength((int) (short) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder15.setoperator(operator16);
        java.lang.String str18 = null; // flaky: multiMatchQueryBuilder15.toString();
        java.lang.Float float19 = multiMatchQueryBuilder15.getboost();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = multiMatchQueryBuilder15.getoperator();
        java.lang.Class<?> wildcardClass21 = multiMatchQueryBuilder15.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}" + "'", str18, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"prefixLength\" : 1,\n    \"useDisMax\" : false,\n    \"cutoffFrequency\" : 0.0\n  }\n}");
        org.junit.Assert.assertNull(float19);
        org.junit.Assert.assertNull(operator20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.minimumShouldMatch = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder8.cutoffFrequency((float) (byte) 1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.slop((int) (short) 0);
        multiMatchQueryBuilder17.setqueryName("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"fuzzyRewrite\" : \"\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        java.lang.Integer int14 = multiMatchQueryBuilder11.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("hi!", (float) (-1L));
        java.lang.String str18 = multiMatchQueryBuilder17.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery19 = multiMatchQueryBuilder17.zeroTermsQuery;
        java.lang.Boolean boolean20 = multiMatchQueryBuilder17.lenient;
        multiMatchQueryBuilder17.setprefixLength((java.lang.Integer) 100);
        multiMatchQueryBuilder17.setanalyzer("{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}^1.0\" ],\n    \"useDisMax\" : true,\n    \"tieBreaker\" : 100.0,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(zeroTermsQuery19);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = null;
        multiMatchQueryBuilder12.setoperator(operator13);
        java.lang.String str15 = null; // flaky: multiMatchQueryBuilder12.toString();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type16 = multiMatchQueryBuilder12.gettype();
        java.lang.Object obj17 = multiMatchQueryBuilder12.text;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}" + "'", str15, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-1.0f) + "'", obj17, (-1.0f));
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.slop((int) (short) 10);
        multiMatchQueryBuilder10.setprefixLength((java.lang.Integer) 10);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder10.useDisMax(false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder17.setfieldsBoosts(strObjectFloatHashMap18);
        multiMatchQueryBuilder17.setqueryName("");
        multiMatchQueryBuilder17.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder25 = multiMatchQueryBuilder17.boost((float) (byte) 1);
        multiMatchQueryBuilder25.setlenient((java.lang.Boolean) false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder25.field("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"fuzzy_rewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}", 0.0f);
        multiMatchQueryBuilder25.tieBreaker = 52.0f;
        multiMatchQueryBuilder25.setmaxExpansions((java.lang.Integer) 10);
        multiMatchQueryBuilder25.setprefixLength((java.lang.Integer) 52);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery13 = multiMatchQueryBuilder11.zeroTermsQuery;
        multiMatchQueryBuilder11.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.field("");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false,\n    \"lenient\" : false\n  }\n}");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder17.useDisMax(true);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery22 = multiMatchQueryBuilder21.zeroTermsQuery;
        multiMatchQueryBuilder21.useDisMax = true;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(zeroTermsQuery13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(zeroTermsQuery22);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type11 = multiMatchQueryBuilder10.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.tieBreaker((float) (short) 100);
        java.lang.Boolean boolean14 = multiMatchQueryBuilder13.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type15 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float16 = type15.tieBreaker();
        float float17 = type15.tieBreaker();
        org.elasticsearch.common.ParseField parseField18 = type15.parseField();
        float float19 = type15.tieBreaker();
        org.elasticsearch.common.ParseField parseField20 = type15.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.type(type15);
        multiMatchQueryBuilder13.setprefixLength((java.lang.Integer) (-1));
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator24 = null;
        multiMatchQueryBuilder13.setoperator(operator24);
        multiMatchQueryBuilder13.setcutoffFrequency((java.lang.Float) (-1.0f));
        org.elasticsearch.common.xcontent.XContentType xContentType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.bytes.BytesReference bytesReference29 = multiMatchQueryBuilder13.buildAsBytes(xContentType28);
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchException; message: Failed to build ToXContent");
        } catch (org.elasticsearch.ElasticsearchException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type15.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.0f + "'", float17 == 0.0f);
        org.junit.Assert.assertNotNull(parseField18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.0f + "'", float19 == 0.0f);
        org.junit.Assert.assertNotNull(parseField20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        multiMatchQueryBuilder10.settieBreaker((java.lang.Float) 10.0f);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder24.boost((float) (short) 100);
        java.lang.Integer int28 = multiMatchQueryBuilder27.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) '4');
        multiMatchQueryBuilder27.setfuzzyRewrite("");
        java.lang.Integer int33 = multiMatchQueryBuilder27.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 100);
        multiMatchQueryBuilder27.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = null; // flaky: multiMatchQueryBuilder10.fuzziness((java.lang.Object) multiMatchQueryBuilder27);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = null; // flaky: multiMatchQueryBuilder38.boost((float) 1L);
        java.lang.String str41 = null; // flaky: multiMatchQueryBuilder38.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = null; // flaky: multiMatchQueryBuilder38.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : true,\n    \"cutoff_frequency\" : 100.0\n  }\n}");
// flaky:         multiMatchQueryBuilder43.slop = 35;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
// flaky:         org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery15 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery15);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder16.queryName("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"fuzziness\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 52.0,\\n    \\\"max_expansions\\\" : 100,\\n    \\\"fuzzy_rewrite\\\" : \\\"\\\",\\n    \\\"_name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"tie_breaker\" : 10.0\n  }\n}");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder27.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type30 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder27.type(type30);
        org.elasticsearch.common.ParseField parseField32 = type30.parseField();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder18.type(type30);
        java.lang.Object obj34 = multiMatchQueryBuilder33.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.useDisMax(true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type30.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(parseField32);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + '#' + "'", obj34, '#');
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Integer int16 = multiMatchQueryBuilder15.maxExpansions;
        multiMatchQueryBuilder15.setfuzzyRewrite("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"Name\" : \"hi!\"\n  }\n}");
        multiMatchQueryBuilder15.setminimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"maxExpansions\" : 97,\n    \"useDisMax\" : false\n  }\n}");
        multiMatchQueryBuilder15.setlenient((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type2 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.parse("{\n  \"multi_match\" : {\n    \"query\" : \"class org.joda.time.format.DateTimeFormatter\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}", parseFieldMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        java.lang.String str14 = multiMatchQueryBuilder13.fuzzyRewrite;
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = null;
        multiMatchQueryBuilder13.fuzziness = fuzziness15;
        java.lang.Float float17 = multiMatchQueryBuilder13.cutoffFrequency;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap18 = null;
        multiMatchQueryBuilder13.fieldsBoosts = strObjectFloatHashMap18;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator20 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder13.operator(operator20);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder21.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\", \"hi!\" ],\n    \"tie_breaker\" : 10.0\n  }\n}");
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap24 = multiMatchQueryBuilder21.fieldsBoosts;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(float17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNull(strObjectFloatHashMap24);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray18);
        java.lang.String str20 = multiMatchQueryBuilder19.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.type((java.lang.Object) str20);
        multiMatchQueryBuilder8.setslop((java.lang.Integer) (-1));
        java.lang.Float float24 = multiMatchQueryBuilder8.getcutoffFrequency();
        java.lang.String[] strArray29 = new java.lang.String[] { "{\n  \"multi_match\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase_prefix\",\n    \"use_dis_max\" : true,\n    \"tie_breaker\" : 0.0,\n    \"cutoff_frequency\" : 0.0\n  }\n}", "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}", "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder8, strArray29);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator31 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder30.operator(operator31);
        java.lang.Float float33 = multiMatchQueryBuilder30.boost;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(float24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(float33);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        multiMatchQueryBuilder8.setmaxExpansions((java.lang.Integer) 100);
        multiMatchQueryBuilder8.lenient = false;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder8.minimumShouldMatch("");
        org.elasticsearch.common.unit.Fuzziness fuzziness15 = multiMatchQueryBuilder8.fuzziness;
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder24 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray23);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery25 = multiMatchQueryBuilder24.getzeroTermsQuery();
        multiMatchQueryBuilder24.cutoffFrequency = 0.0f;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray35);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder38 = multiMatchQueryBuilder36.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery39 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder38.zeroTermsQuery(zeroTermsQuery39);
        java.lang.String str41 = multiMatchQueryBuilder40.analyzer;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder42 = multiMatchQueryBuilder24.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = multiMatchQueryBuilder8.type((java.lang.Object) str41);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder8.queryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str46 = multiMatchQueryBuilder45.fuzzyRewrite;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = multiMatchQueryBuilder45.slop((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"Name\" : \"hi!\"\n  }\n}", (float) 100);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator52 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder53 = multiMatchQueryBuilder48.operator(operator52);
        multiMatchQueryBuilder53.prefixLength = 97;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(fuzziness15);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNull(zeroTermsQuery25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder42);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder53);
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.zeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"slop\" : 10,\n    \"max_expansions\" : 10\n  }\n}");
        java.util.List<java.lang.String> strList15 = multiMatchQueryBuilder12.getfields();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        java.util.List<java.lang.String> strList13 = multiMatchQueryBuilder10.fields;
        java.lang.String str14 = multiMatchQueryBuilder10.queryName;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder10.field("hi!", (float) (byte) 1);
        java.lang.Boolean boolean18 = multiMatchQueryBuilder17.getuseDisMax();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder17.minimumShouldMatch("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"max_expansions\" : 0,\n    \"lenient\" : false\n  }\n}");
        java.lang.Object obj21 = multiMatchQueryBuilder17.text;
        java.lang.Boolean boolean22 = multiMatchQueryBuilder17.lenient;
        java.lang.String str23 = null; // flaky: multiMatchQueryBuilder17.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + '#' + "'", obj21, '#');
        org.junit.Assert.assertNull(boolean22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!^1.0\", \"\", \"hi!^1.0\", \"hi!^1.0\", \"hi!^1.0\", \"\", \"hi!^1.0\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"max_expansions\\\" : 0,\\n    \\\"lenient\\\" : false\\n  }\\n}\"\n  }\n}" + "'", str23, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!^1.0\", \"\", \"hi!^1.0\", \"hi!^1.0\", \"hi!^1.0\", \"\", \"hi!^1.0\" ],\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"max_expansions\\\" : 0,\\n    \\\"lenient\\\" : false\\n  }\\n}\"\n  }\n}");
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder11.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.cutoffFrequency((float) 100L);
        multiMatchQueryBuilder11.setslop((java.lang.Integer) 1);
        multiMatchQueryBuilder11.boost = (-1.0f);
        java.lang.Object obj22 = multiMatchQueryBuilder11.text;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + (-1.0f) + "'", obj22, (-1.0f));
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float15 = multiMatchQueryBuilder11.getcutoffFrequency();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder11.cutoffFrequency((float) 100L);
        java.lang.String str18 = multiMatchQueryBuilder11.getqueryName();
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator19 = multiMatchQueryBuilder11.getoperator();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery20 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery20;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(float15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(operator19);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder12 = multiMatchQueryBuilder10.analyzer("hi!");
        java.lang.String str13 = multiMatchQueryBuilder12.getfuzzyRewrite();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder12.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery16 = null;
        multiMatchQueryBuilder12.zeroTermsQuery = zeroTermsQuery16;
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) 100);
        multiMatchQueryBuilder14.lenient = true;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.fuzzyRewrite("");
        java.lang.String str21 = null; // flaky: multiMatchQueryBuilder14.toString();
        java.util.List<java.lang.String> strList22 = multiMatchQueryBuilder14.getfields();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray30);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder31.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type34 = multiMatchQueryBuilder33.type;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder36 = multiMatchQueryBuilder33.tieBreaker((float) (short) 100);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray44);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = multiMatchQueryBuilder45.useDisMax(false);
        java.lang.String str48 = multiMatchQueryBuilder47.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder50 = multiMatchQueryBuilder47.slop((int) '#');
        java.lang.Object obj51 = multiMatchQueryBuilder50.gettext();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder60 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray59);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder62 = multiMatchQueryBuilder60.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type63 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder64 = multiMatchQueryBuilder60.type(type63);
        org.elasticsearch.common.ParseField parseField65 = type63.parseField();
        multiMatchQueryBuilder50.type = type63;
        multiMatchQueryBuilder36.type = type63;
        org.elasticsearch.common.ParseField parseField68 = type63.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type69 = type63.matchQueryType();
        multiMatchQueryBuilder14.settype(type63);
        java.lang.String str71 = null; // flaky: multiMatchQueryBuilder14.toString();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}" + "'", str21, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNull(type34);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder50);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + (-1.0f) + "'", obj51, (-1.0f));
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder62);
        org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type63.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder64);
        org.junit.Assert.assertNotNull(parseField65);
        org.junit.Assert.assertNotNull(parseField68);
        org.junit.Assert.assertTrue("'" + type69 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type69.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}" + "'", str71, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"fuzzyRewrite\" : \"\",\n    \"useDisMax\" : true,\n    \"lenient\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}");
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        multiMatchQueryBuilder8.cutoffFrequency = 0.0f;
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap12 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap12;
        java.lang.Object obj14 = multiMatchQueryBuilder8.gettext();
        multiMatchQueryBuilder8.queryName = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}";
        multiMatchQueryBuilder8.tieBreaker = 100.0f;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder21 = multiMatchQueryBuilder8.field("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"maxExpansions\\\" : 0,\\n    \\\"useDisMax\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}", 0.0f);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator22 = multiMatchQueryBuilder21.getoperator();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (-1.0f) + "'", obj14, (-1.0f));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder21);
        org.junit.Assert.assertNull(operator22);
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery12 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery12);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type14 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.type(type14);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder15.analyzer("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        java.lang.String str18 = null; // flaky: multiMatchQueryBuilder17.toString();
        multiMatchQueryBuilder17.boost = 1.0f;
        java.lang.String str21 = multiMatchQueryBuilder17.getanalyzer();
        java.lang.Boolean boolean22 = multiMatchQueryBuilder17.useDisMax;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE + "'", type14.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE));
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}" + "'", str18, "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"phrase\",\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"max_expansions\\\" : 0,\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\",\n    \"useDisMax\" : false\n  }\n}");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}" + "'", str21, "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"max_expansions\" : 0,\n    \"use_dis_max\" : false\n  }\n}");
        org.junit.Assert.assertEquals("'" + boolean22 + "' != '" + false + "'", boolean22, false);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder8.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder13.tieBreaker((float) 100);
        java.lang.Float float16 = multiMatchQueryBuilder13.cutoffFrequency;
        java.lang.Integer int17 = multiMatchQueryBuilder13.getslop();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder26 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray25);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery27 = multiMatchQueryBuilder26.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder29 = multiMatchQueryBuilder26.boost((float) (short) 100);
        multiMatchQueryBuilder29.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator32 = null;
        multiMatchQueryBuilder29.setoperator(operator32);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder29.fuzzyRewrite("");
        multiMatchQueryBuilder29.cutoffFrequency = 0.0f;
        java.lang.Integer int38 = multiMatchQueryBuilder29.prefixLength;
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder47 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray46);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder49 = multiMatchQueryBuilder47.useDisMax(false);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type50 = multiMatchQueryBuilder49.type;
        java.lang.Boolean boolean51 = multiMatchQueryBuilder49.getuseDisMax();
        java.lang.Integer int52 = multiMatchQueryBuilder49.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type53 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS;
        multiMatchQueryBuilder49.type = type53;
        org.elasticsearch.common.ParseField parseField55 = type53.parseField();
        multiMatchQueryBuilder29.settype(type53);
        multiMatchQueryBuilder13.settype(type53);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder13.analyzer("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"analyzer\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ]\\n  }\\n}\",\n    \"boost\" : 100.0,\n    \"useDisMax\" : false,\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNull(zeroTermsQuery27);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder49);
        org.junit.Assert.assertNull(type50);
        org.junit.Assert.assertEquals("'" + boolean51 + "' != '" + false + "'", boolean51, false);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS + "'", type53.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.MOST_FIELDS));
        org.junit.Assert.assertNotNull(parseField55);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery11 = null;
        multiMatchQueryBuilder10.setzeroTermsQuery(zeroTermsQuery11);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder10.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder14.cutoffFrequency((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder18 = multiMatchQueryBuilder14.useDisMax(true);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder20 = multiMatchQueryBuilder14.tieBreaker(0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder22 = multiMatchQueryBuilder14.cutoffFrequency((float) (byte) 0);
        multiMatchQueryBuilder14.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}";
        multiMatchQueryBuilder14.analyzer = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"maxExpansions\" : 0,\n    \"minimumShouldMatch\" : \"{\\n  \\\"multiMatch\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0,\\n    \\\"Name\\\" : \\\"hi!\\\"\\n  }\\n}\",\n    \"lenient\" : false\n  }\n}";
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder18);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder20);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder22);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.field("hi!");
        java.lang.Integer int14 = multiMatchQueryBuilder10.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder16 = multiMatchQueryBuilder10.tieBreaker((float) (short) 0);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder16);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator13 = multiMatchQueryBuilder11.operator;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder11.prefixLength((int) '4');
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator16 = null;
        multiMatchQueryBuilder11.operator = operator16;
        java.lang.String str18 = multiMatchQueryBuilder11.analyzer;
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(operator13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        java.lang.Boolean boolean16 = multiMatchQueryBuilder11.getlenient();
        multiMatchQueryBuilder11.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"useDisMax\" : true,\n    \"cutoffFrequency\" : 100.0\n  }\n}";
        java.lang.String str19 = multiMatchQueryBuilder11.getanalyzer();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder28 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray27);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery29 = multiMatchQueryBuilder28.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder31 = multiMatchQueryBuilder28.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder33 = multiMatchQueryBuilder28.maxExpansions((int) (byte) 0);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder28.lenient(false);
        java.lang.Integer int36 = multiMatchQueryBuilder28.getslop();
        java.lang.Object obj37 = multiMatchQueryBuilder28.gettext();
        java.lang.Boolean boolean38 = multiMatchQueryBuilder28.lenient;
        java.lang.Integer int39 = multiMatchQueryBuilder28.getprefixLength();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder48 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray47);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery49 = multiMatchQueryBuilder48.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder51 = multiMatchQueryBuilder48.boost((float) (short) 100);
        multiMatchQueryBuilder51.queryName = "hi!";
        java.lang.Integer int54 = multiMatchQueryBuilder51.maxExpansions;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder57 = multiMatchQueryBuilder51.field("hi!", (float) (-1L));
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder59 = multiMatchQueryBuilder51.maxExpansions((int) (short) 0);
        java.lang.String str60 = multiMatchQueryBuilder51.getfuzzyRewrite();
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap61 = multiMatchQueryBuilder51.fieldsBoosts;
        multiMatchQueryBuilder28.setfieldsBoosts(strObjectFloatHashMap61);
        multiMatchQueryBuilder11.setfieldsBoosts(strObjectFloatHashMap61);
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder74 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder75 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray73);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder76 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) 0.0d, strArray73);
        multiMatchQueryBuilder76.maxExpansions = (-1);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder80 = multiMatchQueryBuilder76.prefixLength((int) (byte) 0);
        java.lang.Object obj81 = multiMatchQueryBuilder80.gettext();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder82 = multiMatchQueryBuilder11.fuzziness(obj81);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type83 = multiMatchQueryBuilder82.gettype();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNull(zeroTermsQuery29);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder31);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + (-1.0f) + "'", obj37, (-1.0f));
        org.junit.Assert.assertEquals("'" + boolean38 + "' != '" + false + "'", boolean38, false);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNull(zeroTermsQuery49);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder57);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strObjectFloatHashMap61);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder80);
        org.junit.Assert.assertEquals("'" + obj81 + "' != '" + 0.0d + "'", obj81, 0.0d);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder82);
        org.junit.Assert.assertNull(type83);
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        java.lang.Integer int12 = multiMatchQueryBuilder11.prefixLength;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder14 = multiMatchQueryBuilder11.boost((float) '4');
        multiMatchQueryBuilder11.setfuzzyRewrite("");
        java.lang.Integer int17 = multiMatchQueryBuilder11.getslop();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder19 = multiMatchQueryBuilder11.boost(10.0f);
        multiMatchQueryBuilder19.minimumShouldMatch = "";
        multiMatchQueryBuilder19.boost = 0.0f;
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray31);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery33 = multiMatchQueryBuilder32.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder35 = multiMatchQueryBuilder32.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type36 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX;
        multiMatchQueryBuilder35.settype(type36);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery38 = multiMatchQueryBuilder35.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type39 = org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS;
        float float40 = type39.tieBreaker();
        float float41 = type39.tieBreaker();
        org.elasticsearch.index.search.MatchQuery.Type type42 = type39.matchQueryType();
        org.elasticsearch.common.ParseField parseField43 = type39.parseField();
        multiMatchQueryBuilder35.type = type39;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder45 = multiMatchQueryBuilder19.type(type39);
        float float46 = type39.tieBreaker();
        float float47 = type39.tieBreaker();
        float float48 = type39.tieBreaker();
        org.elasticsearch.common.ParseField parseField49 = type39.parseField();
        org.elasticsearch.common.ParseField parseField50 = type39.parseField();
        org.elasticsearch.index.search.MatchQuery.Type type51 = type39.matchQueryType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder19);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(zeroTermsQuery33);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder35);
        org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX + "'", type36.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.PHRASE_PREFIX));
        org.junit.Assert.assertNull(zeroTermsQuery38);
        org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS + "'", type39.equals(org.elasticsearch.index.query.MultiMatchQueryBuilder.Type.BEST_FIELDS));
        org.junit.Assert.assertTrue("'" + float40 + "' != '" + 0.0f + "'", float40 == 0.0f);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 0.0f + "'", float41 == 0.0f);
        org.junit.Assert.assertTrue("'" + type42 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type42.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
        org.junit.Assert.assertNotNull(parseField43);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder45);
        org.junit.Assert.assertTrue("'" + float46 + "' != '" + 0.0f + "'", float46 == 0.0f);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(parseField49);
        org.junit.Assert.assertNotNull(parseField50);
        org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN + "'", type51.equals(org.elasticsearch.index.search.MatchQuery.Type.BOOLEAN));
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder9 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray8);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) '#', strArray8);
        java.lang.Integer int11 = multiMatchQueryBuilder10.maxExpansions;
        multiMatchQueryBuilder10.queryName = "hi!";
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder15 = multiMatchQueryBuilder10.fuzzyRewrite("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        java.lang.Float float16 = multiMatchQueryBuilder15.tieBreaker;
        java.lang.String str17 = null; // flaky: multiMatchQueryBuilder15.toString();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery18 = multiMatchQueryBuilder15.getzeroTermsQuery();
        java.lang.Boolean boolean19 = multiMatchQueryBuilder15.getuseDisMax();
        java.lang.Float float20 = multiMatchQueryBuilder15.tieBreaker;
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = multiMatchQueryBuilder15.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder15);
        org.junit.Assert.assertNull(float16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"Name\" : \"hi!\"\n  }\n}" + "'", str17, "{\n  \"multiMatch\" : {\n    \"query\" : \"#\",\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"fuzzyRewrite\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"Name\" : \"hi!\"\n  }\n}");
        org.junit.Assert.assertNull(zeroTermsQuery18);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNull(float20);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        com.carrotsearch.hppc.ObjectFloatHashMap<java.lang.String> strObjectFloatHashMap11 = null;
        multiMatchQueryBuilder8.fieldsBoosts = strObjectFloatHashMap11;
        multiMatchQueryBuilder8.useDisMax = true;
        multiMatchQueryBuilder8.lenient = false;
        multiMatchQueryBuilder8.analyzer = "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}";
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray26);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery28 = multiMatchQueryBuilder27.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder30 = multiMatchQueryBuilder27.boost((float) (short) 100);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder32 = multiMatchQueryBuilder27.maxExpansions((int) (byte) 0);
        multiMatchQueryBuilder27.setqueryName("{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}");
        org.elasticsearch.common.unit.Fuzziness fuzziness35 = multiMatchQueryBuilder27.getfuzziness();
        multiMatchQueryBuilder27.maxExpansions = 1;
        java.lang.Boolean boolean38 = multiMatchQueryBuilder27.getlenient();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder40 = multiMatchQueryBuilder27.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ]\n  }\n}");
        java.lang.String[] strArray42 = new java.lang.String[] { "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0,\n    \"prefixLength\" : 100,\n    \"Name\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"use_dis_max\\\" : false\\n  }\\n}\"\n  }\n}" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder43 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) multiMatchQueryBuilder27, strArray42);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder44 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) "{\n  \"multi_match\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"use_dis_max\" : false\n  }\n}", strArray42);
        multiMatchQueryBuilder44.setuseDisMax((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNull(zeroTermsQuery28);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder30);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder32);
        org.junit.Assert.assertNull(fuzziness35);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder40);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery9 = multiMatchQueryBuilder8.getzeroTermsQuery();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder11 = multiMatchQueryBuilder8.boost((float) (short) 100);
        multiMatchQueryBuilder11.queryName = "hi!";
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator14 = null;
        multiMatchQueryBuilder11.setoperator(operator14);
        multiMatchQueryBuilder11.setprefixLength((java.lang.Integer) 1);
        org.elasticsearch.index.query.MatchQueryBuilder.Operator operator18 = null;
        multiMatchQueryBuilder11.setoperator(operator18);
        multiMatchQueryBuilder11.setcutoffFrequency((java.lang.Float) 0.0f);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder23 = multiMatchQueryBuilder11.minimumShouldMatch("{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"type\" : \"most_fields\",\n    \"minimumShouldMatch\" : \"{\\n  \\\"multi_match\\\" : {\\n    \\\"query\\\" : -1.0,\\n    \\\"fields\\\" : [ \\\"hi!\\\", \\\"\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"hi!\\\", \\\"\\\" ],\\n    \\\"boost\\\" : 100.0\\n  }\\n}\",\n    \"useDisMax\" : false,\n    \"tieBreaker\" : 0.0\n  }\n}");
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery24 = null;
        multiMatchQueryBuilder11.zeroTermsQuery = zeroTermsQuery24;
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery26 = null;
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder27 = multiMatchQueryBuilder11.zeroTermsQuery(zeroTermsQuery26);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(zeroTermsQuery9);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder23);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder27);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder8 = new org.elasticsearch.index.query.MultiMatchQueryBuilder((java.lang.Object) (-1.0f), strArray7);
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder10 = multiMatchQueryBuilder8.useDisMax(false);
        java.lang.String str11 = multiMatchQueryBuilder10.getminimumShouldMatch();
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder13 = multiMatchQueryBuilder10.slop((int) '#');
        multiMatchQueryBuilder13.setfuzzyRewrite("hi!");
        org.elasticsearch.index.query.MultiMatchQueryBuilder multiMatchQueryBuilder17 = multiMatchQueryBuilder13.lenient(false);
        multiMatchQueryBuilder13.slop = 10;
        multiMatchQueryBuilder13.fuzzyRewrite = "{\n  \"multiMatch\" : {\n    \"query\" : -1.0,\n    \"fields\" : [ \"hi!\", \"\", \"hi!\", \"hi!\", \"hi!\", \"\" ],\n    \"boost\" : 100.0\n  }\n}";
        org.elasticsearch.index.query.MultiMatchQueryBuilder.Type type22 = multiMatchQueryBuilder13.gettype();
        org.elasticsearch.index.query.MatchQueryBuilder.ZeroTermsQuery zeroTermsQuery23 = multiMatchQueryBuilder13.getzeroTermsQuery();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = multiMatchQueryBuilder13.toXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder13);
        org.junit.Assert.assertNotNull(multiMatchQueryBuilder17);
        org.junit.Assert.assertNull(type22);
        org.junit.Assert.assertNull(zeroTermsQuery23);
        org.junit.Assert.assertNotNull(params25);
    }
}
